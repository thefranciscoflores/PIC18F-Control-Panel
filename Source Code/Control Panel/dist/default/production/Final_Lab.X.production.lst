

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Nov 30 19:58:21 2023

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	idataBANK1,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	text72,global,reloc=2,class=CODE,delta=1
    89                           	psect	text73,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	text76,global,reloc=2,class=CODE,delta=1
    93                           	psect	text77,global,reloc=2,class=CODE,delta=1
    94                           	psect	text78,global,reloc=2,class=CODE,delta=1
    95                           	psect	text79,global,reloc=2,class=CODE,delta=1
    96                           	psect	text80,global,reloc=2,class=CODE,delta=1
    97                           	psect	text81,global,reloc=2,class=CODE,delta=1
    98                           	psect	text82,global,reloc=2,class=CODE,delta=1
    99                           	psect	text83,global,reloc=2,class=CODE,delta=1
   100                           	psect	text84,global,reloc=2,class=CODE,delta=1
   101                           	psect	text85,global,reloc=2,class=CODE,delta=1
   102                           	psect	text86,global,reloc=2,class=CODE,delta=1
   103                           	psect	text87,global,reloc=2,class=CODE,delta=1
   104                           	psect	text88,global,reloc=2,class=CODE,delta=1
   105                           	psect	text89,global,reloc=2,class=CODE,delta=1
   106                           	psect	text90,global,reloc=2,class=CODE,delta=1
   107                           	psect	text91,global,reloc=2,class=CODE,delta=1
   108                           	psect	text92,global,reloc=2,class=CODE,delta=1
   109                           	psect	text93,global,reloc=2,class=CODE,delta=1
   110                           	psect	text94,global,reloc=2,class=CODE,delta=1
   111                           	psect	text95,global,reloc=2,class=CODE,delta=1
   112                           	psect	text96,global,reloc=2,class=CODE,delta=1
   113                           	psect	text97,global,reloc=2,class=CODE,delta=1
   114                           	psect	text98,global,reloc=2,class=CODE,delta=1
   115                           	psect	text99,global,reloc=2,class=CODE,delta=1
   116                           	psect	text100,global,reloc=2,class=CODE,delta=1
   117                           	psect	text101,global,reloc=2,class=CODE,delta=1
   118                           	psect	text102,global,reloc=2,class=CODE,delta=1
   119                           	psect	text103,global,reloc=2,class=CODE,delta=1
   120                           	psect	text104,global,reloc=2,class=CODE,delta=1
   121                           	psect	text105,global,reloc=2,class=CODE,delta=1
   122                           	psect	text106,global,reloc=2,class=CODE,delta=1
   123                           	psect	text107,global,reloc=2,class=CODE,delta=1
   124                           	psect	text108,global,reloc=2,class=CODE,delta=1
   125                           	psect	text109,global,reloc=2,class=CODE,delta=1
   126                           	psect	text110,global,reloc=2,class=CODE,delta=1
   127                           	psect	text111,global,reloc=2,class=CODE,delta=1
   128                           	psect	text112,global,reloc=2,class=CODE,delta=1
   129                           	psect	text113,global,reloc=2,class=CODE,delta=1
   130                           	psect	text114,global,reloc=2,class=CODE,delta=1
   131                           	psect	text115,global,reloc=2,class=CODE,delta=1
   132                           	psect	text116,global,reloc=2,class=CODE,delta=1
   133                           	psect	text117,global,reloc=2,class=CODE,delta=1
   134                           	psect	text118,global,reloc=2,class=CODE,delta=1
   135                           	psect	text119,global,reloc=2,class=CODE,delta=1
   136                           	psect	text120,global,reloc=2,class=CODE,delta=1
   137                           	psect	text121,global,reloc=2,class=CODE,delta=1
   138                           	psect	text122,global,reloc=2,class=CODE,delta=1
   139                           	psect	text123,global,reloc=2,class=CODE,delta=1
   140                           	psect	text124,global,reloc=2,class=CODE,delta=1
   141                           	psect	text125,global,reloc=2,class=CODE,delta=1
   142                           	psect	text126,global,reloc=2,class=CODE,delta=1
   143                           	psect	text127,global,reloc=2,class=CODE,delta=1
   144                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   145                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   146                           	psect	text129,global,reloc=2,class=CODE,delta=1
   147                           	psect	text130,global,reloc=2,class=CODE,delta=1
   148                           	psect	text131,global,reloc=2,class=CODE,delta=1
   149                           	psect	text132,global,reloc=2,class=CODE,delta=1
   150                           	psect	text133,global,reloc=2,class=CODE,delta=1
   151                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   152                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   153  0000                     
   154                           	psect	idataBANK0
   155  005200                     __pidataBANK0:
   156                           	opt stack 0
   157                           
   158                           ;initializer for _fan_set_temp
   159  005200  4B                 	db	75
   160                           
   161                           ;initializer for _tempSecond
   162  005201  FF                 	db	255
   163                           
   164                           ;initializer for _wrap
   165  005202  01                 	db	1
   166                           
   167                           ;initializer for _Fan_Set_Temp_Txt
   168  005203  30                 	db	48
   169  005204  37                 	db	55
   170  005205  35                 	db	53
   171  005206  46                 	db	70
   172  005207  00                 	db	0
   173                           
   174                           ;initializer for _RPM_Txt
   175  005208  30                 	db	48
   176  005209  30                 	db	48
   177  00520A  30                 	db	48
   178  00520B  30                 	db	48
   179  00520C  00                 	db	0
   180                           
   181                           ;initializer for _Alarm_SW_Txt
   182  00520D  4F                 	db	79
   183  00520E  46                 	db	70
   184  00520F  46                 	db	70
   185  005210  00                 	db	0
   186                           
   187                           ;initializer for _DC_Txt
   188  005211  30                 	db	48
   189  005212  30                 	db	48
   190  005213  30                 	db	48
   191  005214  00                 	db	0
   192                           
   193                           ;initializer for _Fan_SW_Txt
   194  005215  4F                 	db	79
   195  005216  46                 	db	70
   196  005217  46                 	db	70
   197  005218  00                 	db	0
   198                           
   199                           ;initializer for _tempC
   200  005219  2B                 	db	43
   201  00521A  32                 	db	50
   202  00521B  35                 	db	53
   203  00521C  00                 	db	0
   204                           
   205                           ;initializer for _tempF
   206  00521D  2B                 	db	43
   207  00521E  37                 	db	55
   208  00521F  37                 	db	55
   209  005220  00                 	db	0
   210                           
   211                           ;initializer for _RTC_ALARM_Txt
   212  005221  30                 	db	48
   213  005222  00                 	db	0
   214                           
   215                           	psect	idataBANK1
   216  0046BE                     __pidataBANK1:
   217                           	opt stack 0
   218                           
   219                           ;initializer for _buffer
   220  0046BE  20                 	db	32
   221  0046BF  45                 	db	69
   222  0046C0  43                 	db	67
   223  0046C1  45                 	db	69
   224  0046C2  33                 	db	51
   225  0046C3  33                 	db	51
   226  0046C4  30                 	db	48
   227  0046C5  31                 	db	49
   228  0046C6  4C                 	db	76
   229  0046C7  20                 	db	32
   230  0046C8  46                 	db	70
   231  0046C9  27                 	db	39
   232  0046CA  32                 	db	50
   233  0046CB  33                 	db	51
   234  0046CC  20                 	db	32
   235  0046CD  46                 	db	70
   236  0046CE  69                 	db	105
   237  0046CF  6E                 	db	110
   238  0046D0  61                 	db	97
   239  0046D1  6C                 	db	108
   240  0046D2  20                 	db	32
   241  0046D3  53                 	db	83
   242  0046D4  34                 	db	52
   243  0046D5  00                 	db	0
   244  0046D6  00                 	db	0
   245  0046D7  00                 	db	0
   246  0046D8  00                 	db	0
   247  0046D9  00                 	db	0
   248  0046DA  00                 	db	0
   249  0046DB  00                 	db	0
   250  0046DC  00                 	db	0
   251  0046DD  00                 	db	0
   252  0046DE  00                 	db	0
   253  0046DF  00                 	db	0
   254  0046E0  00                 	db	0
   255  0046E1  00                 	db	0
   256  0046E2  00                 	db	0
   257  0046E3  00                 	db	0
   258                           
   259                           ;initializer for _array1
   260  0046E4  A2                 	db	162
   261  0046E5  62                 	db	98
   262  0046E6  E2                 	db	226
   263  0046E7  22                 	db	34
   264  0046E8  02                 	db	2
   265  0046E9  C2                 	db	194
   266  0046EA  E0                 	db	224
   267  0046EB  A8                 	db	168
   268  0046EC  90                 	db	144
   269  0046ED  68                 	db	104
   270  0046EE  98                 	db	152
   271  0046EF  B0                 	db	176
   272  0046F0  30                 	db	48
   273  0046F1  18                 	db	24
   274  0046F2  7A                 	db	122
   275  0046F3  10                 	db	16
   276  0046F4  38                 	db	56
   277  0046F5  5A                 	db	90
   278  0046F6  42                 	db	66
   279  0046F7  4A                 	db	74
   280  0046F8  52                 	db	82
   281                           
   282                           ;initializer for _alarm_time
   283  0046F9  30                 	db	48
   284  0046FA  30                 	db	48
   285  0046FB  3A                 	db	58
   286  0046FC  30                 	db	48
   287  0046FD  30                 	db	48
   288  0046FE  3A                 	db	58
   289  0046FF  30                 	db	48
   290  004700  30                 	db	48
   291  004701  00                 	db	0
   292                           
   293                           ;initializer for _date
   294  004702  30                 	db	48
   295  004703  30                 	db	48
   296  004704  2F                 	db	47
   297  004705  30                 	db	48
   298  004706  30                 	db	48
   299  004707  2F                 	db	47
   300  004708  30                 	db	48
   301  004709  30                 	db	48
   302  00470A  00                 	db	0
   303                           
   304                           ;initializer for _setup_alarm_time
   305  00470B  30                 	db	48
   306  00470C  30                 	db	48
   307  00470D  3A                 	db	58
   308  00470E  30                 	db	48
   309  00470F  30                 	db	48
   310  004710  3A                 	db	58
   311  004711  30                 	db	48
   312  004712  30                 	db	48
   313  004713  00                 	db	0
   314                           
   315                           ;initializer for _setup_date
   316  004714  30                 	db	48
   317  004715  30                 	db	48
   318  004716  2F                 	db	47
   319  004717  30                 	db	48
   320  004718  30                 	db	48
   321  004719  2F                 	db	47
   322  00471A  30                 	db	48
   323  00471B  30                 	db	48
   324  00471C  00                 	db	0
   325                           
   326                           ;initializer for _setup_time
   327  00471D  30                 	db	48
   328  00471E  30                 	db	48
   329  00471F  3A                 	db	58
   330  004720  30                 	db	48
   331  004721  30                 	db	48
   332  004722  3A                 	db	58
   333  004723  30                 	db	48
   334  004724  30                 	db	48
   335  004725  00                 	db	0
   336                           
   337                           ;initializer for _time
   338  004726  30                 	db	48
   339  004727  30                 	db	48
   340  004728  3A                 	db	58
   341  004729  30                 	db	48
   342  00472A  30                 	db	48
   343  00472B  3A                 	db	58
   344  00472C  30                 	db	48
   345  00472D  30                 	db	48
   346  00472E  00                 	db	0
   347                           
   348                           ;initializer for _Volt_Txt
   349  00472F  30                 	db	48
   350  004730  2E                 	db	46
   351  004731  30                 	db	48
   352  004732  30                 	db	48
   353  004733  56                 	db	86
   354  004734  00                 	db	0
   355                           
   356                           ;initializer for _setup_fan_set_text
   357  004735  30                 	db	48
   358  004736  37                 	db	55
   359  004737  35                 	db	53
   360  004738  46                 	db	70
   361  004739  00                 	db	0
   362                           
   363                           	psect	mediumconst
   364  00FC32                     __pmediumconst:
   365                           	opt stack 0
   366  00FC32  00                 	db	0
   367  00FC33                     _font:
   368                           	opt stack 0
   369  00FC33  00                 	db	0
   370  00FC34  00                 	db	0
   371  00FC35  00                 	db	0
   372  00FC36  00                 	db	0
   373  00FC37  00                 	db	0
   374  00FC38  00                 	db	0
   375  00FC39  00                 	db	0
   376  00FC3A  5F                 	db	95
   377  00FC3B  00                 	db	0
   378  00FC3C  00                 	db	0
   379  00FC3D  00                 	db	0
   380  00FC3E  07                 	db	7
   381  00FC3F  00                 	db	0
   382  00FC40  07                 	db	7
   383  00FC41  00                 	db	0
   384  00FC42  14                 	db	20
   385  00FC43  7F                 	db	127
   386  00FC44  14                 	db	20
   387  00FC45  7F                 	db	127
   388  00FC46  14                 	db	20
   389  00FC47  24                 	db	36
   390  00FC48  2A                 	db	42
   391  00FC49  7F                 	db	127
   392  00FC4A  2A                 	db	42
   393  00FC4B  12                 	db	18
   394  00FC4C  23                 	db	35
   395  00FC4D  13                 	db	19
   396  00FC4E  08                 	db	8
   397  00FC4F  64                 	db	100
   398  00FC50  62                 	db	98
   399  00FC51  36                 	db	54
   400  00FC52  49                 	db	73
   401  00FC53  56                 	db	86
   402  00FC54  20                 	db	32
   403  00FC55  50                 	db	80
   404  00FC56  00                 	db	0
   405  00FC57  08                 	db	8
   406  00FC58  07                 	db	7
   407  00FC59  03                 	db	3
   408  00FC5A  00                 	db	0
   409  00FC5B  00                 	db	0
   410  00FC5C  1C                 	db	28
   411  00FC5D  22                 	db	34
   412  00FC5E  41                 	db	65
   413  00FC5F  00                 	db	0
   414  00FC60  00                 	db	0
   415  00FC61  41                 	db	65
   416  00FC62  22                 	db	34
   417  00FC63  1C                 	db	28
   418  00FC64  00                 	db	0
   419  00FC65  2A                 	db	42
   420  00FC66  1C                 	db	28
   421  00FC67  7F                 	db	127
   422  00FC68  1C                 	db	28
   423  00FC69  2A                 	db	42
   424  00FC6A  08                 	db	8
   425  00FC6B  08                 	db	8
   426  00FC6C  3E                 	db	62
   427  00FC6D  08                 	db	8
   428  00FC6E  08                 	db	8
   429  00FC6F  00                 	db	0
   430  00FC70  80                 	db	128
   431  00FC71  70                 	db	112
   432  00FC72  30                 	db	48
   433  00FC73  00                 	db	0
   434  00FC74  08                 	db	8
   435  00FC75  08                 	db	8
   436  00FC76  08                 	db	8
   437  00FC77  08                 	db	8
   438  00FC78  08                 	db	8
   439  00FC79  00                 	db	0
   440  00FC7A  00                 	db	0
   441  00FC7B  60                 	db	96
   442  00FC7C  60                 	db	96
   443  00FC7D  00                 	db	0
   444  00FC7E  20                 	db	32
   445  00FC7F  10                 	db	16
   446  00FC80  08                 	db	8
   447  00FC81  04                 	db	4
   448  00FC82  02                 	db	2
   449  00FC83  3E                 	db	62
   450  00FC84  51                 	db	81
   451  00FC85  49                 	db	73
   452  00FC86  45                 	db	69
   453  00FC87  3E                 	db	62
   454  00FC88  00                 	db	0
   455  00FC89  42                 	db	66
   456  00FC8A  7F                 	db	127
   457  00FC8B  40                 	db	64
   458  00FC8C  00                 	db	0
   459  00FC8D  72                 	db	114
   460  00FC8E  49                 	db	73
   461  00FC8F  49                 	db	73
   462  00FC90  49                 	db	73
   463  00FC91  46                 	db	70
   464  00FC92  21                 	db	33
   465  00FC93  41                 	db	65
   466  00FC94  49                 	db	73
   467  00FC95  4D                 	db	77
   468  00FC96  33                 	db	51
   469  00FC97  18                 	db	24
   470  00FC98  14                 	db	20
   471  00FC99  12                 	db	18
   472  00FC9A  7F                 	db	127
   473  00FC9B  10                 	db	16
   474  00FC9C  27                 	db	39
   475  00FC9D  45                 	db	69
   476  00FC9E  45                 	db	69
   477  00FC9F  45                 	db	69
   478  00FCA0  39                 	db	57
   479  00FCA1  3C                 	db	60
   480  00FCA2  4A                 	db	74
   481  00FCA3  49                 	db	73
   482  00FCA4  49                 	db	73
   483  00FCA5  31                 	db	49
   484  00FCA6  41                 	db	65
   485  00FCA7  21                 	db	33
   486  00FCA8  11                 	db	17
   487  00FCA9  09                 	db	9
   488  00FCAA  07                 	db	7
   489  00FCAB  36                 	db	54
   490  00FCAC  49                 	db	73
   491  00FCAD  49                 	db	73
   492  00FCAE  49                 	db	73
   493  00FCAF  36                 	db	54
   494  00FCB0  46                 	db	70
   495  00FCB1  49                 	db	73
   496  00FCB2  49                 	db	73
   497  00FCB3  29                 	db	41
   498  00FCB4  1E                 	db	30
   499  00FCB5  00                 	db	0
   500  00FCB6  00                 	db	0
   501  00FCB7  14                 	db	20
   502  00FCB8  00                 	db	0
   503  00FCB9  00                 	db	0
   504  00FCBA  00                 	db	0
   505  00FCBB  40                 	db	64
   506  00FCBC  34                 	db	52
   507  00FCBD  00                 	db	0
   508  00FCBE  00                 	db	0
   509  00FCBF  00                 	db	0
   510  00FCC0  08                 	db	8
   511  00FCC1  14                 	db	20
   512  00FCC2  22                 	db	34
   513  00FCC3  41                 	db	65
   514  00FCC4  14                 	db	20
   515  00FCC5  14                 	db	20
   516  00FCC6  14                 	db	20
   517  00FCC7  14                 	db	20
   518  00FCC8  14                 	db	20
   519  00FCC9  00                 	db	0
   520  00FCCA  41                 	db	65
   521  00FCCB  22                 	db	34
   522  00FCCC  14                 	db	20
   523  00FCCD  08                 	db	8
   524  00FCCE  02                 	db	2
   525  00FCCF  01                 	db	1
   526  00FCD0  59                 	db	89
   527  00FCD1  09                 	db	9
   528  00FCD2  06                 	db	6
   529  00FCD3  3E                 	db	62
   530  00FCD4  41                 	db	65
   531  00FCD5  5D                 	db	93
   532  00FCD6  59                 	db	89
   533  00FCD7  4E                 	db	78
   534  00FCD8  7C                 	db	124
   535  00FCD9  12                 	db	18
   536  00FCDA  11                 	db	17
   537  00FCDB  12                 	db	18
   538  00FCDC  7C                 	db	124
   539  00FCDD  7F                 	db	127
   540  00FCDE  49                 	db	73
   541  00FCDF  49                 	db	73
   542  00FCE0  49                 	db	73
   543  00FCE1  36                 	db	54
   544  00FCE2  3E                 	db	62
   545  00FCE3  41                 	db	65
   546  00FCE4  41                 	db	65
   547  00FCE5  41                 	db	65
   548  00FCE6  22                 	db	34
   549  00FCE7  7F                 	db	127
   550  00FCE8  41                 	db	65
   551  00FCE9  41                 	db	65
   552  00FCEA  41                 	db	65
   553  00FCEB  3E                 	db	62
   554  00FCEC  7F                 	db	127
   555  00FCED  49                 	db	73
   556  00FCEE  49                 	db	73
   557  00FCEF  49                 	db	73
   558  00FCF0  41                 	db	65
   559  00FCF1  7F                 	db	127
   560  00FCF2  09                 	db	9
   561  00FCF3  09                 	db	9
   562  00FCF4  09                 	db	9
   563  00FCF5  01                 	db	1
   564  00FCF6  3E                 	db	62
   565  00FCF7  41                 	db	65
   566  00FCF8  41                 	db	65
   567  00FCF9  51                 	db	81
   568  00FCFA  73                 	db	115
   569  00FCFB  7F                 	db	127
   570  00FCFC  08                 	db	8
   571  00FCFD  08                 	db	8
   572  00FCFE  08                 	db	8
   573  00FCFF  7F                 	db	127
   574  00FD00  00                 	db	0
   575  00FD01  41                 	db	65
   576  00FD02  7F                 	db	127
   577  00FD03  41                 	db	65
   578  00FD04  00                 	db	0
   579  00FD05  20                 	db	32
   580  00FD06  40                 	db	64
   581  00FD07  41                 	db	65
   582  00FD08  3F                 	db	63
   583  00FD09  01                 	db	1
   584  00FD0A  7F                 	db	127
   585  00FD0B  08                 	db	8
   586  00FD0C  14                 	db	20
   587  00FD0D  22                 	db	34
   588  00FD0E  41                 	db	65
   589  00FD0F  7F                 	db	127
   590  00FD10  40                 	db	64
   591  00FD11  40                 	db	64
   592  00FD12  40                 	db	64
   593  00FD13  40                 	db	64
   594  00FD14  7F                 	db	127
   595  00FD15  02                 	db	2
   596  00FD16  1C                 	db	28
   597  00FD17  02                 	db	2
   598  00FD18  7F                 	db	127
   599  00FD19  7F                 	db	127
   600  00FD1A  04                 	db	4
   601  00FD1B  08                 	db	8
   602  00FD1C  10                 	db	16
   603  00FD1D  7F                 	db	127
   604  00FD1E  3E                 	db	62
   605  00FD1F  41                 	db	65
   606  00FD20  41                 	db	65
   607  00FD21  41                 	db	65
   608  00FD22  3E                 	db	62
   609  00FD23  7F                 	db	127
   610  00FD24  09                 	db	9
   611  00FD25  09                 	db	9
   612  00FD26  09                 	db	9
   613  00FD27  06                 	db	6
   614  00FD28  3E                 	db	62
   615  00FD29  41                 	db	65
   616  00FD2A  51                 	db	81
   617  00FD2B  21                 	db	33
   618  00FD2C  5E                 	db	94
   619  00FD2D  7F                 	db	127
   620  00FD2E  09                 	db	9
   621  00FD2F  19                 	db	25
   622  00FD30  29                 	db	41
   623  00FD31  46                 	db	70
   624  00FD32                     __end_of_font:
   625                           	opt stack 0
   626  00FD32                     _font2:
   627                           	opt stack 0
   628  00FD32  26                 	db	38
   629  00FD33  49                 	db	73
   630  00FD34  49                 	db	73
   631  00FD35  49                 	db	73
   632  00FD36  32                 	db	50
   633  00FD37  03                 	db	3
   634  00FD38  01                 	db	1
   635  00FD39  7F                 	db	127
   636  00FD3A  01                 	db	1
   637  00FD3B  03                 	db	3
   638  00FD3C  3F                 	db	63
   639  00FD3D  40                 	db	64
   640  00FD3E  40                 	db	64
   641  00FD3F  40                 	db	64
   642  00FD40  3F                 	db	63
   643  00FD41  1F                 	db	31
   644  00FD42  20                 	db	32
   645  00FD43  40                 	db	64
   646  00FD44  20                 	db	32
   647  00FD45  1F                 	db	31
   648  00FD46  3F                 	db	63
   649  00FD47  40                 	db	64
   650  00FD48  38                 	db	56
   651  00FD49  40                 	db	64
   652  00FD4A  3F                 	db	63
   653  00FD4B  63                 	db	99
   654  00FD4C  14                 	db	20
   655  00FD4D  08                 	db	8
   656  00FD4E  14                 	db	20
   657  00FD4F  63                 	db	99
   658  00FD50  03                 	db	3
   659  00FD51  04                 	db	4
   660  00FD52  78                 	db	120
   661  00FD53  04                 	db	4
   662  00FD54  03                 	db	3
   663  00FD55  61                 	db	97
   664  00FD56  59                 	db	89
   665  00FD57  49                 	db	73
   666  00FD58  4D                 	db	77
   667  00FD59  43                 	db	67
   668  00FD5A  00                 	db	0
   669  00FD5B  7F                 	db	127
   670  00FD5C  41                 	db	65
   671  00FD5D  41                 	db	65
   672  00FD5E  41                 	db	65
   673  00FD5F  02                 	db	2
   674  00FD60  04                 	db	4
   675  00FD61  08                 	db	8
   676  00FD62  10                 	db	16
   677  00FD63  20                 	db	32
   678  00FD64  00                 	db	0
   679  00FD65  41                 	db	65
   680  00FD66  41                 	db	65
   681  00FD67  41                 	db	65
   682  00FD68  7F                 	db	127
   683  00FD69  04                 	db	4
   684  00FD6A  02                 	db	2
   685  00FD6B  01                 	db	1
   686  00FD6C  02                 	db	2
   687  00FD6D  04                 	db	4
   688  00FD6E  40                 	db	64
   689  00FD6F  40                 	db	64
   690  00FD70  40                 	db	64
   691  00FD71  40                 	db	64
   692  00FD72  40                 	db	64
   693  00FD73  00                 	db	0
   694  00FD74  03                 	db	3
   695  00FD75  07                 	db	7
   696  00FD76  08                 	db	8
   697  00FD77  00                 	db	0
   698  00FD78  20                 	db	32
   699  00FD79  54                 	db	84
   700  00FD7A  54                 	db	84
   701  00FD7B  78                 	db	120
   702  00FD7C  40                 	db	64
   703  00FD7D  7F                 	db	127
   704  00FD7E  28                 	db	40
   705  00FD7F  44                 	db	68
   706  00FD80  44                 	db	68
   707  00FD81  38                 	db	56
   708  00FD82  38                 	db	56
   709  00FD83  44                 	db	68
   710  00FD84  44                 	db	68
   711  00FD85  44                 	db	68
   712  00FD86  28                 	db	40
   713  00FD87  38                 	db	56
   714  00FD88  44                 	db	68
   715  00FD89  44                 	db	68
   716  00FD8A  28                 	db	40
   717  00FD8B  7F                 	db	127
   718  00FD8C  38                 	db	56
   719  00FD8D  54                 	db	84
   720  00FD8E  54                 	db	84
   721  00FD8F  54                 	db	84
   722  00FD90  18                 	db	24
   723  00FD91  00                 	db	0
   724  00FD92  08                 	db	8
   725  00FD93  7E                 	db	126
   726  00FD94  09                 	db	9
   727  00FD95  02                 	db	2
   728  00FD96  18                 	db	24
   729  00FD97  A4                 	db	164
   730  00FD98  A4                 	db	164
   731  00FD99  9C                 	db	156
   732  00FD9A  78                 	db	120
   733  00FD9B  7F                 	db	127
   734  00FD9C  08                 	db	8
   735  00FD9D  04                 	db	4
   736  00FD9E  04                 	db	4
   737  00FD9F  78                 	db	120
   738  00FDA0  00                 	db	0
   739  00FDA1  44                 	db	68
   740  00FDA2  7D                 	db	125
   741  00FDA3  40                 	db	64
   742  00FDA4  00                 	db	0
   743  00FDA5  20                 	db	32
   744  00FDA6  40                 	db	64
   745  00FDA7  40                 	db	64
   746  00FDA8  3D                 	db	61
   747  00FDA9  00                 	db	0
   748  00FDAA  7F                 	db	127
   749  00FDAB  10                 	db	16
   750  00FDAC  28                 	db	40
   751  00FDAD  44                 	db	68
   752  00FDAE  00                 	db	0
   753  00FDAF  00                 	db	0
   754  00FDB0  41                 	db	65
   755  00FDB1  7F                 	db	127
   756  00FDB2  40                 	db	64
   757  00FDB3  00                 	db	0
   758  00FDB4  7C                 	db	124
   759  00FDB5  04                 	db	4
   760  00FDB6  78                 	db	120
   761  00FDB7  04                 	db	4
   762  00FDB8  78                 	db	120
   763  00FDB9  7C                 	db	124
   764  00FDBA  08                 	db	8
   765  00FDBB  04                 	db	4
   766  00FDBC  04                 	db	4
   767  00FDBD  78                 	db	120
   768  00FDBE  38                 	db	56
   769  00FDBF  44                 	db	68
   770  00FDC0  44                 	db	68
   771  00FDC1  44                 	db	68
   772  00FDC2  38                 	db	56
   773  00FDC3  FC                 	db	252
   774  00FDC4  18                 	db	24
   775  00FDC5  24                 	db	36
   776  00FDC6  24                 	db	36
   777  00FDC7  18                 	db	24
   778  00FDC8  18                 	db	24
   779  00FDC9  24                 	db	36
   780  00FDCA  24                 	db	36
   781  00FDCB  18                 	db	24
   782  00FDCC  FC                 	db	252
   783  00FDCD  7C                 	db	124
   784  00FDCE  08                 	db	8
   785  00FDCF  04                 	db	4
   786  00FDD0  04                 	db	4
   787  00FDD1  08                 	db	8
   788  00FDD2  48                 	db	72
   789  00FDD3  54                 	db	84
   790  00FDD4  54                 	db	84
   791  00FDD5  54                 	db	84
   792  00FDD6  24                 	db	36
   793  00FDD7  04                 	db	4
   794  00FDD8  04                 	db	4
   795  00FDD9  3F                 	db	63
   796  00FDDA  44                 	db	68
   797  00FDDB  24                 	db	36
   798  00FDDC  3C                 	db	60
   799  00FDDD  40                 	db	64
   800  00FDDE  40                 	db	64
   801  00FDDF  20                 	db	32
   802  00FDE0  7C                 	db	124
   803  00FDE1  1C                 	db	28
   804  00FDE2  20                 	db	32
   805  00FDE3  40                 	db	64
   806  00FDE4  20                 	db	32
   807  00FDE5  1C                 	db	28
   808  00FDE6  3C                 	db	60
   809  00FDE7  40                 	db	64
   810  00FDE8  30                 	db	48
   811  00FDE9  40                 	db	64
   812  00FDEA  3C                 	db	60
   813  00FDEB  44                 	db	68
   814  00FDEC  28                 	db	40
   815  00FDED  10                 	db	16
   816  00FDEE  28                 	db	40
   817  00FDEF  44                 	db	68
   818  00FDF0  4C                 	db	76
   819  00FDF1  90                 	db	144
   820  00FDF2  90                 	db	144
   821  00FDF3  90                 	db	144
   822  00FDF4  7C                 	db	124
   823  00FDF5  44                 	db	68
   824  00FDF6  64                 	db	100
   825  00FDF7  54                 	db	84
   826  00FDF8  4C                 	db	76
   827  00FDF9  44                 	db	68
   828  00FDFA  00                 	db	0
   829  00FDFB  08                 	db	8
   830  00FDFC  36                 	db	54
   831  00FDFD  41                 	db	65
   832  00FDFE  00                 	db	0
   833  00FDFF  00                 	db	0
   834  00FE00  00                 	db	0
   835  00FE01  77                 	db	119
   836  00FE02  00                 	db	0
   837  00FE03  00                 	db	0
   838  00FE04  00                 	db	0
   839  00FE05  41                 	db	65
   840  00FE06  36                 	db	54
   841  00FE07  08                 	db	8
   842  00FE08  00                 	db	0
   843  00FE09  02                 	db	2
   844  00FE0A  01                 	db	1
   845  00FE0B  02                 	db	2
   846  00FE0C  04                 	db	4
   847  00FE0D  02                 	db	2
   848  00FE0E                     __end_of_font2:
   849                           	opt stack 0
   850  00FE0E                     _dpowers:
   851                           	opt stack 0
   852  00FE0E  0001               	dw	1
   853  00FE10  0000               	dw	0
   854  00FE12  000A               	dw	10
   855  00FE14  0000               	dw	0
   856  00FE16  0064               	dw	100
   857  00FE18  0000               	dw	0
   858  00FE1A  03E8               	dw	1000
   859  00FE1C  0000               	dw	0
   860  00FE1E  2710               	dw	10000
   861  00FE20  0000               	dw	0
   862  00FE22  86A0               	dw	34464
   863  00FE24  0001               	dw	1
   864  00FE26  4240               	dw	16960
   865  00FE28  000F               	dw	15
   866  00FE2A  9680               	dw	38528
   867  00FE2C  0098               	dw	152
   868  00FE2E  E100               	dw	57600
   869  00FE30  05F5               	dw	1525
   870  00FE32  CA00               	dw	51712
   871  00FE34  3B9A               	dw	15258
   872  00FE36                     __end_of_dpowers:
   873                           	opt stack 0
   874  00FE36                     __npowers_:
   875                           	opt stack 0
   876  00FE36  00                 	db	0
   877  00FE37  80                 	db	128
   878  00FE38  3F                 	db	63
   879  00FE39  CD                 	db	205
   880  00FE3A  CC                 	db	204
   881  00FE3B  3D                 	db	61
   882  00FE3C  D7                 	db	215
   883  00FE3D  23                 	db	35
   884  00FE3E  3C                 	db	60
   885  00FE3F  12                 	db	18
   886  00FE40  83                 	db	131
   887  00FE41  3A                 	db	58
   888  00FE42  B7                 	db	183
   889  00FE43  D1                 	db	209
   890  00FE44  38                 	db	56
   891  00FE45  C6                 	db	198
   892  00FE46  27                 	db	39
   893  00FE47  37                 	db	55
   894  00FE48  38                 	db	56
   895  00FE49  86                 	db	134
   896  00FE4A  35                 	db	53
   897  00FE4B  C0                 	db	192
   898  00FE4C  D6                 	db	214
   899  00FE4D  33                 	db	51
   900  00FE4E  CC                 	db	204
   901  00FE4F  2B                 	db	43
   902  00FE50  32                 	db	50
   903  00FE51  70                 	db	112
   904  00FE52  89                 	db	137
   905  00FE53  30                 	db	48
   906  00FE54  E7                 	db	231
   907  00FE55  DB                 	db	219
   908  00FE56  2E                 	db	46
   909  00FE57  E5                 	db	229
   910  00FE58  3C                 	db	60
   911  00FE59  1E                 	db	30
   912  00FE5A  42                 	db	66
   913  00FE5B  A2                 	db	162
   914  00FE5C  0D                 	db	13
   915  00FE5D                     __end_of__npowers_:
   916                           	opt stack 0
   917  00FE5D                     __powers_:
   918                           	opt stack 0
   919  00FE5D  00                 	db	0
   920  00FE5E  80                 	db	128
   921  00FE5F  3F                 	db	63
   922  00FE60  00                 	db	0
   923  00FE61  20                 	db	32
   924  00FE62  41                 	db	65
   925  00FE63  00                 	db	0
   926  00FE64  C8                 	db	200
   927  00FE65  42                 	db	66
   928  00FE66  00                 	db	0
   929  00FE67  7A                 	db	122
   930  00FE68  44                 	db	68
   931  00FE69  40                 	db	64
   932  00FE6A  1C                 	db	28
   933  00FE6B  46                 	db	70
   934  00FE6C  50                 	db	80
   935  00FE6D  C3                 	db	195
   936  00FE6E  47                 	db	71
   937  00FE6F  24                 	db	36
   938  00FE70  74                 	db	116
   939  00FE71  49                 	db	73
   940  00FE72  97                 	db	151
   941  00FE73  18                 	db	24
   942  00FE74  4B                 	db	75
   943  00FE75  BC                 	db	188
   944  00FE76  BE                 	db	190
   945  00FE77  4C                 	db	76
   946  00FE78  6B                 	db	107
   947  00FE79  6E                 	db	110
   948  00FE7A  4E                 	db	78
   949  00FE7B  03                 	db	3
   950  00FE7C  15                 	db	21
   951  00FE7D  50                 	db	80
   952  00FE7E  79                 	db	121
   953  00FE7F  AD                 	db	173
   954  00FE80  60                 	db	96
   955  00FE81  F3                 	db	243
   956  00FE82  49                 	db	73
   957  00FE83  71                 	db	113
   958  00FE84                     __end_of__powers_:
   959                           	opt stack 0
   960  00FE84                     _hexpowers:
   961                           	opt stack 0
   962  00FE84  0001               	dw	1
   963  00FE86  0000               	dw	0
   964  00FE88  0010               	dw	16
   965  00FE8A  0000               	dw	0
   966  00FE8C  0100               	dw	256
   967  00FE8E  0000               	dw	0
   968  00FE90  1000               	dw	4096
   969  00FE92  0000               	dw	0
   970  00FE94  0000               	dw	0
   971  00FE96  0001               	dw	1
   972  00FE98  0000               	dw	0
   973  00FE9A  0010               	dw	16
   974  00FE9C  0000               	dw	0
   975  00FE9E  0100               	dw	256
   976  00FEA0  0000               	dw	0
   977  00FEA2  1000               	dw	4096
   978  00FEA4                     __end_of_hexpowers:
   979                           	opt stack 0
   980  0000                     _ADCON0	set	4034
   981  0000                     _ADCON0bits	set	4034
   982  0000                     _ADCON1	set	4033
   983  0000                     _ADCON2	set	4032
   984  0000                     _ADRESH	set	4036
   985  0000                     _ADRESL	set	4035
   986  0000                     _CCP1CON	set	4029
   987  0000                     _CCP2CON	set	4026
   988  0000                     _CCPR1L	set	4030
   989  0000                     _CCPR2L	set	4027
   990  0000                     _INTCON2bits	set	4081
   991  0000                     _INTCON3bits	set	4080
   992  0000                     _INTCONbits	set	4082
   993  0000                     _OSCCON	set	4051
   994  0000                     _PIE1bits	set	3997
   995  0000                     _PIR1bits	set	3998
   996  0000                     _PORTAbits	set	3968
   997  0000                     _PORTBbits	set	3969
   998  0000                     _PORTCbits	set	3970
   999  0000                     _PORTD	set	3971
  1000  0000                     _PORTDbits	set	3971
  1001  0000                     _PORTE	set	3972
  1002  0000                     _PR2	set	4043
  1003  0000                     _RCSTA	set	4011
  1004  0000                     _RCSTAbits	set	4011
  1005  0000                     _SPBRG	set	4015
  1006  0000                     _SPBRGH	set	4016
  1007  0000                     _SSPBUF	set	4041
  1008  0000                     _SSPCON1	set	4038
  1009  0000                     _SSPSTAT	set	4039
  1010  0000                     _SSPSTATbits	set	4039
  1011  0000                     _T0CON	set	4053
  1012  0000                     _T0CONbits	set	4053
  1013  0000                     _T1CON	set	4045
  1014  0000                     _T1CONbits	set	4045
  1015  0000                     _T2CON	set	4042
  1016  0000                     _T3CON	set	4017
  1017  0000                     _TMR0H	set	4055
  1018  0000                     _TMR0L	set	4054
  1019  0000                     _TMR1H	set	4047
  1020  0000                     _TMR1L	set	4046
  1021  0000                     _TMR3L	set	4018
  1022  0000                     _TRISA	set	3986
  1023  0000                     _TRISB	set	3987
  1024  0000                     _TRISBbits	set	3987
  1025  0000                     _TRISC	set	3988
  1026  0000                     _TRISCbits	set	3988
  1027  0000                     _TRISD	set	3989
  1028  0000                     _TRISE	set	3990
  1029  0000                     _TXREG	set	4013
  1030  0000                     _TXSTA	set	4012
  1031  0000                     _TXSTAbits	set	4012
  1032  0000                     _RBPU	set	32655
  1033  0000                     _TRMT	set	32097
  1034  00FEA4                     STR_1:
  1035                           
  1036                           ; BSR set to: 0
  1037  00FEA4  25                 	db	37
  1038  00FEA5  30                 	db	48	;'0'
  1039  00FEA6  32                 	db	50	;'2'
  1040  00FEA7  78                 	db	120	;'x'
  1041  00FEA8  3A                 	db	58	;':'
  1042  00FEA9  25                 	db	37
  1043  00FEAA  30                 	db	48	;'0'
  1044  00FEAB  32                 	db	50	;'2'
  1045  00FEAC  78                 	db	120	;'x'
  1046  00FEAD  3A                 	db	58	;':'
  1047  00FEAE  25                 	db	37
  1048  00FEAF  30                 	db	48	;'0'
  1049  00FEB0  32                 	db	50	;'2'
  1050  00FEB1  78                 	db	120	;'x'
  1051  00FEB2  20                 	db	32
  1052  00FEB3  25                 	db	37
  1053  00FEB4  30                 	db	48	;'0'
  1054  00FEB5  32                 	db	50	;'2'
  1055  00FEB6  78                 	db	120	;'x'
  1056  00FEB7  2F                 	db	47
  1057  00FEB8  25                 	db	37
  1058  00FEB9  30                 	db	48	;'0'
  1059  00FEBA  32                 	db	50	;'2'
  1060  00FEBB  78                 	db	120	;'x'
  1061  00FEBC  2F                 	db	47
  1062  00FEBD  25                 	db	37
  1063  00FEBE  30                 	db	48	;'0'
  1064  00FEBF  32                 	db	50	;'2'
  1065  00FEC0  78                 	db	120	;'x'
  1066  00FEC1  00                 	db	0
  1067  00FEC2                     STR_6:
  1068                           
  1069                           ; BSR set to: 0
  1070  00FEC2  43                 	db	67	;'C'
  1071  00FEC3  61                 	db	97	;'a'
  1072  00FEC4  6E                 	db	110	;'n'
  1073  00FEC5  6E                 	db	110	;'n'
  1074  00FEC6  6F                 	db	111	;'o'
  1075  00FEC7  74                 	db	116	;'t'
  1076  00FEC8  20                 	db	32
  1077  00FEC9  66                 	db	102	;'f'
  1078  00FECA  69                 	db	105	;'i'
  1079  00FECB  6E                 	db	110	;'n'
  1080  00FECC  64                 	db	100	;'d'
  1081  00FECD  20                 	db	32
  1082  00FECE  62                 	db	98	;'b'
  1083  00FECF  75                 	db	117	;'u'
  1084  00FED0  74                 	db	116	;'t'
  1085  00FED1  74                 	db	116	;'t'
  1086  00FED2  6F                 	db	111	;'o'
  1087  00FED3  6E                 	db	110	;'n'
  1088  00FED4  20                 	db	32
  1089  00FED5  0D                 	db	13
  1090  00FED6  0A                 	db	10
  1091  00FED7  00                 	db	0
  1092  00FED8                     STR_3:
  1093                           
  1094                           ; BSR set to: 0
  1095  00FED8  61                 	db	97	;'a'
  1096  00FED9  6C                 	db	108	;'l'
  1097  00FEDA  61                 	db	97	;'a'
  1098  00FEDB  72                 	db	114	;'r'
  1099  00FEDC  6D                 	db	109	;'m'
  1100  00FEDD  20                 	db	32
  1101  00FEDE  3D                 	db	61	;'='
  1102  00FEDF  20                 	db	32
  1103  00FEE0  25                 	db	37
  1104  00FEE1  64                 	db	100	;'d'
  1105  00FEE2  20                 	db	32
  1106  00FEE3  6D                 	db	109	;'m'
  1107  00FEE4  61                 	db	97	;'a'
  1108  00FEE5  74                 	db	116	;'t'
  1109  00FEE6  63                 	db	99	;'c'
  1110  00FEE7  68                 	db	104	;'h'
  1111  00FEE8  20                 	db	32
  1112  00FEE9  3D                 	db	61	;'='
  1113  00FEEA  20                 	db	32
  1114  00FEEB  25                 	db	37
  1115  00FEEC  64                 	db	100	;'d'
  1116  00FEED  00                 	db	0
  1117  00FEEE                     STR_2:
  1118                           
  1119                           ; BSR set to: 0
  1120  00FEEE  20                 	db	32
  1121  00FEEF  54                 	db	84	;'T'
  1122  00FEF0  65                 	db	101	;'e'
  1123  00FEF1  6D                 	db	109	;'m'
  1124  00FEF2  70                 	db	112	;'p'
  1125  00FEF3  20                 	db	32
  1126  00FEF4  3D                 	db	61	;'='
  1127  00FEF5  20                 	db	32
  1128  00FEF6  25                 	db	37
  1129  00FEF7  64                 	db	100	;'d'
  1130  00FEF8  20                 	db	32
  1131  00FEF9  43                 	db	67	;'C'
  1132  00FEFA  20                 	db	32
  1133  00FEFB  3D                 	db	61	;'='
  1134  00FEFC  20                 	db	32
  1135  00FEFD  25                 	db	37
  1136  00FEFE  64                 	db	100	;'d'
  1137  00FEFF  20                 	db	32
  1138  00FF00  46                 	db	70	;'F'
  1139  00FF01  20                 	db	32
  1140  00FF02  00                 	db	0
  1141  00FF03                     STR_4:
  1142                           
  1143                           ; BSR set to: 0
  1144  00FF03  52                 	db	82	;'R'
  1145  00FF04  50                 	db	80	;'P'
  1146  00FF05  4D                 	db	77	;'M'
  1147  00FF06  20                 	db	32
  1148  00FF07  3D                 	db	61	;'='
  1149  00FF08  20                 	db	32
  1150  00FF09  25                 	db	37
  1151  00FF0A  64                 	db	100	;'d'
  1152  00FF0B  20                 	db	32
  1153  00FF0C  20                 	db	32
  1154  00FF0D  64                 	db	100	;'d'
  1155  00FF0E  63                 	db	99	;'c'
  1156  00FF0F  20                 	db	32
  1157  00FF10  3D                 	db	61	;'='
  1158  00FF11  20                 	db	32
  1159  00FF12  25                 	db	37
  1160  00FF13  64                 	db	100	;'d'
  1161  00FF14  20                 	db	32
  1162  00FF15  00                 	db	0
  1163  00FF16                     STR_39:
  1164                           
  1165                           ; BSR set to: 0
  1166  00FF16  30                 	db	48	;'0'
  1167  00FF17  31                 	db	49	;'1'
  1168  00FF18  32                 	db	50	;'2'
  1169  00FF19  33                 	db	51	;'3'
  1170  00FF1A  34                 	db	52	;'4'
  1171  00FF1B  35                 	db	53	;'5'
  1172  00FF1C  36                 	db	54	;'6'
  1173  00FF1D  37                 	db	55	;'7'
  1174  00FF1E  38                 	db	56	;'8'
  1175  00FF1F  39                 	db	57	;'9'
  1176  00FF20  61                 	db	97	;'a'
  1177  00FF21  62                 	db	98	;'b'
  1178  00FF22  63                 	db	99	;'c'
  1179  00FF23  64                 	db	100	;'d'
  1180  00FF24  65                 	db	101	;'e'
  1181  00FF25  66                 	db	102	;'f'
  1182  00FF26  00                 	db	0
  1183  00FF27                     STR_7:
  1184                           
  1185                           ; BSR set to: 0
  1186  00FF27  45                 	db	69	;'E'
  1187  00FF28  43                 	db	67	;'C'
  1188  00FF29  45                 	db	69	;'E'
  1189  00FF2A  33                 	db	51	;'3'
  1190  00FF2B  33                 	db	51	;'3'
  1191  00FF2C  30                 	db	48	;'0'
  1192  00FF2D  31                 	db	49	;'1'
  1193  00FF2E  4C                 	db	76	;'L'
  1194  00FF2F  20                 	db	32
  1195  00FF30  46                 	db	70	;'F'
  1196  00FF31  32                 	db	50	;'2'
  1197  00FF32  33                 	db	51	;'3'
  1198  00FF33  20                 	db	32
  1199  00FF34  53                 	db	83	;'S'
  1200  00FF35  34                 	db	52	;'4'
  1201  00FF36  00                 	db	0
  1202  00FF37  00                 	db	0
  1203  00FF38                     STR_37:
  1204                           
  1205                           ; BSR set to: 0
  1206  00FF38  4E                 	db	78	;'N'
  1207  00FF39  45                 	db	69	;'E'
  1208  00FF3A  43                 	db	67	;'C'
  1209  00FF3B  5F                 	db	95	;'_'
  1210  00FF3C  43                 	db	67	;'C'
  1211  00FF3D  6F                 	db	111	;'o'
  1212  00FF3E  64                 	db	100	;'d'
  1213  00FF3F  65                 	db	101	;'e'
  1214  00FF40  20                 	db	32
  1215  00FF41  3D                 	db	61	;'='
  1216  00FF42  20                 	db	32
  1217  00FF43  25                 	db	37
  1218  00FF44  78                 	db	120	;'x'
  1219  00FF45  0D                 	db	13
  1220  00FF46  0A                 	db	10
  1221  00FF47  00                 	db	0
  1222  00FF48                     STR_32:
  1223                           
  1224                           ; BSR set to: 0
  1225  00FF48  53                 	db	83	;'S'
  1226  00FF49  65                 	db	101	;'e'
  1227  00FF4A  74                 	db	116	;'t'
  1228  00FF4B  20                 	db	32
  1229  00FF4C  48                 	db	72	;'H'
  1230  00FF4D  65                 	db	101	;'e'
  1231  00FF4E  61                 	db	97	;'a'
  1232  00FF4F  74                 	db	116	;'t'
  1233  00FF50  65                 	db	101	;'e'
  1234  00FF51  72                 	db	114	;'r'
  1235  00FF52  20                 	db	32
  1236  00FF53  54                 	db	84	;'T'
  1237  00FF54  65                 	db	101	;'e'
  1238  00FF55  6D                 	db	109	;'m'
  1239  00FF56  70                 	db	112	;'p'
  1240  00FF57  00                 	db	0
  1241  00FF58                     STR_25:
  1242                           
  1243                           ; BSR set to: 0
  1244  00FF58  45                 	db	69	;'E'
  1245  00FF59  43                 	db	67	;'C'
  1246  00FF5A  45                 	db	69	;'E'
  1247  00FF5B  33                 	db	51	;'3'
  1248  00FF5C  33                 	db	51	;'3'
  1249  00FF5D  30                 	db	48	;'0'
  1250  00FF5E  31                 	db	49	;'1'
  1251  00FF5F  4C                 	db	76	;'L'
  1252  00FF60  20                 	db	32
  1253  00FF61  46                 	db	70	;'F'
  1254  00FF62  32                 	db	50	;'2'
  1255  00FF63  33                 	db	51	;'3'
  1256  00FF64  20                 	db	32
  1257  00FF65  53                 	db	83	;'S'
  1258  00FF66  34                 	db	52	;'4'
  1259  00FF67  00                 	db	0
  1260  00FF68                     STR_8:
  1261                           
  1262                           ; BSR set to: 0
  1263  00FF68  54                 	db	84	;'T'
  1264  00FF69  65                 	db	101	;'e'
  1265  00FF6A  6D                 	db	109	;'m'
  1266  00FF6B  70                 	db	112	;'p'
  1267  00FF6C  65                 	db	101	;'e'
  1268  00FF6D  72                 	db	114	;'r'
  1269  00FF6E  61                 	db	97	;'a'
  1270  00FF6F  74                 	db	116	;'t'
  1271  00FF70  75                 	db	117	;'u'
  1272  00FF71  72                 	db	114	;'r'
  1273  00FF72  65                 	db	101	;'e'
  1274  00FF73  3A                 	db	58	;':'
  1275  00FF74  00                 	db	0
  1276  00FF75                     STR_15:
  1277                           
  1278                           ; BSR set to: 0
  1279  00FF75  48                 	db	72	;'H'
  1280  00FF76  54                 	db	84	;'T'
  1281  00FF77  52                 	db	82	;'R'
  1282  00FF78  20                 	db	32
  1283  00FF79  53                 	db	83	;'S'
  1284  00FF7A  65                 	db	101	;'e'
  1285  00FF7B  74                 	db	116	;'t'
  1286  00FF7C  20                 	db	32
  1287  00FF7D  54                 	db	84	;'T'
  1288  00FF7E  65                 	db	101	;'e'
  1289  00FF7F  6D                 	db	109	;'m'
  1290  00FF80  70                 	db	112	;'p'
  1291  00FF81  00                 	db	0
  1292  00FF82                     STR_5:
  1293                           
  1294                           ; BSR set to: 0
  1295  00FF82  56                 	db	86	;'V'
  1296  00FF83  6F                 	db	111	;'o'
  1297  00FF84  6C                 	db	108	;'l'
  1298  00FF85  74                 	db	116	;'t'
  1299  00FF86  20                 	db	32
  1300  00FF87  3D                 	db	61	;'='
  1301  00FF88  20                 	db	32
  1302  00FF89  25                 	db	37
  1303  00FF8A  66                 	db	102	;'f'
  1304  00FF8B  20                 	db	32
  1305  00FF8C  0D                 	db	13
  1306  00FF8D  0A                 	db	10
  1307  00FF8E  00                 	db	0
  1308  00FF8F                     STR_34:
  1309                           
  1310                           ; BSR set to: 0
  1311  00FF8F  54                 	db	84	;'T'
  1312  00FF90  69                 	db	105	;'i'
  1313  00FF91  6D                 	db	109	;'m'
  1314  00FF92  65                 	db	101	;'e'
  1315  00FF93  20                 	db	32
  1316  00FF94  53                 	db	83	;'S'
  1317  00FF95  65                 	db	101	;'e'
  1318  00FF96  74                 	db	116	;'t'
  1319  00FF97  75                 	db	117	;'u'
  1320  00FF98  70                 	db	112	;'p'
  1321  00FF99  00                 	db	0
  1322  00FF9A  00                 	db	0
  1323  00FF9B                     STR_28:
  1324                           
  1325                           ; BSR set to: 0
  1326  00FF9B  25                 	db	37
  1327  00FF9C  78                 	db	120	;'x'
  1328  00FF9D  3A                 	db	58	;':'
  1329  00FF9E  25                 	db	37
  1330  00FF9F  78                 	db	120	;'x'
  1331  00FFA0  3A                 	db	58	;':'
  1332  00FFA1  25                 	db	37
  1333  00FFA2  78                 	db	120	;'x'
  1334  00FFA3  0D                 	db	13
  1335  00FFA4  0A                 	db	10
  1336  00FFA5  00                 	db	0
  1337  00FFA6                     STR_26:
  1338                           
  1339                           ; BSR set to: 0
  1340  00FFA6  41                 	db	65	;'A'
  1341  00FFA7  6C                 	db	108	;'l'
  1342  00FFA8  72                 	db	114	;'r'
  1343  00FFA9  6D                 	db	109	;'m'
  1344  00FFAA  20                 	db	32
  1345  00FFAB  53                 	db	83	;'S'
  1346  00FFAC  65                 	db	101	;'e'
  1347  00FFAD  74                 	db	116	;'t'
  1348  00FFAE  75                 	db	117	;'u'
  1349  00FFAF  70                 	db	112	;'p'
  1350  00FFB0  00                 	db	0
  1351  00FFB1                     STR_13:
  1352                           
  1353                           ; BSR set to: 0
  1354  00FFB1  41                 	db	65	;'A'
  1355  00FFB2  6C                 	db	108	;'l'
  1356  00FFB3  61                 	db	97	;'a'
  1357  00FFB4  72                 	db	114	;'r'
  1358  00FFB5  6D                 	db	109	;'m'
  1359  00FFB6  20                 	db	32
  1360  00FFB7  54                 	db	84	;'T'
  1361  00FFB8  69                 	db	105	;'i'
  1362  00FFB9  6D                 	db	109	;'m'
  1363  00FFBA  65                 	db	101	;'e'
  1364  00FFBB  00                 	db	0
  1365  00FFBC                     STR_30:
  1366                           
  1367                           ; BSR set to: 0
  1368  00FFBC  20                 	db	32
  1369  00FFBD  20                 	db	32
  1370  00FFBE  48                 	db	72	;'H'
  1371  00FFBF  65                 	db	101	;'e'
  1372  00FFC0  61                 	db	97	;'a'
  1373  00FFC1  74                 	db	116	;'t'
  1374  00FFC2  65                 	db	101	;'e'
  1375  00FFC3  72                 	db	114	;'r'
  1376  00FFC4  00                 	db	0
  1377  00FFC5  00                 	db	0
  1378  00FFC6                     STR_31:
  1379                           
  1380                           ; BSR set to: 0
  1381  00FFC6  20                 	db	32
  1382  00FFC7  20                 	db	32
  1383  00FFC8  53                 	db	83	;'S'
  1384  00FFC9  65                 	db	101	;'e'
  1385  00FFCA  74                 	db	116	;'t'
  1386  00FFCB  75                 	db	117	;'u'
  1387  00FFCC  70                 	db	112	;'p'
  1388  00FFCD  00                 	db	0
  1389  00FFCE  00                 	db	0
  1390  00FFCF                     STR_14:
  1391                           
  1392                           ; BSR set to: 0
  1393  00FFCF  41                 	db	65	;'A'
  1394  00FFD0  6C                 	db	108	;'l'
  1395  00FFD1  61                 	db	97	;'a'
  1396  00FFD2  72                 	db	114	;'r'
  1397  00FFD3  6D                 	db	109	;'m'
  1398  00FFD4  20                 	db	32
  1399  00FFD5  53                 	db	83	;'S'
  1400  00FFD6  57                 	db	87	;'W'
  1401  00FFD7  00                 	db	0
  1402  00FFD8                     STR_16:
  1403                           
  1404                           ; BSR set to: 0
  1405  00FFD8  48                 	db	72	;'H'
  1406  00FFD9  54                 	db	84	;'T'
  1407  00FFDA  52                 	db	82	;'R'
  1408  00FFDB  20                 	db	32
  1409  00FFDC  53                 	db	83	;'S'
  1410  00FFDD  57                 	db	87	;'W'
  1411  00FFDE  00                 	db	0
  1412  00FFDF                     STR_12:
  1413                           
  1414                           ; BSR set to: 0
  1415  00FFDF  44                 	db	68	;'D'
  1416  00FFE0  61                 	db	97	;'a'
  1417  00FFE1  74                 	db	116	;'t'
  1418  00FFE2  65                 	db	101	;'e'
  1419  00FFE3  00                 	db	0
  1420  00FFE4                     STR_19:
  1421                           
  1422                           ; BSR set to: 0
  1423  00FFE4  56                 	db	86	;'V'
  1424  00FFE5  6F                 	db	111	;'o'
  1425  00FFE6  6C                 	db	108	;'l'
  1426  00FFE7  74                 	db	116	;'t'
  1427  00FFE8  00                 	db	0
  1428  00FFE9                     STR_21:
  1429                           
  1430                           ; BSR set to: 0
  1431  00FFE9  4F                 	db	79	;'O'
  1432  00FFEA  4E                 	db	78	;'N'
  1433  00FFEB  20                 	db	32
  1434  00FFEC  00                 	db	0
  1435  00FFED                     STR_22:
  1436                           
  1437                           ; BSR set to: 0
  1438  00FFED  4F                 	db	79	;'O'
  1439  00FFEE  46                 	db	70	;'F'
  1440  00FFEF  46                 	db	70	;'F'
  1441  00FFF0  00                 	db	0
  1442  00FFF1                     STR_20:
  1443                           
  1444                           ; BSR set to: 0
  1445  00FFF1  52                 	db	82	;'R'
  1446  00FFF2  50                 	db	80	;'P'
  1447  00FFF3  4D                 	db	77	;'M'
  1448  00FFF4  00                 	db	0
  1449  00FFF5                     STR_9:
  1450                           
  1451                           ; BSR set to: 0
  1452  00FFF5  43                 	db	67	;'C'
  1453  00FFF6  2F                 	db	47
  1454  00FFF7  00                 	db	0
  1455  00FFF8                     STR_17:
  1456                           
  1457                           ; BSR set to: 0
  1458  00FFF8  44                 	db	68	;'D'
  1459  00FFF9  43                 	db	67	;'C'
  1460  00FFFA  00                 	db	0
  1461  00FFFB                     STR_18:
  1462                           
  1463                           ; BSR set to: 0
  1464  00FFFB  52                 	db	82	;'R'
  1465  00FFFC  4D                 	db	77	;'M'
  1466  00FFFD  00                 	db	0
  1467  0000                     
  1468                           ; #config settings
  1469  00FFFE  00                 	db	0	; dummy byte at the end
  1470  0000                     
  1471                           	psect	cinit
  1472  004A30                     __pcinit:
  1473                           	opt stack 0
  1474  004A30                     start_initialization:
  1475                           	opt stack 0
  1476  004A30                     __initialization:
  1477                           	opt stack 0
  1478                           
  1479                           ; Clear objects allocated to BANK0 (54 bytes)
  1480  004A30  EE00  F080         	lfsr	0,__pbssBANK0
  1481  004A34  0E36               	movlw	54
  1482  004A36                     clear_0:
  1483  004A36  6AEE               	clrf	postinc0,c
  1484  004A38  06E8               	decf	wreg,f,c
  1485  004A3A  E1FD               	bnz	clear_0
  1486                           
  1487                           ; Clear objects allocated to COMRAM (16 bytes)
  1488  004A3C  EE00  F060         	lfsr	0,__pbssCOMRAM
  1489  004A40  0E10               	movlw	16
  1490  004A42                     clear_1:
  1491  004A42  6AEE               	clrf	postinc0,c
  1492  004A44  06E8               	decf	wreg,f,c
  1493  004A46  E1FD               	bnz	clear_1
  1494                           
  1495                           ; Initialize objects allocated to BANK1 (124 bytes)
  1496                           ; load TBLPTR registers with __pidataBANK1
  1497  004A48  0EBE               	movlw	low __pidataBANK1
  1498  004A4A  6EF6               	movwf	tblptrl,c
  1499  004A4C  0E46               	movlw	high __pidataBANK1
  1500  004A4E  6EF7               	movwf	tblptrh,c
  1501  004A50  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1502  004A52  6EF8               	movwf	tblptru,c
  1503  004A54  EE01  F000         	lfsr	0,__pdataBANK1
  1504  004A58  EE10 F07C          	lfsr	1,124
  1505  004A5C                     copy_data0:
  1506  004A5C  0009               	tblrd		*+
  1507  004A5E  CFF5 FFEE          	movff	tablat,postinc0
  1508  004A62  50E5               	movf	postdec1,w,c
  1509  004A64  50E1               	movf	fsr1l,w,c
  1510  004A66  E1FA               	bnz	copy_data0
  1511                           
  1512                           ; Initialize objects allocated to BANK0 (35 bytes)
  1513                           ; load TBLPTR registers with __pidataBANK0
  1514  004A68  0E00               	movlw	low __pidataBANK0
  1515  004A6A  6EF6               	movwf	tblptrl,c
  1516  004A6C  0E52               	movlw	high __pidataBANK0
  1517  004A6E  6EF7               	movwf	tblptrh,c
  1518  004A70  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1519  004A72  6EF8               	movwf	tblptru,c
  1520  004A74  EE00  F0B6         	lfsr	0,__pdataBANK0
  1521  004A78  EE10 F023          	lfsr	1,35
  1522  004A7C                     copy_data1:
  1523  004A7C  0009               	tblrd		*+
  1524  004A7E  CFF5 FFEE          	movff	tablat,postinc0
  1525  004A82  50E5               	movf	postdec1,w,c
  1526  004A84  50E1               	movf	fsr1l,w,c
  1527  004A86  E1FA               	bnz	copy_data1
  1528  004A88                     end_of_initialization:
  1529                           	opt stack 0
  1530  004A88                     __end_of__initialization:
  1531                           	opt stack 0
  1532  004A88  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1533  004A8A  6EF8               	movwf	tblptru,c
  1534  004A8C  0100               	movlb	0
  1535  004A8E  EFF2  F00C         	goto	_main	;jump to C main() function
  1536                           tblptru	equ	0xFF8
  1537                           tblptrh	equ	0xFF7
  1538                           tblptrl	equ	0xFF6
  1539                           tablat	equ	0xFF5
  1540                           postinc0	equ	0xFEE
  1541                           wreg	equ	0xFE8
  1542                           postdec1	equ	0xFE5
  1543                           fsr1l	equ	0xFE1
  1544                           
  1545                           	psect	bssCOMRAM
  1546  000060                     __pbssCOMRAM:
  1547                           	opt stack 0
  1548  000060                     _Time_Elapsed:
  1549                           	opt stack 0
  1550  000060                     	ds	2
  1551  000062                     _txt:
  1552                           	opt stack 0
  1553  000062                     	ds	2
  1554  000064                     _alarm_date:
  1555                           	opt stack 0
  1556  000064                     	ds	1
  1557  000065                     _alarm_hour:
  1558                           	opt stack 0
  1559  000065                     	ds	1
  1560  000066                     _alarm_minute:
  1561                           	opt stack 0
  1562  000066                     	ds	1
  1563  000067                     _alarm_second:
  1564                           	opt stack 0
  1565  000067                     	ds	1
  1566  000068                     _day:
  1567                           	opt stack 0
  1568  000068                     	ds	1
  1569  000069                     _hour:
  1570                           	opt stack 0
  1571  000069                     	ds	1
  1572  00006A                     _minute:
  1573                           	opt stack 0
  1574  00006A                     	ds	1
  1575  00006B                     _month:
  1576                           	opt stack 0
  1577  00006B                     	ds	1
  1578  00006C                     _second:
  1579                           	opt stack 0
  1580  00006C                     	ds	1
  1581  00006D                     _setup_day:
  1582                           	opt stack 0
  1583  00006D                     	ds	1
  1584  00006E                     _setup_month:
  1585                           	opt stack 0
  1586  00006E                     	ds	1
  1587  00006F                     _year:
  1588                           	opt stack 0
  1589  00006F                     	ds	1
  1590                           tblptru	equ	0xFF8
  1591                           tblptrh	equ	0xFF7
  1592                           tblptrl	equ	0xFF6
  1593                           tablat	equ	0xFF5
  1594                           postinc0	equ	0xFEE
  1595                           wreg	equ	0xFE8
  1596                           postdec1	equ	0xFE5
  1597                           fsr1l	equ	0xFE1
  1598                           
  1599                           	psect	bssBANK0
  1600  000080                     __pbssBANK0:
  1601                           	opt stack 0
  1602  000080                     _Nec_code:
  1603                           	opt stack 0
  1604  000080                     	ds	4
  1605  000084                     _volt:
  1606                           	opt stack 0
  1607  000084                     	ds	3
  1608  000087                     _ALARMEN:
  1609                           	opt stack 0
  1610  000087                     	ds	2
  1611  000089                     _DS1621_tempC:
  1612                           	opt stack 0
  1613  000089                     	ds	2
  1614  00008B                     _DS1621_tempF:
  1615                           	opt stack 0
  1616  00008B                     	ds	2
  1617  00008D                     _MATCHED:
  1618                           	opt stack 0
  1619  00008D                     	ds	2
  1620  00008F                     _alarm_mode:
  1621                           	opt stack 0
  1622  00008F                     	ds	2
  1623  000091                     _color:
  1624                           	opt stack 0
  1625  000091                     	ds	2
  1626  000093                     _nbr:
  1627                           	opt stack 0
  1628  000093                     	ds	2
  1629  000095                     _nec_ok:
  1630                           	opt stack 0
  1631  000095                     	ds	2
  1632  000097                     _rpm:
  1633                           	opt stack 0
  1634  000097                     	ds	2
  1635  000099                     _rps:
  1636                           	opt stack 0
  1637  000099                     	ds	2
  1638  00009B                     _FAN:
  1639                           	opt stack 0
  1640  00009B                     	ds	1
  1641  00009C                     _INT1_flag:
  1642                           	opt stack 0
  1643  00009C                     	ds	1
  1644  00009D                     _INT2_flag:
  1645                           	opt stack 0
  1646  00009D                     	ds	1
  1647  00009E                     _In_Alarm_Time_Setup:
  1648                           	opt stack 0
  1649  00009E                     	ds	1
  1650  00009F                     _In_Fan_Temp_Setup:
  1651                           	opt stack 0
  1652  00009F                     	ds	1
  1653  0000A0                     _In_Time_Setup:
  1654                           	opt stack 0
  1655  0000A0                     	ds	1
  1656  0000A1                     _Nec_Button:
  1657                           	opt stack 0
  1658  0000A1                     	ds	1
  1659  0000A2                     _Nec_State:
  1660                           	opt stack 0
  1661  0000A2                     	ds	1
  1662  0000A3                     _Nec_state:
  1663                           	opt stack 0
  1664  0000A3                     	ds	1
  1665  0000A4                     _Select_Alarm_Field:
  1666                           	opt stack 0
  1667  0000A4                     	ds	1
  1668  0000A5                     _Select_Fan_Temp_Field:
  1669                           	opt stack 0
  1670  0000A5                     	ds	1
  1671  0000A6                     _Select_Field:
  1672                           	opt stack 0
  1673  0000A6                     	ds	1
  1674  0000A7                     __tft_type:
  1675                           	opt stack 0
  1676  0000A7                     	ds	1
  1677  0000A8                     _bit_count:
  1678                           	opt stack 0
  1679  0000A8                     	ds	1
  1680  0000A9                     _colstart:
  1681                           	opt stack 0
  1682  0000A9                     	ds	1
  1683  0000AA                     _dow:
  1684                           	opt stack 0
  1685  0000AA                     	ds	1
  1686  0000AB                     _duty_cycle:
  1687                           	opt stack 0
  1688  0000AB                     	ds	1
  1689  0000AC                     _found:
  1690                           	opt stack 0
  1691  0000AC                     	ds	1
  1692  0000AD                     _rowstart:
  1693                           	opt stack 0
  1694  0000AD                     	ds	1
  1695  0000AE                     _setup_alarm_hour:
  1696                           	opt stack 0
  1697  0000AE                     	ds	1
  1698  0000AF                     _setup_alarm_minute:
  1699                           	opt stack 0
  1700  0000AF                     	ds	1
  1701  0000B0                     _setup_alarm_second:
  1702                           	opt stack 0
  1703  0000B0                     	ds	1
  1704  0000B1                     _setup_fan_set_temp:
  1705                           	opt stack 0
  1706  0000B1                     	ds	1
  1707  0000B2                     _setup_hour:
  1708                           	opt stack 0
  1709  0000B2                     	ds	1
  1710  0000B3                     _setup_minute:
  1711                           	opt stack 0
  1712  0000B3                     	ds	1
  1713  0000B4                     _setup_second:
  1714                           	opt stack 0
  1715  0000B4                     	ds	1
  1716  0000B5                     _setup_year:
  1717                           	opt stack 0
  1718  0000B5                     	ds	1
  1719                           tblptru	equ	0xFF8
  1720                           tblptrh	equ	0xFF7
  1721                           tblptrl	equ	0xFF6
  1722                           tablat	equ	0xFF5
  1723                           postinc0	equ	0xFEE
  1724                           wreg	equ	0xFE8
  1725                           postdec1	equ	0xFE5
  1726                           fsr1l	equ	0xFE1
  1727                           
  1728                           	psect	dataBANK0
  1729  0000B6                     __pdataBANK0:
  1730                           	opt stack 0
  1731  0000B6                     _fan_set_temp:
  1732                           	opt stack 0
  1733  0000B6                     	ds	1
  1734  0000B7                     _tempSecond:
  1735                           	opt stack 0
  1736  0000B7                     	ds	1
  1737  0000B8                     _wrap:
  1738                           	opt stack 0
  1739  0000B8                     	ds	1
  1740  0000B9                     _Fan_Set_Temp_Txt:
  1741                           	opt stack 0
  1742  0000B9                     	ds	5
  1743  0000BE                     _RPM_Txt:
  1744                           	opt stack 0
  1745  0000BE                     	ds	5
  1746  0000C3                     _Alarm_SW_Txt:
  1747                           	opt stack 0
  1748  0000C3                     	ds	4
  1749  0000C7                     _DC_Txt:
  1750                           	opt stack 0
  1751  0000C7                     	ds	4
  1752  0000CB                     _Fan_SW_Txt:
  1753                           	opt stack 0
  1754  0000CB                     	ds	4
  1755  0000CF                     _tempC:
  1756                           	opt stack 0
  1757  0000CF                     	ds	4
  1758  0000D3                     _tempF:
  1759                           	opt stack 0
  1760  0000D3                     	ds	4
  1761  0000D7                     _RTC_ALARM_Txt:
  1762                           	opt stack 0
  1763  0000D7                     	ds	2
  1764                           tblptru	equ	0xFF8
  1765                           tblptrh	equ	0xFF7
  1766                           tblptrl	equ	0xFF6
  1767                           tablat	equ	0xFF5
  1768                           postinc0	equ	0xFEE
  1769                           wreg	equ	0xFE8
  1770                           postdec1	equ	0xFE5
  1771                           fsr1l	equ	0xFE1
  1772                           
  1773                           	psect	dataBANK1
  1774  000100                     __pdataBANK1:
  1775                           	opt stack 0
  1776  000100                     _buffer:
  1777                           	opt stack 0
  1778  000100                     	ds	38
  1779  000126                     _array1:
  1780                           	opt stack 0
  1781  000126                     	ds	21
  1782  00013B                     _alarm_time:
  1783                           	opt stack 0
  1784  00013B                     	ds	9
  1785  000144                     _date:
  1786                           	opt stack 0
  1787  000144                     	ds	9
  1788  00014D                     _setup_alarm_time:
  1789                           	opt stack 0
  1790  00014D                     	ds	9
  1791  000156                     _setup_date:
  1792                           	opt stack 0
  1793  000156                     	ds	9
  1794  00015F                     _setup_time:
  1795                           	opt stack 0
  1796  00015F                     	ds	9
  1797  000168                     _time:
  1798                           	opt stack 0
  1799  000168                     	ds	9
  1800  000171                     _Volt_Txt:
  1801                           	opt stack 0
  1802  000171                     	ds	6
  1803  000177                     _setup_fan_set_text:
  1804                           	opt stack 0
  1805  000177                     	ds	5
  1806                           tblptru	equ	0xFF8
  1807                           tblptrh	equ	0xFF7
  1808                           tblptrl	equ	0xFF6
  1809                           tablat	equ	0xFF5
  1810                           postinc0	equ	0xFEE
  1811                           wreg	equ	0xFE8
  1812                           postdec1	equ	0xFE5
  1813                           fsr1l	equ	0xFE1
  1814                           
  1815                           	psect	cstackBANK1
  1816  00017C                     __pcstackBANK1:
  1817                           	opt stack 0
  1818  00017C                     _printf$3328:
  1819                           	opt stack 0
  1820                           
  1821                           ; 3 bytes @ 0x0
  1822  00017C                     	ds	3
  1823  00017F                     printf@idx:
  1824                           	opt stack 0
  1825                           
  1826                           ; 1 bytes @ 0x3
  1827  00017F                     	ds	1
  1828  000180                     printf@ap:
  1829                           	opt stack 0
  1830                           
  1831                           ; 2 bytes @ 0x4
  1832  000180                     	ds	2
  1833  000182                     printf@prec:
  1834                           	opt stack 0
  1835                           
  1836                           ; 2 bytes @ 0x6
  1837  000182                     	ds	2
  1838  000184                     printf@tmpval:
  1839                           	opt stack 0
  1840                           
  1841                           ; 4 bytes @ 0x8
  1842  000184                     	ds	4
  1843  000188                     printf@width:
  1844                           	opt stack 0
  1845                           
  1846                           ; 2 bytes @ 0xC
  1847  000188                     	ds	2
  1848  00018A                     printf@exp:
  1849                           	opt stack 0
  1850                           
  1851                           ; 2 bytes @ 0xE
  1852  00018A                     	ds	2
  1853  00018C                     printf@val:
  1854                           	opt stack 0
  1855                           
  1856                           ; 4 bytes @ 0x10
  1857  00018C                     	ds	4
  1858  000190                     printf@flag:
  1859                           	opt stack 0
  1860                           
  1861                           ; 2 bytes @ 0x14
  1862  000190                     	ds	2
  1863  000192                     printf@fval:
  1864                           	opt stack 0
  1865                           
  1866                           ; 3 bytes @ 0x16
  1867  000192                     	ds	3
  1868  000195                     printf@c:
  1869                           	opt stack 0
  1870                           
  1871                           ; 1 bytes @ 0x19
  1872  000195                     	ds	1
  1873                           tblptru	equ	0xFF8
  1874                           tblptrh	equ	0xFF7
  1875                           tblptrl	equ	0xFF6
  1876                           tablat	equ	0xFF5
  1877                           postinc0	equ	0xFEE
  1878                           wreg	equ	0xFE8
  1879                           postdec1	equ	0xFE5
  1880                           fsr1l	equ	0xFE1
  1881                           
  1882                           	psect	cstackBANK0
  1883  0000D9                     __pcstackBANK0:
  1884                           	opt stack 0
  1885  0000D9                     ?_printf:
  1886                           	opt stack 0
  1887  0000D9                     get_duty_cycle@dc:
  1888                           	opt stack 0
  1889  0000D9                     printf@f:
  1890                           	opt stack 0
  1891                           
  1892                           ; 2 bytes @ 0x0
  1893  0000D9                     	ds	2
  1894  0000DB                     get_duty_cycle@dc_float:
  1895                           	opt stack 0
  1896                           
  1897                           ; 3 bytes @ 0x2
  1898  0000DB                     	ds	3
  1899  0000DE                     get_duty_cycle@diff_temp:
  1900                           	opt stack 0
  1901                           
  1902                           ; 3 bytes @ 0x5
  1903  0000DE                     	ds	9
  1904  0000E7                     ??_printf:
  1905                           
  1906                           ; 0 bytes @ 0xE
  1907  0000E7                     	ds	6
  1908  0000ED                     check_for_button_input@j:
  1909                           	opt stack 0
  1910                           
  1911                           ; 2 bytes @ 0x14
  1912  0000ED                     	ds	2
  1913  0000EF                     ??_Setup_Temp_Fan:
  1914                           
  1915                           ; 0 bytes @ 0x16
  1916  0000EF                     	ds	2
  1917  0000F1                     ??_main:
  1918                           
  1919                           ; 0 bytes @ 0x18
  1920  0000F1                     	ds	1
  1921  0000F2                     main@j:
  1922                           	opt stack 0
  1923                           
  1924                           ; 2 bytes @ 0x19
  1925  0000F2                     	ds	2
  1926                           tblptru	equ	0xFF8
  1927                           tblptrh	equ	0xFF7
  1928                           tblptrl	equ	0xFF6
  1929                           tablat	equ	0xFF5
  1930                           postinc0	equ	0xFEE
  1931                           wreg	equ	0xFE8
  1932                           postdec1	equ	0xFE5
  1933                           fsr1l	equ	0xFE1
  1934                           
  1935                           	psect	cstackCOMRAM
  1936  000001                     __pcstackCOMRAM:
  1937                           	opt stack 0
  1938  000001                     ??_INT0_ISR:
  1939  000001                     
  1940                           ; 2 bytes @ 0x0
  1941  000001                     	ds	2
  1942  000003                     ??_chkisr:
  1943                           
  1944                           ; 0 bytes @ 0x2
  1945  000003                     	ds	14
  1946  000011                     ??_bcd_2_dec:
  1947  000011                     ??_isdigit:
  1948  000011                     ?_get_full_ADC:
  1949                           	opt stack 0
  1950  000011                     ?_strlen:
  1951                           	opt stack 0
  1952  000011                     ?___wmul:
  1953                           	opt stack 0
  1954  000011                     ?___ftpack:
  1955                           	opt stack 0
  1956  000011                     ?___ftneg:
  1957                           	opt stack 0
  1958  000011                     ?__tdiv_to_l_:
  1959                           	opt stack 0
  1960  000011                     ?__div_to_l_:
  1961                           	opt stack 0
  1962  000011                     ?___lldiv:
  1963                           	opt stack 0
  1964  000011                     putch@c:
  1965                           	opt stack 0
  1966  000011                     Set_RGB_Color@color:
  1967                           	opt stack 0
  1968  000011                     Set_ADCON0@ch:
  1969                           	opt stack 0
  1970  000011                     I2C_Read@ack:
  1971                           	opt stack 0
  1972  000011                     I2C_Write@outByte:
  1973                           	opt stack 0
  1974  000011                     spiwrite@x:
  1975                           	opt stack 0
  1976  000011                     Wait_One_Sec@k:
  1977                           	opt stack 0
  1978  000011                     OpenUSART@spbrg:
  1979                           	opt stack 0
  1980  000011                     ___wmul@multiplier:
  1981                           	opt stack 0
  1982  000011                     strcpy@to:
  1983                           	opt stack 0
  1984  000011                     strlen@s:
  1985                           	opt stack 0
  1986  000011                     __div_to_l_@f1:
  1987                           	opt stack 0
  1988  000011                     ___ftpack@arg:
  1989                           	opt stack 0
  1990  000011                     __tdiv_to_l_@f1:
  1991                           	opt stack 0
  1992  000011                     ___ftge@ff1:
  1993                           	opt stack 0
  1994  000011                     ___ftneg@f1:
  1995                           	opt stack 0
  1996  000011                     I2C_Init@c:
  1997                           	opt stack 0
  1998  000011                     ___lldiv@dividend:
  1999                           	opt stack 0
  2000                           
  2001                           ; 4 bytes @ 0x10
  2002  000011                     	ds	1
  2003  000012                     I2C_Read@n:
  2004                           	opt stack 0
  2005  000012                     I2C_Write@n:
  2006                           	opt stack 0
  2007  000012                     spiwrite@spidata:
  2008                           	opt stack 0
  2009  000012                     _isdigit$2983:
  2010                           	opt stack 0
  2011                           
  2012                           ; 1 bytes @ 0x11
  2013  000012                     	ds	1
  2014  000013                     ??_get_full_ADC:
  2015  000013                     ??_strlen:
  2016  000013                     DS3231_Setup_Time@Device:
  2017                           	opt stack 0
  2018  000013                     I2C_Read@inByte:
  2019                           	opt stack 0
  2020  000013                     I2C_Write_Address_Write_One_Byte@Address:
  2021                           	opt stack 0
  2022  000013                     I2C_Write_Cmd_Only@Cmd:
  2023                           	opt stack 0
  2024  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  2025                           	opt stack 0
  2026  000013                     write_command@cmd_:
  2027                           	opt stack 0
  2028  000013                     write_data@data_:
  2029                           	opt stack 0
  2030  000013                     OpenUSART@config:
  2031                           	opt stack 0
  2032  000013                     isdigit@c:
  2033                           	opt stack 0
  2034  000013                     bcd_2_dec@dec:
  2035                           	opt stack 0
  2036  000013                     ___wmul@multiplicand:
  2037                           	opt stack 0
  2038  000013                     strcpy@from:
  2039                           	opt stack 0
  2040                           
  2041                           ; 2 bytes @ 0x12
  2042  000013                     	ds	1
  2043  000014                     ?_DS1621_Read_Temp:
  2044                           	opt stack 0
  2045  000014                     DS3231_Read_Time@Address:
  2046                           	opt stack 0
  2047  000014                     DS3231_Setup_Time@Address:
  2048                           	opt stack 0
  2049  000014                     DS3231_Read_Alarm_Time@Address:
  2050                           	opt stack 0
  2051  000014                     I2C_Write_Address_Read_One_Byte@Address:
  2052                           	opt stack 0
  2053  000014                     I2C_Write_Address_Write_One_Byte@Data_Out:
  2054                           	opt stack 0
  2055  000014                     I2C_Write_Cmd_Only@Device:
  2056                           	opt stack 0
  2057  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  2058                           	opt stack 0
  2059  000014                     setAddrWindow@y0:
  2060                           	opt stack 0
  2061  000014                     ___ftpack@exp:
  2062                           	opt stack 0
  2063  000014                     __div_to_l_@f2:
  2064                           	opt stack 0
  2065  000014                     __tdiv_to_l_@f2:
  2066                           	opt stack 0
  2067  000014                     ___ftge@ff2:
  2068                           	opt stack 0
  2069                           
  2070                           ; 3 bytes @ 0x13
  2071  000014                     	ds	1
  2072  000015                     DS3231_Read_Time@Device:
  2073                           	opt stack 0
  2074  000015                     DS3231_Read_Alarm_Time@Device:
  2075                           	opt stack 0
  2076  000015                     bcd_2_dec@bcd:
  2077                           	opt stack 0
  2078  000015                     I2C_Write_Address_Read_One_Byte@Data_Ret:
  2079                           	opt stack 0
  2080  000015                     I2C_Write_Address_Write_One_Byte@Device:
  2081                           	opt stack 0
  2082  000015                     I2C_Write_Cmd_Write_Data@Device:
  2083                           	opt stack 0
  2084  000015                     setAddrWindow@x1:
  2085                           	opt stack 0
  2086  000015                     ___ftpack@sign:
  2087                           	opt stack 0
  2088  000015                     get_full_ADC@result:
  2089                           	opt stack 0
  2090  000015                     ___wmul@product:
  2091                           	opt stack 0
  2092  000015                     strcpy@cp:
  2093                           	opt stack 0
  2094  000015                     strlen@cp:
  2095                           	opt stack 0
  2096  000015                     ___lldiv@divisor:
  2097                           	opt stack 0
  2098                           
  2099                           ; 4 bytes @ 0x14
  2100  000015                     	ds	1
  2101  000016                     ??___ftpack:
  2102  000016                     DS1621_Init@Device:
  2103                           	opt stack 0
  2104  000016                     DS1621_Read_Temp@Cmd:
  2105                           	opt stack 0
  2106  000016                     I2C_Write_Address_Read_One_Byte@Device:
  2107                           	opt stack 0
  2108  000016                     setAddrWindow@y1:
  2109                           	opt stack 0
  2110                           
  2111                           ; 1 bytes @ 0x15
  2112  000016                     	ds	1
  2113  000017                     ??__tdiv_to_l_:
  2114  000017                     ??___ftge:
  2115  000017                     ?___awdiv:
  2116                           	opt stack 0
  2117  000017                     DS1621_Read_Temp@Data_Ret:
  2118                           	opt stack 0
  2119  000017                     DS3231_Init@Address_7:
  2120                           	opt stack 0
  2121  000017                     setAddrWindow@x0:
  2122                           	opt stack 0
  2123  000017                     delay_ms@ms:
  2124                           	opt stack 0
  2125  000017                     ___awdiv@dividend:
  2126                           	opt stack 0
  2127  000017                     __div_to_l_@quot:
  2128                           	opt stack 0
  2129                           
  2130                           ; 4 bytes @ 0x16
  2131  000017                     	ds	1
  2132  000018                     DS1621_Read_Temp@Device:
  2133                           	opt stack 0
  2134  000018                     DS3231_Init@Address_E:
  2135                           	opt stack 0
  2136  000018                     drawPixel@y:
  2137                           	opt stack 0
  2138  000018                     drawFastVLine@y:
  2139                           	opt stack 0
  2140  000018                     fillRectangle@y:
  2141                           	opt stack 0
  2142                           
  2143                           ; 1 bytes @ 0x17
  2144  000018                     	ds	1
  2145  000019                     ??_delay_ms:
  2146  000019                     ?___awtoft:
  2147                           	opt stack 0
  2148  000019                     ?___lbtoft:
  2149                           	opt stack 0
  2150  000019                     ?___lltoft:
  2151                           	opt stack 0
  2152  000019                     DS3231_Init@control_E:
  2153                           	opt stack 0
  2154  000019                     drawFastVLine@h:
  2155                           	opt stack 0
  2156  000019                     fillRectangle@w:
  2157                           	opt stack 0
  2158  000019                     drawPixel@color:
  2159                           	opt stack 0
  2160  000019                     ___awdiv@divisor:
  2161                           	opt stack 0
  2162  000019                     ___awtoft@c:
  2163                           	opt stack 0
  2164  000019                     ___lldiv@quotient:
  2165                           	opt stack 0
  2166  000019                     ___lltoft@c:
  2167                           	opt stack 0
  2168                           
  2169                           ; 4 bytes @ 0x18
  2170  000019                     	ds	1
  2171  00001A                     DS3231_Init@Device:
  2172                           	opt stack 0
  2173  00001A                     fillRectangle@h:
  2174                           	opt stack 0
  2175  00001A                     drawFastVLine@color:
  2176                           	opt stack 0
  2177  00001A                     __tdiv_to_l_@quot:
  2178                           	opt stack 0
  2179                           
  2180                           ; 4 bytes @ 0x19
  2181  00001A                     	ds	1
  2182  00001B                     DS3231_Turn_Off_Alarm@Address_E:
  2183                           	opt stack 0
  2184  00001B                     DS3231_Turn_On_Alarm@Address_E:
  2185                           	opt stack 0
  2186  00001B                     drawPixel@x:
  2187                           	opt stack 0
  2188  00001B                     ___awdiv@counter:
  2189                           	opt stack 0
  2190  00001B                     __div_to_l_@cntr:
  2191                           	opt stack 0
  2192  00001B                     delay_ms@count:
  2193                           	opt stack 0
  2194  00001B                     fillRectangle@color:
  2195                           	opt stack 0
  2196                           
  2197                           ; 2 bytes @ 0x1A
  2198  00001B                     	ds	1
  2199  00001C                     ??_drawFastVLine:
  2200  00001C                     DS3231_Turn_Off_Alarm@Address_F:
  2201                           	opt stack 0
  2202  00001C                     DS3231_Turn_On_Alarm@Address_F:
  2203                           	opt stack 0
  2204  00001C                     ___awdiv@sign:
  2205                           	opt stack 0
  2206  00001C                     ___awtoft@sign:
  2207                           	opt stack 0
  2208  00001C                     __div_to_l_@exp1:
  2209                           	opt stack 0
  2210  00001C                     ___lbtoft@c:
  2211                           	opt stack 0
  2212  00001C                     drawCircle@x0:
  2213                           	opt stack 0
  2214                           
  2215                           ; 2 bytes @ 0x1B
  2216  00001C                     	ds	1
  2217  00001D                     ??_fillRectangle:
  2218  00001D                     ??___lltoft:
  2219  00001D                     DS3231_Turn_Off_Alarm@control_E:
  2220                           	opt stack 0
  2221  00001D                     DS3231_Turn_On_Alarm@control_E:
  2222                           	opt stack 0
  2223  00001D                     ___lldiv@counter:
  2224                           	opt stack 0
  2225  00001D                     ___awdiv@quotient:
  2226                           	opt stack 0
  2227                           
  2228                           ; 2 bytes @ 0x1C
  2229  00001D                     	ds	1
  2230  00001E                     ?___llmod:
  2231                           	opt stack 0
  2232  00001E                     DS3231_Turn_Off_Alarm@control_F:
  2233                           	opt stack 0
  2234  00001E                     DS3231_Turn_On_Alarm@control_F:
  2235                           	opt stack 0
  2236  00001E                     __tdiv_to_l_@cntr:
  2237                           	opt stack 0
  2238  00001E                     drawCircle@y0:
  2239                           	opt stack 0
  2240  00001E                     ___llmod@dividend:
  2241                           	opt stack 0
  2242                           
  2243                           ; 4 bytes @ 0x1D
  2244  00001E                     	ds	1
  2245  00001F                     ?_get_RPM:
  2246                           	opt stack 0
  2247  00001F                     ?___ftmul:
  2248                           	opt stack 0
  2249  00001F                     DS3231_Turn_Off_Alarm@Device:
  2250                           	opt stack 0
  2251  00001F                     DS3231_Turn_On_Alarm@Device:
  2252                           	opt stack 0
  2253  00001F                     __tdiv_to_l_@exp1:
  2254                           	opt stack 0
  2255  00001F                     Set_RPM_RGB@rpm:
  2256                           	opt stack 0
  2257  00001F                     ___ftmul@f1:
  2258                           	opt stack 0
  2259                           
  2260                           ; 3 bytes @ 0x1E
  2261  00001F                     	ds	1
  2262  000020                     drawFastVLine@hi:
  2263                           	opt stack 0
  2264  000020                     drawCircle@r:
  2265                           	opt stack 0
  2266                           
  2267                           ; 2 bytes @ 0x1F
  2268  000020                     	ds	1
  2269  000021                     Set_RPM_RGB@color:
  2270                           	opt stack 0
  2271  000021                     drawFastVLine@lo:
  2272                           	opt stack 0
  2273  000021                     fillRectangle@hi:
  2274                           	opt stack 0
  2275  000021                     ___lltoft@exp:
  2276                           	opt stack 0
  2277  000021                     get_RPM@RPS:
  2278                           	opt stack 0
  2279                           
  2280                           ; 2 bytes @ 0x20
  2281  000021                     	ds	1
  2282  000022                     drawFastVLine@x:
  2283                           	opt stack 0
  2284  000022                     fillRectangle@lo:
  2285                           	opt stack 0
  2286  000022                     drawCircle@color:
  2287                           	opt stack 0
  2288  000022                     ___ftmul@f2:
  2289                           	opt stack 0
  2290  000022                     ___llmod@divisor:
  2291                           	opt stack 0
  2292                           
  2293                           ; 4 bytes @ 0x21
  2294  000022                     	ds	1
  2295  000023                     fillRect@y:
  2296                           	opt stack 0
  2297  000023                     fillRectangle@x:
  2298                           	opt stack 0
  2299                           
  2300                           ; 1 bytes @ 0x22
  2301  000023                     	ds	1
  2302  000024                     ??_drawCircle:
  2303  000024                     fillRect@w:
  2304                           	opt stack 0
  2305  000024                     fillScreen@color:
  2306                           	opt stack 0
  2307                           
  2308                           ; 2 bytes @ 0x23
  2309  000024                     	ds	1
  2310  000025                     ??___ftmul:
  2311  000025                     fillRect@h:
  2312                           	opt stack 0
  2313                           
  2314                           ; 1 bytes @ 0x24
  2315  000025                     	ds	1
  2316  000026                     ___llmod@counter:
  2317                           	opt stack 0
  2318  000026                     fillRect@color:
  2319                           	opt stack 0
  2320  000026                     drawCircle@ddF_x:
  2321                           	opt stack 0
  2322                           
  2323                           ; 2 bytes @ 0x25
  2324  000026                     	ds	2
  2325  000028                     ??_fillRect:
  2326  000028                     ___ftmul@exp:
  2327                           	opt stack 0
  2328  000028                     drawCircle@ddF_y:
  2329                           	opt stack 0
  2330                           
  2331                           ; 2 bytes @ 0x27
  2332  000028                     	ds	1
  2333  000029                     ___ftmul@f3_as_product:
  2334                           	opt stack 0
  2335                           
  2336                           ; 3 bytes @ 0x28
  2337  000029                     	ds	1
  2338  00002A                     drawCircle@f:
  2339                           	opt stack 0
  2340                           
  2341                           ; 2 bytes @ 0x29
  2342  00002A                     	ds	1
  2343  00002B                     fillRect@x:
  2344                           	opt stack 0
  2345                           
  2346                           ; 1 bytes @ 0x2A
  2347  00002B                     	ds	1
  2348  00002C                     ___ftmul@cntr:
  2349                           	opt stack 0
  2350  00002C                     fillRect@i:
  2351                           	opt stack 0
  2352  00002C                     drawCircle@x:
  2353                           	opt stack 0
  2354                           
  2355                           ; 2 bytes @ 0x2B
  2356  00002C                     	ds	1
  2357  00002D                     ___ftmul@sign:
  2358                           	opt stack 0
  2359                           
  2360                           ; 1 bytes @ 0x2C
  2361  00002D                     	ds	1
  2362  00002E                     ?___ftdiv:
  2363                           	opt stack 0
  2364  00002E                     ?___fttol:
  2365                           	opt stack 0
  2366  00002E                     Update_Setup_Screen_Cursor_Forward@field:
  2367                           	opt stack 0
  2368  00002E                     Update_Setup_Screen_Cursor_Backward@field:
  2369                           	opt stack 0
  2370  00002E                     drawChar@y:
  2371                           	opt stack 0
  2372  00002E                     drawCircle@y:
  2373                           	opt stack 0
  2374  00002E                     ___ftdiv@f1:
  2375                           	opt stack 0
  2376  00002E                     ___fttol@f1:
  2377                           	opt stack 0
  2378                           
  2379                           ; 3 bytes @ 0x2D
  2380  00002E                     	ds	1
  2381  00002F                     Update_Setup_Screen_Cursor_Forward@yinc:
  2382                           	opt stack 0
  2383  00002F                     Update_Setup_Screen_Cursor_Backward@yinc:
  2384                           	opt stack 0
  2385  00002F                     drawChar@c:
  2386                           	opt stack 0
  2387                           
  2388                           ; 1 bytes @ 0x2E
  2389  00002F                     	ds	1
  2390  000030                     Update_Setup_Screen_Cursor_Forward@xinc:
  2391                           	opt stack 0
  2392  000030                     Update_Setup_Screen_Cursor_Backward@xinc:
  2393                           	opt stack 0
  2394  000030                     drawChar@color:
  2395                           	opt stack 0
  2396                           
  2397                           ; 2 bytes @ 0x2F
  2398  000030                     	ds	1
  2399  000031                     ___ftdiv@f2:
  2400                           	opt stack 0
  2401                           
  2402                           ; 3 bytes @ 0x30
  2403  000031                     	ds	1
  2404  000032                     ??___fttol:
  2405  000032                     drawChar@bg:
  2406                           	opt stack 0
  2407                           
  2408                           ; 2 bytes @ 0x31
  2409  000032                     	ds	2
  2410  000034                     ??___ftdiv:
  2411  000034                     drawChar@size:
  2412                           	opt stack 0
  2413                           
  2414                           ; 1 bytes @ 0x33
  2415  000034                     	ds	1
  2416  000035                     drawChar@line:
  2417                           	opt stack 0
  2418                           
  2419                           ; 1 bytes @ 0x34
  2420  000035                     	ds	1
  2421  000036                     drawChar@x:
  2422                           	opt stack 0
  2423                           
  2424                           ; 1 bytes @ 0x35
  2425  000036                     	ds	1
  2426  000037                     drawChar@j:
  2427                           	opt stack 0
  2428  000037                     ___ftdiv@cntr:
  2429                           	opt stack 0
  2430  000037                     ___fttol@sign1:
  2431                           	opt stack 0
  2432                           
  2433                           ; 1 bytes @ 0x36
  2434  000037                     	ds	1
  2435  000038                     drawChar@i:
  2436                           	opt stack 0
  2437  000038                     ___ftdiv@f3:
  2438                           	opt stack 0
  2439  000038                     ___fttol@lval:
  2440                           	opt stack 0
  2441                           
  2442                           ; 4 bytes @ 0x37
  2443  000038                     	ds	1
  2444  000039                     drawtext@y:
  2445                           	opt stack 0
  2446                           
  2447                           ; 1 bytes @ 0x38
  2448  000039                     	ds	1
  2449  00003A                     drawtext@_text:
  2450                           	opt stack 0
  2451                           
  2452                           ; 2 bytes @ 0x39
  2453  00003A                     	ds	1
  2454  00003B                     ___ftdiv@exp:
  2455                           	opt stack 0
  2456                           
  2457                           ; 1 bytes @ 0x3A
  2458  00003B                     	ds	1
  2459  00003C                     ___ftdiv@sign:
  2460                           	opt stack 0
  2461  00003C                     ___fttol@exp1:
  2462                           	opt stack 0
  2463  00003C                     drawtext@color:
  2464                           	opt stack 0
  2465                           
  2466                           ; 2 bytes @ 0x3B
  2467  00003C                     	ds	1
  2468  00003D                     ??_do_update_pwm:
  2469  00003D                     ?___awmod:
  2470                           	opt stack 0
  2471  00003D                     ?_read_volt:
  2472                           	opt stack 0
  2473  00003D                     ___awmod@dividend:
  2474                           	opt stack 0
  2475                           
  2476                           ; 2 bytes @ 0x3C
  2477  00003D                     	ds	1
  2478  00003E                     drawtext@bg:
  2479                           	opt stack 0
  2480                           
  2481                           ; 2 bytes @ 0x3D
  2482  00003E                     	ds	1
  2483  00003F                     ___awmod@divisor:
  2484                           	opt stack 0
  2485                           
  2486                           ; 2 bytes @ 0x3E
  2487  00003F                     	ds	1
  2488  000040                     drawtext@size:
  2489                           	opt stack 0
  2490  000040                     do_update_pwm@dc_f:
  2491                           	opt stack 0
  2492  000040                     read_volt@volt:
  2493                           	opt stack 0
  2494                           
  2495                           ; 3 bytes @ 0x3F
  2496  000040                     	ds	1
  2497  000041                     ??_drawtext:
  2498  000041                     ___awmod@counter:
  2499                           	opt stack 0
  2500                           
  2501                           ; 1 bytes @ 0x40
  2502  000041                     	ds	1
  2503  000042                     ___awmod@sign:
  2504                           	opt stack 0
  2505                           
  2506                           ; 1 bytes @ 0x41
  2507  000042                     	ds	1
  2508  000043                     ?_dec_2_bcd:
  2509                           	opt stack 0
  2510  000043                     ?_fround:
  2511                           	opt stack 0
  2512  000043                     ?_scale:
  2513                           	opt stack 0
  2514  000043                     do_update_pwm@duty_cycle:
  2515                           	opt stack 0
  2516  000043                     drawtext@x:
  2517                           	opt stack 0
  2518  000043                     read_volt@nStep:
  2519                           	opt stack 0
  2520                           
  2521                           ; 2 bytes @ 0x42
  2522  000043                     	ds	1
  2523  000044                     do_update_pwm@dc_I:
  2524                           	opt stack 0
  2525  000044                     drawtext@textsize:
  2526                           	opt stack 0
  2527                           
  2528                           ; 2 bytes @ 0x43
  2529  000044                     	ds	1
  2530  000045                     ??_dec_2_bcd:
  2531                           
  2532                           ; 0 bytes @ 0x44
  2533  000045                     	ds	1
  2534  000046                     drawtext@i:
  2535                           	opt stack 0
  2536  000046                     _fround$3326:
  2537                           	opt stack 0
  2538  000046                     _scale$3327:
  2539                           	opt stack 0
  2540                           
  2541                           ; 3 bytes @ 0x45
  2542  000046                     	ds	1
  2543  000047                     dec_2_bcd@bcd:
  2544                           	opt stack 0
  2545                           
  2546                           ; 2 bytes @ 0x46
  2547  000047                     	ds	1
  2548  000048                     drawtext@cursor_y:
  2549                           	opt stack 0
  2550                           
  2551                           ; 1 bytes @ 0x47
  2552  000048                     	ds	1
  2553  000049                     dec_2_bcd@dec:
  2554                           	opt stack 0
  2555  000049                     drawtext@cursor_x:
  2556                           	opt stack 0
  2557  000049                     scale@scl:
  2558                           	opt stack 0
  2559  000049                     _fround$3325:
  2560                           	opt stack 0
  2561                           
  2562                           ; 3 bytes @ 0x48
  2563  000049                     	ds	1
  2564  00004A                     ??_Update_Screen:
  2565  00004A                     DS3231_Write_Time@Device:
  2566                           	opt stack 0
  2567  00004A                     DS3231_Write_Alarm_Time@Device:
  2568                           	opt stack 0
  2569  00004A                     Update_Setup_Fan_Screen@dc_char1:
  2570                           	opt stack 0
  2571                           
  2572                           ; 1 bytes @ 0x49
  2573  00004A                     	ds	1
  2574  00004B                     DS3231_Write_Time@Address:
  2575                           	opt stack 0
  2576  00004B                     DS3231_Write_Alarm_Time@Address:
  2577                           	opt stack 0
  2578  00004B                     Update_Setup_Fan_Screen@dc_char2:
  2579                           	opt stack 0
  2580                           
  2581                           ; 1 bytes @ 0x4A
  2582  00004B                     	ds	1
  2583  00004C                     Update_Setup_Fan_Screen@dc_char3:
  2584                           	opt stack 0
  2585  00004C                     fround@prec:
  2586                           	opt stack 0
  2587  00004C                     Update_Screen@neg_tempF:
  2588                           	opt stack 0
  2589                           
  2590                           ; 2 bytes @ 0x4B
  2591  00004C                     	ds	1
  2592  00004D                     ?___ftadd:
  2593                           	opt stack 0
  2594  00004D                     ___ftadd@f1:
  2595                           	opt stack 0
  2596                           
  2597                           ; 3 bytes @ 0x4C
  2598  00004D                     	ds	3
  2599  000050                     ___ftadd@f2:
  2600                           	opt stack 0
  2601                           
  2602                           ; 3 bytes @ 0x4F
  2603  000050                     	ds	3
  2604  000053                     ??___ftadd:
  2605                           
  2606                           ; 0 bytes @ 0x52
  2607  000053                     	ds	3
  2608  000056                     ___ftadd@sign:
  2609                           	opt stack 0
  2610                           
  2611                           ; 1 bytes @ 0x55
  2612  000056                     	ds	1
  2613  000057                     ___ftadd@exp2:
  2614                           	opt stack 0
  2615                           
  2616                           ; 1 bytes @ 0x56
  2617  000057                     	ds	1
  2618  000058                     ___ftadd@exp1:
  2619                           	opt stack 0
  2620                           
  2621                           ; 1 bytes @ 0x57
  2622  000058                     	ds	1
  2623  000059                     ?_get_duty_cycle:
  2624                           	opt stack 0
  2625  000059                     ?___ftsub:
  2626                           	opt stack 0
  2627  000059                     get_duty_cycle@temp:
  2628                           	opt stack 0
  2629  000059                     ___ftsub@f1:
  2630                           	opt stack 0
  2631                           
  2632                           ; 3 bytes @ 0x58
  2633  000059                     	ds	3
  2634  00005C                     get_duty_cycle@set_temp:
  2635                           	opt stack 0
  2636  00005C                     ___ftsub@f2:
  2637                           	opt stack 0
  2638                           
  2639                           ; 3 bytes @ 0x5B
  2640  00005C                     	ds	3
  2641  00005F                     
  2642                           ; 0 bytes @ 0x5E
  2643  00005F                     	ds	1
  2644  000060                     tblptru	equ	0xFF8
  2645                           tblptrh	equ	0xFF7
  2646                           tblptrl	equ	0xFF6
  2647                           tablat	equ	0xFF5
  2648                           postinc0	equ	0xFEE
  2649                           wreg	equ	0xFE8
  2650                           postdec1	equ	0xFE5
  2651                           fsr1l	equ	0xFE1
  2652                           
  2653                           ; 0 bytes @ 0x5F
  2654 ;;
  2655 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2656 ;;
  2657 ;; *************** function _main *****************
  2658 ;; Defined at:
  2659 ;;		line 131 in file "Main_S4.c"
  2660 ;; Parameters:    Size  Location     Type
  2661 ;;		None
  2662 ;; Auto vars:     Size  Location     Type
  2663 ;;  j               2   25[BANK0 ] int 
  2664 ;; Return value:  Size  Location     Type
  2665 ;;		None               void
  2666 ;; Registers used:
  2667 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2668 ;; Tracked objects:
  2669 ;;		On entry : 0/0
  2670 ;;		On exit  : 0/0
  2671 ;;		Unchanged: 0/0
  2672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2674 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2675 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2676 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2677 ;;Total ram usage:        3 bytes
  2678 ;; Hardware stack levels required when called:   13
  2679 ;; This function calls:
  2680 ;;		_Activate_Buzzer
  2681 ;;		_DS1621_Read_Temp
  2682 ;;		_DS3231_Read_Alarm_Time
  2683 ;;		_DS3231_Read_Time
  2684 ;;		_DS3231_Setup_Time
  2685 ;;		_DS3231_Turn_Off_Alarm
  2686 ;;		_Deactivate_Buzzer
  2687 ;;		_Do_Beep_Bad
  2688 ;;		_Do_Beep_Good
  2689 ;;		_Do_Init
  2690 ;;		_Do_Setup_Alarm_Time
  2691 ;;		_Do_Setup_Time
  2692 ;;		_Initialize_Screen
  2693 ;;		_Monitor_Fan
  2694 ;;		_Set_ADCON0
  2695 ;;		_Set_RPM_RGB
  2696 ;;		_Setup_Temp_Fan
  2697 ;;		_Toggle_Fan_Monitor
  2698 ;;		_Update_Screen
  2699 ;;		_Wait_One_Sec
  2700 ;;		___awdiv
  2701 ;;		___awtoft
  2702 ;;		___lbtoft
  2703 ;;		___wmul
  2704 ;;		_get_RPM
  2705 ;;		_get_duty_cycle
  2706 ;;		_printf
  2707 ;;		_read_volt
  2708 ;;		_test_alarm
  2709 ;; This function is called by:
  2710 ;;		Startup code after reset
  2711 ;; This function uses a non-reentrant model
  2712 ;;
  2713                           
  2714                           	psect	text0
  2715  0019E4                     __ptext0:
  2716                           	opt stack 0
  2717  0019E4                     _main:
  2718                           	opt stack 18
  2719                           
  2720                           ;Main_S4.c: 133: Do_Init();
  2721                           
  2722                           ; BSR set to: 0
  2723                           ;incstack = 0
  2724  0019E4  ECB3  F024         	call	_Do_Init	;wreg free
  2725                           
  2726                           ;Main_S4.c: 134: Initialize_Screen();
  2727  0019E8  EC32  F00B         	call	_Initialize_Screen	;wreg free
  2728                           
  2729                           ;Main_S4.c: 135: DS3231_Turn_Off_Alarm();
  2730  0019EC  EC5B  F026         	call	_DS3231_Turn_Off_Alarm	;wreg free
  2731                           
  2732                           ;Main_S4.c: 136: DS3231_Read_Alarm_Time();
  2733  0019F0  ECAD  F026         	call	_DS3231_Read_Alarm_Time	;wreg free
  2734                           
  2735                           ;Main_S4.c: 137: DS3231_Setup_Time();
  2736  0019F4  EC4B  F024         	call	_DS3231_Setup_Time	;wreg free
  2737                           
  2738                           ;Main_S4.c: 138: tempSecond = 0xff;
  2739  0019F8  0100               	movlb	0	; () banked
  2740  0019FA  69B7               	setf	_tempSecond& (0+255),b
  2741  0019FC  D000               	goto	l11430
  2742  0019FE                     l11430:
  2743                           
  2744                           ; BSR set to: 0
  2745                           ;Main_S4.c: 141: {
  2746                           ;Main_S4.c: 142: DS3231_Read_Time();
  2747  0019FE  EC80  F024         	call	_DS3231_Read_Time	;wreg free
  2748                           
  2749                           ;Main_S4.c: 143: Set_ADCON0(1);
  2750  001A02  0E01               	movlw	1
  2751  001A04  ECC0  F02A         	call	_Set_ADCON0
  2752                           
  2753                           ;Main_S4.c: 144: if(tempSecond != second)
  2754  001A08  506C               	movf	_second,w,c
  2755  001A0A  0100               	movlb	0	; () banked
  2756  001A0C  19B7               	xorwf	_tempSecond& (0+255),w,b
  2757  001A0E  B4D8               	btfsc	status,2,c
  2758  001A10  D0C1               	goto	l11462
  2759                           
  2760                           ; BSR set to: 0
  2761                           ;Main_S4.c: 145: {
  2762                           ;Main_S4.c: 146: tempSecond = second;
  2763  001A12  C06C  F0B7         	movff	_second,_tempSecond
  2764                           
  2765                           ; BSR set to: 0
  2766                           ;Main_S4.c: 147: rpm = get_RPM();
  2767  001A16  EC63  F027         	call	_get_RPM	;wreg free
  2768  001A1A  C01F  F097         	movff	?_get_RPM,_rpm
  2769  001A1E  C020  F098         	movff	?_get_RPM+1,_rpm+1
  2770                           
  2771                           ;Main_S4.c: 149: volt = read_volt();
  2772  001A22  ECE6  F024         	call	_read_volt	;wreg free
  2773  001A26  C03D  F084         	movff	?_read_volt,_volt
  2774  001A2A  C03E  F085         	movff	?_read_volt+1,_volt+1
  2775  001A2E  C03F  F086         	movff	?_read_volt+2,_volt+2
  2776                           
  2777                           ;Main_S4.c: 150: DS1621_tempC = DS1621_Read_Temp();
  2778  001A32  ECFD  F027         	call	_DS1621_Read_Temp	;wreg free
  2779  001A36  C014  F089         	movff	?_DS1621_Read_Temp,_DS1621_tempC
  2780  001A3A  C015  F08A         	movff	?_DS1621_Read_Temp+1,_DS1621_tempC+1
  2781                           
  2782                           ;Main_S4.c: 151: DS1621_tempF = (DS1621_tempC * 9 / 5) + 32;
  2783  001A3E  C089  F011         	movff	_DS1621_tempC,___wmul@multiplier
  2784  001A42  C08A  F012         	movff	_DS1621_tempC+1,___wmul@multiplier+1
  2785  001A46  0E00               	movlw	0
  2786  001A48  6E14               	movwf	___wmul@multiplicand+1,c
  2787  001A4A  0E09               	movlw	9
  2788  001A4C  6E13               	movwf	___wmul@multiplicand,c
  2789  001A4E  EC90  F028         	call	___wmul	;wreg free
  2790  001A52  C011  F017         	movff	?___wmul,___awdiv@dividend
  2791  001A56  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  2792  001A5A  0E00               	movlw	0
  2793  001A5C  6E1A               	movwf	___awdiv@divisor+1,c
  2794  001A5E  0E05               	movlw	5
  2795  001A60  6E19               	movwf	___awdiv@divisor,c
  2796  001A62  ECB6  F021         	call	___awdiv	;wreg free
  2797  001A66  0E20               	movlw	32
  2798  001A68  2417               	addwf	?___awdiv,w,c
  2799  001A6A  0100               	movlb	0	; () banked
  2800  001A6C  6F8B               	movwf	_DS1621_tempF& (0+255),b
  2801  001A6E  0E00               	movlw	0
  2802  001A70  2018               	addwfc	?___awdiv+1,w,c
  2803  001A72  0100               	movlb	0	; () banked
  2804  001A74  6F8C               	movwf	(_DS1621_tempF+1)& (0+255),b
  2805                           
  2806                           ;Main_S4.c: 152: duty_cycle = get_duty_cycle(DS1621_tempF, fan_set_temp);
  2807  001A76  C08B  F019         	movff	_DS1621_tempF,___awtoft@c
  2808  001A7A  C08C  F01A         	movff	_DS1621_tempF+1,___awtoft@c+1
  2809  001A7E  ECDF  F027         	call	___awtoft	;wreg free
  2810  001A82  C019  F059         	movff	?___awtoft,get_duty_cycle@temp
  2811  001A86  C01A  F05A         	movff	?___awtoft+1,get_duty_cycle@temp+1
  2812  001A8A  C01B  F05B         	movff	?___awtoft+2,get_duty_cycle@temp+2
  2813  001A8E  0100               	movlb	0	; () banked
  2814  001A90  51B6               	movf	_fan_set_temp& (0+255),w,b
  2815  001A92  ECB7  F028         	call	___lbtoft
  2816  001A96  C019  F05C         	movff	?___lbtoft,get_duty_cycle@set_temp
  2817  001A9A  C01A  F05D         	movff	?___lbtoft+1,get_duty_cycle@set_temp+1
  2818  001A9E  C01B  F05E         	movff	?___lbtoft+2,get_duty_cycle@set_temp+2
  2819  001AA2  EC66  F00E         	call	_get_duty_cycle	;wreg free
  2820  001AA6  5059               	movf	?_get_duty_cycle,w,c
  2821  001AA8  0100               	movlb	0	; () banked
  2822  001AAA  6FAB               	movwf	_duty_cycle& (0+255),b
  2823                           
  2824                           ; BSR set to: 0
  2825                           ;Main_S4.c: 154: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,ye
      +                          ar);
  2826  001AAC  0EA4               	movlw	low STR_1
  2827  001AAE  0100               	movlb	0	; () banked
  2828  001AB0  6FD9               	movwf	printf@f& (0+255),b
  2829  001AB2  0EFE               	movlw	high STR_1
  2830  001AB4  0100               	movlb	0	; () banked
  2831  001AB6  6FDA               	movwf	(printf@f+1)& (0+255),b
  2832  001AB8  C069  F0DB         	movff	_hour,?_printf+2
  2833  001ABC  0100               	movlb	0	; () banked
  2834  001ABE  6BDC               	clrf	(?_printf+3)& (0+255),b
  2835  001AC0  C06A  F0DD         	movff	_minute,?_printf+4
  2836  001AC4  0100               	movlb	0	; () banked
  2837  001AC6  6BDE               	clrf	(?_printf+5)& (0+255),b
  2838  001AC8  C06C  F0DF         	movff	_second,?_printf+6
  2839  001ACC  0100               	movlb	0	; () banked
  2840  001ACE  6BE0               	clrf	(?_printf+7)& (0+255),b
  2841  001AD0  C06B  F0E1         	movff	_month,?_printf+8
  2842  001AD4  0100               	movlb	0	; () banked
  2843  001AD6  6BE2               	clrf	(?_printf+9)& (0+255),b
  2844  001AD8  C068  F0E3         	movff	_day,?_printf+10
  2845  001ADC  0100               	movlb	0	; () banked
  2846  001ADE  6BE4               	clrf	(?_printf+11)& (0+255),b
  2847  001AE0  C06F  F0E5         	movff	_year,?_printf+12
  2848  001AE4  0100               	movlb	0	; () banked
  2849  001AE6  6BE6               	clrf	(?_printf+13)& (0+255),b
  2850  001AE8  EC0E  F000         	call	_printf	;wreg free
  2851                           
  2852                           ;Main_S4.c: 155: printf (" Temp = %d C = %d F ", DS1621_tempC, DS1621_tempF);
  2853  001AEC  0EEE               	movlw	low STR_2
  2854  001AEE  0100               	movlb	0	; () banked
  2855  001AF0  6FD9               	movwf	printf@f& (0+255),b
  2856  001AF2  0EFE               	movlw	high STR_2
  2857  001AF4  0100               	movlb	0	; () banked
  2858  001AF6  6FDA               	movwf	(printf@f+1)& (0+255),b
  2859  001AF8  C089  F0DB         	movff	_DS1621_tempC,?_printf+2
  2860  001AFC  C08A  F0DC         	movff	_DS1621_tempC+1,?_printf+3
  2861  001B00  C08B  F0DD         	movff	_DS1621_tempF,?_printf+4
  2862  001B04  C08C  F0DE         	movff	_DS1621_tempF+1,?_printf+5
  2863  001B08  EC0E  F000         	call	_printf	;wreg free
  2864                           
  2865                           ;Main_S4.c: 156: printf ("alarm = %d match = %d", PORTAbits.RA4, MATCHED);
  2866  001B0C  0ED8               	movlw	low STR_3
  2867  001B0E  0100               	movlb	0	; () banked
  2868  001B10  6FD9               	movwf	printf@f& (0+255),b
  2869  001B12  0EFE               	movlw	high STR_3
  2870  001B14  0100               	movlb	0	; () banked
  2871  001B16  6FDA               	movwf	(printf@f+1)& (0+255),b
  2872  001B18  A880               	btfss	3968,4,c	;volatile
  2873  001B1A  D004               	goto	u10730
  2874  001B1C  0100               	movlb	0	; () banked
  2875  001B1E  6BF1               	clrf	??_main& (0+255),b
  2876  001B20  2BF1               	incf	??_main& (0+255),f,b
  2877  001B22  D002               	goto	u10738
  2878  001B24                     u10730:
  2879  001B24  0100               	movlb	0	; () banked
  2880  001B26  6BF1               	clrf	??_main& (0+255),b
  2881  001B28                     u10738:
  2882  001B28  0100               	movlb	0	; () banked
  2883  001B2A  51F1               	movf	??_main& (0+255),w,b
  2884  001B2C  0100               	movlb	0	; () banked
  2885  001B2E  6FDB               	movwf	(?_printf+2)& (0+255),b
  2886  001B30  6BDC               	clrf	(?_printf+3)& (0+255),b
  2887  001B32  C08D  F0DD         	movff	_MATCHED,?_printf+4
  2888  001B36  C08E  F0DE         	movff	_MATCHED+1,?_printf+5
  2889  001B3A  EC0E  F000         	call	_printf	;wreg free
  2890                           
  2891                           ;Main_S4.c: 157: printf ("RPM = %d  dc = %d ", rpm, duty_cycle);
  2892  001B3E  0E03               	movlw	low STR_4
  2893  001B40  0100               	movlb	0	; () banked
  2894  001B42  6FD9               	movwf	printf@f& (0+255),b
  2895  001B44  0EFF               	movlw	high STR_4
  2896  001B46  0100               	movlb	0	; () banked
  2897  001B48  6FDA               	movwf	(printf@f+1)& (0+255),b
  2898  001B4A  C097  F0DB         	movff	_rpm,?_printf+2
  2899  001B4E  C098  F0DC         	movff	_rpm+1,?_printf+3
  2900  001B52  C0AB  F0DD         	movff	_duty_cycle,?_printf+4
  2901  001B56  0100               	movlb	0	; () banked
  2902  001B58  6BDE               	clrf	(?_printf+5)& (0+255),b
  2903  001B5A  EC0E  F000         	call	_printf	;wreg free
  2904                           
  2905                           ;Main_S4.c: 158: printf ("Volt = %f \r\n", volt);
  2906  001B5E  0E82               	movlw	low STR_5
  2907  001B60  0100               	movlb	0	; () banked
  2908  001B62  6FD9               	movwf	printf@f& (0+255),b
  2909  001B64  0EFF               	movlw	high STR_5
  2910  001B66  0100               	movlb	0	; () banked
  2911  001B68  6FDA               	movwf	(printf@f+1)& (0+255),b
  2912  001B6A  C084  F0DB         	movff	_volt,?_printf+2
  2913  001B6E  C085  F0DC         	movff	_volt+1,?_printf+3
  2914  001B72  C086  F0DD         	movff	_volt+2,?_printf+4
  2915  001B76  EC0E  F000         	call	_printf	;wreg free
  2916                           
  2917                           ;Main_S4.c: 160: Set_RPM_RGB(rpm);
  2918  001B7A  C097  F01F         	movff	_rpm,Set_RPM_RGB@rpm
  2919  001B7E  C098  F020         	movff	_rpm+1,Set_RPM_RGB@rpm+1
  2920  001B82  ECD3  F026         	call	_Set_RPM_RGB	;wreg free
  2921                           
  2922                           ;Main_S4.c: 161: Monitor_Fan();
  2923  001B86  ECCA  F028         	call	_Monitor_Fan	;wreg free
  2924                           
  2925                           ;Main_S4.c: 162: test_alarm();
  2926  001B8A  EC08  F017         	call	_test_alarm	;wreg free
  2927                           
  2928                           ;Main_S4.c: 163: Update_Screen();
  2929  001B8E  EC30  F006         	call	_Update_Screen	;wreg free
  2930  001B92  D000               	goto	l11462
  2931  001B94                     l11462:
  2932                           
  2933                           ;Main_S4.c: 164: }
  2934                           ;Main_S4.c: 166: if(nec_ok == 1)
  2935  001B94  0100               	movlb	0	; () banked
  2936  001B96  0595               	decf	_nec_ok& (0+255),w,b
  2937  001B98  0100               	movlb	0	; () banked
  2938  001B9A  1196               	iorwf	(_nec_ok+1)& (0+255),w,b
  2939  001B9C  A4D8               	btfss	status,2,c
  2940  001B9E  D072               	goto	l11518
  2941                           
  2942                           ; BSR set to: 0
  2943                           ;Main_S4.c: 167: {
  2944                           ;Main_S4.c: 168: nec_ok = 0;
  2945  001BA0  0E00               	movlw	0
  2946  001BA2  0100               	movlb	0	; () banked
  2947  001BA4  6F96               	movwf	(_nec_ok+1)& (0+255),b
  2948  001BA6  0E00               	movlw	0
  2949  001BA8  6F95               	movwf	_nec_ok& (0+255),b
  2950                           
  2951                           ; BSR set to: 0
  2952                           ;Main_S4.c: 170: INTCONbits.INT0IE = 1;
  2953  001BAA  88F2               	bsf	intcon,4,c	;volatile
  2954                           
  2955                           ; BSR set to: 0
  2956                           ;Main_S4.c: 171: INTCON2bits.INTEDG0 = 0;
  2957  001BAC  9CF1               	bcf	intcon2,6,c	;volatile
  2958                           
  2959                           ; BSR set to: 0
  2960                           ;Main_S4.c: 172: found = 0xff;
  2961  001BAE  0100               	movlb	0	; () banked
  2962  001BB0  69AC               	setf	_found& (0+255),b
  2963                           
  2964                           ;Main_S4.c: 174: for (int j=0; j< 21; j++)
  2965  001BB2  0E00               	movlw	0
  2966  001BB4  0100               	movlb	0	; () banked
  2967  001BB6  6FF3               	movwf	(main@j+1)& (0+255),b
  2968  001BB8  0E00               	movlw	0
  2969  001BBA  6FF2               	movwf	main@j& (0+255),b
  2970  001BBC                     l11472:
  2971                           
  2972                           ; BSR set to: 0
  2973  001BBC  0100               	movlb	0	; () banked
  2974  001BBE  BFF3               	btfsc	(main@j+1)& (0+255),7,b
  2975  001BC0  D00A               	goto	l11476
  2976  001BC2  0100               	movlb	0	; () banked
  2977  001BC4  51F3               	movf	(main@j+1)& (0+255),w,b
  2978  001BC6  E121               	bnz	l11486
  2979  001BC8  0E15               	movlw	21
  2980  001BCA  0100               	movlb	0	; () banked
  2981  001BCC  5DF2               	subwf	main@j& (0+255),w,b
  2982  001BCE  B0D8               	btfsc	status,0,c
  2983  001BD0  D01C               	goto	l11486
  2984  001BD2  D001               	goto	l11476
  2985                           
  2986                           ; BSR set to: 0
  2987  001BD4  D01A               	goto	l11486
  2988  001BD6                     l11476:
  2989                           
  2990                           ; BSR set to: 0
  2991                           ;Main_S4.c: 175: {
  2992                           ;Main_S4.c: 176: if (Nec_Button == array1[j])
  2993  001BD6  0E26               	movlw	low _array1
  2994  001BD8  0100               	movlb	0	; () banked
  2995  001BDA  25F2               	addwf	main@j& (0+255),w,b
  2996  001BDC  6ED9               	movwf	fsr2l,c
  2997  001BDE  0E01               	movlw	high _array1
  2998  001BE0  0100               	movlb	0	; () banked
  2999  001BE2  21F3               	addwfc	(main@j+1)& (0+255),w,b
  3000  001BE4  6EDA               	movwf	fsr2h,c
  3001  001BE6  0100               	movlb	0	; () banked
  3002  001BE8  51A1               	movf	_Nec_Button& (0+255),w,b
  3003  001BEA  18DE               	xorwf	postinc2,w,c
  3004  001BEC  A4D8               	btfss	status,2,c
  3005  001BEE  D008               	goto	l11482
  3006                           
  3007                           ; BSR set to: 0
  3008                           ;Main_S4.c: 177: {
  3009                           ;Main_S4.c: 178: found = j;
  3010  001BF0  C0F2  F0AC         	movff	main@j,_found
  3011                           
  3012                           ; BSR set to: 0
  3013                           ;Main_S4.c: 179: j = 21;
  3014  001BF4  0E00               	movlw	0
  3015  001BF6  0100               	movlb	0	; () banked
  3016  001BF8  6FF3               	movwf	(main@j+1)& (0+255),b
  3017  001BFA  0E15               	movlw	21
  3018  001BFC  6FF2               	movwf	main@j& (0+255),b
  3019  001BFE  D000               	goto	l11482
  3020  001C00                     l11482:
  3021                           
  3022                           ; BSR set to: 0
  3023  001C00  0100               	movlb	0	; () banked
  3024  001C02  4BF2               	infsnz	main@j& (0+255),f,b
  3025  001C04  2BF3               	incf	(main@j+1)& (0+255),f,b
  3026  001C06  D7DA               	goto	l11472
  3027                           
  3028                           ; BSR set to: 0
  3029  001C08  D000               	goto	l11486
  3030  001C0A                     l11486:
  3031                           
  3032                           ; BSR set to: 0
  3033                           ;Main_S4.c: 180: }
  3034                           ;Main_S4.c: 181: }
  3035                           ;Main_S4.c: 183: if (found == 0xff)
  3036  001C0A  0100               	movlb	0	; () banked
  3037  001C0C  29AC               	incf	_found& (0+255),w,b
  3038  001C0E  A4D8               	btfss	status,2,c
  3039  001C10  D009               	goto	l340
  3040                           
  3041                           ; BSR set to: 0
  3042                           ;Main_S4.c: 184: {
  3043                           ;Main_S4.c: 185: printf ("Cannot find button \r\n");
  3044  001C12  0EC2               	movlw	low STR_6
  3045  001C14  0100               	movlb	0	; () banked
  3046  001C16  6FD9               	movwf	printf@f& (0+255),b
  3047  001C18  0EFE               	movlw	high STR_6
  3048  001C1A  0100               	movlb	0	; () banked
  3049  001C1C  6FDA               	movwf	(printf@f+1)& (0+255),b
  3050  001C1E  EC0E  F000         	call	_printf	;wreg free
  3051                           
  3052                           ;Main_S4.c: 187: }
  3053  001C22  D030               	goto	l11518
  3054  001C24                     l340:
  3055                           
  3056                           ; BSR set to: 0
  3057                           ;Main_S4.c: 188: else
  3058                           ;Main_S4.c: 189: {
  3059                           ;Main_S4.c: 191: PORTCbits.RC4 = 1;
  3060  001C24  8882               	bsf	3970,4,c	;volatile
  3061                           
  3062                           ; BSR set to: 0
  3063                           ;Main_S4.c: 193: Activate_Buzzer();
  3064  001C26  EC3E  F02A         	call	_Activate_Buzzer	;wreg free
  3065                           
  3066                           ;Main_S4.c: 195: Wait_One_Sec();
  3067  001C2A  EC73  F029         	call	_Wait_One_Sec	;wreg free
  3068                           
  3069                           ;Main_S4.c: 197: Deactivate_Buzzer();
  3070  001C2E  ECF6  F02A         	call	_Deactivate_Buzzer	;wreg free
  3071                           
  3072                           ;Main_S4.c: 199: PORTCbits.RC4 = 0;
  3073  001C32  9882               	bcf	3970,4,c	;volatile
  3074                           
  3075                           ;Main_S4.c: 203: switch (found)
  3076  001C34  D017               	goto	l11516
  3077  001C36                     l11498:
  3078                           
  3079                           ;Main_S4.c: 207: Do_Beep_Good();
  3080  001C36  ECD8  F029         	call	_Do_Beep_Good	;wreg free
  3081                           
  3082                           ;Main_S4.c: 208: Do_Setup_Time();
  3083  001C3A  EC32  F019         	call	_Do_Setup_Time	;wreg free
  3084                           
  3085                           ;Main_S4.c: 209: break;
  3086  001C3E  D022               	goto	l11518
  3087  001C40                     l11502:
  3088                           
  3089                           ;Main_S4.c: 212: Do_Beep_Good();
  3090  001C40  ECD8  F029         	call	_Do_Beep_Good	;wreg free
  3091                           
  3092                           ;Main_S4.c: 213: Do_Setup_Alarm_Time();
  3093  001C44  ECC4  F01A         	call	_Do_Setup_Alarm_Time	;wreg free
  3094                           
  3095                           ;Main_S4.c: 214: break;
  3096  001C48  D01D               	goto	l11518
  3097  001C4A                     l11506:
  3098                           
  3099                           ;Main_S4.c: 217: Do_Beep_Good();
  3100  001C4A  ECD8  F029         	call	_Do_Beep_Good	;wreg free
  3101                           
  3102                           ;Main_S4.c: 218: Setup_Temp_Fan();
  3103  001C4E  ECCA  F020         	call	_Setup_Temp_Fan	;wreg free
  3104                           
  3105                           ;Main_S4.c: 219: break;
  3106  001C52  D018               	goto	l11518
  3107  001C54                     l11510:
  3108                           
  3109                           ;Main_S4.c: 222: Do_Beep_Good();
  3110  001C54  ECD8  F029         	call	_Do_Beep_Good	;wreg free
  3111                           
  3112                           ;Main_S4.c: 223: Toggle_Fan_Monitor();
  3113  001C58  EC02  F02B         	call	_Toggle_Fan_Monitor	;wreg free
  3114                           
  3115                           ;Main_S4.c: 224: break;
  3116  001C5C  D013               	goto	l11518
  3117  001C5E                     l11512:
  3118                           
  3119                           ;Main_S4.c: 227: Do_Beep_Bad();
  3120  001C5E  ECE5  F029         	call	_Do_Beep_Bad	;wreg free
  3121                           
  3122                           ;Main_S4.c: 229: }
  3123                           
  3124                           ;Main_S4.c: 228: break;
  3125  001C62  D010               	goto	l11518
  3126  001C64                     l11516:
  3127  001C64  0100               	movlb	0	; () banked
  3128  001C66  51AC               	movf	_found& (0+255),w,b
  3129                           
  3130                           ; Switch size 1, requested type "space"
  3131                           ; Number of cases is 4, Range of values is 5 to 14
  3132                           ; switch strategies available:
  3133                           ; Name         Instructions Cycles
  3134                           ; simple_byte           13     7 (average)
  3135                           ;	Chosen strategy is simple_byte
  3136  001C68  0A05               	xorlw	5	; case 5
  3137  001C6A  B4D8               	btfsc	status,2,c
  3138  001C6C  D7F3               	goto	l11510
  3139  001C6E  0A09               	xorlw	9	; case 12
  3140  001C70  B4D8               	btfsc	status,2,c
  3141  001C72  D7E1               	goto	l11498
  3142  001C74  0A01               	xorlw	1	; case 13
  3143  001C76  B4D8               	btfsc	status,2,c
  3144  001C78  D7E3               	goto	l11502
  3145  001C7A  0A03               	xorlw	3	; case 14
  3146  001C7C  B4D8               	btfsc	status,2,c
  3147  001C7E  D7E5               	goto	l11506
  3148  001C80  D7EE               	goto	l11512
  3149                           
  3150                           ; BSR set to: 0
  3151                           
  3152                           ; BSR set to: 0
  3153  001C82  D000               	goto	l11518
  3154  001C84                     l11518:
  3155                           
  3156                           ;Main_S4.c: 230: }
  3157                           ;Main_S4.c: 231: }
  3158                           ;Main_S4.c: 233: if (INT1_flag == 1)
  3159  001C84  0100               	movlb	0	; () banked
  3160  001C86  059C               	decf	_INT1_flag& (0+255),w,b
  3161  001C88  A4D8               	btfss	status,2,c
  3162  001C8A  D006               	goto	l11524
  3163                           
  3164                           ; BSR set to: 0
  3165                           ;Main_S4.c: 234: {
  3166                           ;Main_S4.c: 235: INT1_flag = 0;
  3167  001C8C  0E00               	movlw	0
  3168  001C8E  0100               	movlb	0	; () banked
  3169  001C90  6F9C               	movwf	_INT1_flag& (0+255),b
  3170                           
  3171                           ; BSR set to: 0
  3172                           ;Main_S4.c: 236: Toggle_Fan_Monitor();
  3173  001C92  EC02  F02B         	call	_Toggle_Fan_Monitor	;wreg free
  3174  001C96  D000               	goto	l11524
  3175  001C98                     l11524:
  3176                           
  3177                           ;Main_S4.c: 237: }
  3178                           ;Main_S4.c: 239: if (INT2_flag == 1)
  3179  001C98  0100               	movlb	0	; () banked
  3180  001C9A  059D               	decf	_INT2_flag& (0+255),w,b
  3181  001C9C  A4D8               	btfss	status,2,c
  3182  001C9E  D6AF               	goto	l11430
  3183                           
  3184                           ; BSR set to: 0
  3185                           ;Main_S4.c: 240: {
  3186                           ;Main_S4.c: 241: INT2_flag = 0;
  3187  001CA0  0E00               	movlw	0
  3188  001CA2  0100               	movlb	0	; () banked
  3189  001CA4  6F9D               	movwf	_INT2_flag& (0+255),b
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;Main_S4.c: 242: if (ALARMEN == 0) ALARMEN = 1;
  3193  001CA6  0100               	movlb	0	; () banked
  3194  001CA8  5187               	movf	_ALARMEN& (0+255),w,b
  3195  001CAA  0100               	movlb	0	; () banked
  3196  001CAC  1188               	iorwf	(_ALARMEN+1)& (0+255),w,b
  3197  001CAE  A4D8               	btfss	status,2,c
  3198  001CB0  D005               	goto	l11532
  3199                           
  3200                           ; BSR set to: 0
  3201  001CB2  0E00               	movlw	0
  3202  001CB4  0100               	movlb	0	; () banked
  3203  001CB6  6F88               	movwf	(_ALARMEN+1)& (0+255),b
  3204  001CB8  0E01               	movlw	1
  3205  001CBA  D004               	goto	L1
  3206  001CBC                     l11532:
  3207                           
  3208                           ; BSR set to: 0
  3209                           ;Main_S4.c: 243: else ALARMEN = 0;
  3210  001CBC  0E00               	movlw	0
  3211  001CBE  0100               	movlb	0	; () banked
  3212  001CC0  6F88               	movwf	(_ALARMEN+1)& (0+255),b
  3213  001CC2  0E00               	movlw	0
  3214  001CC4                     L1:
  3215  001CC4  6F87               	movwf	_ALARMEN& (0+255),b
  3216                           
  3217                           ; BSR set to: 0
  3218                           
  3219                           ; BSR set to: 0
  3220                           
  3221                           ; BSR set to: 0
  3222  001CC6  D69B               	goto	l11430
  3223                           
  3224                           ; BSR set to: 0
  3225                           
  3226                           ; BSR set to: 0
  3227  001CC8  EF0C  F000         	goto	start
  3228  001CCC                     __end_of_main:
  3229                           	opt stack 0
  3230                           tblptru	equ	0xFF8
  3231                           tblptrh	equ	0xFF7
  3232                           tblptrl	equ	0xFF6
  3233                           tablat	equ	0xFF5
  3234                           intcon	equ	0xFF2
  3235                           intcon2	equ	0xFF1
  3236                           postinc0	equ	0xFEE
  3237                           wreg	equ	0xFE8
  3238                           postdec1	equ	0xFE5
  3239                           fsr1l	equ	0xFE1
  3240                           postinc2	equ	0xFDE
  3241                           fsr2h	equ	0xFDA
  3242                           fsr2l	equ	0xFD9
  3243                           status	equ	0xFD8
  3244                           
  3245 ;; *************** function _test_alarm *****************
  3246 ;; Defined at:
  3247 ;;		line 250 in file "Main_S4.c"
  3248 ;; Parameters:    Size  Location     Type
  3249 ;;		None
  3250 ;; Auto vars:     Size  Location     Type
  3251 ;;		None
  3252 ;; Return value:  Size  Location     Type
  3253 ;;		None               void
  3254 ;; Registers used:
  3255 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3256 ;; Tracked objects:
  3257 ;;		On entry : 0/0
  3258 ;;		On exit  : 0/0
  3259 ;;		Unchanged: 0/0
  3260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3264 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3265 ;;Total ram usage:        0 bytes
  3266 ;; Hardware stack levels used:    1
  3267 ;; Hardware stack levels required when called:    9
  3268 ;; This function calls:
  3269 ;;		_Activate_Buzzer_500Hz
  3270 ;;		_DS3231_Turn_Off_Alarm
  3271 ;;		_DS3231_Turn_On_Alarm
  3272 ;;		_Deactivate_Buzzer
  3273 ;;		_Set_RGB_Color
  3274 ;;		___ftge
  3275 ;;		_do_update_pwm
  3276 ;;		_read_volt
  3277 ;; This function is called by:
  3278 ;;		_main
  3279 ;; This function uses a non-reentrant model
  3280 ;;
  3281                           
  3282                           	psect	text1
  3283  002E10                     __ptext1:
  3284                           	opt stack 0
  3285  002E10                     _test_alarm:
  3286                           	opt stack 21
  3287                           
  3288                           ;Main_S4.c: 258: if(alarm_mode == 0 && ALARMEN == 1)
  3289                           
  3290                           ; BSR set to: 0
  3291                           ;incstack = 0
  3292  002E10  0100               	movlb	0	; () banked
  3293  002E12  518F               	movf	_alarm_mode& (0+255),w,b
  3294  002E14  0100               	movlb	0	; () banked
  3295  002E16  1190               	iorwf	(_alarm_mode+1)& (0+255),w,b
  3296  002E18  A4D8               	btfss	status,2,c
  3297  002E1A  D00E               	goto	l11030
  3298                           
  3299                           ; BSR set to: 0
  3300  002E1C  0100               	movlb	0	; () banked
  3301  002E1E  0587               	decf	_ALARMEN& (0+255),w,b
  3302  002E20  0100               	movlb	0	; () banked
  3303  002E22  1188               	iorwf	(_ALARMEN+1)& (0+255),w,b
  3304  002E24  A4D8               	btfss	status,2,c
  3305  002E26  D008               	goto	l11030
  3306                           
  3307                           ; BSR set to: 0
  3308                           ;Main_S4.c: 259: {
  3309                           ;Main_S4.c: 260: DS3231_Turn_On_Alarm();
  3310  002E28  EC32  F026         	call	_DS3231_Turn_On_Alarm	;wreg free
  3311                           
  3312                           ;Main_S4.c: 261: alarm_mode = 1;
  3313  002E2C  0E00               	movlw	0
  3314  002E2E  0100               	movlb	0	; () banked
  3315  002E30  6F90               	movwf	(_alarm_mode+1)& (0+255),b
  3316  002E32  0E01               	movlw	1
  3317  002E34  6F8F               	movwf	_alarm_mode& (0+255),b
  3318  002E36  D000               	goto	l11030
  3319  002E38                     l11030:
  3320                           
  3321                           ; BSR set to: 0
  3322                           ;Main_S4.c: 262: }
  3323                           ;Main_S4.c: 264: if(alarm_mode == 1 && ALARMEN == 0)
  3324  002E38  0100               	movlb	0	; () banked
  3325  002E3A  058F               	decf	_alarm_mode& (0+255),w,b
  3326  002E3C  0100               	movlb	0	; () banked
  3327  002E3E  1190               	iorwf	(_alarm_mode+1)& (0+255),w,b
  3328  002E40  A4D8               	btfss	status,2,c
  3329  002E42  D013               	goto	l11040
  3330                           
  3331                           ; BSR set to: 0
  3332  002E44  0100               	movlb	0	; () banked
  3333  002E46  5187               	movf	_ALARMEN& (0+255),w,b
  3334  002E48  0100               	movlb	0	; () banked
  3335  002E4A  1188               	iorwf	(_ALARMEN+1)& (0+255),w,b
  3336  002E4C  A4D8               	btfss	status,2,c
  3337  002E4E  D00D               	goto	l11040
  3338                           
  3339                           ; BSR set to: 0
  3340                           ;Main_S4.c: 265: {
  3341                           ;Main_S4.c: 266: DS3231_Turn_Off_Alarm();
  3342  002E50  EC5B  F026         	call	_DS3231_Turn_Off_Alarm	;wreg free
  3343                           
  3344                           ;Main_S4.c: 267: PORTD = (PORTD & 0xF8) | 0x00;
  3345  002E54  5083               	movf	3971,w,c	;volatile
  3346  002E56  0BF8               	andlw	248
  3347  002E58  6E83               	movwf	3971,c	;volatile
  3348                           
  3349                           ;Main_S4.c: 268: alarm_mode = 0;
  3350  002E5A  0E00               	movlw	0
  3351  002E5C  0100               	movlb	0	; () banked
  3352  002E5E  6F90               	movwf	(_alarm_mode+1)& (0+255),b
  3353  002E60  0E00               	movlw	0
  3354  002E62  6F8F               	movwf	_alarm_mode& (0+255),b
  3355                           
  3356                           ;Main_S4.c: 269: Deactivate_Buzzer();
  3357  002E64  ECF6  F02A         	call	_Deactivate_Buzzer	;wreg free
  3358  002E68  D000               	goto	l11040
  3359  002E6A                     l11040:
  3360                           
  3361                           ;Main_S4.c: 270: }
  3362                           ;Main_S4.c: 273: if(alarm_mode == 1 && ALARMEN == 1)
  3363  002E6A  0100               	movlb	0	; () banked
  3364  002E6C  058F               	decf	_alarm_mode& (0+255),w,b
  3365  002E6E  0100               	movlb	0	; () banked
  3366  002E70  1190               	iorwf	(_alarm_mode+1)& (0+255),w,b
  3367  002E72  A4D8               	btfss	status,2,c
  3368  002E74  D05A               	goto	l365
  3369                           
  3370                           ; BSR set to: 0
  3371  002E76  0100               	movlb	0	; () banked
  3372  002E78  0587               	decf	_ALARMEN& (0+255),w,b
  3373  002E7A  0100               	movlb	0	; () banked
  3374  002E7C  1188               	iorwf	(_ALARMEN+1)& (0+255),w,b
  3375  002E7E  A4D8               	btfss	status,2,c
  3376  002E80  D054               	goto	l365
  3377                           
  3378                           ; BSR set to: 0
  3379                           ;Main_S4.c: 274: {
  3380                           ;Main_S4.c: 275: if(PORTAbits.RA4 == 0)
  3381  002E82  B880               	btfsc	3968,4,c	;volatile
  3382  002E84  D008               	goto	l11050
  3383                           
  3384                           ; BSR set to: 0
  3385                           ;Main_S4.c: 276: {
  3386                           ;Main_S4.c: 277: MATCHED = 1;
  3387  002E86  0E00               	movlw	0
  3388  002E88  0100               	movlb	0	; () banked
  3389  002E8A  6F8E               	movwf	(_MATCHED+1)& (0+255),b
  3390  002E8C  0E01               	movlw	1
  3391  002E8E  6F8D               	movwf	_MATCHED& (0+255),b
  3392                           
  3393                           ; BSR set to: 0
  3394                           ;Main_S4.c: 278: Activate_Buzzer_500Hz();
  3395  002E90  EC59  F02A         	call	_Activate_Buzzer_500Hz	;wreg free
  3396  002E94  D000               	goto	l11050
  3397  002E96                     l11050:
  3398                           
  3399                           ;Main_S4.c: 279: }
  3400                           ;Main_S4.c: 280: if (MATCHED == 1)
  3401  002E96  0100               	movlb	0	; () banked
  3402  002E98  058D               	decf	_MATCHED& (0+255),w,b
  3403  002E9A  0100               	movlb	0	; () banked
  3404  002E9C  118E               	iorwf	(_MATCHED+1)& (0+255),w,b
  3405  002E9E  A4D8               	btfss	status,2,c
  3406  002EA0  D044               	goto	l365
  3407                           
  3408                           ; BSR set to: 0
  3409                           ;Main_S4.c: 281: {
  3410                           ;Main_S4.c: 282: Set_RGB_Color(color++);
  3411  002EA2  0100               	movlb	0	; () banked
  3412  002EA4  5191               	movf	_color& (0+255),w,b
  3413  002EA6  ECBA  F02A         	call	_Set_RGB_Color
  3414  002EAA  0100               	movlb	0	; () banked
  3415  002EAC  4B91               	infsnz	_color& (0+255),f,b
  3416  002EAE  2B92               	incf	(_color+1)& (0+255),f,b
  3417                           
  3418                           ; BSR set to: 0
  3419                           ;Main_S4.c: 283: if(color > 7) color = 0;
  3420  002EB0  0100               	movlb	0	; () banked
  3421  002EB2  BF92               	btfsc	(_color+1)& (0+255),7,b
  3422  002EB4  D00E               	goto	l11060
  3423  002EB6  0100               	movlb	0	; () banked
  3424  002EB8  5192               	movf	(_color+1)& (0+255),w,b
  3425  002EBA  E105               	bnz	u10270
  3426  002EBC  0E08               	movlw	8
  3427  002EBE  0100               	movlb	0	; () banked
  3428  002EC0  5D91               	subwf	_color& (0+255),w,b
  3429  002EC2  A0D8               	btfss	status,0,c
  3430  002EC4  D006               	goto	l11060
  3431  002EC6                     u10270:
  3432                           
  3433                           ; BSR set to: 0
  3434  002EC6  0E00               	movlw	0
  3435  002EC8  0100               	movlb	0	; () banked
  3436  002ECA  6F92               	movwf	(_color+1)& (0+255),b
  3437  002ECC  0E00               	movlw	0
  3438  002ECE  6F91               	movwf	_color& (0+255),b
  3439  002ED0  D000               	goto	l11060
  3440  002ED2                     l11060:
  3441                           
  3442                           ; BSR set to: 0
  3443                           ;Main_S4.c: 284: volt = read_volt();
  3444  002ED2  ECE6  F024         	call	_read_volt	;wreg free
  3445  002ED6  C03D  F084         	movff	?_read_volt,_volt
  3446  002EDA  C03E  F085         	movff	?_read_volt+1,_volt+1
  3447  002EDE  C03F  F086         	movff	?_read_volt+2,_volt+2
  3448                           
  3449                           ;Main_S4.c: 285: if(volt > 3)
  3450  002EE2  0E00               	movlw	0
  3451  002EE4  6E11               	movwf	___ftge@ff1,c
  3452  002EE6  0E40               	movlw	64
  3453  002EE8  6E12               	movwf	___ftge@ff1+1,c
  3454  002EEA  0E40               	movlw	64
  3455  002EEC  6E13               	movwf	___ftge@ff1+2,c
  3456  002EEE  C084  F014         	movff	_volt,___ftge@ff2
  3457  002EF2  C085  F015         	movff	_volt+1,___ftge@ff2+1
  3458  002EF6  C086  F016         	movff	_volt+2,___ftge@ff2+2
  3459  002EFA  EC01  F022         	call	___ftge	;wreg free
  3460  002EFE  B0D8               	btfsc	status,0,c
  3461  002F00  D014               	goto	l365
  3462                           
  3463                           ;Main_S4.c: 286: {
  3464                           ;Main_S4.c: 287: MATCHED = 0;
  3465  002F02  0E00               	movlw	0
  3466  002F04  0100               	movlb	0	; () banked
  3467  002F06  6F8E               	movwf	(_MATCHED+1)& (0+255),b
  3468  002F08  0E00               	movlw	0
  3469  002F0A  6F8D               	movwf	_MATCHED& (0+255),b
  3470                           
  3471                           ; BSR set to: 0
  3472                           ;Main_S4.c: 288: PORTD = (PORTD & 0xF8) | 0x00;
  3473  002F0C  5083               	movf	3971,w,c	;volatile
  3474  002F0E  0BF8               	andlw	248
  3475  002F10  6E83               	movwf	3971,c	;volatile
  3476                           
  3477                           ; BSR set to: 0
  3478                           ;Main_S4.c: 289: Deactivate_Buzzer();
  3479  002F12  ECF6  F02A         	call	_Deactivate_Buzzer	;wreg free
  3480                           
  3481                           ;Main_S4.c: 290: do_update_pwm(duty_cycle);
  3482  002F16  0100               	movlb	0	; () banked
  3483  002F18  51AB               	movf	_duty_cycle& (0+255),w,b
  3484  002F1A  EC6F  F020         	call	_do_update_pwm
  3485                           
  3486                           ;Main_S4.c: 291: alarm_mode = 0;
  3487  002F1E  0E00               	movlw	0
  3488  002F20  0100               	movlb	0	; () banked
  3489  002F22  6F90               	movwf	(_alarm_mode+1)& (0+255),b
  3490  002F24  0E00               	movlw	0
  3491  002F26  6F8F               	movwf	_alarm_mode& (0+255),b
  3492                           
  3493                           ; BSR set to: 0
  3494                           
  3495                           ; BSR set to: 0
  3496  002F28  D000               	goto	l365
  3497  002F2A                     l365:
  3498  002F2A  0012               	return		;funcret
  3499  002F2C                     __end_of_test_alarm:
  3500                           	opt stack 0
  3501                           tblptru	equ	0xFF8
  3502                           tblptrh	equ	0xFF7
  3503                           tblptrl	equ	0xFF6
  3504                           tablat	equ	0xFF5
  3505                           intcon	equ	0xFF2
  3506                           intcon2	equ	0xFF1
  3507                           postinc0	equ	0xFEE
  3508                           wreg	equ	0xFE8
  3509                           postdec1	equ	0xFE5
  3510                           fsr1l	equ	0xFE1
  3511                           postinc2	equ	0xFDE
  3512                           fsr2h	equ	0xFDA
  3513                           fsr2l	equ	0xFD9
  3514                           status	equ	0xFD8
  3515                           
  3516 ;; *************** function _read_volt *****************
  3517 ;; Defined at:
  3518 ;;		line 124 in file "utils.c"
  3519 ;; Parameters:    Size  Location     Type
  3520 ;;		None
  3521 ;; Auto vars:     Size  Location     Type
  3522 ;;  volt            3   63[COMRAM] float 
  3523 ;;  nStep           2   66[COMRAM] int 
  3524 ;; Return value:  Size  Location     Type
  3525 ;;                  3   60[COMRAM] float 
  3526 ;; Registers used:
  3527 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3528 ;; Tracked objects:
  3529 ;;		On entry : 0/0
  3530 ;;		On exit  : 0/0
  3531 ;;		Unchanged: 0/0
  3532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3533 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3534 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3536 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3537 ;;Total ram usage:        8 bytes
  3538 ;; Hardware stack levels used:    1
  3539 ;; Hardware stack levels required when called:    5
  3540 ;; This function calls:
  3541 ;;		___awtoft
  3542 ;;		___ftdiv
  3543 ;;		___wmul
  3544 ;;		_get_full_ADC
  3545 ;; This function is called by:
  3546 ;;		_main
  3547 ;;		_test_alarm
  3548 ;; This function uses a non-reentrant model
  3549 ;;
  3550                           
  3551                           	psect	text2
  3552  0049CC                     __ptext2:
  3553                           	opt stack 0
  3554  0049CC                     _read_volt:
  3555                           	opt stack 24
  3556                           
  3557                           ;utils.c: 127: int nStep = get_full_ADC();
  3558                           
  3559                           ;incstack = 0
  3560  0049CC  ECA4  F028         	call	_get_full_ADC	;wreg free
  3561  0049D0  C011  F043         	movff	?_get_full_ADC,read_volt@nStep
  3562  0049D4  C012  F044         	movff	?_get_full_ADC+1,read_volt@nStep+1
  3563                           
  3564                           ;utils.c: 128: float volt = nStep * 5 /1024.0;
  3565  0049D8  C043  F011         	movff	read_volt@nStep,___wmul@multiplier
  3566  0049DC  C044  F012         	movff	read_volt@nStep+1,___wmul@multiplier+1
  3567  0049E0  0E00               	movlw	0
  3568  0049E2  6E14               	movwf	___wmul@multiplicand+1,c
  3569  0049E4  0E05               	movlw	5
  3570  0049E6  6E13               	movwf	___wmul@multiplicand,c
  3571  0049E8  EC90  F028         	call	___wmul	;wreg free
  3572  0049EC  C011  F019         	movff	?___wmul,___awtoft@c
  3573  0049F0  C012  F01A         	movff	?___wmul+1,___awtoft@c+1
  3574  0049F4  ECDF  F027         	call	___awtoft	;wreg free
  3575  0049F8  C019  F02E         	movff	?___awtoft,___ftdiv@f1
  3576  0049FC  C01A  F02F         	movff	?___awtoft+1,___ftdiv@f1+1
  3577  004A00  C01B  F030         	movff	?___awtoft+2,___ftdiv@f1+2
  3578  004A04  0E00               	movlw	0
  3579  004A06  6E31               	movwf	___ftdiv@f2,c
  3580  004A08  0E80               	movlw	128
  3581  004A0A  6E32               	movwf	___ftdiv@f2+1,c
  3582  004A0C  0E44               	movlw	68
  3583  004A0E  6E33               	movwf	___ftdiv@f2+2,c
  3584  004A10  EC97  F01D         	call	___ftdiv	;wreg free
  3585  004A14  C02E  F040         	movff	?___ftdiv,read_volt@volt
  3586  004A18  C02F  F041         	movff	?___ftdiv+1,read_volt@volt+1
  3587  004A1C  C030  F042         	movff	?___ftdiv+2,read_volt@volt+2
  3588                           
  3589                           ;utils.c: 129: return (volt);
  3590  004A20  C040  F03D         	movff	read_volt@volt,?_read_volt
  3591  004A24  C041  F03E         	movff	read_volt@volt+1,?_read_volt+1
  3592  004A28  C042  F03F         	movff	read_volt@volt+2,?_read_volt+2
  3593  004A2C  D000               	goto	l995
  3594  004A2E                     l995:
  3595  004A2E  0012               	return		;funcret
  3596  004A30                     __end_of_read_volt:
  3597                           	opt stack 0
  3598                           tblptru	equ	0xFF8
  3599                           tblptrh	equ	0xFF7
  3600                           tblptrl	equ	0xFF6
  3601                           tablat	equ	0xFF5
  3602                           intcon	equ	0xFF2
  3603                           intcon2	equ	0xFF1
  3604                           postinc0	equ	0xFEE
  3605                           wreg	equ	0xFE8
  3606                           postdec1	equ	0xFE5
  3607                           fsr1l	equ	0xFE1
  3608                           postinc2	equ	0xFDE
  3609                           fsr2h	equ	0xFDA
  3610                           fsr2l	equ	0xFD9
  3611                           status	equ	0xFD8
  3612                           
  3613 ;; *************** function _get_full_ADC *****************
  3614 ;; Defined at:
  3615 ;;		line 132 in file "utils.c"
  3616 ;; Parameters:    Size  Location     Type
  3617 ;;		None
  3618 ;; Auto vars:     Size  Location     Type
  3619 ;;  result          2   20[COMRAM] unsigned int 
  3620 ;; Return value:  Size  Location     Type
  3621 ;;                  2   16[COMRAM] unsigned int 
  3622 ;; Registers used:
  3623 ;;		wreg, status,2, status,0
  3624 ;; Tracked objects:
  3625 ;;		On entry : 0/0
  3626 ;;		On exit  : 0/0
  3627 ;;		Unchanged: 0/0
  3628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3629 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3630 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3631 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3632 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3633 ;;Total ram usage:        6 bytes
  3634 ;; Hardware stack levels used:    1
  3635 ;; Hardware stack levels required when called:    3
  3636 ;; This function calls:
  3637 ;;		Nothing
  3638 ;; This function is called by:
  3639 ;;		_read_volt
  3640 ;; This function uses a non-reentrant model
  3641 ;;
  3642                           
  3643                           	psect	text3
  3644  005148                     __ptext3:
  3645                           	opt stack 0
  3646  005148                     _get_full_ADC:
  3647                           	opt stack 25
  3648                           
  3649                           ;utils.c: 135: unsigned int result;
  3650                           ;utils.c: 136: ADCON0bits.GO=1;
  3651                           
  3652                           ;incstack = 0
  3653  005148  82C2               	bsf	4034,1,c	;volatile
  3654                           
  3655                           ;utils.c: 137: while(ADCON0bits.DONE==1);
  3656  00514A  D000               	goto	l998
  3657  00514C                     l998:
  3658  00514C  B2C2               	btfsc	4034,1,c	;volatile
  3659  00514E  D7FE               	goto	l998
  3660                           
  3661                           ;utils.c: 138: result = (ADRESH * 0x100) + ADRESL;
  3662  005150  50C4               	movf	4036,w,c	;volatile
  3663  005152  6E14               	movwf	(??_get_full_ADC+1)& (0+255),c
  3664  005154  6A13               	clrf	??_get_full_ADC& (0+255),c
  3665  005156  50C3               	movf	4035,w,c	;volatile
  3666  005158  2413               	addwf	??_get_full_ADC,w,c
  3667  00515A  6E15               	movwf	get_full_ADC@result,c
  3668  00515C  0E00               	movlw	0
  3669  00515E  2014               	addwfc	??_get_full_ADC+1,w,c
  3670  005160  6E16               	movwf	get_full_ADC@result+1,c
  3671                           
  3672                           ;utils.c: 140: return result;
  3673  005162  C015  F011         	movff	get_full_ADC@result,?_get_full_ADC
  3674  005166  C016  F012         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  3675  00516A  D000               	goto	l1001
  3676  00516C                     l1001:
  3677  00516C  0012               	return		;funcret
  3678  00516E                     __end_of_get_full_ADC:
  3679                           	opt stack 0
  3680                           tblptru	equ	0xFF8
  3681                           tblptrh	equ	0xFF7
  3682                           tblptrl	equ	0xFF6
  3683                           tablat	equ	0xFF5
  3684                           intcon	equ	0xFF2
  3685                           intcon2	equ	0xFF1
  3686                           postinc0	equ	0xFEE
  3687                           wreg	equ	0xFE8
  3688                           postdec1	equ	0xFE5
  3689                           fsr1l	equ	0xFE1
  3690                           postinc2	equ	0xFDE
  3691                           fsr2h	equ	0xFDA
  3692                           fsr2l	equ	0xFD9
  3693                           status	equ	0xFD8
  3694                           
  3695 ;; *************** function ___awtoft *****************
  3696 ;; Defined at:
  3697 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  3698 ;; Parameters:    Size  Location     Type
  3699 ;;  c               2   24[COMRAM] int 
  3700 ;; Auto vars:     Size  Location     Type
  3701 ;;  sign            1   27[COMRAM] unsigned char 
  3702 ;; Return value:  Size  Location     Type
  3703 ;;                  3   24[COMRAM] float 
  3704 ;; Registers used:
  3705 ;;		wreg, status,2, status,0, cstack
  3706 ;; Tracked objects:
  3707 ;;		On entry : 0/0
  3708 ;;		On exit  : 0/0
  3709 ;;		Unchanged: 0/0
  3710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3711 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3712 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3714 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3715 ;;Total ram usage:        4 bytes
  3716 ;; Hardware stack levels used:    1
  3717 ;; Hardware stack levels required when called:    4
  3718 ;; This function calls:
  3719 ;;		___ftpack
  3720 ;; This function is called by:
  3721 ;;		_main
  3722 ;;		_read_volt
  3723 ;; This function uses a non-reentrant model
  3724 ;;
  3725                           
  3726                           	psect	text4
  3727  004FBE                     __ptext4:
  3728                           	opt stack 0
  3729  004FBE                     ___awtoft:
  3730                           	opt stack 24
  3731                           
  3732                           ;incstack = 0
  3733  004FBE  0E00               	movlw	0
  3734  004FC0  6E1C               	movwf	___awtoft@sign,c
  3735  004FC2  AE1A               	btfss	___awtoft@c+1,7,c
  3736  004FC4  D007               	goto	l10568
  3737  004FC6  6C19               	negf	___awtoft@c,c
  3738  004FC8  1E1A               	comf	___awtoft@c+1,f,c
  3739  004FCA  B0D8               	btfsc	status,0,c
  3740  004FCC  2A1A               	incf	___awtoft@c+1,f,c
  3741  004FCE  0E01               	movlw	1
  3742  004FD0  6E1C               	movwf	___awtoft@sign,c
  3743  004FD2  D000               	goto	l10568
  3744  004FD4                     l10568:
  3745  004FD4  C019  F011         	movff	___awtoft@c,___ftpack@arg
  3746  004FD8  C01A  F012         	movff	___awtoft@c+1,___ftpack@arg+1
  3747  004FDC  6A13               	clrf	___ftpack@arg+2,c
  3748  004FDE  0E8E               	movlw	142
  3749  004FE0  6E14               	movwf	___ftpack@exp,c
  3750  004FE2  C01C  F015         	movff	___awtoft@sign,___ftpack@sign
  3751  004FE6  EC50  F01F         	call	___ftpack	;wreg free
  3752  004FEA  C011  F019         	movff	?___ftpack,?___awtoft
  3753  004FEE  C012  F01A         	movff	?___ftpack+1,?___awtoft+1
  3754  004FF2  C013  F01B         	movff	?___ftpack+2,?___awtoft+2
  3755  004FF6  D000               	goto	l1852
  3756  004FF8                     l1852:
  3757  004FF8  0012               	return		;funcret
  3758  004FFA                     __end_of___awtoft:
  3759                           	opt stack 0
  3760                           tblptru	equ	0xFF8
  3761                           tblptrh	equ	0xFF7
  3762                           tblptrl	equ	0xFF6
  3763                           tablat	equ	0xFF5
  3764                           intcon	equ	0xFF2
  3765                           intcon2	equ	0xFF1
  3766                           postinc0	equ	0xFEE
  3767                           wreg	equ	0xFE8
  3768                           postdec1	equ	0xFE5
  3769                           fsr1l	equ	0xFE1
  3770                           postinc2	equ	0xFDE
  3771                           fsr2h	equ	0xFDA
  3772                           fsr2l	equ	0xFD9
  3773                           status	equ	0xFD8
  3774                           
  3775 ;; *************** function _Set_RGB_Color *****************
  3776 ;; Defined at:
  3777 ;;		line 118 in file "utils.c"
  3778 ;; Parameters:    Size  Location     Type
  3779 ;;  color           1    wreg     unsigned char 
  3780 ;; Auto vars:     Size  Location     Type
  3781 ;;  color           1   16[COMRAM] unsigned char 
  3782 ;; Return value:  Size  Location     Type
  3783 ;;		None               void
  3784 ;; Registers used:
  3785 ;;		wreg, status,2, status,0
  3786 ;; Tracked objects:
  3787 ;;		On entry : 0/0
  3788 ;;		On exit  : 0/0
  3789 ;;		Unchanged: 0/0
  3790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3792 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3794 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3795 ;;Total ram usage:        1 bytes
  3796 ;; Hardware stack levels used:    1
  3797 ;; Hardware stack levels required when called:    3
  3798 ;; This function calls:
  3799 ;;		Nothing
  3800 ;; This function is called by:
  3801 ;;		_test_alarm
  3802 ;; This function uses a non-reentrant model
  3803 ;;
  3804                           
  3805                           	psect	text5
  3806  005574                     __ptext5:
  3807                           	opt stack 0
  3808  005574                     _Set_RGB_Color:
  3809                           	opt stack 26
  3810                           
  3811                           ;incstack = 0
  3812                           ;Set_RGB_Color@color stored from wreg
  3813  005574  6E11               	movwf	Set_RGB_Color@color,c
  3814                           
  3815                           ;utils.c: 121: PORTD = (PORTD & 0xF8) | color;
  3816  005576  5083               	movf	3971,w,c	;volatile
  3817  005578  0BF8               	andlw	248
  3818  00557A  1011               	iorwf	Set_RGB_Color@color,w,c
  3819  00557C  6E83               	movwf	3971,c	;volatile
  3820  00557E  0012               	return		;funcret
  3821  005580                     __end_of_Set_RGB_Color:
  3822                           	opt stack 0
  3823                           tblptru	equ	0xFF8
  3824                           tblptrh	equ	0xFF7
  3825                           tblptrl	equ	0xFF6
  3826                           tablat	equ	0xFF5
  3827                           intcon	equ	0xFF2
  3828                           intcon2	equ	0xFF1
  3829                           postinc0	equ	0xFEE
  3830                           wreg	equ	0xFE8
  3831                           postdec1	equ	0xFE5
  3832                           fsr1l	equ	0xFE1
  3833                           postinc2	equ	0xFDE
  3834                           fsr2h	equ	0xFDA
  3835                           fsr2l	equ	0xFD9
  3836                           status	equ	0xFD8
  3837                           
  3838 ;; *************** function _DS3231_Turn_On_Alarm *****************
  3839 ;; Defined at:
  3840 ;;		line 233 in file "I2C_Support.c"
  3841 ;; Parameters:    Size  Location     Type
  3842 ;;		None
  3843 ;; Auto vars:     Size  Location     Type
  3844 ;;  Device          1   30[COMRAM] unsigned char 
  3845 ;;  control_F       1   29[COMRAM] unsigned char 
  3846 ;;  control_E       1   28[COMRAM] unsigned char 
  3847 ;;  Address_F       1   27[COMRAM] unsigned char 
  3848 ;;  Address_E       1   26[COMRAM] unsigned char 
  3849 ;; Return value:  Size  Location     Type
  3850 ;;		None               void
  3851 ;; Registers used:
  3852 ;;		wreg, status,2, status,0, cstack
  3853 ;; Tracked objects:
  3854 ;;		On entry : 0/0
  3855 ;;		On exit  : 0/0
  3856 ;;		Unchanged: 0/0
  3857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3859 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3861 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3862 ;;Total ram usage:        5 bytes
  3863 ;; Hardware stack levels used:    1
  3864 ;; Hardware stack levels required when called:    8
  3865 ;; This function calls:
  3866 ;;		_DS3231_Init
  3867 ;;		_I2C_Write_Address_Read_One_Byte
  3868 ;;		_I2C_Write_Address_Write_One_Byte
  3869 ;; This function is called by:
  3870 ;;		_test_alarm
  3871 ;; This function uses a non-reentrant model
  3872 ;;
  3873                           
  3874                           	psect	text6
  3875  004C64                     __ptext6:
  3876                           	opt stack 0
  3877  004C64                     _DS3231_Turn_On_Alarm:
  3878                           	opt stack 21
  3879                           
  3880                           ;I2C_Support.c: 235: char Device = 0x68;
  3881                           
  3882                           ;incstack = 0
  3883  004C64  0E68               	movlw	104
  3884  004C66  6E1F               	movwf	DS3231_Turn_On_Alarm@Device,c
  3885                           
  3886                           ;I2C_Support.c: 236: char Address_E = 0x0E;
  3887  004C68  0E0E               	movlw	14
  3888  004C6A  6E1B               	movwf	DS3231_Turn_On_Alarm@Address_E,c
  3889                           
  3890                           ;I2C_Support.c: 237: char Address_F = 0x0F;
  3891  004C6C  0E0F               	movlw	15
  3892  004C6E  6E1C               	movwf	DS3231_Turn_On_Alarm@Address_F,c
  3893                           
  3894                           ;I2C_Support.c: 238: char control_E;
  3895                           ;I2C_Support.c: 239: char control_F;
  3896                           ;I2C_Support.c: 241: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
  3897  004C70  C01B  F014         	movff	DS3231_Turn_On_Alarm@Address_E,I2C_Write_Address_Read_One_Byte@Address
  3898  004C74  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  3899  004C76  EC1B  F028         	call	_I2C_Write_Address_Read_One_Byte
  3900  004C7A  6E1D               	movwf	DS3231_Turn_On_Alarm@control_E,c
  3901                           
  3902                           ;I2C_Support.c: 242: control_E = control_E | 0x01;
  3903  004C7C  501D               	movf	DS3231_Turn_On_Alarm@control_E,w,c
  3904  004C7E  0901               	iorlw	1
  3905  004C80  6E1D               	movwf	DS3231_Turn_On_Alarm@control_E,c
  3906                           
  3907                           ;I2C_Support.c: 243: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
  3908  004C82  C01B  F013         	movff	DS3231_Turn_On_Alarm@Address_E,I2C_Write_Address_Write_One_Byte@Address
  3909  004C86  C01D  F014         	movff	DS3231_Turn_On_Alarm@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
  3910  004C8A  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  3911  004C8C  EC23  F029         	call	_I2C_Write_Address_Write_One_Byte
  3912                           
  3913                           ;I2C_Support.c: 245: control_F = I2C_Write_Address_Read_One_Byte(Device, Address_F);
  3914  004C90  C01C  F014         	movff	DS3231_Turn_On_Alarm@Address_F,I2C_Write_Address_Read_One_Byte@Address
  3915  004C94  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  3916  004C96  EC1B  F028         	call	_I2C_Write_Address_Read_One_Byte
  3917  004C9A  6E1E               	movwf	DS3231_Turn_On_Alarm@control_F,c
  3918                           
  3919                           ;I2C_Support.c: 246: control_F = control_F & 0xFE;
  3920  004C9C  501E               	movf	DS3231_Turn_On_Alarm@control_F,w,c
  3921  004C9E  0BFE               	andlw	254
  3922  004CA0  6E1E               	movwf	DS3231_Turn_On_Alarm@control_F,c
  3923                           
  3924                           ;I2C_Support.c: 247: I2C_Write_Address_Write_One_Byte(Device, Address_F, control_F);
  3925  004CA2  C01C  F013         	movff	DS3231_Turn_On_Alarm@Address_F,I2C_Write_Address_Write_One_Byte@Address
  3926  004CA6  C01E  F014         	movff	DS3231_Turn_On_Alarm@control_F,I2C_Write_Address_Write_One_Byte@Data_Out
  3927  004CAA  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  3928  004CAC  EC23  F029         	call	_I2C_Write_Address_Write_One_Byte
  3929                           
  3930                           ;I2C_Support.c: 248: DS3231_Init();
  3931  004CB0  EC13  F020         	call	_DS3231_Init	;wreg free
  3932  004CB4  0012               	return		;funcret
  3933  004CB6                     __end_of_DS3231_Turn_On_Alarm:
  3934                           	opt stack 0
  3935                           tblptru	equ	0xFF8
  3936                           tblptrh	equ	0xFF7
  3937                           tblptrl	equ	0xFF6
  3938                           tablat	equ	0xFF5
  3939                           intcon	equ	0xFF2
  3940                           intcon2	equ	0xFF1
  3941                           postinc0	equ	0xFEE
  3942                           wreg	equ	0xFE8
  3943                           postdec1	equ	0xFE5
  3944                           fsr1l	equ	0xFE1
  3945                           postinc2	equ	0xFDE
  3946                           fsr2h	equ	0xFDA
  3947                           fsr2l	equ	0xFD9
  3948                           status	equ	0xFD8
  3949                           
  3950 ;; *************** function _DS3231_Turn_Off_Alarm *****************
  3951 ;; Defined at:
  3952 ;;		line 216 in file "I2C_Support.c"
  3953 ;; Parameters:    Size  Location     Type
  3954 ;;		None
  3955 ;; Auto vars:     Size  Location     Type
  3956 ;;  Device          1   30[COMRAM] unsigned char 
  3957 ;;  control_F       1   29[COMRAM] unsigned char 
  3958 ;;  control_E       1   28[COMRAM] unsigned char 
  3959 ;;  Address_F       1   27[COMRAM] unsigned char 
  3960 ;;  Address_E       1   26[COMRAM] unsigned char 
  3961 ;; Return value:  Size  Location     Type
  3962 ;;		None               void
  3963 ;; Registers used:
  3964 ;;		wreg, status,2, status,0, cstack
  3965 ;; Tracked objects:
  3966 ;;		On entry : 0/0
  3967 ;;		On exit  : 0/0
  3968 ;;		Unchanged: 0/0
  3969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3971 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3973 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3974 ;;Total ram usage:        5 bytes
  3975 ;; Hardware stack levels used:    1
  3976 ;; Hardware stack levels required when called:    8
  3977 ;; This function calls:
  3978 ;;		_DS3231_Init
  3979 ;;		_I2C_Write_Address_Read_One_Byte
  3980 ;;		_I2C_Write_Address_Write_One_Byte
  3981 ;; This function is called by:
  3982 ;;		_main
  3983 ;;		_test_alarm
  3984 ;; This function uses a non-reentrant model
  3985 ;;
  3986                           
  3987                           	psect	text7
  3988  004CB6                     __ptext7:
  3989                           	opt stack 0
  3990  004CB6                     _DS3231_Turn_Off_Alarm:
  3991                           	opt stack 21
  3992                           
  3993                           ;I2C_Support.c: 218: char Device = 0x68;
  3994                           
  3995                           ;incstack = 0
  3996  004CB6  0E68               	movlw	104
  3997  004CB8  6E1F               	movwf	DS3231_Turn_Off_Alarm@Device,c
  3998                           
  3999                           ;I2C_Support.c: 219: char Address_E = 0x0E;
  4000  004CBA  0E0E               	movlw	14
  4001  004CBC  6E1B               	movwf	DS3231_Turn_Off_Alarm@Address_E,c
  4002                           
  4003                           ;I2C_Support.c: 220: char Address_F = 0x0F;
  4004  004CBE  0E0F               	movlw	15
  4005  004CC0  6E1C               	movwf	DS3231_Turn_Off_Alarm@Address_F,c
  4006                           
  4007                           ;I2C_Support.c: 221: char control_E;
  4008                           ;I2C_Support.c: 222: char control_F;
  4009                           ;I2C_Support.c: 224: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
  4010  004CC2  C01B  F014         	movff	DS3231_Turn_Off_Alarm@Address_E,I2C_Write_Address_Read_One_Byte@Address
  4011  004CC6  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  4012  004CC8  EC1B  F028         	call	_I2C_Write_Address_Read_One_Byte
  4013  004CCC  6E1D               	movwf	DS3231_Turn_Off_Alarm@control_E,c
  4014                           
  4015                           ;I2C_Support.c: 225: control_E = control_E & 0xFE;
  4016  004CCE  501D               	movf	DS3231_Turn_Off_Alarm@control_E,w,c
  4017  004CD0  0BFE               	andlw	254
  4018  004CD2  6E1D               	movwf	DS3231_Turn_Off_Alarm@control_E,c
  4019                           
  4020                           ;I2C_Support.c: 226: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
  4021  004CD4  C01B  F013         	movff	DS3231_Turn_Off_Alarm@Address_E,I2C_Write_Address_Write_One_Byte@Address
  4022  004CD8  C01D  F014         	movff	DS3231_Turn_Off_Alarm@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
  4023  004CDC  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  4024  004CDE  EC23  F029         	call	_I2C_Write_Address_Write_One_Byte
  4025                           
  4026                           ;I2C_Support.c: 227: control_F = I2C_Write_Address_Read_One_Byte(Device, Address_F);
  4027  004CE2  C01C  F014         	movff	DS3231_Turn_Off_Alarm@Address_F,I2C_Write_Address_Read_One_Byte@Address
  4028  004CE6  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  4029  004CE8  EC1B  F028         	call	_I2C_Write_Address_Read_One_Byte
  4030  004CEC  6E1E               	movwf	DS3231_Turn_Off_Alarm@control_F,c
  4031                           
  4032                           ;I2C_Support.c: 228: control_F = control_F & 0xFE;
  4033  004CEE  501E               	movf	DS3231_Turn_Off_Alarm@control_F,w,c
  4034  004CF0  0BFE               	andlw	254
  4035  004CF2  6E1E               	movwf	DS3231_Turn_Off_Alarm@control_F,c
  4036                           
  4037                           ;I2C_Support.c: 229: I2C_Write_Address_Write_One_Byte(Device, Address_F, control_F);
  4038  004CF4  C01C  F013         	movff	DS3231_Turn_Off_Alarm@Address_F,I2C_Write_Address_Write_One_Byte@Address
  4039  004CF8  C01E  F014         	movff	DS3231_Turn_Off_Alarm@control_F,I2C_Write_Address_Write_One_Byte@Data_Out
  4040  004CFC  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  4041  004CFE  EC23  F029         	call	_I2C_Write_Address_Write_One_Byte
  4042                           
  4043                           ;I2C_Support.c: 230: DS3231_Init();
  4044  004D02  EC13  F020         	call	_DS3231_Init	;wreg free
  4045  004D06  0012               	return		;funcret
  4046  004D08                     __end_of_DS3231_Turn_Off_Alarm:
  4047                           	opt stack 0
  4048                           tblptru	equ	0xFF8
  4049                           tblptrh	equ	0xFF7
  4050                           tblptrl	equ	0xFF6
  4051                           tablat	equ	0xFF5
  4052                           intcon	equ	0xFF2
  4053                           intcon2	equ	0xFF1
  4054                           postinc0	equ	0xFEE
  4055                           wreg	equ	0xFE8
  4056                           postdec1	equ	0xFE5
  4057                           fsr1l	equ	0xFE1
  4058                           postinc2	equ	0xFDE
  4059                           fsr2h	equ	0xFDA
  4060                           fsr2l	equ	0xFD9
  4061                           status	equ	0xFD8
  4062                           
  4063 ;; *************** function _DS3231_Init *****************
  4064 ;; Defined at:
  4065 ;;		line 155 in file "I2C_Support.c"
  4066 ;; Parameters:    Size  Location     Type
  4067 ;;		None
  4068 ;; Auto vars:     Size  Location     Type
  4069 ;;  Device          1   25[COMRAM] unsigned char 
  4070 ;;  control_E       1   24[COMRAM] unsigned char 
  4071 ;;  Address_E       1   23[COMRAM] unsigned char 
  4072 ;;  Address_7       1   22[COMRAM] unsigned char 
  4073 ;; Return value:  Size  Location     Type
  4074 ;;		None               void
  4075 ;; Registers used:
  4076 ;;		wreg, status,2, status,0, cstack
  4077 ;; Tracked objects:
  4078 ;;		On entry : 0/0
  4079 ;;		On exit  : 0/0
  4080 ;;		Unchanged: 0/0
  4081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4083 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4085 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4086 ;;Total ram usage:        4 bytes
  4087 ;; Hardware stack levels used:    1
  4088 ;; Hardware stack levels required when called:    7
  4089 ;; This function calls:
  4090 ;;		_I2C_ReStart
  4091 ;;		_I2C_Read
  4092 ;;		_I2C_Start
  4093 ;;		_I2C_Stop
  4094 ;;		_I2C_Write
  4095 ;;		_I2C_Write_Address_Read_One_Byte
  4096 ;;		_I2C_Write_Address_Write_One_Byte
  4097 ;; This function is called by:
  4098 ;;		_DS3231_Turn_Off_Alarm
  4099 ;;		_DS3231_Turn_On_Alarm
  4100 ;; This function uses a non-reentrant model
  4101 ;;
  4102                           
  4103                           	psect	text8
  4104  004026                     __ptext8:
  4105                           	opt stack 0
  4106  004026                     _DS3231_Init:
  4107                           	opt stack 21
  4108                           
  4109                           ;I2C_Support.c: 157: char Device = 0x68;
  4110                           
  4111                           ;incstack = 0
  4112  004026  0E68               	movlw	104
  4113  004028  6E1A               	movwf	DS3231_Init@Device,c
  4114                           
  4115                           ;I2C_Support.c: 158: char Address_7 = 0x07;
  4116  00402A  0E07               	movlw	7
  4117  00402C  6E17               	movwf	DS3231_Init@Address_7,c
  4118                           
  4119                           ;I2C_Support.c: 159: char Address_E = 0x0E;
  4120  00402E  0E0E               	movlw	14
  4121  004030  6E18               	movwf	DS3231_Init@Address_E,c
  4122                           
  4123                           ;I2C_Support.c: 160: char control_E;
  4124                           ;I2C_Support.c: 162: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
  4125  004032  C018  F014         	movff	DS3231_Init@Address_E,I2C_Write_Address_Read_One_Byte@Address
  4126  004036  501A               	movf	DS3231_Init@Device,w,c
  4127  004038  EC1B  F028         	call	_I2C_Write_Address_Read_One_Byte
  4128  00403C  6E19               	movwf	DS3231_Init@control_E,c
  4129                           
  4130                           ;I2C_Support.c: 163: control_E = control_E & 0x01;
  4131  00403E  5019               	movf	DS3231_Init@control_E,w,c
  4132  004040  0B01               	andlw	1
  4133  004042  6E19               	movwf	DS3231_Init@control_E,c
  4134                           
  4135                           ;I2C_Support.c: 164: control_E = control_E | 0x25;
  4136  004044  5019               	movf	DS3231_Init@control_E,w,c
  4137  004046  0925               	iorlw	37
  4138  004048  6E19               	movwf	DS3231_Init@control_E,c
  4139                           
  4140                           ;I2C_Support.c: 165: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
  4141  00404A  C018  F013         	movff	DS3231_Init@Address_E,I2C_Write_Address_Write_One_Byte@Address
  4142  00404E  C019  F014         	movff	DS3231_Init@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
  4143  004052  501A               	movf	DS3231_Init@Device,w,c
  4144  004054  EC23  F029         	call	_I2C_Write_Address_Write_One_Byte
  4145                           
  4146                           ;I2C_Support.c: 166: I2C_Start();
  4147  004058  EC6B  F02A         	call	_I2C_Start	;wreg free
  4148                           
  4149                           ;I2C_Support.c: 167: I2C_Write((Device << 1) | 0);
  4150  00405C  501A               	movf	DS3231_Init@Device,w,c
  4151  00405E  241A               	addwf	DS3231_Init@Device,w,c
  4152  004060  ECC0  F027         	call	_I2C_Write
  4153                           
  4154                           ;I2C_Support.c: 168: I2C_Write(Address_7);
  4155  004064  5017               	movf	DS3231_Init@Address_7,w,c
  4156  004066  ECC0  F027         	call	_I2C_Write
  4157                           
  4158                           ;I2C_Support.c: 169: I2C_ReStart();
  4159  00406A  EC0B  F02A         	call	_I2C_ReStart	;wreg free
  4160                           
  4161                           ;I2C_Support.c: 170: I2C_Write((Device << 1) | 1);
  4162  00406E  80D8               	bsf	status,0,c
  4163  004070  341A               	rlcf	DS3231_Init@Device,w,c
  4164  004072  ECC0  F027         	call	_I2C_Write
  4165                           
  4166                           ;I2C_Support.c: 171: alarm_second = I2C_Read(1);
  4167  004076  0E01               	movlw	1
  4168  004078  EC1D  F027         	call	_I2C_Read
  4169  00407C  6E67               	movwf	_alarm_second,c
  4170                           
  4171                           ;I2C_Support.c: 172: alarm_minute = I2C_Read(1);
  4172  00407E  0E01               	movlw	1
  4173  004080  EC1D  F027         	call	_I2C_Read
  4174  004084  6E66               	movwf	_alarm_minute,c
  4175                           
  4176                           ;I2C_Support.c: 173: alarm_hour = I2C_Read(1);
  4177  004086  0E01               	movlw	1
  4178  004088  EC1D  F027         	call	_I2C_Read
  4179  00408C  6E65               	movwf	_alarm_hour,c
  4180                           
  4181                           ;I2C_Support.c: 174: alarm_date = I2C_Read(0);
  4182  00408E  0E00               	movlw	0
  4183  004090  EC1D  F027         	call	_I2C_Read
  4184  004094  6E64               	movwf	_alarm_date,c
  4185                           
  4186                           ;I2C_Support.c: 176: alarm_second = alarm_second & 0x7f;
  4187  004096  5067               	movf	_alarm_second,w,c
  4188  004098  0B7F               	andlw	127
  4189  00409A  6E67               	movwf	_alarm_second,c
  4190                           
  4191                           ;I2C_Support.c: 177: alarm_minute = alarm_minute & 0x7f;
  4192  00409C  5066               	movf	_alarm_minute,w,c
  4193  00409E  0B7F               	andlw	127
  4194  0040A0  6E66               	movwf	_alarm_minute,c
  4195                           
  4196                           ;I2C_Support.c: 178: alarm_hour = alarm_hour & 0x7f;
  4197  0040A2  5065               	movf	_alarm_hour,w,c
  4198  0040A4  0B7F               	andlw	127
  4199  0040A6  6E65               	movwf	_alarm_hour,c
  4200                           
  4201                           ;I2C_Support.c: 179: alarm_date = alarm_date | 0x80;
  4202  0040A8  5064               	movf	_alarm_date,w,c
  4203  0040AA  0980               	iorlw	128
  4204  0040AC  6E64               	movwf	_alarm_date,c
  4205                           
  4206                           ;I2C_Support.c: 181: I2C_Start();
  4207  0040AE  EC6B  F02A         	call	_I2C_Start	;wreg free
  4208                           
  4209                           ;I2C_Support.c: 182: I2C_Write((Device << 1) | 0);
  4210  0040B2  501A               	movf	DS3231_Init@Device,w,c
  4211  0040B4  241A               	addwf	DS3231_Init@Device,w,c
  4212  0040B6  ECC0  F027         	call	_I2C_Write
  4213                           
  4214                           ;I2C_Support.c: 183: I2C_Write(Address_7);
  4215  0040BA  5017               	movf	DS3231_Init@Address_7,w,c
  4216  0040BC  ECC0  F027         	call	_I2C_Write
  4217                           
  4218                           ;I2C_Support.c: 185: I2C_Write(alarm_second);
  4219  0040C0  5067               	movf	_alarm_second,w,c
  4220  0040C2  ECC0  F027         	call	_I2C_Write
  4221                           
  4222                           ;I2C_Support.c: 186: I2C_Write(alarm_minute);
  4223  0040C6  5066               	movf	_alarm_minute,w,c
  4224  0040C8  ECC0  F027         	call	_I2C_Write
  4225                           
  4226                           ;I2C_Support.c: 187: I2C_Write(alarm_hour);
  4227  0040CC  5065               	movf	_alarm_hour,w,c
  4228  0040CE  ECC0  F027         	call	_I2C_Write
  4229                           
  4230                           ;I2C_Support.c: 188: I2C_Write(alarm_date);
  4231  0040D2  5064               	movf	_alarm_date,w,c
  4232  0040D4  ECC0  F027         	call	_I2C_Write
  4233                           
  4234                           ;I2C_Support.c: 189: I2C_Stop();
  4235  0040D8  EC62  F02A         	call	_I2C_Stop	;wreg free
  4236  0040DC  0012               	return		;funcret
  4237  0040DE                     __end_of_DS3231_Init:
  4238                           	opt stack 0
  4239                           tblptru	equ	0xFF8
  4240                           tblptrh	equ	0xFF7
  4241                           tblptrl	equ	0xFF6
  4242                           tablat	equ	0xFF5
  4243                           intcon	equ	0xFF2
  4244                           intcon2	equ	0xFF1
  4245                           postinc0	equ	0xFEE
  4246                           wreg	equ	0xFE8
  4247                           postdec1	equ	0xFE5
  4248                           fsr1l	equ	0xFE1
  4249                           postinc2	equ	0xFDE
  4250                           fsr2h	equ	0xFDA
  4251                           fsr2l	equ	0xFD9
  4252                           status	equ	0xFD8
  4253                           
  4254 ;; *************** function _I2C_Write_Address_Write_One_Byte *****************
  4255 ;; Defined at:
  4256 ;;		line 131 in file "I2C_Soft.c"
  4257 ;; Parameters:    Size  Location     Type
  4258 ;;  Device          1    wreg     unsigned char 
  4259 ;;  Address         1   18[COMRAM] unsigned char 
  4260 ;;  Data_Out        1   19[COMRAM] unsigned char 
  4261 ;; Auto vars:     Size  Location     Type
  4262 ;;  Device          1   20[COMRAM] unsigned char 
  4263 ;; Return value:  Size  Location     Type
  4264 ;;		None               void
  4265 ;; Registers used:
  4266 ;;		wreg, status,2, status,0, cstack
  4267 ;; Tracked objects:
  4268 ;;		On entry : 0/0
  4269 ;;		On exit  : 0/0
  4270 ;;		Unchanged: 0/0
  4271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4272 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4273 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4275 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4276 ;;Total ram usage:        3 bytes
  4277 ;; Hardware stack levels used:    1
  4278 ;; Hardware stack levels required when called:    5
  4279 ;; This function calls:
  4280 ;;		_I2C_Start
  4281 ;;		_I2C_Stop
  4282 ;;		_I2C_Write
  4283 ;; This function is called by:
  4284 ;;		_DS3231_Init
  4285 ;;		_DS3231_Turn_Off_Alarm
  4286 ;;		_DS3231_Turn_On_Alarm
  4287 ;; This function uses a non-reentrant model
  4288 ;;
  4289                           
  4290                           	psect	text9
  4291  005246                     __ptext9:
  4292                           	opt stack 0
  4293  005246                     _I2C_Write_Address_Write_One_Byte:
  4294                           	opt stack 23
  4295                           
  4296                           ;incstack = 0
  4297                           ;I2C_Write_Address_Write_One_Byte@Device stored from wreg
  4298  005246  6E15               	movwf	I2C_Write_Address_Write_One_Byte@Device,c
  4299                           
  4300                           ;I2C_Soft.c: 133: I2C_Start();
  4301  005248  EC6B  F02A         	call	_I2C_Start	;wreg free
  4302                           
  4303                           ;I2C_Soft.c: 134: I2C_Write((Device << 1) | 0);
  4304  00524C  5015               	movf	I2C_Write_Address_Write_One_Byte@Device,w,c
  4305  00524E  2415               	addwf	I2C_Write_Address_Write_One_Byte@Device,w,c
  4306  005250  ECC0  F027         	call	_I2C_Write
  4307                           
  4308                           ;I2C_Soft.c: 135: I2C_Write(Address);
  4309  005254  5013               	movf	I2C_Write_Address_Write_One_Byte@Address,w,c
  4310  005256  ECC0  F027         	call	_I2C_Write
  4311                           
  4312                           ;I2C_Soft.c: 136: I2C_Write(Data_Out);
  4313  00525A  5014               	movf	I2C_Write_Address_Write_One_Byte@Data_Out,w,c
  4314  00525C  ECC0  F027         	call	_I2C_Write
  4315                           
  4316                           ;I2C_Soft.c: 137: I2C_Stop();
  4317  005260  EC62  F02A         	call	_I2C_Stop	;wreg free
  4318  005264  0012               	return		;funcret
  4319  005266                     __end_of_I2C_Write_Address_Write_One_Byte:
  4320                           	opt stack 0
  4321                           tblptru	equ	0xFF8
  4322                           tblptrh	equ	0xFF7
  4323                           tblptrl	equ	0xFF6
  4324                           tablat	equ	0xFF5
  4325                           intcon	equ	0xFF2
  4326                           intcon2	equ	0xFF1
  4327                           postinc0	equ	0xFEE
  4328                           wreg	equ	0xFE8
  4329                           postdec1	equ	0xFE5
  4330                           fsr1l	equ	0xFE1
  4331                           postinc2	equ	0xFDE
  4332                           fsr2h	equ	0xFDA
  4333                           fsr2l	equ	0xFD9
  4334                           status	equ	0xFD8
  4335                           
  4336 ;; *************** function _I2C_Write_Address_Read_One_Byte *****************
  4337 ;; Defined at:
  4338 ;;		line 118 in file "I2C_Soft.c"
  4339 ;; Parameters:    Size  Location     Type
  4340 ;;  Device          1    wreg     unsigned char 
  4341 ;;  Address         1   19[COMRAM] unsigned char 
  4342 ;; Auto vars:     Size  Location     Type
  4343 ;;  Device          1   21[COMRAM] unsigned char 
  4344 ;;  Data_Ret        1   20[COMRAM] unsigned char 
  4345 ;; Return value:  Size  Location     Type
  4346 ;;                  1    wreg      unsigned char 
  4347 ;; Registers used:
  4348 ;;		wreg, status,2, status,0, cstack
  4349 ;; Tracked objects:
  4350 ;;		On entry : 0/0
  4351 ;;		On exit  : 0/0
  4352 ;;		Unchanged: 0/0
  4353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4354 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4355 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4357 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4358 ;;Total ram usage:        3 bytes
  4359 ;; Hardware stack levels used:    1
  4360 ;; Hardware stack levels required when called:    6
  4361 ;; This function calls:
  4362 ;;		_I2C_ReStart
  4363 ;;		_I2C_Read
  4364 ;;		_I2C_Start
  4365 ;;		_I2C_Stop
  4366 ;;		_I2C_Write
  4367 ;; This function is called by:
  4368 ;;		_DS3231_Init
  4369 ;;		_DS3231_Turn_Off_Alarm
  4370 ;;		_DS3231_Turn_On_Alarm
  4371 ;; This function uses a non-reentrant model
  4372 ;;
  4373                           
  4374                           	psect	text10
  4375  005036                     __ptext10:
  4376                           	opt stack 0
  4377  005036                     _I2C_Write_Address_Read_One_Byte:
  4378                           	opt stack 22
  4379                           
  4380                           ;incstack = 0
  4381                           ;I2C_Write_Address_Read_One_Byte@Device stored from wreg
  4382  005036  6E16               	movwf	I2C_Write_Address_Read_One_Byte@Device,c
  4383                           
  4384                           ;I2C_Soft.c: 120: char Data_Ret;
  4385                           ;I2C_Soft.c: 121: I2C_Start();
  4386  005038  EC6B  F02A         	call	_I2C_Start	;wreg free
  4387                           
  4388                           ;I2C_Soft.c: 122: I2C_Write((Device << 1) | 0);
  4389  00503C  5016               	movf	I2C_Write_Address_Read_One_Byte@Device,w,c
  4390  00503E  2416               	addwf	I2C_Write_Address_Read_One_Byte@Device,w,c
  4391  005040  ECC0  F027         	call	_I2C_Write
  4392                           
  4393                           ;I2C_Soft.c: 123: I2C_Write(Address);
  4394  005044  5014               	movf	I2C_Write_Address_Read_One_Byte@Address,w,c
  4395  005046  ECC0  F027         	call	_I2C_Write
  4396                           
  4397                           ;I2C_Soft.c: 124: I2C_ReStart();
  4398  00504A  EC0B  F02A         	call	_I2C_ReStart	;wreg free
  4399                           
  4400                           ;I2C_Soft.c: 125: I2C_Write((Device << 1) | 1);
  4401  00504E  80D8               	bsf	status,0,c
  4402  005050  3416               	rlcf	I2C_Write_Address_Read_One_Byte@Device,w,c
  4403  005052  ECC0  F027         	call	_I2C_Write
  4404                           
  4405                           ;I2C_Soft.c: 126: Data_Ret = I2C_Read(0);
  4406  005056  0E00               	movlw	0
  4407  005058  EC1D  F027         	call	_I2C_Read
  4408  00505C  6E15               	movwf	I2C_Write_Address_Read_One_Byte@Data_Ret,c
  4409                           
  4410                           ;I2C_Soft.c: 127: I2C_Stop();
  4411  00505E  EC62  F02A         	call	_I2C_Stop	;wreg free
  4412                           
  4413                           ;I2C_Soft.c: 128: return Data_Ret;
  4414  005062  5015               	movf	I2C_Write_Address_Read_One_Byte@Data_Ret,w,c
  4415  005064  D000               	goto	l1235
  4416  005066                     l1235:
  4417  005066  0012               	return		;funcret
  4418  005068                     __end_of_I2C_Write_Address_Read_One_Byte:
  4419                           	opt stack 0
  4420                           tblptru	equ	0xFF8
  4421                           tblptrh	equ	0xFF7
  4422                           tblptrl	equ	0xFF6
  4423                           tablat	equ	0xFF5
  4424                           intcon	equ	0xFF2
  4425                           intcon2	equ	0xFF1
  4426                           postinc0	equ	0xFEE
  4427                           wreg	equ	0xFE8
  4428                           postdec1	equ	0xFE5
  4429                           fsr1l	equ	0xFE1
  4430                           postinc2	equ	0xFDE
  4431                           fsr2h	equ	0xFDA
  4432                           fsr2l	equ	0xFD9
  4433                           status	equ	0xFD8
  4434                           
  4435 ;; *************** function _get_duty_cycle *****************
  4436 ;; Defined at:
  4437 ;;		line 121 in file "Setup_Fan_Temp.c"
  4438 ;; Parameters:    Size  Location     Type
  4439 ;;  temp            3   88[COMRAM] float 
  4440 ;;  set_temp        3   91[COMRAM] float 
  4441 ;; Auto vars:     Size  Location     Type
  4442 ;;  diff_temp       3    5[BANK0 ] float 
  4443 ;;  dc_float        3    2[BANK0 ] float 
  4444 ;;  dc              2    0[BANK0 ] int 
  4445 ;; Return value:  Size  Location     Type
  4446 ;;                  2   88[COMRAM] int 
  4447 ;; Registers used:
  4448 ;;		wreg, status,2, status,0, cstack
  4449 ;; Tracked objects:
  4450 ;;		On entry : 0/0
  4451 ;;		On exit  : 0/0
  4452 ;;		Unchanged: 0/0
  4453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4454 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4455 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4457 ;;      Totals:         6       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4458 ;;Total ram usage:       14 bytes
  4459 ;; Hardware stack levels used:    1
  4460 ;; Hardware stack levels required when called:    5
  4461 ;; This function calls:
  4462 ;;		___ftadd
  4463 ;;		___ftge
  4464 ;;		___ftmul
  4465 ;;		___ftneg
  4466 ;;		___fttol
  4467 ;; This function is called by:
  4468 ;;		_main
  4469 ;; This function uses a non-reentrant model
  4470 ;;
  4471                           
  4472                           	psect	text11
  4473  001CCC                     __ptext11:
  4474                           	opt stack 0
  4475  001CCC                     _get_duty_cycle:
  4476                           	opt stack 25
  4477                           
  4478                           ;Setup_Fan_Temp.c: 123: float diff_temp = set_temp - temp;
  4479                           
  4480                           ;incstack = 0
  4481  001CCC  C059  F011         	movff	get_duty_cycle@temp,___ftneg@f1
  4482  001CD0  C05A  F012         	movff	get_duty_cycle@temp+1,___ftneg@f1+1
  4483  001CD4  C05B  F013         	movff	get_duty_cycle@temp+2,___ftneg@f1+2
  4484  001CD8  ECDC  F028         	call	___ftneg	;wreg free
  4485  001CDC  C011  F04D         	movff	?___ftneg,___ftadd@f1
  4486  001CE0  C012  F04E         	movff	?___ftneg+1,___ftadd@f1+1
  4487  001CE4  C013  F04F         	movff	?___ftneg+2,___ftadd@f1+2
  4488  001CE8  C05C  F050         	movff	get_duty_cycle@set_temp,___ftadd@f2
  4489  001CEC  C05D  F051         	movff	get_duty_cycle@set_temp+1,___ftadd@f2+1
  4490  001CF0  C05E  F052         	movff	get_duty_cycle@set_temp+2,___ftadd@f2+2
  4491  001CF4  ECCB  F010         	call	___ftadd	;wreg free
  4492  001CF8  C04D  F0DE         	movff	?___ftadd,get_duty_cycle@diff_temp
  4493  001CFC  C04E  F0DF         	movff	?___ftadd+1,get_duty_cycle@diff_temp+1
  4494  001D00  C04F  F0E0         	movff	?___ftadd+2,get_duty_cycle@diff_temp+2
  4495                           
  4496                           ;Setup_Fan_Temp.c: 125: float dc_float;
  4497                           ;Setup_Fan_Temp.c: 126: int dc;
  4498                           ;Setup_Fan_Temp.c: 127: if (temp >= set_temp) dc_float = 0.00;
  4499  001D04  C059  F011         	movff	get_duty_cycle@temp,___ftge@ff1
  4500  001D08  C05A  F012         	movff	get_duty_cycle@temp+1,___ftge@ff1+1
  4501  001D0C  C05B  F013         	movff	get_duty_cycle@temp+2,___ftge@ff1+2
  4502  001D10  C05C  F014         	movff	get_duty_cycle@set_temp,___ftge@ff2
  4503  001D14  C05D  F015         	movff	get_duty_cycle@set_temp+1,___ftge@ff2+1
  4504  001D18  C05E  F016         	movff	get_duty_cycle@set_temp+2,___ftge@ff2+2
  4505  001D1C  EC01  F022         	call	___ftge	;wreg free
  4506  001D20  A0D8               	btfss	status,0,c
  4507  001D22  D00A               	goto	l10972
  4508  001D24  0E00               	movlw	0
  4509  001D26  0100               	movlb	0	; () banked
  4510  001D28  6FDB               	movwf	get_duty_cycle@dc_float& (0+255),b
  4511  001D2A  0E00               	movlw	0
  4512  001D2C  0100               	movlb	0	; () banked
  4513  001D2E  6FDC               	movwf	(get_duty_cycle@dc_float+1)& (0+255),b
  4514  001D30  0E00               	movlw	0
  4515  001D32  0100               	movlb	0	; () banked
  4516  001D34  6FDD               	movwf	(get_duty_cycle@dc_float+2)& (0+255),b
  4517  001D36  D000               	goto	l10972
  4518  001D38                     l10972:
  4519                           
  4520                           ;Setup_Fan_Temp.c: 128: if (temp < set_temp)
  4521  001D38  C059  F011         	movff	get_duty_cycle@temp,___ftge@ff1
  4522  001D3C  C05A  F012         	movff	get_duty_cycle@temp+1,___ftge@ff1+1
  4523  001D40  C05B  F013         	movff	get_duty_cycle@temp+2,___ftge@ff1+2
  4524  001D44  C05C  F014         	movff	get_duty_cycle@set_temp,___ftge@ff2
  4525  001D48  C05D  F015         	movff	get_duty_cycle@set_temp+1,___ftge@ff2+1
  4526  001D4C  C05E  F016         	movff	get_duty_cycle@set_temp+2,___ftge@ff2+2
  4527  001D50  EC01  F022         	call	___ftge	;wreg free
  4528  001D54  B0D8               	btfsc	status,0,c
  4529  001D56  D0EB               	goto	l681
  4530                           
  4531                           ;Setup_Fan_Temp.c: 129: {
  4532                           ;Setup_Fan_Temp.c: 130: if (diff_temp > 50.0) dc_float = 100.0;
  4533  001D58  0E00               	movlw	0
  4534  001D5A  6E11               	movwf	___ftge@ff1,c
  4535  001D5C  0E48               	movlw	72
  4536  001D5E  6E12               	movwf	___ftge@ff1+1,c
  4537  001D60  0E42               	movlw	66
  4538  001D62  6E13               	movwf	___ftge@ff1+2,c
  4539  001D64  C0DE  F014         	movff	get_duty_cycle@diff_temp,___ftge@ff2
  4540  001D68  C0DF  F015         	movff	get_duty_cycle@diff_temp+1,___ftge@ff2+1
  4541  001D6C  C0E0  F016         	movff	get_duty_cycle@diff_temp+2,___ftge@ff2+2
  4542  001D70  EC01  F022         	call	___ftge	;wreg free
  4543  001D74  B0D8               	btfsc	status,0,c
  4544  001D76  D00A               	goto	l10978
  4545  001D78  0E00               	movlw	0
  4546  001D7A  0100               	movlb	0	; () banked
  4547  001D7C  6FDB               	movwf	get_duty_cycle@dc_float& (0+255),b
  4548  001D7E  0EC8               	movlw	200
  4549  001D80  0100               	movlb	0	; () banked
  4550  001D82  6FDC               	movwf	(get_duty_cycle@dc_float+1)& (0+255),b
  4551  001D84  0E42               	movlw	66
  4552  001D86  0100               	movlb	0	; () banked
  4553  001D88  6FDD               	movwf	(get_duty_cycle@dc_float+2)& (0+255),b
  4554  001D8A  D000               	goto	l10978
  4555  001D8C                     l10978:
  4556                           
  4557                           ;Setup_Fan_Temp.c: 131: if (diff_temp >= 35.0 && diff_temp < 50.0) dc_float = diff_temp 
      +                          * 2.00;
  4558  001D8C  C0DE  F011         	movff	get_duty_cycle@diff_temp,___ftge@ff1
  4559  001D90  C0DF  F012         	movff	get_duty_cycle@diff_temp+1,___ftge@ff1+1
  4560  001D94  C0E0  F013         	movff	get_duty_cycle@diff_temp+2,___ftge@ff1+2
  4561  001D98  0E00               	movlw	0
  4562  001D9A  6E14               	movwf	___ftge@ff2,c
  4563  001D9C  0E0C               	movlw	12
  4564  001D9E  6E15               	movwf	___ftge@ff2+1,c
  4565  001DA0  0E42               	movlw	66
  4566  001DA2  6E16               	movwf	___ftge@ff2+2,c
  4567  001DA4  EC01  F022         	call	___ftge	;wreg free
  4568  001DA8  A0D8               	btfss	status,0,c
  4569  001DAA  D024               	goto	l683
  4570  001DAC  C0DE  F011         	movff	get_duty_cycle@diff_temp,___ftge@ff1
  4571  001DB0  C0DF  F012         	movff	get_duty_cycle@diff_temp+1,___ftge@ff1+1
  4572  001DB4  C0E0  F013         	movff	get_duty_cycle@diff_temp+2,___ftge@ff1+2
  4573  001DB8  0E00               	movlw	0
  4574  001DBA  6E14               	movwf	___ftge@ff2,c
  4575  001DBC  0E48               	movlw	72
  4576  001DBE  6E15               	movwf	___ftge@ff2+1,c
  4577  001DC0  0E42               	movlw	66
  4578  001DC2  6E16               	movwf	___ftge@ff2+2,c
  4579  001DC4  EC01  F022         	call	___ftge	;wreg free
  4580  001DC8  B0D8               	btfsc	status,0,c
  4581  001DCA  D014               	goto	l683
  4582  001DCC  C0DE  F01F         	movff	get_duty_cycle@diff_temp,___ftmul@f1
  4583  001DD0  C0DF  F020         	movff	get_duty_cycle@diff_temp+1,___ftmul@f1+1
  4584  001DD4  C0E0  F021         	movff	get_duty_cycle@diff_temp+2,___ftmul@f1+2
  4585  001DD8  0E00               	movlw	0
  4586  001DDA  6E22               	movwf	___ftmul@f2,c
  4587  001DDC  0E00               	movlw	0
  4588  001DDE  6E23               	movwf	___ftmul@f2+1,c
  4589  001DE0  0E40               	movlw	64
  4590  001DE2  6E24               	movwf	___ftmul@f2+2,c
  4591  001DE4  EC41  F01B         	call	___ftmul	;wreg free
  4592  001DE8  C01F  F0DB         	movff	?___ftmul,get_duty_cycle@dc_float
  4593  001DEC  C020  F0DC         	movff	?___ftmul+1,get_duty_cycle@dc_float+1
  4594  001DF0  C021  F0DD         	movff	?___ftmul+2,get_duty_cycle@dc_float+2
  4595  001DF4                     l683:
  4596                           
  4597                           ;Setup_Fan_Temp.c: 132: if (diff_temp >= 25.0 && diff_temp < 35.0) dc_float = diff_temp 
      +                          * 1.50;
  4598  001DF4  C0DE  F011         	movff	get_duty_cycle@diff_temp,___ftge@ff1
  4599  001DF8  C0DF  F012         	movff	get_duty_cycle@diff_temp+1,___ftge@ff1+1
  4600  001DFC  C0E0  F013         	movff	get_duty_cycle@diff_temp+2,___ftge@ff1+2
  4601  001E00  0E00               	movlw	0
  4602  001E02  6E14               	movwf	___ftge@ff2,c
  4603  001E04  0EC8               	movlw	200
  4604  001E06  6E15               	movwf	___ftge@ff2+1,c
  4605  001E08  0E41               	movlw	65
  4606  001E0A  6E16               	movwf	___ftge@ff2+2,c
  4607  001E0C  EC01  F022         	call	___ftge	;wreg free
  4608  001E10  A0D8               	btfss	status,0,c
  4609  001E12  D024               	goto	l684
  4610  001E14  C0DE  F011         	movff	get_duty_cycle@diff_temp,___ftge@ff1
  4611  001E18  C0DF  F012         	movff	get_duty_cycle@diff_temp+1,___ftge@ff1+1
  4612  001E1C  C0E0  F013         	movff	get_duty_cycle@diff_temp+2,___ftge@ff1+2
  4613  001E20  0E00               	movlw	0
  4614  001E22  6E14               	movwf	___ftge@ff2,c
  4615  001E24  0E0C               	movlw	12
  4616  001E26  6E15               	movwf	___ftge@ff2+1,c
  4617  001E28  0E42               	movlw	66
  4618  001E2A  6E16               	movwf	___ftge@ff2+2,c
  4619  001E2C  EC01  F022         	call	___ftge	;wreg free
  4620  001E30  B0D8               	btfsc	status,0,c
  4621  001E32  D014               	goto	l684
  4622  001E34  C0DE  F01F         	movff	get_duty_cycle@diff_temp,___ftmul@f1
  4623  001E38  C0DF  F020         	movff	get_duty_cycle@diff_temp+1,___ftmul@f1+1
  4624  001E3C  C0E0  F021         	movff	get_duty_cycle@diff_temp+2,___ftmul@f1+2
  4625  001E40  0E00               	movlw	0
  4626  001E42  6E22               	movwf	___ftmul@f2,c
  4627  001E44  0EC0               	movlw	192
  4628  001E46  6E23               	movwf	___ftmul@f2+1,c
  4629  001E48  0E3F               	movlw	63
  4630  001E4A  6E24               	movwf	___ftmul@f2+2,c
  4631  001E4C  EC41  F01B         	call	___ftmul	;wreg free
  4632  001E50  C01F  F0DB         	movff	?___ftmul,get_duty_cycle@dc_float
  4633  001E54  C020  F0DC         	movff	?___ftmul+1,get_duty_cycle@dc_float+1
  4634  001E58  C021  F0DD         	movff	?___ftmul+2,get_duty_cycle@dc_float+2
  4635  001E5C                     l684:
  4636                           
  4637                           ;Setup_Fan_Temp.c: 133: if (diff_temp >= 10.0 && diff_temp < 25.0) dc_float = diff_temp 
      +                          * 1.25;
  4638  001E5C  C0DE  F011         	movff	get_duty_cycle@diff_temp,___ftge@ff1
  4639  001E60  C0DF  F012         	movff	get_duty_cycle@diff_temp+1,___ftge@ff1+1
  4640  001E64  C0E0  F013         	movff	get_duty_cycle@diff_temp+2,___ftge@ff1+2
  4641  001E68  0E00               	movlw	0
  4642  001E6A  6E14               	movwf	___ftge@ff2,c
  4643  001E6C  0E20               	movlw	32
  4644  001E6E  6E15               	movwf	___ftge@ff2+1,c
  4645  001E70  0E41               	movlw	65
  4646  001E72  6E16               	movwf	___ftge@ff2+2,c
  4647  001E74  EC01  F022         	call	___ftge	;wreg free
  4648  001E78  A0D8               	btfss	status,0,c
  4649  001E7A  D024               	goto	l685
  4650  001E7C  C0DE  F011         	movff	get_duty_cycle@diff_temp,___ftge@ff1
  4651  001E80  C0DF  F012         	movff	get_duty_cycle@diff_temp+1,___ftge@ff1+1
  4652  001E84  C0E0  F013         	movff	get_duty_cycle@diff_temp+2,___ftge@ff1+2
  4653  001E88  0E00               	movlw	0
  4654  001E8A  6E14               	movwf	___ftge@ff2,c
  4655  001E8C  0EC8               	movlw	200
  4656  001E8E  6E15               	movwf	___ftge@ff2+1,c
  4657  001E90  0E41               	movlw	65
  4658  001E92  6E16               	movwf	___ftge@ff2+2,c
  4659  001E94  EC01  F022         	call	___ftge	;wreg free
  4660  001E98  B0D8               	btfsc	status,0,c
  4661  001E9A  D014               	goto	l685
  4662  001E9C  C0DE  F01F         	movff	get_duty_cycle@diff_temp,___ftmul@f1
  4663  001EA0  C0DF  F020         	movff	get_duty_cycle@diff_temp+1,___ftmul@f1+1
  4664  001EA4  C0E0  F021         	movff	get_duty_cycle@diff_temp+2,___ftmul@f1+2
  4665  001EA8  0E00               	movlw	0
  4666  001EAA  6E22               	movwf	___ftmul@f2,c
  4667  001EAC  0EA0               	movlw	160
  4668  001EAE  6E23               	movwf	___ftmul@f2+1,c
  4669  001EB0  0E3F               	movlw	63
  4670  001EB2  6E24               	movwf	___ftmul@f2+2,c
  4671  001EB4  EC41  F01B         	call	___ftmul	;wreg free
  4672  001EB8  C01F  F0DB         	movff	?___ftmul,get_duty_cycle@dc_float
  4673  001EBC  C020  F0DC         	movff	?___ftmul+1,get_duty_cycle@dc_float+1
  4674  001EC0  C021  F0DD         	movff	?___ftmul+2,get_duty_cycle@dc_float+2
  4675  001EC4                     l685:
  4676                           
  4677                           ;Setup_Fan_Temp.c: 134: if (diff_temp <= 0.00 && diff_temp < 10.0) dc_float = diff_temp 
      +                          * 1.00;
  4678  001EC4  0E00               	movlw	0
  4679  001EC6  6E11               	movwf	___ftge@ff1,c
  4680  001EC8  0E00               	movlw	0
  4681  001ECA  6E12               	movwf	___ftge@ff1+1,c
  4682  001ECC  0E00               	movlw	0
  4683  001ECE  6E13               	movwf	___ftge@ff1+2,c
  4684  001ED0  C0DE  F014         	movff	get_duty_cycle@diff_temp,___ftge@ff2
  4685  001ED4  C0DF  F015         	movff	get_duty_cycle@diff_temp+1,___ftge@ff2+1
  4686  001ED8  C0E0  F016         	movff	get_duty_cycle@diff_temp+2,___ftge@ff2+2
  4687  001EDC  EC01  F022         	call	___ftge	;wreg free
  4688  001EE0  A0D8               	btfss	status,0,c
  4689  001EE2  D025               	goto	l681
  4690  001EE4  C0DE  F011         	movff	get_duty_cycle@diff_temp,___ftge@ff1
  4691  001EE8  C0DF  F012         	movff	get_duty_cycle@diff_temp+1,___ftge@ff1+1
  4692  001EEC  C0E0  F013         	movff	get_duty_cycle@diff_temp+2,___ftge@ff1+2
  4693  001EF0  0E00               	movlw	0
  4694  001EF2  6E14               	movwf	___ftge@ff2,c
  4695  001EF4  0E20               	movlw	32
  4696  001EF6  6E15               	movwf	___ftge@ff2+1,c
  4697  001EF8  0E41               	movlw	65
  4698  001EFA  6E16               	movwf	___ftge@ff2+2,c
  4699  001EFC  EC01  F022         	call	___ftge	;wreg free
  4700  001F00  B0D8               	btfsc	status,0,c
  4701  001F02  D015               	goto	l681
  4702  001F04  C0DE  F01F         	movff	get_duty_cycle@diff_temp,___ftmul@f1
  4703  001F08  C0DF  F020         	movff	get_duty_cycle@diff_temp+1,___ftmul@f1+1
  4704  001F0C  C0E0  F021         	movff	get_duty_cycle@diff_temp+2,___ftmul@f1+2
  4705  001F10  0E00               	movlw	0
  4706  001F12  6E22               	movwf	___ftmul@f2,c
  4707  001F14  0E80               	movlw	128
  4708  001F16  6E23               	movwf	___ftmul@f2+1,c
  4709  001F18  0E3F               	movlw	63
  4710  001F1A  6E24               	movwf	___ftmul@f2+2,c
  4711  001F1C  EC41  F01B         	call	___ftmul	;wreg free
  4712  001F20  C01F  F0DB         	movff	?___ftmul,get_duty_cycle@dc_float
  4713  001F24  C020  F0DC         	movff	?___ftmul+1,get_duty_cycle@dc_float+1
  4714  001F28  C021  F0DD         	movff	?___ftmul+2,get_duty_cycle@dc_float+2
  4715  001F2C  D000               	goto	l681
  4716  001F2E                     l681:
  4717                           
  4718                           ;Setup_Fan_Temp.c: 136: }
  4719                           ;Setup_Fan_Temp.c: 137: dc = (int)dc_float;
  4720  001F2E  C0DB  F02E         	movff	get_duty_cycle@dc_float,___fttol@f1
  4721  001F32  C0DC  F02F         	movff	get_duty_cycle@dc_float+1,___fttol@f1+1
  4722  001F36  C0DD  F030         	movff	get_duty_cycle@dc_float+2,___fttol@f1+2
  4723  001F3A  EC24  F01D         	call	___fttol	;wreg free
  4724  001F3E  C02E  F0D9         	movff	?___fttol,get_duty_cycle@dc
  4725  001F42  C02F  F0DA         	movff	?___fttol+1,get_duty_cycle@dc+1
  4726                           
  4727                           ;Setup_Fan_Temp.c: 138: return dc;
  4728  001F46  C0D9  F059         	movff	get_duty_cycle@dc,?_get_duty_cycle
  4729  001F4A  C0DA  F05A         	movff	get_duty_cycle@dc+1,?_get_duty_cycle+1
  4730  001F4E  D000               	goto	l687
  4731  001F50                     l687:
  4732  001F50  0012               	return		;funcret
  4733  001F52                     __end_of_get_duty_cycle:
  4734                           	opt stack 0
  4735                           tblptru	equ	0xFF8
  4736                           tblptrh	equ	0xFF7
  4737                           tblptrl	equ	0xFF6
  4738                           tablat	equ	0xFF5
  4739                           intcon	equ	0xFF2
  4740                           intcon2	equ	0xFF1
  4741                           postinc0	equ	0xFEE
  4742                           wreg	equ	0xFE8
  4743                           postdec1	equ	0xFE5
  4744                           fsr1l	equ	0xFE1
  4745                           postinc2	equ	0xFDE
  4746                           fsr2h	equ	0xFDA
  4747                           fsr2l	equ	0xFD9
  4748                           status	equ	0xFD8
  4749                           
  4750 ;; *************** function _get_RPM *****************
  4751 ;; Defined at:
  4752 ;;		line 10 in file "Fan_Support.c"
  4753 ;; Parameters:    Size  Location     Type
  4754 ;;		None
  4755 ;; Auto vars:     Size  Location     Type
  4756 ;;  RPS             2   32[COMRAM] int 
  4757 ;; Return value:  Size  Location     Type
  4758 ;;                  2   30[COMRAM] int 
  4759 ;; Registers used:
  4760 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4761 ;; Tracked objects:
  4762 ;;		On entry : 0/0
  4763 ;;		On exit  : 0/0
  4764 ;;		Unchanged: 0/0
  4765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4766 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4767 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4769 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4770 ;;Total ram usage:        4 bytes
  4771 ;; Hardware stack levels used:    1
  4772 ;; Hardware stack levels required when called:    4
  4773 ;; This function calls:
  4774 ;;		___awdiv
  4775 ;;		___wmul
  4776 ;; This function is called by:
  4777 ;;		_main
  4778 ;; This function uses a non-reentrant model
  4779 ;;
  4780                           
  4781                           	psect	text12
  4782  004EC6                     __ptext12:
  4783                           	opt stack 0
  4784  004EC6                     _get_RPM:
  4785                           	opt stack 26
  4786                           
  4787                           ;Fan_Support.c: 12: int RPS = TMR3L / 2;
  4788                           
  4789                           ;incstack = 0
  4790  004EC6  CFB2 F017          	movff	4018,___awdiv@dividend	;volatile
  4791  004ECA  6A18               	clrf	___awdiv@dividend+1,c
  4792  004ECC  0E00               	movlw	0
  4793  004ECE  6E1A               	movwf	___awdiv@divisor+1,c
  4794  004ED0  0E02               	movlw	2
  4795  004ED2  6E19               	movwf	___awdiv@divisor,c
  4796  004ED4  ECB6  F021         	call	___awdiv	;wreg free
  4797  004ED8  C017  F021         	movff	?___awdiv,get_RPM@RPS
  4798  004EDC  C018  F022         	movff	?___awdiv+1,get_RPM@RPS+1
  4799                           
  4800                           ;Fan_Support.c: 14: TMR3L = 0;
  4801  004EE0  0E00               	movlw	0
  4802  004EE2  6EB2               	movwf	4018,c	;volatile
  4803                           
  4804                           ;Fan_Support.c: 16: return (RPS * 60);
  4805  004EE4  C021  F011         	movff	get_RPM@RPS,___wmul@multiplier
  4806  004EE8  C022  F012         	movff	get_RPM@RPS+1,___wmul@multiplier+1
  4807  004EEC  0E00               	movlw	0
  4808  004EEE  6E14               	movwf	___wmul@multiplicand+1,c
  4809  004EF0  0E3C               	movlw	60
  4810  004EF2  6E13               	movwf	___wmul@multiplicand,c
  4811  004EF4  EC90  F028         	call	___wmul	;wreg free
  4812  004EF8  C011  F01F         	movff	?___wmul,?_get_RPM
  4813  004EFC  C012  F020         	movff	?___wmul+1,?_get_RPM+1
  4814  004F00  D000               	goto	l1039
  4815  004F02                     l1039:
  4816  004F02  0012               	return		;funcret
  4817  004F04                     __end_of_get_RPM:
  4818                           	opt stack 0
  4819                           tblptru	equ	0xFF8
  4820                           tblptrh	equ	0xFF7
  4821                           tblptrl	equ	0xFF6
  4822                           tablat	equ	0xFF5
  4823                           intcon	equ	0xFF2
  4824                           intcon2	equ	0xFF1
  4825                           postinc0	equ	0xFEE
  4826                           wreg	equ	0xFE8
  4827                           postdec1	equ	0xFE5
  4828                           fsr1l	equ	0xFE1
  4829                           postinc2	equ	0xFDE
  4830                           fsr2h	equ	0xFDA
  4831                           fsr2l	equ	0xFD9
  4832                           status	equ	0xFD8
  4833                           
  4834 ;; *************** function _Update_Screen *****************
  4835 ;; Defined at:
  4836 ;;		line 76 in file "Main_Screen.c"
  4837 ;; Parameters:    Size  Location     Type
  4838 ;;		None
  4839 ;; Auto vars:     Size  Location     Type
  4840 ;;  neg_tempF       2   75[COMRAM] int 
  4841 ;; Return value:  Size  Location     Type
  4842 ;;		None               void
  4843 ;; Registers used:
  4844 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4845 ;; Tracked objects:
  4846 ;;		On entry : 0/0
  4847 ;;		On exit  : 0/0
  4848 ;;		Unchanged: 0/0
  4849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4851 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4852 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4853 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4854 ;;Total ram usage:        4 bytes
  4855 ;; Hardware stack levels used:    1
  4856 ;; Hardware stack levels required when called:   10
  4857 ;; This function calls:
  4858 ;;		___awdiv
  4859 ;;		___awmod
  4860 ;;		___ftmul
  4861 ;;		___fttol
  4862 ;;		_drawtext
  4863 ;;		_strcpy
  4864 ;; This function is called by:
  4865 ;;		_main
  4866 ;;		_Set_Alarm
  4867 ;; This function uses a non-reentrant model
  4868 ;;
  4869                           
  4870                           	psect	text13
  4871  000C60                     __ptext13:
  4872                           	opt stack 0
  4873  000C60                     _Update_Screen:
  4874                           	opt stack 20
  4875                           
  4876                           ;Main_Screen.c: 78: if ((DS1621_tempC & 0x80) == 0x80)
  4877                           
  4878                           ;incstack = 0
  4879  000C60  0100               	movlb	0	; () banked
  4880  000C62  AF89               	btfss	_DS1621_tempC& (0+255),7,b
  4881  000C64  D01E               	goto	l11080
  4882                           
  4883                           ; BSR set to: 0
  4884                           ;Main_Screen.c: 79: {
  4885                           ;Main_Screen.c: 80: tempC[0] = '-';
  4886  000C66  0E2D               	movlw	45
  4887  000C68  0100               	movlb	0	; () banked
  4888  000C6A  6FCF               	movwf	_tempC& (0+255),b
  4889                           
  4890                           ; BSR set to: 0
  4891                           ;Main_Screen.c: 81: tempC[1] = (DS1621_tempC & 0x7f)/10 + '0';
  4892  000C6C  0E7F               	movlw	127
  4893  000C6E  0100               	movlb	0	; () banked
  4894  000C70  1589               	andwf	_DS1621_tempC& (0+255),w,b
  4895  000C72  6E17               	movwf	___awdiv@dividend,c
  4896  000C74  6A18               	clrf	___awdiv@dividend+1,c
  4897  000C76  0E00               	movlw	0
  4898  000C78  6E1A               	movwf	___awdiv@divisor+1,c
  4899  000C7A  0E0A               	movlw	10
  4900  000C7C  6E19               	movwf	___awdiv@divisor,c
  4901  000C7E  ECB6  F021         	call	___awdiv	;wreg free
  4902  000C82  5017               	movf	?___awdiv,w,c
  4903  000C84  0F30               	addlw	48
  4904  000C86  0100               	movlb	0	; () banked
  4905  000C88  6FD0               	movwf	(_tempC+1)& (0+255),b
  4906                           
  4907                           ; BSR set to: 0
  4908                           ;Main_Screen.c: 82: tempC[2] = (DS1621_tempC & 0x7f)%10 + '0';
  4909  000C8A  0E7F               	movlw	127
  4910  000C8C  0100               	movlb	0	; () banked
  4911  000C8E  1589               	andwf	_DS1621_tempC& (0+255),w,b
  4912  000C90  6E3D               	movwf	___awmod@dividend,c
  4913  000C92  6A3E               	clrf	___awmod@dividend+1,c
  4914  000C94  0E00               	movlw	0
  4915  000C96  6E40               	movwf	___awmod@divisor+1,c
  4916  000C98  0E0A               	movlw	10
  4917  000C9A  6E3F               	movwf	___awmod@divisor,c
  4918  000C9C  EC1E  F023         	call	___awmod	;wreg free
  4919  000CA0  D01B               	goto	L2
  4920  000CA2                     l11080:
  4921                           
  4922                           ; BSR set to: 0
  4923                           ;Main_Screen.c: 84: else
  4924                           ;Main_Screen.c: 85: {
  4925                           ;Main_Screen.c: 86: tempC[0] = '+';
  4926  000CA2  0E2B               	movlw	43
  4927  000CA4  0100               	movlb	0	; () banked
  4928  000CA6  6FCF               	movwf	_tempC& (0+255),b
  4929                           
  4930                           ; BSR set to: 0
  4931                           ;Main_Screen.c: 87: tempC[1] = DS1621_tempC/10 + '0';
  4932  000CA8  C089  F017         	movff	_DS1621_tempC,___awdiv@dividend
  4933  000CAC  C08A  F018         	movff	_DS1621_tempC+1,___awdiv@dividend+1
  4934  000CB0  0E00               	movlw	0
  4935  000CB2  6E1A               	movwf	___awdiv@divisor+1,c
  4936  000CB4  0E0A               	movlw	10
  4937  000CB6  6E19               	movwf	___awdiv@divisor,c
  4938  000CB8  ECB6  F021         	call	___awdiv	;wreg free
  4939  000CBC  5017               	movf	?___awdiv,w,c
  4940  000CBE  0F30               	addlw	48
  4941  000CC0  0100               	movlb	0	; () banked
  4942  000CC2  6FD0               	movwf	(_tempC+1)& (0+255),b
  4943                           
  4944                           ; BSR set to: 0
  4945                           ;Main_Screen.c: 88: tempC[2] = DS1621_tempC%10 + '0';
  4946  000CC4  C089  F03D         	movff	_DS1621_tempC,___awmod@dividend
  4947  000CC8  C08A  F03E         	movff	_DS1621_tempC+1,___awmod@dividend+1
  4948  000CCC  0E00               	movlw	0
  4949  000CCE  6E40               	movwf	___awmod@divisor+1,c
  4950  000CD0  0E0A               	movlw	10
  4951  000CD2  6E3F               	movwf	___awmod@divisor,c
  4952  000CD4  EC1E  F023         	call	___awmod	;wreg free
  4953  000CD8                     L2:
  4954  000CD8  503D               	movf	?___awmod,w,c
  4955  000CDA  0F30               	addlw	48
  4956  000CDC  0100               	movlb	0	; () banked
  4957  000CDE  6FD1               	movwf	(_tempC+2)& (0+255),b
  4958  000CE0  D000               	goto	l11086
  4959  000CE2                     l11086:
  4960                           
  4961                           ; BSR set to: 0
  4962                           ;Main_Screen.c: 89: }
  4963                           ;Main_Screen.c: 91: if (DS1621_tempF < 0)
  4964  000CE2  0100               	movlb	0	; () banked
  4965  000CE4  AF8C               	btfss	(_DS1621_tempF+1)& (0+255),7,b
  4966  000CE6  D028               	goto	l11096
  4967                           
  4968                           ; BSR set to: 0
  4969                           ;Main_Screen.c: 92: {
  4970                           ;Main_Screen.c: 93: tempF[0] = '-';
  4971  000CE8  0E2D               	movlw	45
  4972  000CEA  0100               	movlb	0	; () banked
  4973  000CEC  6FD3               	movwf	_tempF& (0+255),b
  4974                           
  4975                           ; BSR set to: 0
  4976                           ;Main_Screen.c: 94: int neg_tempF = -DS1621_tempF;
  4977  000CEE  C08B  F04A         	movff	_DS1621_tempF,??_Update_Screen
  4978  000CF2  C08C  F04B         	movff	_DS1621_tempF+1,??_Update_Screen+1
  4979  000CF6  1E4A               	comf	??_Update_Screen,f,c
  4980  000CF8  1E4B               	comf	??_Update_Screen+1,f,c
  4981  000CFA  4A4A               	infsnz	??_Update_Screen,f,c
  4982  000CFC  2A4B               	incf	??_Update_Screen+1,f,c
  4983  000CFE  C04A  F04C         	movff	??_Update_Screen,Update_Screen@neg_tempF
  4984  000D02  C04B  F04D         	movff	??_Update_Screen+1,Update_Screen@neg_tempF+1
  4985                           
  4986                           ; BSR set to: 0
  4987                           ;Main_Screen.c: 95: tempF[1] = neg_tempF/10 + '0';
  4988  000D06  C04C  F017         	movff	Update_Screen@neg_tempF,___awdiv@dividend
  4989  000D0A  C04D  F018         	movff	Update_Screen@neg_tempF+1,___awdiv@dividend+1
  4990  000D0E  0E00               	movlw	0
  4991  000D10  6E1A               	movwf	___awdiv@divisor+1,c
  4992  000D12  0E0A               	movlw	10
  4993  000D14  6E19               	movwf	___awdiv@divisor,c
  4994  000D16  ECB6  F021         	call	___awdiv	;wreg free
  4995  000D1A  5017               	movf	?___awdiv,w,c
  4996  000D1C  0F30               	addlw	48
  4997  000D1E  0100               	movlb	0	; () banked
  4998  000D20  6FD4               	movwf	(_tempF+1)& (0+255),b
  4999                           
  5000                           ; BSR set to: 0
  5001                           ;Main_Screen.c: 96: tempF[2] = neg_tempF%10 + '0';
  5002  000D22  C04C  F03D         	movff	Update_Screen@neg_tempF,___awmod@dividend
  5003  000D26  C04D  F03E         	movff	Update_Screen@neg_tempF+1,___awmod@dividend+1
  5004  000D2A  0E00               	movlw	0
  5005  000D2C  6E40               	movwf	___awmod@divisor+1,c
  5006  000D2E  0E0A               	movlw	10
  5007  000D30  6E3F               	movwf	___awmod@divisor,c
  5008  000D32  EC1E  F023         	call	___awmod	;wreg free
  5009  000D36  D01B               	goto	L3
  5010  000D38                     l11096:
  5011                           
  5012                           ; BSR set to: 0
  5013                           ;Main_Screen.c: 98: else
  5014                           ;Main_Screen.c: 99: {
  5015                           ;Main_Screen.c: 100: tempF[0] = '+';
  5016  000D38  0E2B               	movlw	43
  5017  000D3A  0100               	movlb	0	; () banked
  5018  000D3C  6FD3               	movwf	_tempF& (0+255),b
  5019                           
  5020                           ; BSR set to: 0
  5021                           ;Main_Screen.c: 101: tempF[1] = DS1621_tempF/10 + '0';
  5022  000D3E  C08B  F017         	movff	_DS1621_tempF,___awdiv@dividend
  5023  000D42  C08C  F018         	movff	_DS1621_tempF+1,___awdiv@dividend+1
  5024  000D46  0E00               	movlw	0
  5025  000D48  6E1A               	movwf	___awdiv@divisor+1,c
  5026  000D4A  0E0A               	movlw	10
  5027  000D4C  6E19               	movwf	___awdiv@divisor,c
  5028  000D4E  ECB6  F021         	call	___awdiv	;wreg free
  5029  000D52  5017               	movf	?___awdiv,w,c
  5030  000D54  0F30               	addlw	48
  5031  000D56  0100               	movlb	0	; () banked
  5032  000D58  6FD4               	movwf	(_tempF+1)& (0+255),b
  5033                           
  5034                           ; BSR set to: 0
  5035                           ;Main_Screen.c: 102: tempF[2] = DS1621_tempF%10 + '0';
  5036  000D5A  C08B  F03D         	movff	_DS1621_tempF,___awmod@dividend
  5037  000D5E  C08C  F03E         	movff	_DS1621_tempF+1,___awmod@dividend+1
  5038  000D62  0E00               	movlw	0
  5039  000D64  6E40               	movwf	___awmod@divisor+1,c
  5040  000D66  0E0A               	movlw	10
  5041  000D68  6E3F               	movwf	___awmod@divisor,c
  5042  000D6A  EC1E  F023         	call	___awmod	;wreg free
  5043  000D6E                     L3:
  5044  000D6E  503D               	movf	?___awmod,w,c
  5045  000D70  0F30               	addlw	48
  5046  000D72  0100               	movlb	0	; () banked
  5047  000D74  6FD5               	movwf	(_tempF+2)& (0+255),b
  5048  000D76  D000               	goto	l11102
  5049  000D78                     l11102:
  5050                           
  5051                           ; BSR set to: 0
  5052                           ;Main_Screen.c: 103: }
  5053                           ;Main_Screen.c: 104: time[0] = (hour>>4) + '0';
  5054  000D78  3869               	swapf	_hour,w,c
  5055  000D7A  0B0F               	andlw	15
  5056  000D7C  0F30               	addlw	48
  5057  000D7E  0101               	movlb	1	; () banked
  5058  000D80  6F68               	movwf	_time& (0+255),b
  5059                           
  5060                           ; BSR set to: 1
  5061                           ;Main_Screen.c: 105: time[1] = (hour & 0x0f)+ '0';
  5062  000D82  5069               	movf	_hour,w,c
  5063  000D84  0B0F               	andlw	15
  5064  000D86  0F30               	addlw	48
  5065  000D88  0101               	movlb	1	; () banked
  5066  000D8A  6F69               	movwf	(_time+1)& (0+255),b
  5067                           
  5068                           ; BSR set to: 1
  5069                           ;Main_Screen.c: 106: time[3] = (minute>>4) + '0';
  5070  000D8C  386A               	swapf	_minute,w,c
  5071  000D8E  0B0F               	andlw	15
  5072  000D90  0F30               	addlw	48
  5073  000D92  0101               	movlb	1	; () banked
  5074  000D94  6F6B               	movwf	(_time+3)& (0+255),b
  5075                           
  5076                           ; BSR set to: 1
  5077                           ;Main_Screen.c: 107: time[4] = (minute & 0x0f)+ '0';
  5078  000D96  506A               	movf	_minute,w,c
  5079  000D98  0B0F               	andlw	15
  5080  000D9A  0F30               	addlw	48
  5081  000D9C  0101               	movlb	1	; () banked
  5082  000D9E  6F6C               	movwf	(_time+4)& (0+255),b
  5083                           
  5084                           ; BSR set to: 1
  5085                           ;Main_Screen.c: 108: time[6] = (second>>4) + '0';
  5086  000DA0  386C               	swapf	_second,w,c
  5087  000DA2  0B0F               	andlw	15
  5088  000DA4  0F30               	addlw	48
  5089  000DA6  0101               	movlb	1	; () banked
  5090  000DA8  6F6E               	movwf	(_time+6)& (0+255),b
  5091                           
  5092                           ; BSR set to: 1
  5093                           ;Main_Screen.c: 109: time[7] = (second & 0x0f)+ '0';
  5094  000DAA  506C               	movf	_second,w,c
  5095  000DAC  0B0F               	andlw	15
  5096  000DAE  0F30               	addlw	48
  5097  000DB0  0101               	movlb	1	; () banked
  5098  000DB2  6F6F               	movwf	(_time+7)& (0+255),b
  5099                           
  5100                           ; BSR set to: 1
  5101                           ;Main_Screen.c: 110: date[0] = (month>>4) + '0';
  5102  000DB4  386B               	swapf	_month,w,c
  5103  000DB6  0B0F               	andlw	15
  5104  000DB8  0F30               	addlw	48
  5105  000DBA  0101               	movlb	1	; () banked
  5106  000DBC  6F44               	movwf	_date& (0+255),b
  5107                           
  5108                           ; BSR set to: 1
  5109                           ;Main_Screen.c: 111: date[1] = (month & 0x0f)+ '0';
  5110  000DBE  506B               	movf	_month,w,c
  5111  000DC0  0B0F               	andlw	15
  5112  000DC2  0F30               	addlw	48
  5113  000DC4  0101               	movlb	1	; () banked
  5114  000DC6  6F45               	movwf	(_date+1)& (0+255),b
  5115                           
  5116                           ; BSR set to: 1
  5117                           ;Main_Screen.c: 112: date[3] = (day>>4) + '0';
  5118  000DC8  3868               	swapf	_day,w,c
  5119  000DCA  0B0F               	andlw	15
  5120  000DCC  0F30               	addlw	48
  5121  000DCE  0101               	movlb	1	; () banked
  5122  000DD0  6F47               	movwf	(_date+3)& (0+255),b
  5123                           
  5124                           ; BSR set to: 1
  5125                           ;Main_Screen.c: 113: date[4] = (day & 0x0f)+ '0';
  5126  000DD2  5068               	movf	_day,w,c
  5127  000DD4  0B0F               	andlw	15
  5128  000DD6  0F30               	addlw	48
  5129  000DD8  0101               	movlb	1	; () banked
  5130  000DDA  6F48               	movwf	(_date+4)& (0+255),b
  5131                           
  5132                           ; BSR set to: 1
  5133                           ;Main_Screen.c: 114: date[6] = (year>>4) + '0';
  5134  000DDC  386F               	swapf	_year,w,c
  5135  000DDE  0B0F               	andlw	15
  5136  000DE0  0F30               	addlw	48
  5137  000DE2  0101               	movlb	1	; () banked
  5138  000DE4  6F4A               	movwf	(_date+6)& (0+255),b
  5139                           
  5140                           ; BSR set to: 1
  5141                           ;Main_Screen.c: 115: date[7] = (year & 0x0f)+ '0';
  5142  000DE6  506F               	movf	_year,w,c
  5143  000DE8  0B0F               	andlw	15
  5144  000DEA  0F30               	addlw	48
  5145  000DEC  0101               	movlb	1	; () banked
  5146  000DEE  6F4B               	movwf	(_date+7)& (0+255),b
  5147                           
  5148                           ; BSR set to: 1
  5149                           ;Main_Screen.c: 116: alarm_time[0] = (alarm_hour>>4) + '0';
  5150  000DF0  3865               	swapf	_alarm_hour,w,c
  5151  000DF2  0B0F               	andlw	15
  5152  000DF4  0F30               	addlw	48
  5153  000DF6  0101               	movlb	1	; () banked
  5154  000DF8  6F3B               	movwf	_alarm_time& (0+255),b
  5155                           
  5156                           ; BSR set to: 1
  5157                           ;Main_Screen.c: 117: alarm_time[1] = (alarm_hour & 0x0f)+ '0';
  5158  000DFA  5065               	movf	_alarm_hour,w,c
  5159  000DFC  0B0F               	andlw	15
  5160  000DFE  0F30               	addlw	48
  5161  000E00  0101               	movlb	1	; () banked
  5162  000E02  6F3C               	movwf	(_alarm_time+1)& (0+255),b
  5163                           
  5164                           ; BSR set to: 1
  5165                           ;Main_Screen.c: 118: alarm_time[3] = (alarm_minute>>4) + '0';
  5166  000E04  3866               	swapf	_alarm_minute,w,c
  5167  000E06  0B0F               	andlw	15
  5168  000E08  0F30               	addlw	48
  5169  000E0A  0101               	movlb	1	; () banked
  5170  000E0C  6F3E               	movwf	(_alarm_time+3)& (0+255),b
  5171                           
  5172                           ; BSR set to: 1
  5173                           ;Main_Screen.c: 119: alarm_time[4] = (alarm_minute & 0x0f) + '0';;
  5174  000E0E  5066               	movf	_alarm_minute,w,c
  5175  000E10  0B0F               	andlw	15
  5176  000E12  0F30               	addlw	48
  5177  000E14  0101               	movlb	1	; () banked
  5178  000E16  6F3F               	movwf	(_alarm_time+4)& (0+255),b
  5179                           
  5180                           ; BSR set to: 1
  5181                           ;Main_Screen.c: 120: alarm_time[6] = (alarm_second>>4) + '0';;
  5182  000E18  3867               	swapf	_alarm_second,w,c
  5183  000E1A  0B0F               	andlw	15
  5184  000E1C  0F30               	addlw	48
  5185  000E1E  0101               	movlb	1	; () banked
  5186  000E20  6F41               	movwf	(_alarm_time+6)& (0+255),b
  5187                           
  5188                           ; BSR set to: 1
  5189                           ;Main_Screen.c: 121: alarm_time[7] = (alarm_second & 0x0f) + '0';;
  5190  000E22  5067               	movf	_alarm_second,w,c
  5191  000E24  0B0F               	andlw	15
  5192  000E26  0F30               	addlw	48
  5193  000E28  0101               	movlb	1	; () banked
  5194  000E2A  6F42               	movwf	(_alarm_time+7)& (0+255),b
  5195                           
  5196                           ; BSR set to: 1
  5197                           ;Main_Screen.c: 123: if (ALARMEN == 1)
  5198  000E2C  0100               	movlb	0	; () banked
  5199  000E2E  0587               	decf	_ALARMEN& (0+255),w,b
  5200  000E30  0100               	movlb	0	; () banked
  5201  000E32  1188               	iorwf	(_ALARMEN+1)& (0+255),w,b
  5202  000E34  A4D8               	btfss	status,2,c
  5203  000E36  D00B               	goto	l11142
  5204                           
  5205                           ; BSR set to: 0
  5206                           ;Main_Screen.c: 124: {
  5207                           ;Main_Screen.c: 125: strcpy(Alarm_SW_Txt, "ON ");
  5208  000E38  0EC3               	movlw	low _Alarm_SW_Txt
  5209  000E3A  6E11               	movwf	strcpy@to,c
  5210  000E3C  0E00               	movlw	high _Alarm_SW_Txt
  5211  000E3E  6E12               	movwf	strcpy@to+1,c
  5212  000E40  0EE9               	movlw	low STR_21
  5213  000E42  6E13               	movwf	strcpy@from,c
  5214  000E44  0EFF               	movlw	high STR_21
  5215  000E46  6E14               	movwf	strcpy@from+1,c
  5216  000E48  EC34  F028         	call	_strcpy	;wreg free
  5217                           
  5218                           ;Main_Screen.c: 126: }
  5219  000E4C  D00B               	goto	l11144
  5220  000E4E                     l11142:
  5221                           
  5222                           ;Main_Screen.c: 127: else
  5223                           ;Main_Screen.c: 128: {
  5224                           ;Main_Screen.c: 129: strcpy(Alarm_SW_Txt, "OFF");
  5225  000E4E  0EC3               	movlw	low _Alarm_SW_Txt
  5226  000E50  6E11               	movwf	strcpy@to,c
  5227  000E52  0E00               	movlw	high _Alarm_SW_Txt
  5228  000E54  6E12               	movwf	strcpy@to+1,c
  5229  000E56  0EED               	movlw	low STR_22
  5230  000E58  6E13               	movwf	strcpy@from,c
  5231  000E5A  0EFF               	movlw	high STR_22
  5232  000E5C  6E14               	movwf	strcpy@from+1,c
  5233  000E5E  EC34  F028         	call	_strcpy	;wreg free
  5234  000E62  D000               	goto	l11144
  5235  000E64                     l11144:
  5236                           
  5237                           ;Main_Screen.c: 130: }
  5238                           ;Main_Screen.c: 132: Fan_Set_Temp_Txt[0] = fan_set_temp/100 + '0';
  5239  000E64  C0B6  F017         	movff	_fan_set_temp,___awdiv@dividend
  5240  000E68  6A18               	clrf	___awdiv@dividend+1,c
  5241  000E6A  0E00               	movlw	0
  5242  000E6C  6E1A               	movwf	___awdiv@divisor+1,c
  5243  000E6E  0E64               	movlw	100
  5244  000E70  6E19               	movwf	___awdiv@divisor,c
  5245  000E72  ECB6  F021         	call	___awdiv	;wreg free
  5246  000E76  5017               	movf	?___awdiv,w,c
  5247  000E78  0F30               	addlw	48
  5248  000E7A  0100               	movlb	0	; () banked
  5249  000E7C  6FB9               	movwf	_Fan_Set_Temp_Txt& (0+255),b
  5250                           
  5251                           ; BSR set to: 0
  5252                           ;Main_Screen.c: 133: Fan_Set_Temp_Txt[1] = (fan_set_temp/10) % 10 + '0';
  5253  000E7E  0E00               	movlw	0
  5254  000E80  6E1A               	movwf	___awdiv@divisor+1,c
  5255  000E82  0E0A               	movlw	10
  5256  000E84  6E19               	movwf	___awdiv@divisor,c
  5257  000E86  C0B6  F017         	movff	_fan_set_temp,___awdiv@dividend
  5258  000E8A  6A18               	clrf	___awdiv@dividend+1,c
  5259  000E8C  ECB6  F021         	call	___awdiv	;wreg free
  5260  000E90  C017  F03D         	movff	?___awdiv,___awmod@dividend
  5261  000E94  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
  5262  000E98  0E00               	movlw	0
  5263  000E9A  6E40               	movwf	___awmod@divisor+1,c
  5264  000E9C  0E0A               	movlw	10
  5265  000E9E  6E3F               	movwf	___awmod@divisor,c
  5266  000EA0  EC1E  F023         	call	___awmod	;wreg free
  5267  000EA4  503D               	movf	?___awmod,w,c
  5268  000EA6  0F30               	addlw	48
  5269  000EA8  0100               	movlb	0	; () banked
  5270  000EAA  6FBA               	movwf	(_Fan_Set_Temp_Txt+1)& (0+255),b
  5271                           
  5272                           ; BSR set to: 0
  5273                           ;Main_Screen.c: 134: Fan_Set_Temp_Txt[2] = fan_set_temp % 10 + '0';
  5274  000EAC  C0B6  F03D         	movff	_fan_set_temp,___awmod@dividend
  5275  000EB0  6A3E               	clrf	___awmod@dividend+1,c
  5276  000EB2  0E00               	movlw	0
  5277  000EB4  6E40               	movwf	___awmod@divisor+1,c
  5278  000EB6  0E0A               	movlw	10
  5279  000EB8  6E3F               	movwf	___awmod@divisor,c
  5280  000EBA  EC1E  F023         	call	___awmod	;wreg free
  5281  000EBE  503D               	movf	?___awmod,w,c
  5282  000EC0  0F30               	addlw	48
  5283  000EC2  0100               	movlb	0	; () banked
  5284  000EC4  6FBB               	movwf	(_Fan_Set_Temp_Txt+2)& (0+255),b
  5285                           
  5286                           ; BSR set to: 0
  5287                           ;Main_Screen.c: 136: if (FAN == 1)
  5288  000EC6  0100               	movlb	0	; () banked
  5289  000EC8  059B               	decf	_FAN& (0+255),w,b
  5290  000ECA  A4D8               	btfss	status,2,c
  5291  000ECC  D00B               	goto	l11154
  5292                           
  5293                           ; BSR set to: 0
  5294                           ;Main_Screen.c: 137: {
  5295                           ;Main_Screen.c: 138: strcpy(Fan_SW_Txt, "ON ");
  5296  000ECE  0ECB               	movlw	low _Fan_SW_Txt
  5297  000ED0  6E11               	movwf	strcpy@to,c
  5298  000ED2  0E00               	movlw	high _Fan_SW_Txt
  5299  000ED4  6E12               	movwf	strcpy@to+1,c
  5300  000ED6  0EE9               	movlw	low STR_21
  5301  000ED8  6E13               	movwf	strcpy@from,c
  5302  000EDA  0EFF               	movlw	high STR_21
  5303  000EDC  6E14               	movwf	strcpy@from+1,c
  5304  000EDE  EC34  F028         	call	_strcpy	;wreg free
  5305                           
  5306                           ;Main_Screen.c: 139: }
  5307  000EE2  D00B               	goto	l11156
  5308  000EE4                     l11154:
  5309                           
  5310                           ;Main_Screen.c: 140: else
  5311                           ;Main_Screen.c: 141: {
  5312                           ;Main_Screen.c: 142: strcpy(Fan_SW_Txt, "OFF");
  5313  000EE4  0ECB               	movlw	low _Fan_SW_Txt
  5314  000EE6  6E11               	movwf	strcpy@to,c
  5315  000EE8  0E00               	movlw	high _Fan_SW_Txt
  5316  000EEA  6E12               	movwf	strcpy@to+1,c
  5317  000EEC  0EED               	movlw	low STR_22
  5318  000EEE  6E13               	movwf	strcpy@from,c
  5319  000EF0  0EFF               	movlw	high STR_22
  5320  000EF2  6E14               	movwf	strcpy@from+1,c
  5321  000EF4  EC34  F028         	call	_strcpy	;wreg free
  5322  000EF8  D000               	goto	l11156
  5323  000EFA                     l11156:
  5324                           
  5325                           ;Main_Screen.c: 143: }
  5326                           ;Main_Screen.c: 145: if (PORTAbits.RA4 == 0) RTC_ALARM_Txt[0] = '1';
  5327  000EFA  B880               	btfsc	3968,4,c	;volatile
  5328  000EFC  D002               	goto	l11160
  5329  000EFE  0E31               	movlw	49
  5330  000F00  D001               	goto	L4
  5331  000F02                     l11160:
  5332                           
  5333                           ;Main_Screen.c: 146: else RTC_ALARM_Txt[0] = '0';
  5334  000F02  0E30               	movlw	48
  5335  000F04                     L4:
  5336  000F04  0100               	movlb	0	; () banked
  5337  000F06  6FD7               	movwf	_RTC_ALARM_Txt& (0+255),b
  5338  000F08  D000               	goto	l11162
  5339  000F0A                     l11162:
  5340                           
  5341                           ; BSR set to: 0
  5342                           ;Main_Screen.c: 149: DC_Txt[0] = duty_cycle/100 + '0';
  5343  000F0A  C0AB  F017         	movff	_duty_cycle,___awdiv@dividend
  5344  000F0E  6A18               	clrf	___awdiv@dividend+1,c
  5345  000F10  0E00               	movlw	0
  5346  000F12  6E1A               	movwf	___awdiv@divisor+1,c
  5347  000F14  0E64               	movlw	100
  5348  000F16  6E19               	movwf	___awdiv@divisor,c
  5349  000F18  ECB6  F021         	call	___awdiv	;wreg free
  5350  000F1C  5017               	movf	?___awdiv,w,c
  5351  000F1E  0F30               	addlw	48
  5352  000F20  0100               	movlb	0	; () banked
  5353  000F22  6FC7               	movwf	_DC_Txt& (0+255),b
  5354                           
  5355                           ; BSR set to: 0
  5356                           ;Main_Screen.c: 150: DC_Txt[1] = (duty_cycle / 10) % 10 + '0';
  5357  000F24  0E00               	movlw	0
  5358  000F26  6E1A               	movwf	___awdiv@divisor+1,c
  5359  000F28  0E0A               	movlw	10
  5360  000F2A  6E19               	movwf	___awdiv@divisor,c
  5361  000F2C  C0AB  F017         	movff	_duty_cycle,___awdiv@dividend
  5362  000F30  6A18               	clrf	___awdiv@dividend+1,c
  5363  000F32  ECB6  F021         	call	___awdiv	;wreg free
  5364  000F36  C017  F03D         	movff	?___awdiv,___awmod@dividend
  5365  000F3A  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
  5366  000F3E  0E00               	movlw	0
  5367  000F40  6E40               	movwf	___awmod@divisor+1,c
  5368  000F42  0E0A               	movlw	10
  5369  000F44  6E3F               	movwf	___awmod@divisor,c
  5370  000F46  EC1E  F023         	call	___awmod	;wreg free
  5371  000F4A  503D               	movf	?___awmod,w,c
  5372  000F4C  0F30               	addlw	48
  5373  000F4E  0100               	movlb	0	; () banked
  5374  000F50  6FC8               	movwf	(_DC_Txt+1)& (0+255),b
  5375                           
  5376                           ; BSR set to: 0
  5377                           ;Main_Screen.c: 151: DC_Txt[2] = duty_cycle % 10 + '0';
  5378  000F52  C0AB  F03D         	movff	_duty_cycle,___awmod@dividend
  5379  000F56  6A3E               	clrf	___awmod@dividend+1,c
  5380  000F58  0E00               	movlw	0
  5381  000F5A  6E40               	movwf	___awmod@divisor+1,c
  5382  000F5C  0E0A               	movlw	10
  5383  000F5E  6E3F               	movwf	___awmod@divisor,c
  5384  000F60  EC1E  F023         	call	___awmod	;wreg free
  5385  000F64  503D               	movf	?___awmod,w,c
  5386  000F66  0F30               	addlw	48
  5387  000F68  0100               	movlb	0	; () banked
  5388  000F6A  6FC9               	movwf	(_DC_Txt+2)& (0+255),b
  5389                           
  5390                           ; BSR set to: 0
  5391                           ;Main_Screen.c: 153: Volt_Txt[0] = ((int) volt ) + '0';
  5392  000F6C  C084  F02E         	movff	_volt,___fttol@f1
  5393  000F70  C085  F02F         	movff	_volt+1,___fttol@f1+1
  5394  000F74  C086  F030         	movff	_volt+2,___fttol@f1+2
  5395  000F78  EC24  F01D         	call	___fttol	;wreg free
  5396  000F7C  502E               	movf	?___fttol,w,c
  5397  000F7E  0F30               	addlw	48
  5398  000F80  0101               	movlb	1	; () banked
  5399  000F82  6F71               	movwf	_Volt_Txt& (0+255),b
  5400                           
  5401                           ; BSR set to: 1
  5402                           ;Main_Screen.c: 154: Volt_Txt[2] = ((int) (volt * 10)) % 10 + '0';
  5403  000F84  0E00               	movlw	0
  5404  000F86  6E22               	movwf	___ftmul@f2,c
  5405  000F88  0E20               	movlw	32
  5406  000F8A  6E23               	movwf	___ftmul@f2+1,c
  5407  000F8C  0E41               	movlw	65
  5408  000F8E  6E24               	movwf	___ftmul@f2+2,c
  5409  000F90  C084  F01F         	movff	_volt,___ftmul@f1
  5410  000F94  C085  F020         	movff	_volt+1,___ftmul@f1+1
  5411  000F98  C086  F021         	movff	_volt+2,___ftmul@f1+2
  5412  000F9C  EC41  F01B         	call	___ftmul	;wreg free
  5413  000FA0  C01F  F02E         	movff	?___ftmul,___fttol@f1
  5414  000FA4  C020  F02F         	movff	?___ftmul+1,___fttol@f1+1
  5415  000FA8  C021  F030         	movff	?___ftmul+2,___fttol@f1+2
  5416  000FAC  EC24  F01D         	call	___fttol	;wreg free
  5417  000FB0  C02E  F03D         	movff	?___fttol,___awmod@dividend
  5418  000FB4  C02F  F03E         	movff	?___fttol+1,___awmod@dividend+1
  5419  000FB8  0E00               	movlw	0
  5420  000FBA  6E40               	movwf	___awmod@divisor+1,c
  5421  000FBC  0E0A               	movlw	10
  5422  000FBE  6E3F               	movwf	___awmod@divisor,c
  5423  000FC0  EC1E  F023         	call	___awmod	;wreg free
  5424  000FC4  503D               	movf	?___awmod,w,c
  5425  000FC6  0F30               	addlw	48
  5426  000FC8  0101               	movlb	1	; () banked
  5427  000FCA  6F73               	movwf	(_Volt_Txt+2)& (0+255),b
  5428                           
  5429                           ; BSR set to: 1
  5430                           ;Main_Screen.c: 155: Volt_Txt[3] = ((int) (volt * 100)) % 10 + '0';
  5431  000FCC  0E00               	movlw	0
  5432  000FCE  6E22               	movwf	___ftmul@f2,c
  5433  000FD0  0EC8               	movlw	200
  5434  000FD2  6E23               	movwf	___ftmul@f2+1,c
  5435  000FD4  0E42               	movlw	66
  5436  000FD6  6E24               	movwf	___ftmul@f2+2,c
  5437  000FD8  C084  F01F         	movff	_volt,___ftmul@f1
  5438  000FDC  C085  F020         	movff	_volt+1,___ftmul@f1+1
  5439  000FE0  C086  F021         	movff	_volt+2,___ftmul@f1+2
  5440  000FE4  EC41  F01B         	call	___ftmul	;wreg free
  5441  000FE8  C01F  F02E         	movff	?___ftmul,___fttol@f1
  5442  000FEC  C020  F02F         	movff	?___ftmul+1,___fttol@f1+1
  5443  000FF0  C021  F030         	movff	?___ftmul+2,___fttol@f1+2
  5444  000FF4  EC24  F01D         	call	___fttol	;wreg free
  5445  000FF8  C02E  F03D         	movff	?___fttol,___awmod@dividend
  5446  000FFC  C02F  F03E         	movff	?___fttol+1,___awmod@dividend+1
  5447  001000  0E00               	movlw	0
  5448  001002  6E40               	movwf	___awmod@divisor+1,c
  5449  001004  0E0A               	movlw	10
  5450  001006  6E3F               	movwf	___awmod@divisor,c
  5451  001008  EC1E  F023         	call	___awmod	;wreg free
  5452  00100C  503D               	movf	?___awmod,w,c
  5453  00100E  0F30               	addlw	48
  5454  001010  0101               	movlb	1	; () banked
  5455  001012  6F74               	movwf	(_Volt_Txt+3)& (0+255),b
  5456                           
  5457                           ; BSR set to: 1
  5458                           ;Main_Screen.c: 157: RPM_Txt[0] = (rpm/1000) % 10 + '0';
  5459  001014  0E03               	movlw	3
  5460  001016  6E1A               	movwf	___awdiv@divisor+1,c
  5461  001018  0EE8               	movlw	232
  5462  00101A  6E19               	movwf	___awdiv@divisor,c
  5463  00101C  C097  F017         	movff	_rpm,___awdiv@dividend
  5464  001020  C098  F018         	movff	_rpm+1,___awdiv@dividend+1
  5465  001024  ECB6  F021         	call	___awdiv	;wreg free
  5466  001028  C017  F03D         	movff	?___awdiv,___awmod@dividend
  5467  00102C  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
  5468  001030  0E00               	movlw	0
  5469  001032  6E40               	movwf	___awmod@divisor+1,c
  5470  001034  0E0A               	movlw	10
  5471  001036  6E3F               	movwf	___awmod@divisor,c
  5472  001038  EC1E  F023         	call	___awmod	;wreg free
  5473  00103C  503D               	movf	?___awmod,w,c
  5474  00103E  0F30               	addlw	48
  5475  001040  0100               	movlb	0	; () banked
  5476  001042  6FBE               	movwf	_RPM_Txt& (0+255),b
  5477                           
  5478                           ; BSR set to: 0
  5479                           ;Main_Screen.c: 158: RPM_Txt[1] = (rpm/100) % 10 + '0';
  5480  001044  0E00               	movlw	0
  5481  001046  6E1A               	movwf	___awdiv@divisor+1,c
  5482  001048  0E64               	movlw	100
  5483  00104A  6E19               	movwf	___awdiv@divisor,c
  5484  00104C  C097  F017         	movff	_rpm,___awdiv@dividend
  5485  001050  C098  F018         	movff	_rpm+1,___awdiv@dividend+1
  5486  001054  ECB6  F021         	call	___awdiv	;wreg free
  5487  001058  C017  F03D         	movff	?___awdiv,___awmod@dividend
  5488  00105C  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
  5489  001060  0E00               	movlw	0
  5490  001062  6E40               	movwf	___awmod@divisor+1,c
  5491  001064  0E0A               	movlw	10
  5492  001066  6E3F               	movwf	___awmod@divisor,c
  5493  001068  EC1E  F023         	call	___awmod	;wreg free
  5494  00106C  503D               	movf	?___awmod,w,c
  5495  00106E  0F30               	addlw	48
  5496  001070  0100               	movlb	0	; () banked
  5497  001072  6FBF               	movwf	(_RPM_Txt+1)& (0+255),b
  5498                           
  5499                           ; BSR set to: 0
  5500                           ;Main_Screen.c: 159: RPM_Txt[2] = (rpm/10) % 10 + '0';
  5501  001074  0E00               	movlw	0
  5502  001076  6E1A               	movwf	___awdiv@divisor+1,c
  5503  001078  0E0A               	movlw	10
  5504  00107A  6E19               	movwf	___awdiv@divisor,c
  5505  00107C  C097  F017         	movff	_rpm,___awdiv@dividend
  5506  001080  C098  F018         	movff	_rpm+1,___awdiv@dividend+1
  5507  001084  ECB6  F021         	call	___awdiv	;wreg free
  5508  001088  C017  F03D         	movff	?___awdiv,___awmod@dividend
  5509  00108C  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
  5510  001090  0E00               	movlw	0
  5511  001092  6E40               	movwf	___awmod@divisor+1,c
  5512  001094  0E0A               	movlw	10
  5513  001096  6E3F               	movwf	___awmod@divisor,c
  5514  001098  EC1E  F023         	call	___awmod	;wreg free
  5515  00109C  503D               	movf	?___awmod,w,c
  5516  00109E  0F30               	addlw	48
  5517  0010A0  0100               	movlb	0	; () banked
  5518  0010A2  6FC0               	movwf	(_RPM_Txt+2)& (0+255),b
  5519                           
  5520                           ; BSR set to: 0
  5521                           ;Main_Screen.c: 160: RPM_Txt[3] = rpm%10 + '0';
  5522  0010A4  C097  F03D         	movff	_rpm,___awmod@dividend
  5523  0010A8  C098  F03E         	movff	_rpm+1,___awmod@dividend+1
  5524  0010AC  0E00               	movlw	0
  5525  0010AE  6E40               	movwf	___awmod@divisor+1,c
  5526  0010B0  0E0A               	movlw	10
  5527  0010B2  6E3F               	movwf	___awmod@divisor,c
  5528  0010B4  EC1E  F023         	call	___awmod	;wreg free
  5529  0010B8  503D               	movf	?___awmod,w,c
  5530  0010BA  0F30               	addlw	48
  5531  0010BC  0100               	movlb	0	; () banked
  5532  0010BE  6FC1               	movwf	(_RPM_Txt+3)& (0+255),b
  5533                           
  5534                           ; BSR set to: 0
  5535                           ;Main_Screen.c: 162: drawtext(1, 23, tempC , 0xFFE0 , 0x0000 , 2);
  5536  0010C0  0E17               	movlw	23
  5537  0010C2  6E39               	movwf	drawtext@y,c
  5538  0010C4  0ECF               	movlw	low _tempC
  5539  0010C6  6E3A               	movwf	drawtext@_text,c
  5540  0010C8  0E00               	movlw	high _tempC
  5541  0010CA  6E3B               	movwf	drawtext@_text+1,c
  5542  0010CC  0EFF               	movlw	255
  5543  0010CE  6E3D               	movwf	drawtext@color+1,c
  5544  0010D0  0EE0               	movlw	224
  5545  0010D2  6E3C               	movwf	drawtext@color,c
  5546  0010D4  0E00               	movlw	0
  5547  0010D6  6E3F               	movwf	drawtext@bg+1,c
  5548  0010D8  0E00               	movlw	0
  5549  0010DA  6E3E               	movwf	drawtext@bg,c
  5550  0010DC  0E02               	movlw	2
  5551  0010DE  6E40               	movwf	drawtext@size,c
  5552  0010E0  0E01               	movlw	1
  5553  0010E2  EC08  F01E         	call	_drawtext
  5554                           
  5555                           ;Main_Screen.c: 163: drawtext(70, 23, tempF , 0xFFE0 , 0x0000 , 2);
  5556  0010E6  0E17               	movlw	23
  5557  0010E8  6E39               	movwf	drawtext@y,c
  5558  0010EA  0ED3               	movlw	low _tempF
  5559  0010EC  6E3A               	movwf	drawtext@_text,c
  5560  0010EE  0E00               	movlw	high _tempF
  5561  0010F0  6E3B               	movwf	drawtext@_text+1,c
  5562  0010F2  0EFF               	movlw	255
  5563  0010F4  6E3D               	movwf	drawtext@color+1,c
  5564  0010F6  0EE0               	movlw	224
  5565  0010F8  6E3C               	movwf	drawtext@color,c
  5566  0010FA  0E00               	movlw	0
  5567  0010FC  6E3F               	movwf	drawtext@bg+1,c
  5568  0010FE  0E00               	movlw	0
  5569  001100  6E3E               	movwf	drawtext@bg,c
  5570  001102  0E02               	movlw	2
  5571  001104  6E40               	movwf	drawtext@size,c
  5572  001106  0E46               	movlw	70
  5573  001108  EC08  F01E         	call	_drawtext
  5574                           
  5575                           ;Main_Screen.c: 164: drawtext(15 , 52 , time , 0x07FF , 0x0000 , 2);
  5576  00110C  0E34               	movlw	52
  5577  00110E  6E39               	movwf	drawtext@y,c
  5578  001110  0E68               	movlw	low _time
  5579  001112  6E3A               	movwf	drawtext@_text,c
  5580  001114  0E01               	movlw	high _time
  5581  001116  6E3B               	movwf	drawtext@_text+1,c
  5582  001118  0E07               	movlw	7
  5583  00111A  6E3D               	movwf	drawtext@color+1,c
  5584  00111C  683C               	setf	drawtext@color,c
  5585  00111E  0E00               	movlw	0
  5586  001120  6E3F               	movwf	drawtext@bg+1,c
  5587  001122  0E00               	movlw	0
  5588  001124  6E3E               	movwf	drawtext@bg,c
  5589  001126  0E02               	movlw	2
  5590  001128  6E40               	movwf	drawtext@size,c
  5591  00112A  0E0F               	movlw	15
  5592  00112C  EC08  F01E         	call	_drawtext
  5593                           
  5594                           ;Main_Screen.c: 165: drawtext(15 , 82 , date , 0x07E0 , 0x0000 , 2);
  5595  001130  0E52               	movlw	82
  5596  001132  6E39               	movwf	drawtext@y,c
  5597  001134  0E44               	movlw	low _date
  5598  001136  6E3A               	movwf	drawtext@_text,c
  5599  001138  0E01               	movlw	high _date
  5600  00113A  6E3B               	movwf	drawtext@_text+1,c
  5601  00113C  0E07               	movlw	7
  5602  00113E  6E3D               	movwf	drawtext@color+1,c
  5603  001140  0EE0               	movlw	224
  5604  001142  6E3C               	movwf	drawtext@color,c
  5605  001144  0E00               	movlw	0
  5606  001146  6E3F               	movwf	drawtext@bg+1,c
  5607  001148  0E00               	movlw	0
  5608  00114A  6E3E               	movwf	drawtext@bg,c
  5609  00114C  0E02               	movlw	2
  5610  00114E  6E40               	movwf	drawtext@size,c
  5611  001150  0E0F               	movlw	15
  5612  001152  EC08  F01E         	call	_drawtext
  5613                           
  5614                           ;Main_Screen.c: 166: drawtext(10 , 110 , alarm_time , 0x07FF , 0x0000 , 1);
  5615  001156  0E6E               	movlw	110
  5616  001158  6E39               	movwf	drawtext@y,c
  5617  00115A  0E3B               	movlw	low _alarm_time
  5618  00115C  6E3A               	movwf	drawtext@_text,c
  5619  00115E  0E01               	movlw	high _alarm_time
  5620  001160  6E3B               	movwf	drawtext@_text+1,c
  5621  001162  0E07               	movlw	7
  5622  001164  6E3D               	movwf	drawtext@color+1,c
  5623  001166  683C               	setf	drawtext@color,c
  5624  001168  0E00               	movlw	0
  5625  00116A  6E3F               	movwf	drawtext@bg+1,c
  5626  00116C  0E00               	movlw	0
  5627  00116E  6E3E               	movwf	drawtext@bg,c
  5628  001170  0E01               	movlw	1
  5629  001172  6E40               	movwf	drawtext@size,c
  5630  001174  0E0A               	movlw	10
  5631  001176  EC08  F01E         	call	_drawtext
  5632                           
  5633                           ;Main_Screen.c: 167: drawtext(95 , 110 , Alarm_SW_Txt , 0x07FF , 0x0000 , 1);
  5634  00117A  0E6E               	movlw	110
  5635  00117C  6E39               	movwf	drawtext@y,c
  5636  00117E  0EC3               	movlw	low _Alarm_SW_Txt
  5637  001180  6E3A               	movwf	drawtext@_text,c
  5638  001182  0E00               	movlw	high _Alarm_SW_Txt
  5639  001184  6E3B               	movwf	drawtext@_text+1,c
  5640  001186  0E07               	movlw	7
  5641  001188  6E3D               	movwf	drawtext@color+1,c
  5642  00118A  683C               	setf	drawtext@color,c
  5643  00118C  0E00               	movlw	0
  5644  00118E  6E3F               	movwf	drawtext@bg+1,c
  5645  001190  0E00               	movlw	0
  5646  001192  6E3E               	movwf	drawtext@bg,c
  5647  001194  0E01               	movlw	1
  5648  001196  6E40               	movwf	drawtext@size,c
  5649  001198  0E5F               	movlw	95
  5650  00119A  EC08  F01E         	call	_drawtext
  5651                           
  5652                           ;Main_Screen.c: 168: drawtext(35, 130 ,Fan_Set_Temp_Txt, 0xF800, 0x0000, 1);
  5653  00119E  0E82               	movlw	130
  5654  0011A0  6E39               	movwf	drawtext@y,c
  5655  0011A2  0EB9               	movlw	low _Fan_Set_Temp_Txt
  5656  0011A4  6E3A               	movwf	drawtext@_text,c
  5657  0011A6  0E00               	movlw	high _Fan_Set_Temp_Txt
  5658  0011A8  6E3B               	movwf	drawtext@_text+1,c
  5659  0011AA  0EF8               	movlw	248
  5660  0011AC  6E3D               	movwf	drawtext@color+1,c
  5661  0011AE  0E00               	movlw	0
  5662  0011B0  6E3C               	movwf	drawtext@color,c
  5663  0011B2  0E00               	movlw	0
  5664  0011B4  6E3F               	movwf	drawtext@bg+1,c
  5665  0011B6  0E00               	movlw	0
  5666  0011B8  6E3E               	movwf	drawtext@bg,c
  5667  0011BA  0E01               	movlw	1
  5668  0011BC  6E40               	movwf	drawtext@size,c
  5669  0011BE  0E23               	movlw	35
  5670  0011C0  EC08  F01E         	call	_drawtext
  5671                           
  5672                           ;Main_Screen.c: 169: drawtext(95, 130, Fan_SW_Txt, 0xF800 , 0x0000 , 1);
  5673  0011C4  0E82               	movlw	130
  5674  0011C6  6E39               	movwf	drawtext@y,c
  5675  0011C8  0ECB               	movlw	low _Fan_SW_Txt
  5676  0011CA  6E3A               	movwf	drawtext@_text,c
  5677  0011CC  0E00               	movlw	high _Fan_SW_Txt
  5678  0011CE  6E3B               	movwf	drawtext@_text+1,c
  5679  0011D0  0EF8               	movlw	248
  5680  0011D2  6E3D               	movwf	drawtext@color+1,c
  5681  0011D4  0E00               	movlw	0
  5682  0011D6  6E3C               	movwf	drawtext@color,c
  5683  0011D8  0E00               	movlw	0
  5684  0011DA  6E3F               	movwf	drawtext@bg+1,c
  5685  0011DC  0E00               	movlw	0
  5686  0011DE  6E3E               	movwf	drawtext@bg,c
  5687  0011E0  0E01               	movlw	1
  5688  0011E2  6E40               	movwf	drawtext@size,c
  5689  0011E4  0E5F               	movlw	95
  5690  0011E6  EC08  F01E         	call	_drawtext
  5691                           
  5692                           ;Main_Screen.c: 170: drawtext(10, 150, DC_Txt, 0x07E0, 0x0000, 1);
  5693  0011EA  0E96               	movlw	150
  5694  0011EC  6E39               	movwf	drawtext@y,c
  5695  0011EE  0EC7               	movlw	low _DC_Txt
  5696  0011F0  6E3A               	movwf	drawtext@_text,c
  5697  0011F2  0E00               	movlw	high _DC_Txt
  5698  0011F4  6E3B               	movwf	drawtext@_text+1,c
  5699  0011F6  0E07               	movlw	7
  5700  0011F8  6E3D               	movwf	drawtext@color+1,c
  5701  0011FA  0EE0               	movlw	224
  5702  0011FC  6E3C               	movwf	drawtext@color,c
  5703  0011FE  0E00               	movlw	0
  5704  001200  6E3F               	movwf	drawtext@bg+1,c
  5705  001202  0E00               	movlw	0
  5706  001204  6E3E               	movwf	drawtext@bg,c
  5707  001206  0E01               	movlw	1
  5708  001208  6E40               	movwf	drawtext@size,c
  5709  00120A  0E0A               	movlw	10
  5710  00120C  EC08  F01E         	call	_drawtext
  5711                           
  5712                           ;Main_Screen.c: 171: drawtext(35, 150, RTC_ALARM_Txt, 0x07E0, 0x0000, 1);
  5713  001210  0E96               	movlw	150
  5714  001212  6E39               	movwf	drawtext@y,c
  5715  001214  0ED7               	movlw	low _RTC_ALARM_Txt
  5716  001216  6E3A               	movwf	drawtext@_text,c
  5717  001218  0E00               	movlw	high _RTC_ALARM_Txt
  5718  00121A  6E3B               	movwf	drawtext@_text+1,c
  5719  00121C  0E07               	movlw	7
  5720  00121E  6E3D               	movwf	drawtext@color+1,c
  5721  001220  0EE0               	movlw	224
  5722  001222  6E3C               	movwf	drawtext@color,c
  5723  001224  0E00               	movlw	0
  5724  001226  6E3F               	movwf	drawtext@bg+1,c
  5725  001228  0E00               	movlw	0
  5726  00122A  6E3E               	movwf	drawtext@bg,c
  5727  00122C  0E01               	movlw	1
  5728  00122E  6E40               	movwf	drawtext@size,c
  5729  001230  0E23               	movlw	35
  5730  001232  EC08  F01E         	call	_drawtext
  5731                           
  5732                           ;Main_Screen.c: 172: drawtext(50, 150, Volt_Txt, 0x07E0, 0x0000, 1);
  5733  001236  0E96               	movlw	150
  5734  001238  6E39               	movwf	drawtext@y,c
  5735  00123A  0E71               	movlw	low _Volt_Txt
  5736  00123C  6E3A               	movwf	drawtext@_text,c
  5737  00123E  0E01               	movlw	high _Volt_Txt
  5738  001240  6E3B               	movwf	drawtext@_text+1,c
  5739  001242  0E07               	movlw	7
  5740  001244  6E3D               	movwf	drawtext@color+1,c
  5741  001246  0EE0               	movlw	224
  5742  001248  6E3C               	movwf	drawtext@color,c
  5743  00124A  0E00               	movlw	0
  5744  00124C  6E3F               	movwf	drawtext@bg+1,c
  5745  00124E  0E00               	movlw	0
  5746  001250  6E3E               	movwf	drawtext@bg,c
  5747  001252  0E01               	movlw	1
  5748  001254  6E40               	movwf	drawtext@size,c
  5749  001256  0E32               	movlw	50
  5750  001258  EC08  F01E         	call	_drawtext
  5751                           
  5752                           ;Main_Screen.c: 173: drawtext(93, 150, RPM_Txt, 0x07E0, 0x0000, 1);
  5753  00125C  0E96               	movlw	150
  5754  00125E  6E39               	movwf	drawtext@y,c
  5755  001260  0EBE               	movlw	low _RPM_Txt
  5756  001262  6E3A               	movwf	drawtext@_text,c
  5757  001264  0E00               	movlw	high _RPM_Txt
  5758  001266  6E3B               	movwf	drawtext@_text+1,c
  5759  001268  0E07               	movlw	7
  5760  00126A  6E3D               	movwf	drawtext@color+1,c
  5761  00126C  0EE0               	movlw	224
  5762  00126E  6E3C               	movwf	drawtext@color,c
  5763  001270  0E00               	movlw	0
  5764  001272  6E3F               	movwf	drawtext@bg+1,c
  5765  001274  0E00               	movlw	0
  5766  001276  6E3E               	movwf	drawtext@bg,c
  5767  001278  0E01               	movlw	1
  5768  00127A  6E40               	movwf	drawtext@size,c
  5769  00127C  0E5D               	movlw	93
  5770  00127E  EC08  F01E         	call	_drawtext
  5771  001282  0012               	return		;funcret
  5772  001284                     __end_of_Update_Screen:
  5773                           	opt stack 0
  5774                           tblptru	equ	0xFF8
  5775                           tblptrh	equ	0xFF7
  5776                           tblptrl	equ	0xFF6
  5777                           tablat	equ	0xFF5
  5778                           intcon	equ	0xFF2
  5779                           intcon2	equ	0xFF1
  5780                           postinc0	equ	0xFEE
  5781                           wreg	equ	0xFE8
  5782                           postdec1	equ	0xFE5
  5783                           fsr1l	equ	0xFE1
  5784                           postinc2	equ	0xFDE
  5785                           fsr2h	equ	0xFDA
  5786                           fsr2l	equ	0xFD9
  5787                           status	equ	0xFD8
  5788                           
  5789 ;; *************** function _Toggle_Fan_Monitor *****************
  5790 ;; Defined at:
  5791 ;;		line 112 in file "Fan_Support.c"
  5792 ;; Parameters:    Size  Location     Type
  5793 ;;		None
  5794 ;; Auto vars:     Size  Location     Type
  5795 ;;		None
  5796 ;; Return value:  Size  Location     Type
  5797 ;;		None               void
  5798 ;; Registers used:
  5799 ;;		wreg, status,2, status,0, cstack
  5800 ;; Tracked objects:
  5801 ;;		On entry : 0/0
  5802 ;;		On exit  : 0/0
  5803 ;;		Unchanged: 0/0
  5804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5808 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5809 ;;Total ram usage:        0 bytes
  5810 ;; Hardware stack levels used:    1
  5811 ;; Hardware stack levels required when called:    5
  5812 ;; This function calls:
  5813 ;;		_Toggle_Fan
  5814 ;; This function is called by:
  5815 ;;		_main
  5816 ;; This function uses a non-reentrant model
  5817 ;;
  5818                           
  5819                           	psect	text14
  5820  005604                     __ptext14:
  5821                           	opt stack 0
  5822  005604                     _Toggle_Fan_Monitor:
  5823                           	opt stack 25
  5824                           
  5825                           ;Fan_Support.c: 114: Toggle_Fan();
  5826                           
  5827                           ;incstack = 0
  5828  005604  ECA2  F029         	call	_Toggle_Fan	;wreg free
  5829  005608  0012               	return		;funcret
  5830  00560A                     __end_of_Toggle_Fan_Monitor:
  5831                           	opt stack 0
  5832                           tblptru	equ	0xFF8
  5833                           tblptrh	equ	0xFF7
  5834                           tblptrl	equ	0xFF6
  5835                           tablat	equ	0xFF5
  5836                           intcon	equ	0xFF2
  5837                           intcon2	equ	0xFF1
  5838                           postinc0	equ	0xFEE
  5839                           wreg	equ	0xFE8
  5840                           postdec1	equ	0xFE5
  5841                           fsr1l	equ	0xFE1
  5842                           postinc2	equ	0xFDE
  5843                           fsr2h	equ	0xFDA
  5844                           fsr2l	equ	0xFD9
  5845                           status	equ	0xFD8
  5846                           
  5847 ;; *************** function _Toggle_Fan *****************
  5848 ;; Defined at:
  5849 ;;		line 19 in file "Fan_Support.c"
  5850 ;; Parameters:    Size  Location     Type
  5851 ;;		None
  5852 ;; Auto vars:     Size  Location     Type
  5853 ;;		None
  5854 ;; Return value:  Size  Location     Type
  5855 ;;		None               void
  5856 ;; Registers used:
  5857 ;;		wreg, status,2, status,0, cstack
  5858 ;; Tracked objects:
  5859 ;;		On entry : 0/0
  5860 ;;		On exit  : 0/0
  5861 ;;		Unchanged: 0/0
  5862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5866 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5867 ;;Total ram usage:        0 bytes
  5868 ;; Hardware stack levels used:    1
  5869 ;; Hardware stack levels required when called:    4
  5870 ;; This function calls:
  5871 ;;		_Turn_Off_Fan
  5872 ;;		_Turn_On_Fan
  5873 ;; This function is called by:
  5874 ;;		_Toggle_Fan_Monitor
  5875 ;; This function uses a non-reentrant model
  5876 ;;
  5877                           
  5878                           	psect	text15
  5879  005344                     __ptext15:
  5880                           	opt stack 0
  5881  005344                     _Toggle_Fan:
  5882                           	opt stack 25
  5883                           
  5884                           ;Fan_Support.c: 21: FAN ^= 1;
  5885                           
  5886                           ;incstack = 0
  5887  005344  0E01               	movlw	1
  5888  005346  0100               	movlb	0	; () banked
  5889  005348  1B9B               	xorwf	_FAN& (0+255),f,b
  5890                           
  5891                           ;Fan_Support.c: 22: if(FAN == 1) Turn_On_Fan();
  5892  00534A  0100               	movlb	0	; () banked
  5893  00534C  059B               	decf	_FAN& (0+255),w,b
  5894  00534E  A4D8               	btfss	status,2,c
  5895  005350  D003               	goto	l8138
  5896                           
  5897                           ; BSR set to: 0
  5898  005352  ECC6  F02A         	call	_Turn_On_Fan	;wreg free
  5899  005356  D003               	goto	l1044
  5900  005358                     l8138:
  5901                           
  5902                           ;Fan_Support.c: 23: else Turn_Off_Fan();
  5903  005358  ECCC  F02A         	call	_Turn_Off_Fan	;wreg free
  5904  00535C  D000               	goto	l1044
  5905  00535E                     l1044:
  5906  00535E  0012               	return		;funcret
  5907  005360                     __end_of_Toggle_Fan:
  5908                           	opt stack 0
  5909                           tblptru	equ	0xFF8
  5910                           tblptrh	equ	0xFF7
  5911                           tblptrl	equ	0xFF6
  5912                           tablat	equ	0xFF5
  5913                           intcon	equ	0xFF2
  5914                           intcon2	equ	0xFF1
  5915                           postinc0	equ	0xFEE
  5916                           wreg	equ	0xFE8
  5917                           postdec1	equ	0xFE5
  5918                           fsr1l	equ	0xFE1
  5919                           postinc2	equ	0xFDE
  5920                           fsr2h	equ	0xFDA
  5921                           fsr2l	equ	0xFD9
  5922                           status	equ	0xFD8
  5923                           
  5924 ;; *************** function _Setup_Temp_Fan *****************
  5925 ;; Defined at:
  5926 ;;		line 24 in file "Setup_Fan_Temp.c"
  5927 ;; Parameters:    Size  Location     Type
  5928 ;;		None
  5929 ;; Auto vars:     Size  Location     Type
  5930 ;;		None
  5931 ;; Return value:  Size  Location     Type
  5932 ;;		None               void
  5933 ;; Registers used:
  5934 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5935 ;; Tracked objects:
  5936 ;;		On entry : 0/0
  5937 ;;		On exit  : 0/0
  5938 ;;		Unchanged: 0/0
  5939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5942 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5943 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5944 ;;Total ram usage:        2 bytes
  5945 ;; Hardware stack levels used:    1
  5946 ;; Hardware stack levels required when called:   12
  5947 ;; This function calls:
  5948 ;;		_Decrease_Fan_Temp
  5949 ;;		_Do_Beep_Bad
  5950 ;;		_Do_Beep_Good
  5951 ;;		_Do_Save_New_Fan_Temp
  5952 ;;		_Exit_Setup_Fan_Temp
  5953 ;;		_Increase_Fan_Temp
  5954 ;;		_Initialize_Setup_Fan_Screen
  5955 ;;		_Update_Setup_Fan_Screen
  5956 ;;		_check_for_button_input
  5957 ;; This function is called by:
  5958 ;;		_main
  5959 ;; This function uses a non-reentrant model
  5960 ;;
  5961                           
  5962                           	psect	text16
  5963  004194                     __ptext16:
  5964                           	opt stack 0
  5965  004194                     _Setup_Temp_Fan:
  5966                           	opt stack 18
  5967                           
  5968                           ;Setup_Fan_Temp.c: 27: In_Fan_Temp_Setup = 1;
  5969                           
  5970                           ;incstack = 0
  5971  004194  0E01               	movlw	1
  5972  004196  0100               	movlb	0	; () banked
  5973  004198  6F9F               	movwf	_In_Fan_Temp_Setup& (0+255),b
  5974                           
  5975                           ; BSR set to: 0
  5976                           ;Setup_Fan_Temp.c: 28: setup_fan_set_temp = fan_set_temp;
  5977  00419A  C0B6  F0B1         	movff	_fan_set_temp,_setup_fan_set_temp
  5978                           
  5979                           ; BSR set to: 0
  5980                           ;Setup_Fan_Temp.c: 29: Initialize_Setup_Fan_Screen();
  5981  00419E  ECBD  F01B         	call	_Initialize_Setup_Fan_Screen	;wreg free
  5982                           
  5983                           ;Setup_Fan_Temp.c: 30: Update_Setup_Fan_Screen();
  5984  0041A2  EC20  F021         	call	_Update_Setup_Fan_Screen	;wreg free
  5985                           
  5986                           ;Setup_Fan_Temp.c: 32: while (In_Fan_Temp_Setup == 1)
  5987  0041A6  D047               	goto	l11378
  5988  0041A8                     l11346:
  5989                           
  5990                           ;Setup_Fan_Temp.c: 33: {
  5991                           ;Setup_Fan_Temp.c: 34: if (check_for_button_input() == 1)
  5992  0041A8  0E01               	movlw	1
  5993  0041AA  0100               	movlb	0	; () banked
  5994  0041AC  6FEF               	movwf	??_Setup_Temp_Fan& (0+255),b
  5995  0041AE  0E00               	movlw	0
  5996  0041B0  0100               	movlb	0	; () banked
  5997  0041B2  6FF0               	movwf	(??_Setup_Temp_Fan+1)& (0+255),b
  5998  0041B4  ECB3  F01F         	call	_check_for_button_input	;wreg free
  5999  0041B8  0100               	movlb	0	; () banked
  6000  0041BA  19EF               	xorwf	??_Setup_Temp_Fan& (0+255),w,b
  6001  0041BC  11F0               	iorwf	(??_Setup_Temp_Fan+1)& (0+255),w,b
  6002  0041BE  A4D8               	btfss	status,2,c
  6003  0041C0  D03A               	goto	l11378
  6004                           
  6005                           ; BSR set to: 0
  6006                           ;Setup_Fan_Temp.c: 35: {
  6007                           ;Setup_Fan_Temp.c: 38: if ( (found == 0x00) || (found == 0x02) || (found == 0x06) || (fo
      +                          und == 0x07) )
  6008  0041C2  0100               	movlb	0	; () banked
  6009  0041C4  51AC               	movf	_found& (0+255),w,b
  6010  0041C6  B4D8               	btfsc	status,2,c
  6011  0041C8  D00F               	goto	l11356
  6012                           
  6013                           ; BSR set to: 0
  6014  0041CA  0E02               	movlw	2
  6015  0041CC  0100               	movlb	0	; () banked
  6016  0041CE  19AC               	xorwf	_found& (0+255),w,b
  6017  0041D0  B4D8               	btfsc	status,2,c
  6018  0041D2  D00A               	goto	l11356
  6019                           
  6020                           ; BSR set to: 0
  6021  0041D4  0E06               	movlw	6
  6022  0041D6  0100               	movlb	0	; () banked
  6023  0041D8  19AC               	xorwf	_found& (0+255),w,b
  6024  0041DA  B4D8               	btfsc	status,2,c
  6025  0041DC  D005               	goto	l11356
  6026                           
  6027                           ; BSR set to: 0
  6028  0041DE  0E07               	movlw	7
  6029  0041E0  0100               	movlb	0	; () banked
  6030  0041E2  19AC               	xorwf	_found& (0+255),w,b
  6031  0041E4  A4D8               	btfss	status,2,c
  6032  0041E6  D024               	goto	l11376
  6033  0041E8                     l11356:
  6034                           
  6035                           ; BSR set to: 0
  6036                           ;Setup_Fan_Temp.c: 39: {
  6037                           ;Setup_Fan_Temp.c: 40: Do_Beep_Good();
  6038  0041E8  ECD8  F029         	call	_Do_Beep_Good	;wreg free
  6039                           
  6040                           ;Setup_Fan_Temp.c: 42: if (found == 0x00) Exit_Setup_Fan_Temp();
  6041  0041EC  0100               	movlb	0	; () banked
  6042  0041EE  51AC               	movf	_found& (0+255),w,b
  6043  0041F0  A4D8               	btfss	status,2,c
  6044  0041F2  D003               	goto	l11362
  6045                           
  6046                           ; BSR set to: 0
  6047  0041F4  EC7D  F02A         	call	_Exit_Setup_Fan_Temp	;wreg free
  6048  0041F8  D000               	goto	l11362
  6049  0041FA                     l11362:
  6050                           
  6051                           ;Setup_Fan_Temp.c: 43: if (found == 0x02) Do_Save_New_Fan_Temp();
  6052  0041FA  0E02               	movlw	2
  6053  0041FC  0100               	movlb	0	; () banked
  6054  0041FE  19AC               	xorwf	_found& (0+255),w,b
  6055  004200  A4D8               	btfss	status,2,c
  6056  004202  D003               	goto	l11366
  6057                           
  6058                           ; BSR set to: 0
  6059  004204  EC16  F02A         	call	_Do_Save_New_Fan_Temp	;wreg free
  6060  004208  D000               	goto	l11366
  6061  00420A                     l11366:
  6062                           
  6063                           ;Setup_Fan_Temp.c: 44: if (found == 0x06) Decrease_Fan_Temp();
  6064  00420A  0E06               	movlw	6
  6065  00420C  0100               	movlb	0	; () banked
  6066  00420E  19AC               	xorwf	_found& (0+255),w,b
  6067  004210  A4D8               	btfss	status,2,c
  6068  004212  D003               	goto	l11370
  6069                           
  6070                           ; BSR set to: 0
  6071  004214  ECCB  F029         	call	_Decrease_Fan_Temp	;wreg free
  6072  004218  D000               	goto	l11370
  6073  00421A                     l11370:
  6074                           
  6075                           ;Setup_Fan_Temp.c: 45: if (found == 0x07) Increase_Fan_Temp();
  6076  00421A  0E07               	movlw	7
  6077  00421C  0100               	movlb	0	; () banked
  6078  00421E  19AC               	xorwf	_found& (0+255),w,b
  6079  004220  A4D8               	btfss	status,2,c
  6080  004222  D003               	goto	l11374
  6081                           
  6082                           ; BSR set to: 0
  6083  004224  ECBE  F029         	call	_Increase_Fan_Temp	;wreg free
  6084  004228  D000               	goto	l11374
  6085  00422A                     l11374:
  6086                           
  6087                           ;Setup_Fan_Temp.c: 46: found = 0xff;
  6088  00422A  0100               	movlb	0	; () banked
  6089  00422C  69AC               	setf	_found& (0+255),b
  6090                           
  6091                           ;Setup_Fan_Temp.c: 47: }
  6092  00422E  D003               	goto	l11378
  6093  004230                     l11376:
  6094                           
  6095                           ; BSR set to: 0
  6096                           ;Setup_Fan_Temp.c: 48: else
  6097                           ;Setup_Fan_Temp.c: 49: {
  6098                           ;Setup_Fan_Temp.c: 50: Do_Beep_Bad();
  6099  004230  ECE5  F029         	call	_Do_Beep_Bad	;wreg free
  6100  004234  D000               	goto	l11378
  6101  004236                     l11378:
  6102  004236  0100               	movlb	0	; () banked
  6103  004238  059F               	decf	_In_Fan_Temp_Setup& (0+255),w,b
  6104  00423A  B4D8               	btfsc	status,2,c
  6105  00423C  D7B5               	goto	l11346
  6106                           
  6107                           ; BSR set to: 0
  6108                           
  6109                           ; BSR set to: 0
  6110  00423E  0012               	return		;funcret
  6111  004240                     __end_of_Setup_Temp_Fan:
  6112                           	opt stack 0
  6113                           tblptru	equ	0xFF8
  6114                           tblptrh	equ	0xFF7
  6115                           tblptrl	equ	0xFF6
  6116                           tablat	equ	0xFF5
  6117                           intcon	equ	0xFF2
  6118                           intcon2	equ	0xFF1
  6119                           postinc0	equ	0xFEE
  6120                           wreg	equ	0xFE8
  6121                           postdec1	equ	0xFE5
  6122                           fsr1l	equ	0xFE1
  6123                           postinc2	equ	0xFDE
  6124                           fsr2h	equ	0xFDA
  6125                           fsr2l	equ	0xFD9
  6126                           status	equ	0xFD8
  6127                           
  6128 ;; *************** function _Initialize_Setup_Fan_Screen *****************
  6129 ;; Defined at:
  6130 ;;		line 94 in file "Setup_Fan_Temp.c"
  6131 ;; Parameters:    Size  Location     Type
  6132 ;;		None
  6133 ;; Auto vars:     Size  Location     Type
  6134 ;;		None
  6135 ;; Return value:  Size  Location     Type
  6136 ;;		None               void
  6137 ;; Registers used:
  6138 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6139 ;; Tracked objects:
  6140 ;;		On entry : 0/0
  6141 ;;		On exit  : 0/0
  6142 ;;		Unchanged: 0/0
  6143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6147 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6148 ;;Total ram usage:        0 bytes
  6149 ;; Hardware stack levels used:    1
  6150 ;; Hardware stack levels required when called:   10
  6151 ;; This function calls:
  6152 ;;		_drawtext
  6153 ;;		_fillScreen
  6154 ;;		_strcpy
  6155 ;; This function is called by:
  6156 ;;		_Setup_Temp_Fan
  6157 ;; This function uses a non-reentrant model
  6158 ;;
  6159                           
  6160                           	psect	text17
  6161  00377A                     __ptext17:
  6162                           	opt stack 0
  6163  00377A                     _Initialize_Setup_Fan_Screen:
  6164                           	opt stack 19
  6165                           
  6166                           ;Setup_Fan_Temp.c: 96: fillScreen(0x0000);
  6167                           
  6168                           ; BSR set to: 0
  6169                           ;incstack = 0
  6170  00377A  0E00               	movlw	0
  6171  00377C  6E25               	movwf	fillScreen@color+1,c
  6172  00377E  0E00               	movlw	0
  6173  003780  6E24               	movwf	fillScreen@color,c
  6174  003782  ECB0  F029         	call	_fillScreen	;wreg free
  6175                           
  6176                           ;Setup_Fan_Temp.c: 98: strcpy(txt, "ECE3301L F23 S4\0");
  6177  003786  C062  F011         	movff	_txt,strcpy@to
  6178  00378A  C063  F012         	movff	_txt+1,strcpy@to+1
  6179  00378E  0E27               	movlw	low STR_7
  6180  003790  6E13               	movwf	strcpy@from,c
  6181  003792  0EFF               	movlw	high STR_7
  6182  003794  6E14               	movwf	strcpy@from+1,c
  6183  003796  EC34  F028         	call	_strcpy	;wreg free
  6184                           
  6185                           ;Setup_Fan_Temp.c: 99: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  6186  00379A  0E01               	movlw	1
  6187  00379C  6E39               	movwf	drawtext@y,c
  6188  00379E  C062  F03A         	movff	_txt,drawtext@_text
  6189  0037A2  C063  F03B         	movff	_txt+1,drawtext@_text+1
  6190  0037A6  0EFF               	movlw	255
  6191  0037A8  6E3D               	movwf	drawtext@color+1,c
  6192  0037AA  683C               	setf	drawtext@color,c
  6193  0037AC  0E00               	movlw	0
  6194  0037AE  6E3F               	movwf	drawtext@bg+1,c
  6195  0037B0  0E00               	movlw	0
  6196  0037B2  6E3E               	movwf	drawtext@bg,c
  6197  0037B4  0E01               	movlw	1
  6198  0037B6  6E40               	movwf	drawtext@size,c
  6199  0037B8  0E01               	movlw	1
  6200  0037BA  EC08  F01E         	call	_drawtext
  6201                           
  6202                           ;Setup_Fan_Temp.c: 101: strcpy(txt, "  Heater\0");
  6203  0037BE  C062  F011         	movff	_txt,strcpy@to
  6204  0037C2  C063  F012         	movff	_txt+1,strcpy@to+1
  6205  0037C6  0EBC               	movlw	low STR_30
  6206  0037C8  6E13               	movwf	strcpy@from,c
  6207  0037CA  0EFF               	movlw	high STR_30
  6208  0037CC  6E14               	movwf	strcpy@from+1,c
  6209  0037CE  EC34  F028         	call	_strcpy	;wreg free
  6210                           
  6211                           ;Setup_Fan_Temp.c: 102: drawtext(1 , 1+13, txt, 0xFFE0, 0x0000, 2);
  6212  0037D2  0E0E               	movlw	14
  6213  0037D4  6E39               	movwf	drawtext@y,c
  6214  0037D6  C062  F03A         	movff	_txt,drawtext@_text
  6215  0037DA  C063  F03B         	movff	_txt+1,drawtext@_text+1
  6216  0037DE  0EFF               	movlw	255
  6217  0037E0  6E3D               	movwf	drawtext@color+1,c
  6218  0037E2  0EE0               	movlw	224
  6219  0037E4  6E3C               	movwf	drawtext@color,c
  6220  0037E6  0E00               	movlw	0
  6221  0037E8  6E3F               	movwf	drawtext@bg+1,c
  6222  0037EA  0E00               	movlw	0
  6223  0037EC  6E3E               	movwf	drawtext@bg,c
  6224  0037EE  0E02               	movlw	2
  6225  0037F0  6E40               	movwf	drawtext@size,c
  6226  0037F2  0E01               	movlw	1
  6227  0037F4  EC08  F01E         	call	_drawtext
  6228                           
  6229                           ;Setup_Fan_Temp.c: 103: strcpy(txt, "  Setup\0");
  6230  0037F8  C062  F011         	movff	_txt,strcpy@to
  6231  0037FC  C063  F012         	movff	_txt+1,strcpy@to+1
  6232  003800  0EC6               	movlw	low STR_31
  6233  003802  6E13               	movwf	strcpy@from,c
  6234  003804  0EFF               	movlw	high STR_31
  6235  003806  6E14               	movwf	strcpy@from+1,c
  6236  003808  EC34  F028         	call	_strcpy	;wreg free
  6237                           
  6238                           ;Setup_Fan_Temp.c: 104: drawtext(1 , 1+35, txt, 0xFFE0, 0x0000, 2);
  6239  00380C  0E24               	movlw	36
  6240  00380E  6E39               	movwf	drawtext@y,c
  6241  003810  C062  F03A         	movff	_txt,drawtext@_text
  6242  003814  C063  F03B         	movff	_txt+1,drawtext@_text+1
  6243  003818  0EFF               	movlw	255
  6244  00381A  6E3D               	movwf	drawtext@color+1,c
  6245  00381C  0EE0               	movlw	224
  6246  00381E  6E3C               	movwf	drawtext@color,c
  6247  003820  0E00               	movlw	0
  6248  003822  6E3F               	movwf	drawtext@bg+1,c
  6249  003824  0E00               	movlw	0
  6250  003826  6E3E               	movwf	drawtext@bg,c
  6251  003828  0E02               	movlw	2
  6252  00382A  6E40               	movwf	drawtext@size,c
  6253  00382C  0E01               	movlw	1
  6254  00382E  EC08  F01E         	call	_drawtext
  6255                           
  6256                           ;Setup_Fan_Temp.c: 106: strcpy(txt, "Set Heater Temp");
  6257  003832  C062  F011         	movff	_txt,strcpy@to
  6258  003836  C063  F012         	movff	_txt+1,strcpy@to+1
  6259  00383A  0E48               	movlw	low STR_32
  6260  00383C  6E13               	movwf	strcpy@from,c
  6261  00383E  0EFF               	movlw	high STR_32
  6262  003840  6E14               	movwf	strcpy@from+1,c
  6263  003842  EC34  F028         	call	_strcpy	;wreg free
  6264                           
  6265                           ;Setup_Fan_Temp.c: 107: drawtext(15 , 60, txt, 0x07FF , 0x0000, 1);
  6266  003846  0E3C               	movlw	60
  6267  003848  6E39               	movwf	drawtext@y,c
  6268  00384A  C062  F03A         	movff	_txt,drawtext@_text
  6269  00384E  C063  F03B         	movff	_txt+1,drawtext@_text+1
  6270  003852  0E07               	movlw	7
  6271  003854  6E3D               	movwf	drawtext@color+1,c
  6272  003856  683C               	setf	drawtext@color,c
  6273  003858  0E00               	movlw	0
  6274  00385A  6E3F               	movwf	drawtext@bg+1,c
  6275  00385C  0E00               	movlw	0
  6276  00385E  6E3E               	movwf	drawtext@bg,c
  6277  003860  0E01               	movlw	1
  6278  003862  6E40               	movwf	drawtext@size,c
  6279  003864  0E0F               	movlw	15
  6280  003866  EC08  F01E         	call	_drawtext
  6281  00386A  0012               	return		;funcret
  6282  00386C                     __end_of_Initialize_Setup_Fan_Screen:
  6283                           	opt stack 0
  6284                           tblptru	equ	0xFF8
  6285                           tblptrh	equ	0xFF7
  6286                           tblptrl	equ	0xFF6
  6287                           tablat	equ	0xFF5
  6288                           intcon	equ	0xFF2
  6289                           intcon2	equ	0xFF1
  6290                           postinc0	equ	0xFEE
  6291                           wreg	equ	0xFE8
  6292                           postdec1	equ	0xFE5
  6293                           fsr1l	equ	0xFE1
  6294                           postinc2	equ	0xFDE
  6295                           fsr2h	equ	0xFDA
  6296                           fsr2l	equ	0xFD9
  6297                           status	equ	0xFD8
  6298                           
  6299 ;; *************** function _Increase_Fan_Temp *****************
  6300 ;; Defined at:
  6301 ;;		line 56 in file "Setup_Fan_Temp.c"
  6302 ;; Parameters:    Size  Location     Type
  6303 ;;		None
  6304 ;; Auto vars:     Size  Location     Type
  6305 ;;		None
  6306 ;; Return value:  Size  Location     Type
  6307 ;;		None               void
  6308 ;; Registers used:
  6309 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6310 ;; Tracked objects:
  6311 ;;		On entry : 0/0
  6312 ;;		On exit  : 0/0
  6313 ;;		Unchanged: 0/0
  6314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6318 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6319 ;;Total ram usage:        0 bytes
  6320 ;; Hardware stack levels used:    1
  6321 ;; Hardware stack levels required when called:   11
  6322 ;; This function calls:
  6323 ;;		_Update_Setup_Fan_Screen
  6324 ;; This function is called by:
  6325 ;;		_Setup_Temp_Fan
  6326 ;; This function uses a non-reentrant model
  6327 ;;
  6328                           
  6329                           	psect	text18
  6330  00537C                     __ptext18:
  6331                           	opt stack 0
  6332  00537C                     _Increase_Fan_Temp:
  6333                           	opt stack 18
  6334                           
  6335                           ;Setup_Fan_Temp.c: 60: setup_fan_set_temp++;
  6336                           
  6337                           ;incstack = 0
  6338  00537C  0100               	movlb	0	; () banked
  6339  00537E  2BB1               	incf	_setup_fan_set_temp& (0+255),f,b
  6340                           
  6341                           ; BSR set to: 0
  6342                           ;Setup_Fan_Temp.c: 61: if (setup_fan_set_temp > 125) setup_fan_set_temp = 125;
  6343  005380  0E7D               	movlw	125
  6344  005382  0100               	movlb	0	; () banked
  6345  005384  65B1               	cpfsgt	_setup_fan_set_temp& (0+255),b
  6346  005386  D004               	goto	l10768
  6347                           
  6348                           ; BSR set to: 0
  6349  005388  0E7D               	movlw	125
  6350  00538A  0100               	movlb	0	; () banked
  6351  00538C  6FB1               	movwf	_setup_fan_set_temp& (0+255),b
  6352  00538E  D000               	goto	l10768
  6353  005390                     l10768:
  6354                           
  6355                           ; BSR set to: 0
  6356                           ;Setup_Fan_Temp.c: 63: Update_Setup_Fan_Screen();
  6357  005390  EC20  F021         	call	_Update_Setup_Fan_Screen	;wreg free
  6358  005394  0012               	return		;funcret
  6359  005396                     __end_of_Increase_Fan_Temp:
  6360                           	opt stack 0
  6361                           tblptru	equ	0xFF8
  6362                           tblptrh	equ	0xFF7
  6363                           tblptrl	equ	0xFF6
  6364                           tablat	equ	0xFF5
  6365                           intcon	equ	0xFF2
  6366                           intcon2	equ	0xFF1
  6367                           postinc0	equ	0xFEE
  6368                           wreg	equ	0xFE8
  6369                           postdec1	equ	0xFE5
  6370                           fsr1l	equ	0xFE1
  6371                           postinc2	equ	0xFDE
  6372                           fsr2h	equ	0xFDA
  6373                           fsr2l	equ	0xFD9
  6374                           status	equ	0xFD8
  6375                           
  6376 ;; *************** function _Exit_Setup_Fan_Temp *****************
  6377 ;; Defined at:
  6378 ;;		line 79 in file "Setup_Fan_Temp.c"
  6379 ;; Parameters:    Size  Location     Type
  6380 ;;		None
  6381 ;; Auto vars:     Size  Location     Type
  6382 ;;		None
  6383 ;; Return value:  Size  Location     Type
  6384 ;;		None               void
  6385 ;; Registers used:
  6386 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6387 ;; Tracked objects:
  6388 ;;		On entry : 0/0
  6389 ;;		On exit  : 0/0
  6390 ;;		Unchanged: 0/0
  6391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6395 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6396 ;;Total ram usage:        0 bytes
  6397 ;; Hardware stack levels used:    1
  6398 ;; Hardware stack levels required when called:   11
  6399 ;; This function calls:
  6400 ;;		_DS3231_Read_Time
  6401 ;;		_Initialize_Screen
  6402 ;; This function is called by:
  6403 ;;		_Setup_Temp_Fan
  6404 ;; This function uses a non-reentrant model
  6405 ;;
  6406                           
  6407                           	psect	text19
  6408  0054FA                     __ptext19:
  6409                           	opt stack 0
  6410  0054FA                     _Exit_Setup_Fan_Temp:
  6411                           	opt stack 18
  6412                           
  6413                           ;Setup_Fan_Temp.c: 81: DS3231_Read_Time();
  6414                           
  6415                           ;incstack = 0
  6416  0054FA  EC80  F024         	call	_DS3231_Read_Time	;wreg free
  6417                           
  6418                           ;Setup_Fan_Temp.c: 82: Initialize_Screen();
  6419  0054FE  EC32  F00B         	call	_Initialize_Screen	;wreg free
  6420                           
  6421                           ;Setup_Fan_Temp.c: 83: In_Fan_Temp_Setup = 0;
  6422  005502  0E00               	movlw	0
  6423  005504  0100               	movlb	0	; () banked
  6424  005506  6F9F               	movwf	_In_Fan_Temp_Setup& (0+255),b
  6425                           
  6426                           ; BSR set to: 0
  6427  005508  0012               	return		;funcret
  6428  00550A                     __end_of_Exit_Setup_Fan_Temp:
  6429                           	opt stack 0
  6430                           tblptru	equ	0xFF8
  6431                           tblptrh	equ	0xFF7
  6432                           tblptrl	equ	0xFF6
  6433                           tablat	equ	0xFF5
  6434                           intcon	equ	0xFF2
  6435                           intcon2	equ	0xFF1
  6436                           postinc0	equ	0xFEE
  6437                           wreg	equ	0xFE8
  6438                           postdec1	equ	0xFE5
  6439                           fsr1l	equ	0xFE1
  6440                           postinc2	equ	0xFDE
  6441                           fsr2h	equ	0xFDA
  6442                           fsr2l	equ	0xFD9
  6443                           status	equ	0xFD8
  6444                           
  6445 ;; *************** function _Do_Save_New_Fan_Temp *****************
  6446 ;; Defined at:
  6447 ;;		line 86 in file "Setup_Fan_Temp.c"
  6448 ;; Parameters:    Size  Location     Type
  6449 ;;		None
  6450 ;; Auto vars:     Size  Location     Type
  6451 ;;		None
  6452 ;; Return value:  Size  Location     Type
  6453 ;;		None               void
  6454 ;; Registers used:
  6455 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6456 ;; Tracked objects:
  6457 ;;		On entry : 0/0
  6458 ;;		On exit  : 0/0
  6459 ;;		Unchanged: 0/0
  6460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6465 ;;Total ram usage:        0 bytes
  6466 ;; Hardware stack levels used:    1
  6467 ;; Hardware stack levels required when called:   11
  6468 ;; This function calls:
  6469 ;;		_DS3231_Read_Time
  6470 ;;		_Initialize_Screen
  6471 ;; This function is called by:
  6472 ;;		_Setup_Temp_Fan
  6473 ;; This function uses a non-reentrant model
  6474 ;;
  6475                           
  6476                           	psect	text20
  6477  00542C                     __ptext20:
  6478                           	opt stack 0
  6479  00542C                     _Do_Save_New_Fan_Temp:
  6480                           	opt stack 18
  6481                           
  6482                           ;Setup_Fan_Temp.c: 88: fan_set_temp = setup_fan_set_temp;
  6483                           
  6484                           ; BSR set to: 0
  6485                           ;incstack = 0
  6486  00542C  C0B1  F0B6         	movff	_setup_fan_set_temp,_fan_set_temp
  6487                           
  6488                           ;Setup_Fan_Temp.c: 89: DS3231_Read_Time();
  6489  005430  EC80  F024         	call	_DS3231_Read_Time	;wreg free
  6490                           
  6491                           ;Setup_Fan_Temp.c: 90: Initialize_Screen();
  6492  005434  EC32  F00B         	call	_Initialize_Screen	;wreg free
  6493                           
  6494                           ;Setup_Fan_Temp.c: 91: In_Fan_Temp_Setup = 0;
  6495  005438  0E00               	movlw	0
  6496  00543A  0100               	movlb	0	; () banked
  6497  00543C  6F9F               	movwf	_In_Fan_Temp_Setup& (0+255),b
  6498                           
  6499                           ; BSR set to: 0
  6500  00543E  0012               	return		;funcret
  6501  005440                     __end_of_Do_Save_New_Fan_Temp:
  6502                           	opt stack 0
  6503                           tblptru	equ	0xFF8
  6504                           tblptrh	equ	0xFF7
  6505                           tblptrl	equ	0xFF6
  6506                           tablat	equ	0xFF5
  6507                           intcon	equ	0xFF2
  6508                           intcon2	equ	0xFF1
  6509                           postinc0	equ	0xFEE
  6510                           wreg	equ	0xFE8
  6511                           postdec1	equ	0xFE5
  6512                           fsr1l	equ	0xFE1
  6513                           postinc2	equ	0xFDE
  6514                           fsr2h	equ	0xFDA
  6515                           fsr2l	equ	0xFD9
  6516                           status	equ	0xFD8
  6517                           
  6518 ;; *************** function _Decrease_Fan_Temp *****************
  6519 ;; Defined at:
  6520 ;;		line 67 in file "Setup_Fan_Temp.c"
  6521 ;; Parameters:    Size  Location     Type
  6522 ;;		None
  6523 ;; Auto vars:     Size  Location     Type
  6524 ;;		None
  6525 ;; Return value:  Size  Location     Type
  6526 ;;		None               void
  6527 ;; Registers used:
  6528 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6529 ;; Tracked objects:
  6530 ;;		On entry : 0/0
  6531 ;;		On exit  : 0/0
  6532 ;;		Unchanged: 0/0
  6533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6537 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6538 ;;Total ram usage:        0 bytes
  6539 ;; Hardware stack levels used:    1
  6540 ;; Hardware stack levels required when called:   11
  6541 ;; This function calls:
  6542 ;;		_Update_Setup_Fan_Screen
  6543 ;; This function is called by:
  6544 ;;		_Setup_Temp_Fan
  6545 ;; This function uses a non-reentrant model
  6546 ;;
  6547                           
  6548                           	psect	text21
  6549  005396                     __ptext21:
  6550                           	opt stack 0
  6551  005396                     _Decrease_Fan_Temp:
  6552                           	opt stack 18
  6553                           
  6554                           ;Setup_Fan_Temp.c: 71: --setup_fan_set_temp;
  6555                           
  6556                           ; BSR set to: 0
  6557                           ;incstack = 0
  6558  005396  0100               	movlb	0	; () banked
  6559  005398  07B1               	decf	_setup_fan_set_temp& (0+255),f,b
  6560                           
  6561                           ; BSR set to: 0
  6562                           ;Setup_Fan_Temp.c: 72: if (setup_fan_set_temp < 50) setup_fan_set_temp = 50;
  6563  00539A  0E32               	movlw	50
  6564  00539C  0100               	movlb	0	; () banked
  6565  00539E  61B1               	cpfslt	_setup_fan_set_temp& (0+255),b
  6566  0053A0  D004               	goto	l10760
  6567                           
  6568                           ; BSR set to: 0
  6569  0053A2  0E32               	movlw	50
  6570  0053A4  0100               	movlb	0	; () banked
  6571  0053A6  6FB1               	movwf	_setup_fan_set_temp& (0+255),b
  6572  0053A8  D000               	goto	l10760
  6573  0053AA                     l10760:
  6574                           
  6575                           ; BSR set to: 0
  6576                           ;Setup_Fan_Temp.c: 74: Update_Setup_Fan_Screen();
  6577  0053AA  EC20  F021         	call	_Update_Setup_Fan_Screen	;wreg free
  6578  0053AE  0012               	return		;funcret
  6579  0053B0                     __end_of_Decrease_Fan_Temp:
  6580                           	opt stack 0
  6581                           tblptru	equ	0xFF8
  6582                           tblptrh	equ	0xFF7
  6583                           tblptrl	equ	0xFF6
  6584                           tablat	equ	0xFF5
  6585                           intcon	equ	0xFF2
  6586                           intcon2	equ	0xFF1
  6587                           postinc0	equ	0xFEE
  6588                           wreg	equ	0xFE8
  6589                           postdec1	equ	0xFE5
  6590                           fsr1l	equ	0xFE1
  6591                           postinc2	equ	0xFDE
  6592                           fsr2h	equ	0xFDA
  6593                           fsr2l	equ	0xFD9
  6594                           status	equ	0xFD8
  6595                           
  6596 ;; *************** function _Update_Setup_Fan_Screen *****************
  6597 ;; Defined at:
  6598 ;;		line 110 in file "Setup_Fan_Temp.c"
  6599 ;; Parameters:    Size  Location     Type
  6600 ;;		None
  6601 ;; Auto vars:     Size  Location     Type
  6602 ;;  dc_char3        1   75[COMRAM] unsigned char 
  6603 ;;  dc_char2        1   74[COMRAM] unsigned char 
  6604 ;;  dc_char1        1   73[COMRAM] unsigned char 
  6605 ;; Return value:  Size  Location     Type
  6606 ;;		None               void
  6607 ;; Registers used:
  6608 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6609 ;; Tracked objects:
  6610 ;;		On entry : 0/0
  6611 ;;		On exit  : 0/0
  6612 ;;		Unchanged: 0/0
  6613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6615 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6617 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6618 ;;Total ram usage:        3 bytes
  6619 ;; Hardware stack levels used:    1
  6620 ;; Hardware stack levels required when called:   10
  6621 ;; This function calls:
  6622 ;;		___awdiv
  6623 ;;		___awmod
  6624 ;;		_drawtext
  6625 ;; This function is called by:
  6626 ;;		_Setup_Temp_Fan
  6627 ;;		_Increase_Fan_Temp
  6628 ;;		_Decrease_Fan_Temp
  6629 ;; This function uses a non-reentrant model
  6630 ;;
  6631                           
  6632                           	psect	text22
  6633  004240                     __ptext22:
  6634                           	opt stack 0
  6635  004240                     _Update_Setup_Fan_Screen:
  6636                           	opt stack 19
  6637                           
  6638                           ;Setup_Fan_Temp.c: 112: char dc_char1 = setup_fan_set_temp / 100;
  6639                           
  6640                           ;incstack = 0
  6641  004240  C0B1  F017         	movff	_setup_fan_set_temp,___awdiv@dividend
  6642  004244  6A18               	clrf	___awdiv@dividend+1,c
  6643  004246  0E00               	movlw	0
  6644  004248  6E1A               	movwf	___awdiv@divisor+1,c
  6645  00424A  0E64               	movlw	100
  6646  00424C  6E19               	movwf	___awdiv@divisor,c
  6647  00424E  ECB6  F021         	call	___awdiv	;wreg free
  6648  004252  5017               	movf	?___awdiv,w,c
  6649  004254  6E4A               	movwf	Update_Setup_Fan_Screen@dc_char1,c
  6650                           
  6651                           ;Setup_Fan_Temp.c: 113: char dc_char2 = (setup_fan_set_temp / 10) % 10;
  6652  004256  0E00               	movlw	0
  6653  004258  6E1A               	movwf	___awdiv@divisor+1,c
  6654  00425A  0E0A               	movlw	10
  6655  00425C  6E19               	movwf	___awdiv@divisor,c
  6656  00425E  C0B1  F017         	movff	_setup_fan_set_temp,___awdiv@dividend
  6657  004262  6A18               	clrf	___awdiv@dividend+1,c
  6658  004264  ECB6  F021         	call	___awdiv	;wreg free
  6659  004268  C017  F03D         	movff	?___awdiv,___awmod@dividend
  6660  00426C  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
  6661  004270  0E00               	movlw	0
  6662  004272  6E40               	movwf	___awmod@divisor+1,c
  6663  004274  0E0A               	movlw	10
  6664  004276  6E3F               	movwf	___awmod@divisor,c
  6665  004278  EC1E  F023         	call	___awmod	;wreg free
  6666  00427C  503D               	movf	?___awmod,w,c
  6667  00427E  6E4B               	movwf	Update_Setup_Fan_Screen@dc_char2,c
  6668                           
  6669                           ;Setup_Fan_Temp.c: 114: char dc_char3 = setup_fan_set_temp % 10;
  6670  004280  C0B1  F03D         	movff	_setup_fan_set_temp,___awmod@dividend
  6671  004284  6A3E               	clrf	___awmod@dividend+1,c
  6672  004286  0E00               	movlw	0
  6673  004288  6E40               	movwf	___awmod@divisor+1,c
  6674  00428A  0E0A               	movlw	10
  6675  00428C  6E3F               	movwf	___awmod@divisor,c
  6676  00428E  EC1E  F023         	call	___awmod	;wreg free
  6677  004292  503D               	movf	?___awmod,w,c
  6678  004294  6E4C               	movwf	Update_Setup_Fan_Screen@dc_char3,c
  6679                           
  6680                           ;Setup_Fan_Temp.c: 115: setup_fan_set_text[0] = dc_char1 + '0';
  6681  004296  504A               	movf	Update_Setup_Fan_Screen@dc_char1,w,c
  6682  004298  0F30               	addlw	48
  6683  00429A  0101               	movlb	1	; () banked
  6684  00429C  6F77               	movwf	_setup_fan_set_text& (0+255),b
  6685                           
  6686                           ; BSR set to: 1
  6687                           ;Setup_Fan_Temp.c: 116: setup_fan_set_text[1] = dc_char2 + '0';
  6688  00429E  504B               	movf	Update_Setup_Fan_Screen@dc_char2,w,c
  6689  0042A0  0F30               	addlw	48
  6690  0042A2  0101               	movlb	1	; () banked
  6691  0042A4  6F78               	movwf	(_setup_fan_set_text+1)& (0+255),b
  6692                           
  6693                           ; BSR set to: 1
  6694                           ;Setup_Fan_Temp.c: 117: setup_fan_set_text[2] = dc_char3 + '0';
  6695  0042A6  504C               	movf	Update_Setup_Fan_Screen@dc_char3,w,c
  6696  0042A8  0F30               	addlw	48
  6697  0042AA  0101               	movlb	1	; () banked
  6698  0042AC  6F79               	movwf	(_setup_fan_set_text+2)& (0+255),b
  6699                           
  6700                           ; BSR set to: 1
  6701                           ;Setup_Fan_Temp.c: 118: drawtext(40, 74 ,setup_fan_set_text, 0xF800, 0x0000, 2);
  6702  0042AE  0E4A               	movlw	74
  6703  0042B0  6E39               	movwf	drawtext@y,c
  6704  0042B2  0E77               	movlw	low _setup_fan_set_text
  6705  0042B4  6E3A               	movwf	drawtext@_text,c
  6706  0042B6  0E01               	movlw	high _setup_fan_set_text
  6707  0042B8  6E3B               	movwf	drawtext@_text+1,c
  6708  0042BA  0EF8               	movlw	248
  6709  0042BC  6E3D               	movwf	drawtext@color+1,c
  6710  0042BE  0E00               	movlw	0
  6711  0042C0  6E3C               	movwf	drawtext@color,c
  6712  0042C2  0E00               	movlw	0
  6713  0042C4  6E3F               	movwf	drawtext@bg+1,c
  6714  0042C6  0E00               	movlw	0
  6715  0042C8  6E3E               	movwf	drawtext@bg,c
  6716  0042CA  0E02               	movlw	2
  6717  0042CC  6E40               	movwf	drawtext@size,c
  6718  0042CE  0E28               	movlw	40
  6719  0042D0  EC08  F01E         	call	_drawtext
  6720  0042D4  0012               	return		;funcret
  6721  0042D6                     __end_of_Update_Setup_Fan_Screen:
  6722                           	opt stack 0
  6723                           tblptru	equ	0xFF8
  6724                           tblptrh	equ	0xFF7
  6725                           tblptrl	equ	0xFF6
  6726                           tablat	equ	0xFF5
  6727                           intcon	equ	0xFF2
  6728                           intcon2	equ	0xFF1
  6729                           postinc0	equ	0xFEE
  6730                           wreg	equ	0xFE8
  6731                           postdec1	equ	0xFE5
  6732                           fsr1l	equ	0xFE1
  6733                           postinc2	equ	0xFDE
  6734                           fsr2h	equ	0xFDA
  6735                           fsr2l	equ	0xFD9
  6736                           status	equ	0xFD8
  6737                           
  6738 ;; *************** function _Set_RPM_RGB *****************
  6739 ;; Defined at:
  6740 ;;		line 97 in file "Fan_Support.c"
  6741 ;; Parameters:    Size  Location     Type
  6742 ;;  rpm             2   30[COMRAM] int 
  6743 ;; Auto vars:     Size  Location     Type
  6744 ;;  color           1   32[COMRAM] unsigned char 
  6745 ;; Return value:  Size  Location     Type
  6746 ;;		None               void
  6747 ;; Registers used:
  6748 ;;		wreg, status,2, status,0, cstack
  6749 ;; Tracked objects:
  6750 ;;		On entry : 0/0
  6751 ;;		On exit  : 0/0
  6752 ;;		Unchanged: 0/0
  6753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6754 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6755 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6757 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6758 ;;Total ram usage:        3 bytes
  6759 ;; Hardware stack levels used:    1
  6760 ;; Hardware stack levels required when called:    4
  6761 ;; This function calls:
  6762 ;;		___awdiv
  6763 ;; This function is called by:
  6764 ;;		_main
  6765 ;; This function uses a non-reentrant model
  6766 ;;
  6767                           
  6768                           	psect	text23
  6769  004DA6                     __ptext23:
  6770                           	opt stack 0
  6771  004DA6                     _Set_RPM_RGB:
  6772                           	opt stack 26
  6773                           
  6774                           ;Fan_Support.c: 99: if(rpm == 0)
  6775                           
  6776                           ;incstack = 0
  6777  004DA6  501F               	movf	Set_RPM_RGB@rpm,w,c
  6778  004DA8  1020               	iorwf	Set_RPM_RGB@rpm+1,w,c
  6779  004DAA  A4D8               	btfss	status,2,c
  6780  004DAC  D003               	goto	l11004
  6781                           
  6782                           ;Fan_Support.c: 100: PORTE = (PORTE & 0xF8) | 0x00;
  6783  004DAE  5084               	movf	3972,w,c	;volatile
  6784  004DB0  0BF8               	andlw	248
  6785  004DB2  D01B               	goto	L6
  6786  004DB4                     l11004:
  6787                           
  6788                           ;Fan_Support.c: 101: else if (rpm < 500)
  6789  004DB4  BE20               	btfsc	Set_RPM_RGB@rpm+1,7,c
  6790  004DB6  D006               	goto	l11006
  6791  004DB8  0EF4               	movlw	244
  6792  004DBA  5C1F               	subwf	Set_RPM_RGB@rpm,w,c
  6793  004DBC  0E01               	movlw	1
  6794  004DBE  5820               	subwfb	Set_RPM_RGB@rpm+1,w,c
  6795  004DC0  B0D8               	btfsc	status,0,c
  6796  004DC2  D004               	goto	l11008
  6797  004DC4                     l11006:
  6798                           
  6799                           ;Fan_Support.c: 102: PORTE = (PORTE & 0xF8) | 0x01;
  6800  004DC4  5084               	movf	3972,w,c	;volatile
  6801  004DC6  0BF8               	andlw	248
  6802  004DC8  0901               	iorlw	1
  6803  004DCA  D00F               	goto	L6
  6804  004DCC                     l11008:
  6805                           
  6806                           ;Fan_Support.c: 103: else{
  6807                           ;Fan_Support.c: 105: char color = (rpm / 500)+1 ;
  6808  004DCC  C01F  F017         	movff	Set_RPM_RGB@rpm,___awdiv@dividend
  6809  004DD0  C020  F018         	movff	Set_RPM_RGB@rpm+1,___awdiv@dividend+1
  6810  004DD4  0E01               	movlw	1
  6811  004DD6  6E1A               	movwf	___awdiv@divisor+1,c
  6812  004DD8  0EF4               	movlw	244
  6813  004DDA  6E19               	movwf	___awdiv@divisor,c
  6814  004DDC  ECB6  F021         	call	___awdiv	;wreg free
  6815  004DE0  2817               	incf	?___awdiv,w,c
  6816  004DE2  6E21               	movwf	Set_RPM_RGB@color,c
  6817                           
  6818                           ;Fan_Support.c: 107: PORTE = (PORTE & 0xF8) | color;
  6819  004DE4  5084               	movf	3972,w,c	;volatile
  6820  004DE6  0BF8               	andlw	248
  6821  004DE8  1021               	iorwf	Set_RPM_RGB@color,w,c
  6822  004DEA                     L6:
  6823  004DEA  6E84               	movwf	3972,c	;volatile
  6824  004DEC  D000               	goto	l1071
  6825  004DEE                     l1071:
  6826  004DEE  0012               	return		;funcret
  6827  004DF0                     __end_of_Set_RPM_RGB:
  6828                           	opt stack 0
  6829                           tblptru	equ	0xFF8
  6830                           tblptrh	equ	0xFF7
  6831                           tblptrl	equ	0xFF6
  6832                           tablat	equ	0xFF5
  6833                           intcon	equ	0xFF2
  6834                           intcon2	equ	0xFF1
  6835                           postinc0	equ	0xFEE
  6836                           wreg	equ	0xFE8
  6837                           postdec1	equ	0xFE5
  6838                           fsr1l	equ	0xFE1
  6839                           postinc2	equ	0xFDE
  6840                           fsr2h	equ	0xFDA
  6841                           fsr2l	equ	0xFD9
  6842                           status	equ	0xFD8
  6843                           
  6844 ;; *************** function _Set_ADCON0 *****************
  6845 ;; Defined at:
  6846 ;;		line 196 in file "utils.c"
  6847 ;; Parameters:    Size  Location     Type
  6848 ;;  ch              1    wreg     unsigned char 
  6849 ;; Auto vars:     Size  Location     Type
  6850 ;;  ch              1   16[COMRAM] unsigned char 
  6851 ;; Return value:  Size  Location     Type
  6852 ;;		None               void
  6853 ;; Registers used:
  6854 ;;		wreg, status,2, status,0, prodl, prodh
  6855 ;; Tracked objects:
  6856 ;;		On entry : 0/0
  6857 ;;		On exit  : 0/0
  6858 ;;		Unchanged: 0/0
  6859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6861 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6863 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6864 ;;Total ram usage:        1 bytes
  6865 ;; Hardware stack levels used:    1
  6866 ;; Hardware stack levels required when called:    3
  6867 ;; This function calls:
  6868 ;;		Nothing
  6869 ;; This function is called by:
  6870 ;;		_main
  6871 ;; This function uses a non-reentrant model
  6872 ;;
  6873                           
  6874                           	psect	text24
  6875  005580                     __ptext24:
  6876                           	opt stack 0
  6877  005580                     _Set_ADCON0:
  6878                           	opt stack 27
  6879                           
  6880                           ;incstack = 0
  6881                           ;Set_ADCON0@ch stored from wreg
  6882  005580  6E11               	movwf	Set_ADCON0@ch,c
  6883                           
  6884                           ;utils.c: 198: ADCON0 = ch * 4 + 1;
  6885  005582  5011               	movf	Set_ADCON0@ch,w,c
  6886  005584  0D04               	mullw	4
  6887  005586  28F3               	incf	prodl,w,c
  6888  005588  6EC2               	movwf	4034,c	;volatile
  6889  00558A  0012               	return		;funcret
  6890  00558C                     __end_of_Set_ADCON0:
  6891                           	opt stack 0
  6892                           tblptru	equ	0xFF8
  6893                           tblptrh	equ	0xFF7
  6894                           tblptrl	equ	0xFF6
  6895                           tablat	equ	0xFF5
  6896                           prodl	equ	0xFF3
  6897                           intcon	equ	0xFF2
  6898                           intcon2	equ	0xFF1
  6899                           postinc0	equ	0xFEE
  6900                           wreg	equ	0xFE8
  6901                           postdec1	equ	0xFE5
  6902                           fsr1l	equ	0xFE1
  6903                           postinc2	equ	0xFDE
  6904                           fsr2h	equ	0xFDA
  6905                           fsr2l	equ	0xFD9
  6906                           status	equ	0xFD8
  6907                           
  6908 ;; *************** function _Monitor_Fan *****************
  6909 ;; Defined at:
  6910 ;;		line 118 in file "Fan_Support.c"
  6911 ;; Parameters:    Size  Location     Type
  6912 ;;		None
  6913 ;; Auto vars:     Size  Location     Type
  6914 ;;		None
  6915 ;; Return value:  Size  Location     Type
  6916 ;;		None               void
  6917 ;; Registers used:
  6918 ;;		wreg, status,2, status,0, cstack
  6919 ;; Tracked objects:
  6920 ;;		On entry : 0/0
  6921 ;;		On exit  : 0/0
  6922 ;;		Unchanged: 0/0
  6923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6927 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6928 ;;Total ram usage:        0 bytes
  6929 ;; Hardware stack levels used:    1
  6930 ;; Hardware stack levels required when called:    6
  6931 ;; This function calls:
  6932 ;;		_Turn_Off_Fan
  6933 ;;		_Turn_On_Fan
  6934 ;;		_do_update_pwm
  6935 ;; This function is called by:
  6936 ;;		_main
  6937 ;; This function uses a non-reentrant model
  6938 ;;
  6939                           
  6940                           	psect	text25
  6941  005194                     __ptext25:
  6942                           	opt stack 0
  6943  005194                     _Monitor_Fan:
  6944                           	opt stack 24
  6945                           
  6946                           ;Fan_Support.c: 120: if(FAN == 0)
  6947                           
  6948                           ;incstack = 0
  6949  005194  0100               	movlb	0	; () banked
  6950  005196  519B               	movf	_FAN& (0+255),w,b
  6951  005198  A4D8               	btfss	status,2,c
  6952  00519A  D006               	goto	l11018
  6953                           
  6954                           ; BSR set to: 0
  6955                           ;Fan_Support.c: 121: {
  6956                           ;Fan_Support.c: 122: Turn_Off_Fan();
  6957  00519C  ECCC  F02A         	call	_Turn_Off_Fan	;wreg free
  6958                           
  6959                           ;Fan_Support.c: 123: duty_cycle = 0;
  6960  0051A0  0E00               	movlw	0
  6961  0051A2  0100               	movlb	0	; () banked
  6962  0051A4  6FAB               	movwf	_duty_cycle& (0+255),b
  6963                           
  6964                           ;Fan_Support.c: 125: }
  6965  0051A6  D003               	goto	l11020
  6966  0051A8                     l11018:
  6967                           
  6968                           ; BSR set to: 0
  6969                           ;Fan_Support.c: 126: else Turn_On_Fan();
  6970  0051A8  ECC6  F02A         	call	_Turn_On_Fan	;wreg free
  6971  0051AC  D000               	goto	l11020
  6972  0051AE                     l11020:
  6973                           
  6974                           ;Fan_Support.c: 127: do_update_pwm(duty_cycle);
  6975  0051AE  0100               	movlb	0	; () banked
  6976  0051B0  51AB               	movf	_duty_cycle& (0+255),w,b
  6977  0051B2  EC6F  F020         	call	_do_update_pwm
  6978  0051B6  0012               	return		;funcret
  6979  0051B8                     __end_of_Monitor_Fan:
  6980                           	opt stack 0
  6981                           tblptru	equ	0xFF8
  6982                           tblptrh	equ	0xFF7
  6983                           tblptrl	equ	0xFF6
  6984                           tablat	equ	0xFF5
  6985                           prodl	equ	0xFF3
  6986                           intcon	equ	0xFF2
  6987                           intcon2	equ	0xFF1
  6988                           postinc0	equ	0xFEE
  6989                           wreg	equ	0xFE8
  6990                           postdec1	equ	0xFE5
  6991                           fsr1l	equ	0xFE1
  6992                           postinc2	equ	0xFDE
  6993                           fsr2h	equ	0xFDA
  6994                           fsr2l	equ	0xFD9
  6995                           status	equ	0xFD8
  6996                           
  6997 ;; *************** function _Turn_On_Fan *****************
  6998 ;; Defined at:
  6999 ;;		line 34 in file "Fan_Support.c"
  7000 ;; Parameters:    Size  Location     Type
  7001 ;;		None
  7002 ;; Auto vars:     Size  Location     Type
  7003 ;;		None
  7004 ;; Return value:  Size  Location     Type
  7005 ;;		None               void
  7006 ;; Registers used:
  7007 ;;		wreg, status,2
  7008 ;; Tracked objects:
  7009 ;;		On entry : 0/0
  7010 ;;		On exit  : 0/0
  7011 ;;		Unchanged: 0/0
  7012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7016 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7017 ;;Total ram usage:        0 bytes
  7018 ;; Hardware stack levels used:    1
  7019 ;; Hardware stack levels required when called:    3
  7020 ;; This function calls:
  7021 ;;		Nothing
  7022 ;; This function is called by:
  7023 ;;		_Toggle_Fan
  7024 ;;		_Monitor_Fan
  7025 ;; This function uses a non-reentrant model
  7026 ;;
  7027                           
  7028                           	psect	text26
  7029  00558C                     __ptext26:
  7030                           	opt stack 0
  7031  00558C                     _Turn_On_Fan:
  7032                           	opt stack 25
  7033                           
  7034                           ;Fan_Support.c: 36: FAN = 1;
  7035                           
  7036                           ;incstack = 0
  7037  00558C  0E01               	movlw	1
  7038  00558E  0100               	movlb	0	; () banked
  7039  005590  6F9B               	movwf	_FAN& (0+255),b
  7040                           
  7041                           ; BSR set to: 0
  7042                           ;Fan_Support.c: 38: PORTDbits.RD3 = 1;
  7043  005592  8683               	bsf	3971,3,c	;volatile
  7044                           
  7045                           ; BSR set to: 0
  7046                           ;Fan_Support.c: 39: PORTDbits.RD7 = 1;
  7047  005594  8E83               	bsf	3971,7,c	;volatile
  7048                           
  7049                           ; BSR set to: 0
  7050  005596  0012               	return		;funcret
  7051  005598                     __end_of_Turn_On_Fan:
  7052                           	opt stack 0
  7053                           tblptru	equ	0xFF8
  7054                           tblptrh	equ	0xFF7
  7055                           tblptrl	equ	0xFF6
  7056                           tablat	equ	0xFF5
  7057                           prodl	equ	0xFF3
  7058                           intcon	equ	0xFF2
  7059                           intcon2	equ	0xFF1
  7060                           postinc0	equ	0xFEE
  7061                           wreg	equ	0xFE8
  7062                           postdec1	equ	0xFE5
  7063                           fsr1l	equ	0xFE1
  7064                           postinc2	equ	0xFDE
  7065                           fsr2h	equ	0xFDA
  7066                           fsr2l	equ	0xFD9
  7067                           status	equ	0xFD8
  7068                           
  7069 ;; *************** function _Do_Setup_Time *****************
  7070 ;; Defined at:
  7071 ;;		line 33 in file "Setup_Time.c"
  7072 ;; Parameters:    Size  Location     Type
  7073 ;;		None
  7074 ;; Auto vars:     Size  Location     Type
  7075 ;;		None
  7076 ;; Return value:  Size  Location     Type
  7077 ;;		None               void
  7078 ;; Registers used:
  7079 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7080 ;; Tracked objects:
  7081 ;;		On entry : 0/0
  7082 ;;		On exit  : 0/0
  7083 ;;		Unchanged: 0/0
  7084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7089 ;;Total ram usage:        0 bytes
  7090 ;; Hardware stack levels used:    1
  7091 ;; Hardware stack levels required when called:   12
  7092 ;; This function calls:
  7093 ;;		_DS3231_Read_Time
  7094 ;;		_Decrease_Time
  7095 ;;		_Do_Beep_Bad
  7096 ;;		_Do_Beep_Good
  7097 ;;		_Do_Save_New_Time
  7098 ;;		_Exit_Time_Setup
  7099 ;;		_Go_Next_Field
  7100 ;;		_Go_Prev_Field
  7101 ;;		_Increase_Time
  7102 ;;		_Initialize_Setup_Time_Screen
  7103 ;;		_Update_Setup_Time_Screen
  7104 ;;		_bcd_2_dec
  7105 ;;		_check_for_button_input
  7106 ;; This function is called by:
  7107 ;;		_main
  7108 ;; This function uses a non-reentrant model
  7109 ;;
  7110                           
  7111                           	psect	text27
  7112  003264                     __ptext27:
  7113                           	opt stack 0
  7114  003264                     _Do_Setup_Time:
  7115                           	opt stack 18
  7116                           
  7117                           ;Setup_Time.c: 37: Select_Field = 0;
  7118                           
  7119                           ; BSR set to: 0
  7120                           ;incstack = 0
  7121  003264  0E00               	movlw	0
  7122  003266  0100               	movlb	0	; () banked
  7123  003268  6FA6               	movwf	_Select_Field& (0+255),b
  7124                           
  7125                           ; BSR set to: 0
  7126                           ;Setup_Time.c: 39: DS3231_Read_Time();
  7127  00326A  EC80  F024         	call	_DS3231_Read_Time	;wreg free
  7128                           
  7129                           ;Setup_Time.c: 40: setup_second = bcd_2_dec(second);
  7130  00326E  506C               	movf	_second,w,c
  7131  003270  EC7B  F028         	call	_bcd_2_dec
  7132  003274  0100               	movlb	0	; () banked
  7133  003276  6FB4               	movwf	_setup_second& (0+255),b
  7134                           
  7135                           ; BSR set to: 0
  7136                           ;Setup_Time.c: 41: setup_minute = bcd_2_dec(minute);
  7137  003278  506A               	movf	_minute,w,c
  7138  00327A  EC7B  F028         	call	_bcd_2_dec
  7139  00327E  0100               	movlb	0	; () banked
  7140  003280  6FB3               	movwf	_setup_minute& (0+255),b
  7141                           
  7142                           ; BSR set to: 0
  7143                           ;Setup_Time.c: 42: setup_hour = bcd_2_dec(hour);
  7144  003282  5069               	movf	_hour,w,c
  7145  003284  EC7B  F028         	call	_bcd_2_dec
  7146  003288  0100               	movlb	0	; () banked
  7147  00328A  6FB2               	movwf	_setup_hour& (0+255),b
  7148                           
  7149                           ; BSR set to: 0
  7150                           ;Setup_Time.c: 43: setup_day = bcd_2_dec(day);
  7151  00328C  5068               	movf	_day,w,c
  7152  00328E  EC7B  F028         	call	_bcd_2_dec
  7153  003292  6E6D               	movwf	_setup_day,c
  7154                           
  7155                           ;Setup_Time.c: 44: setup_month = bcd_2_dec(month);
  7156  003294  506B               	movf	_month,w,c
  7157  003296  EC7B  F028         	call	_bcd_2_dec
  7158  00329A  6E6E               	movwf	_setup_month,c
  7159                           
  7160                           ;Setup_Time.c: 45: setup_year = bcd_2_dec(year);
  7161  00329C  506F               	movf	_year,w,c
  7162  00329E  EC7B  F028         	call	_bcd_2_dec
  7163  0032A2  0100               	movlb	0	; () banked
  7164  0032A4  6FB5               	movwf	_setup_year& (0+255),b
  7165                           
  7166                           ; BSR set to: 0
  7167                           ;Setup_Time.c: 47: Initialize_Setup_Time_Screen();
  7168  0032A6  ECB9  F019         	call	_Initialize_Setup_Time_Screen	;wreg free
  7169                           
  7170                           ;Setup_Time.c: 48: Update_Setup_Time_Screen();
  7171  0032AA  EC09  F015         	call	_Update_Setup_Time_Screen	;wreg free
  7172                           
  7173                           ;Setup_Time.c: 49: In_Time_Setup = 1;
  7174  0032AE  0E01               	movlw	1
  7175  0032B0  0100               	movlb	0	; () banked
  7176  0032B2  6FA0               	movwf	_In_Time_Setup& (0+255),b
  7177                           
  7178                           ;Setup_Time.c: 51: while (In_Time_Setup == 1)
  7179  0032B4  D059               	goto	l11270
  7180  0032B6                     l11228:
  7181                           
  7182                           ; BSR set to: 0
  7183                           ;Setup_Time.c: 52: {
  7184                           ;Setup_Time.c: 54: if (check_for_button_input() == 1)
  7185  0032B6  ECB3  F01F         	call	_check_for_button_input	;wreg free
  7186  0032BA  06E8               	decf	wreg,f,c
  7187  0032BC  A4D8               	btfss	status,2,c
  7188  0032BE  D054               	goto	l11270
  7189                           
  7190                           ;Setup_Time.c: 55: {
  7191                           ;Setup_Time.c: 57: if ((found == 0x03) || (found == 0x04) || (found == 0x00) || (found =
      +                          = 0x02) || (found == 0x06) || (found == 0x07))
  7192  0032C0  0E03               	movlw	3
  7193  0032C2  0100               	movlb	0	; () banked
  7194  0032C4  19AC               	xorwf	_found& (0+255),w,b
  7195  0032C6  B4D8               	btfsc	status,2,c
  7196  0032C8  D018               	goto	l11242
  7197                           
  7198                           ; BSR set to: 0
  7199  0032CA  0E04               	movlw	4
  7200  0032CC  0100               	movlb	0	; () banked
  7201  0032CE  19AC               	xorwf	_found& (0+255),w,b
  7202  0032D0  B4D8               	btfsc	status,2,c
  7203  0032D2  D013               	goto	l11242
  7204                           
  7205                           ; BSR set to: 0
  7206  0032D4  0100               	movlb	0	; () banked
  7207  0032D6  51AC               	movf	_found& (0+255),w,b
  7208  0032D8  B4D8               	btfsc	status,2,c
  7209  0032DA  D00F               	goto	l11242
  7210                           
  7211                           ; BSR set to: 0
  7212  0032DC  0E02               	movlw	2
  7213  0032DE  0100               	movlb	0	; () banked
  7214  0032E0  19AC               	xorwf	_found& (0+255),w,b
  7215  0032E2  B4D8               	btfsc	status,2,c
  7216  0032E4  D00A               	goto	l11242
  7217                           
  7218                           ; BSR set to: 0
  7219  0032E6  0E06               	movlw	6
  7220  0032E8  0100               	movlb	0	; () banked
  7221  0032EA  19AC               	xorwf	_found& (0+255),w,b
  7222  0032EC  B4D8               	btfsc	status,2,c
  7223  0032EE  D005               	goto	l11242
  7224                           
  7225                           ; BSR set to: 0
  7226  0032F0  0E07               	movlw	7
  7227  0032F2  0100               	movlb	0	; () banked
  7228  0032F4  19AC               	xorwf	_found& (0+255),w,b
  7229  0032F6  A4D8               	btfss	status,2,c
  7230  0032F8  D034               	goto	l11268
  7231  0032FA                     l11242:
  7232                           
  7233                           ; BSR set to: 0
  7234                           ;Setup_Time.c: 58: {
  7235                           ;Setup_Time.c: 59: Do_Beep_Good();
  7236  0032FA  ECD8  F029         	call	_Do_Beep_Good	;wreg free
  7237                           
  7238                           ;Setup_Time.c: 60: if (found == 0x03) Go_Prev_Field();
  7239  0032FE  0E03               	movlw	3
  7240  003300  0100               	movlb	0	; () banked
  7241  003302  19AC               	xorwf	_found& (0+255),w,b
  7242  003304  A4D8               	btfss	status,2,c
  7243  003306  D003               	goto	l11248
  7244                           
  7245                           ; BSR set to: 0
  7246  003308  EC33  F029         	call	_Go_Prev_Field	;wreg free
  7247  00330C  D000               	goto	l11248
  7248  00330E                     l11248:
  7249                           
  7250                           ;Setup_Time.c: 62: if (found == 0x04) Go_Next_Field();
  7251  00330E  0E04               	movlw	4
  7252  003310  0100               	movlb	0	; () banked
  7253  003312  19AC               	xorwf	_found& (0+255),w,b
  7254  003314  A4D8               	btfss	status,2,c
  7255  003316  D003               	goto	l11252
  7256                           
  7257                           ; BSR set to: 0
  7258  003318  EC43  F029         	call	_Go_Next_Field	;wreg free
  7259  00331C  D000               	goto	l11252
  7260  00331E                     l11252:
  7261                           
  7262                           ;Setup_Time.c: 64: if (found == 0x02) Do_Save_New_Time();
  7263  00331E  0E02               	movlw	2
  7264  003320  0100               	movlb	0	; () banked
  7265  003322  19AC               	xorwf	_found& (0+255),w,b
  7266  003324  A4D8               	btfss	status,2,c
  7267  003326  D003               	goto	l11256
  7268                           
  7269                           ; BSR set to: 0
  7270  003328  EC20  F02A         	call	_Do_Save_New_Time	;wreg free
  7271  00332C  D000               	goto	l11256
  7272  00332E                     l11256:
  7273                           
  7274                           ;Setup_Time.c: 66: if (found == 0x00) Exit_Time_Setup();
  7275  00332E  0100               	movlb	0	; () banked
  7276  003330  51AC               	movf	_found& (0+255),w,b
  7277  003332  A4D8               	btfss	status,2,c
  7278  003334  D003               	goto	l11260
  7279                           
  7280                           ; BSR set to: 0
  7281  003336  EC85  F02A         	call	_Exit_Time_Setup	;wreg free
  7282  00333A  D000               	goto	l11260
  7283  00333C                     l11260:
  7284                           
  7285                           ;Setup_Time.c: 68: if (found == 0x06) Decrease_Time();
  7286  00333C  0E06               	movlw	6
  7287  00333E  0100               	movlb	0	; () banked
  7288  003340  19AC               	xorwf	_found& (0+255),w,b
  7289  003342  A4D8               	btfss	status,2,c
  7290  003344  D003               	goto	l11264
  7291                           
  7292                           ; BSR set to: 0
  7293  003346  EC76  F016         	call	_Decrease_Time	;wreg free
  7294  00334A  D000               	goto	l11264
  7295  00334C                     l11264:
  7296                           
  7297                           ;Setup_Time.c: 70: if (found == 0x07) Increase_Time();
  7298  00334C  0E07               	movlw	7
  7299  00334E  0100               	movlb	0	; () banked
  7300  003350  19AC               	xorwf	_found& (0+255),w,b
  7301  003352  A4D8               	btfss	status,2,c
  7302  003354  D003               	goto	l779
  7303                           
  7304                           ; BSR set to: 0
  7305  003356  EC96  F017         	call	_Increase_Time	;wreg free
  7306  00335A  D006               	goto	l11270
  7307  00335C                     l779:
  7308                           
  7309                           ; BSR set to: 0
  7310                           ;Setup_Time.c: 72: else found = 0xff;
  7311  00335C  0100               	movlb	0	; () banked
  7312  00335E  69AC               	setf	_found& (0+255),b
  7313                           
  7314                           ; BSR set to: 0
  7315                           ;Setup_Time.c: 73: }
  7316  003360  D003               	goto	l11270
  7317  003362                     l11268:
  7318                           
  7319                           ; BSR set to: 0
  7320                           ;Setup_Time.c: 74: else
  7321                           ;Setup_Time.c: 75: {
  7322                           ;Setup_Time.c: 76: Do_Beep_Bad();
  7323  003362  ECE5  F029         	call	_Do_Beep_Bad	;wreg free
  7324  003366  D000               	goto	l11270
  7325  003368                     l11270:
  7326  003368  0100               	movlb	0	; () banked
  7327  00336A  05A0               	decf	_In_Time_Setup& (0+255),w,b
  7328  00336C  B4D8               	btfsc	status,2,c
  7329  00336E  D7A3               	goto	l11228
  7330                           
  7331                           ; BSR set to: 0
  7332                           
  7333                           ; BSR set to: 0
  7334  003370  0012               	return		;funcret
  7335  003372                     __end_of_Do_Setup_Time:
  7336                           	opt stack 0
  7337                           tblptru	equ	0xFF8
  7338                           tblptrh	equ	0xFF7
  7339                           tblptrl	equ	0xFF6
  7340                           tablat	equ	0xFF5
  7341                           prodl	equ	0xFF3
  7342                           intcon	equ	0xFF2
  7343                           intcon2	equ	0xFF1
  7344                           postinc0	equ	0xFEE
  7345                           wreg	equ	0xFE8
  7346                           postdec1	equ	0xFE5
  7347                           fsr1l	equ	0xFE1
  7348                           postinc2	equ	0xFDE
  7349                           fsr2h	equ	0xFDA
  7350                           fsr2l	equ	0xFD9
  7351                           status	equ	0xFD8
  7352                           
  7353 ;; *************** function _Initialize_Setup_Time_Screen *****************
  7354 ;; Defined at:
  7355 ;;		line 238 in file "Setup_Time.c"
  7356 ;; Parameters:    Size  Location     Type
  7357 ;;		None
  7358 ;; Auto vars:     Size  Location     Type
  7359 ;;		None
  7360 ;; Return value:  Size  Location     Type
  7361 ;;		None               void
  7362 ;; Registers used:
  7363 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7364 ;; Tracked objects:
  7365 ;;		On entry : 0/0
  7366 ;;		On exit  : 0/0
  7367 ;;		Unchanged: 0/0
  7368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7373 ;;Total ram usage:        0 bytes
  7374 ;; Hardware stack levels used:    1
  7375 ;; Hardware stack levels required when called:   10
  7376 ;; This function calls:
  7377 ;;		_drawtext
  7378 ;;		_fillRect
  7379 ;;		_fillScreen
  7380 ;;		_strcpy
  7381 ;; This function is called by:
  7382 ;;		_Do_Setup_Time
  7383 ;; This function uses a non-reentrant model
  7384 ;;
  7385                           
  7386                           	psect	text28
  7387  003372                     __ptext28:
  7388                           	opt stack 0
  7389  003372                     _Initialize_Setup_Time_Screen:
  7390                           	opt stack 19
  7391                           
  7392                           ;Setup_Time.c: 240: fillScreen(0x0000);
  7393                           
  7394                           ; BSR set to: 0
  7395                           ;incstack = 0
  7396  003372  0E00               	movlw	0
  7397  003374  6E25               	movwf	fillScreen@color+1,c
  7398  003376  0E00               	movlw	0
  7399  003378  6E24               	movwf	fillScreen@color,c
  7400  00337A  ECB0  F029         	call	_fillScreen	;wreg free
  7401                           
  7402                           ;Setup_Time.c: 242: strcpy(txt, "ECE3301L F23 S4\0");
  7403  00337E  C062  F011         	movff	_txt,strcpy@to
  7404  003382  C063  F012         	movff	_txt+1,strcpy@to+1
  7405  003386  0E27               	movlw	low STR_7
  7406  003388  6E13               	movwf	strcpy@from,c
  7407  00338A  0EFF               	movlw	high STR_7
  7408  00338C  6E14               	movwf	strcpy@from+1,c
  7409  00338E  EC34  F028         	call	_strcpy	;wreg free
  7410                           
  7411                           ;Setup_Time.c: 243: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  7412  003392  0E01               	movlw	1
  7413  003394  6E39               	movwf	drawtext@y,c
  7414  003396  C062  F03A         	movff	_txt,drawtext@_text
  7415  00339A  C063  F03B         	movff	_txt+1,drawtext@_text+1
  7416  00339E  0EFF               	movlw	255
  7417  0033A0  6E3D               	movwf	drawtext@color+1,c
  7418  0033A2  683C               	setf	drawtext@color,c
  7419  0033A4  0E00               	movlw	0
  7420  0033A6  6E3F               	movwf	drawtext@bg+1,c
  7421  0033A8  0E00               	movlw	0
  7422  0033AA  6E3E               	movwf	drawtext@bg,c
  7423  0033AC  0E01               	movlw	1
  7424  0033AE  6E40               	movwf	drawtext@size,c
  7425  0033B0  0E01               	movlw	1
  7426  0033B2  EC08  F01E         	call	_drawtext
  7427                           
  7428                           ;Setup_Time.c: 246: strcpy(txt, "Time Setup\0");
  7429  0033B6  C062  F011         	movff	_txt,strcpy@to
  7430  0033BA  C063  F012         	movff	_txt+1,strcpy@to+1
  7431  0033BE  0E8F               	movlw	low STR_34
  7432  0033C0  6E13               	movwf	strcpy@from,c
  7433  0033C2  0EFF               	movlw	high STR_34
  7434  0033C4  6E14               	movwf	strcpy@from+1,c
  7435  0033C6  EC34  F028         	call	_strcpy	;wreg free
  7436                           
  7437                           ;Setup_Time.c: 247: drawtext(1+3 , 1+15, txt, 0xF81F, 0x0000, 2);
  7438  0033CA  0E10               	movlw	16
  7439  0033CC  6E39               	movwf	drawtext@y,c
  7440  0033CE  C062  F03A         	movff	_txt,drawtext@_text
  7441  0033D2  C063  F03B         	movff	_txt+1,drawtext@_text+1
  7442  0033D6  0EF8               	movlw	248
  7443  0033D8  6E3D               	movwf	drawtext@color+1,c
  7444  0033DA  0E1F               	movlw	31
  7445  0033DC  6E3C               	movwf	drawtext@color,c
  7446  0033DE  0E00               	movlw	0
  7447  0033E0  6E3F               	movwf	drawtext@bg+1,c
  7448  0033E2  0E00               	movlw	0
  7449  0033E4  6E3E               	movwf	drawtext@bg,c
  7450  0033E6  0E02               	movlw	2
  7451  0033E8  6E40               	movwf	drawtext@size,c
  7452  0033EA  0E04               	movlw	4
  7453  0033EC  EC08  F01E         	call	_drawtext
  7454                           
  7455                           ;Setup_Time.c: 249: strcpy(txt, "Time");
  7456  0033F0  C062  F011         	movff	_txt,strcpy@to
  7457  0033F4  C063  F012         	movff	_txt+1,strcpy@to+1
  7458  0033F8  0EB7               	movlw	low (STR_13+6)
  7459  0033FA  6E13               	movwf	strcpy@from,c
  7460  0033FC  0EFF               	movlw	high (STR_13+6)
  7461  0033FE  6E14               	movwf	strcpy@from+1,c
  7462  003400  EC34  F028         	call	_strcpy	;wreg free
  7463                           
  7464                           ;Setup_Time.c: 250: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  7465  003404  0E28               	movlw	40
  7466  003406  6E39               	movwf	drawtext@y,c
  7467  003408  C062  F03A         	movff	_txt,drawtext@_text
  7468  00340C  C063  F03B         	movff	_txt+1,drawtext@_text+1
  7469  003410  0E00               	movlw	0
  7470  003412  6E3D               	movwf	drawtext@color+1,c
  7471  003414  0E1F               	movlw	31
  7472  003416  6E3C               	movwf	drawtext@color,c
  7473  003418  0E00               	movlw	0
  7474  00341A  6E3F               	movwf	drawtext@bg+1,c
  7475  00341C  0E00               	movlw	0
  7476  00341E  6E3E               	movwf	drawtext@bg,c
  7477  003420  0E01               	movlw	1
  7478  003422  6E40               	movwf	drawtext@size,c
  7479  003424  0E32               	movlw	50
  7480  003426  EC08  F01E         	call	_drawtext
  7481                           
  7482                           ;Setup_Time.c: 252: fillRect(15-1, 52+16, 25,2,0x07FF);
  7483  00342A  0E44               	movlw	68
  7484  00342C  6E23               	movwf	fillRect@y,c
  7485  00342E  0E19               	movlw	25
  7486  003430  6E24               	movwf	fillRect@w,c
  7487  003432  0E02               	movlw	2
  7488  003434  6E25               	movwf	fillRect@h,c
  7489  003436  0E07               	movlw	7
  7490  003438  6E27               	movwf	fillRect@color+1,c
  7491  00343A  6826               	setf	fillRect@color,c
  7492  00343C  0E0E               	movlw	14
  7493  00343E  ECF8  F026         	call	_fillRect
  7494                           
  7495                           ;Setup_Time.c: 253: strcpy(txt, "Date");
  7496  003442  C062  F011         	movff	_txt,strcpy@to
  7497  003446  C063  F012         	movff	_txt+1,strcpy@to+1
  7498  00344A  0EDF               	movlw	low STR_12
  7499  00344C  6E13               	movwf	strcpy@from,c
  7500  00344E  0EFF               	movlw	high STR_12
  7501  003450  6E14               	movwf	strcpy@from+1,c
  7502  003452  EC34  F028         	call	_strcpy	;wreg free
  7503                           
  7504                           ;Setup_Time.c: 254: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  7505  003456  0E47               	movlw	71
  7506  003458  6E39               	movwf	drawtext@y,c
  7507  00345A  C062  F03A         	movff	_txt,drawtext@_text
  7508  00345E  C063  F03B         	movff	_txt+1,drawtext@_text+1
  7509  003462  0EF8               	movlw	248
  7510  003464  6E3D               	movwf	drawtext@color+1,c
  7511  003466  0E00               	movlw	0
  7512  003468  6E3C               	movwf	drawtext@color,c
  7513  00346A  0E00               	movlw	0
  7514  00346C  6E3F               	movwf	drawtext@bg+1,c
  7515  00346E  0E00               	movlw	0
  7516  003470  6E3E               	movwf	drawtext@bg,c
  7517  003472  0E01               	movlw	1
  7518  003474  6E40               	movwf	drawtext@size,c
  7519  003476  0E32               	movlw	50
  7520  003478  EC08  F01E         	call	_drawtext
  7521  00347C  0012               	return		;funcret
  7522  00347E                     __end_of_Initialize_Setup_Time_Screen:
  7523                           	opt stack 0
  7524                           tblptru	equ	0xFF8
  7525                           tblptrh	equ	0xFF7
  7526                           tblptrl	equ	0xFF6
  7527                           tablat	equ	0xFF5
  7528                           prodl	equ	0xFF3
  7529                           intcon	equ	0xFF2
  7530                           intcon2	equ	0xFF1
  7531                           postinc0	equ	0xFEE
  7532                           wreg	equ	0xFE8
  7533                           postdec1	equ	0xFE5
  7534                           fsr1l	equ	0xFE1
  7535                           postinc2	equ	0xFDE
  7536                           fsr2h	equ	0xFDA
  7537                           fsr2l	equ	0xFD9
  7538                           status	equ	0xFD8
  7539                           
  7540 ;; *************** function _Increase_Time *****************
  7541 ;; Defined at:
  7542 ;;		line 82 in file "Setup_Time.c"
  7543 ;; Parameters:    Size  Location     Type
  7544 ;;		None
  7545 ;; Auto vars:     Size  Location     Type
  7546 ;;		None
  7547 ;; Return value:  Size  Location     Type
  7548 ;;		None               void
  7549 ;; Registers used:
  7550 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7551 ;; Tracked objects:
  7552 ;;		On entry : 0/0
  7553 ;;		On exit  : 0/0
  7554 ;;		Unchanged: 0/0
  7555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7559 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7560 ;;Total ram usage:        0 bytes
  7561 ;; Hardware stack levels used:    1
  7562 ;; Hardware stack levels required when called:   11
  7563 ;; This function calls:
  7564 ;;		_Update_Setup_Time_Screen
  7565 ;; This function is called by:
  7566 ;;		_Do_Setup_Time
  7567 ;; This function uses a non-reentrant model
  7568 ;;
  7569                           
  7570                           	psect	text29
  7571  002F2C                     __ptext29:
  7572                           	opt stack 0
  7573  002F2C                     _Increase_Time:
  7574                           	opt stack 18
  7575                           
  7576                           ;Setup_Time.c: 84: switch (Select_Field)
  7577                           
  7578                           ;incstack = 0
  7579  002F2C  D073               	goto	l10956
  7580  002F2E                     l10882:
  7581                           
  7582                           ;Setup_Time.c: 87: setup_hour++;
  7583  002F2E  0100               	movlb	0	; () banked
  7584  002F30  2BB2               	incf	_setup_hour& (0+255),f,b
  7585                           
  7586                           ; BSR set to: 0
  7587                           ;Setup_Time.c: 88: if (setup_hour == 24) setup_hour = 0;
  7588  002F32  0E18               	movlw	24
  7589  002F34  0100               	movlb	0	; () banked
  7590  002F36  19B2               	xorwf	_setup_hour& (0+255),w,b
  7591  002F38  A4D8               	btfss	status,2,c
  7592  002F3A  D081               	goto	l10958
  7593                           
  7594                           ; BSR set to: 0
  7595  002F3C  0E00               	movlw	0
  7596  002F3E  0100               	movlb	0	; () banked
  7597  002F40  6FB2               	movwf	_setup_hour& (0+255),b
  7598                           
  7599                           ; BSR set to: 0
  7600                           ;Setup_Time.c: 89: break;
  7601  002F42  D07D               	goto	l10958
  7602  002F44                     l10888:
  7603                           
  7604                           ; BSR set to: 0
  7605                           ;Setup_Time.c: 93: setup_minute++;
  7606  002F44  0100               	movlb	0	; () banked
  7607  002F46  2BB3               	incf	_setup_minute& (0+255),f,b
  7608                           
  7609                           ; BSR set to: 0
  7610                           ;Setup_Time.c: 94: if(setup_minute == 60) setup_minute = 0;
  7611  002F48  0E3C               	movlw	60
  7612  002F4A  0100               	movlb	0	; () banked
  7613  002F4C  19B3               	xorwf	_setup_minute& (0+255),w,b
  7614  002F4E  A4D8               	btfss	status,2,c
  7615  002F50  D076               	goto	l10958
  7616                           
  7617                           ; BSR set to: 0
  7618  002F52  0E00               	movlw	0
  7619  002F54  0100               	movlb	0	; () banked
  7620  002F56  6FB3               	movwf	_setup_minute& (0+255),b
  7621                           
  7622                           ; BSR set to: 0
  7623                           ;Setup_Time.c: 95: break;
  7624  002F58  D072               	goto	l10958
  7625  002F5A                     l10894:
  7626                           
  7627                           ; BSR set to: 0
  7628                           ;Setup_Time.c: 99: setup_second++;
  7629  002F5A  0100               	movlb	0	; () banked
  7630  002F5C  2BB4               	incf	_setup_second& (0+255),f,b
  7631                           
  7632                           ; BSR set to: 0
  7633                           ;Setup_Time.c: 100: if (setup_second == 60) setup_second = 0;
  7634  002F5E  0E3C               	movlw	60
  7635  002F60  0100               	movlb	0	; () banked
  7636  002F62  19B4               	xorwf	_setup_second& (0+255),w,b
  7637  002F64  A4D8               	btfss	status,2,c
  7638  002F66  D06B               	goto	l10958
  7639                           
  7640                           ; BSR set to: 0
  7641  002F68  0E00               	movlw	0
  7642  002F6A  0100               	movlb	0	; () banked
  7643  002F6C  6FB4               	movwf	_setup_second& (0+255),b
  7644                           
  7645                           ; BSR set to: 0
  7646                           ;Setup_Time.c: 101: break;
  7647  002F6E  D067               	goto	l10958
  7648  002F70                     l10900:
  7649                           
  7650                           ; BSR set to: 0
  7651                           ;Setup_Time.c: 105: setup_month++;
  7652  002F70  2A6E               	incf	_setup_month,f,c
  7653                           
  7654                           ; BSR set to: 0
  7655                           ;Setup_Time.c: 106: if (setup_month == 13) setup_month = 1;
  7656  002F72  0E0D               	movlw	13
  7657  002F74  186E               	xorwf	_setup_month,w,c
  7658  002F76  A4D8               	btfss	status,2,c
  7659  002F78  D062               	goto	l10958
  7660                           
  7661                           ; BSR set to: 0
  7662  002F7A  0E01               	movlw	1
  7663  002F7C  6E6E               	movwf	_setup_month,c
  7664                           
  7665                           ; BSR set to: 0
  7666                           ;Setup_Time.c: 107: break;
  7667  002F7E  D05F               	goto	l10958
  7668  002F80                     l10906:
  7669                           
  7670                           ; BSR set to: 0
  7671                           ;Setup_Time.c: 112: if(setup_month == 4 ||setup_month == 6 ||setup_month == 9 ||setup_mo
      +                          nth == 11)
  7672  002F80  0E04               	movlw	4
  7673  002F82  186E               	xorwf	_setup_month,w,c
  7674  002F84  B4D8               	btfsc	status,2,c
  7675  002F86  D00C               	goto	l10914
  7676                           
  7677                           ; BSR set to: 0
  7678  002F88  0E06               	movlw	6
  7679  002F8A  186E               	xorwf	_setup_month,w,c
  7680  002F8C  B4D8               	btfsc	status,2,c
  7681  002F8E  D008               	goto	l10914
  7682                           
  7683                           ; BSR set to: 0
  7684  002F90  0E09               	movlw	9
  7685  002F92  186E               	xorwf	_setup_month,w,c
  7686  002F94  B4D8               	btfsc	status,2,c
  7687  002F96  D004               	goto	l10914
  7688                           
  7689                           ; BSR set to: 0
  7690  002F98  0E0B               	movlw	11
  7691  002F9A  186E               	xorwf	_setup_month,w,c
  7692  002F9C  A4D8               	btfss	status,2,c
  7693  002F9E  D008               	goto	l10920
  7694  002FA0                     l10914:
  7695                           
  7696                           ; BSR set to: 0
  7697                           ;Setup_Time.c: 113: {
  7698                           ;Setup_Time.c: 114: setup_day++;
  7699  002FA0  2A6D               	incf	_setup_day,f,c
  7700                           
  7701                           ; BSR set to: 0
  7702                           ;Setup_Time.c: 115: if (setup_day == 31) setup_day = 1;
  7703  002FA2  0E1F               	movlw	31
  7704  002FA4                     L7:
  7705  002FA4  186D               	xorwf	_setup_day,w,c
  7706  002FA6  A4D8               	btfss	status,2,c
  7707  002FA8  D04A               	goto	l10958
  7708                           
  7709                           ; BSR set to: 0
  7710  002FAA  0E01               	movlw	1
  7711  002FAC  6E6D               	movwf	_setup_day,c
  7712                           
  7713                           ; BSR set to: 0
  7714                           ;Setup_Time.c: 117: }
  7715  002FAE  D047               	goto	l10958
  7716  002FB0                     l10920:
  7717                           
  7718                           ; BSR set to: 0
  7719                           ;Setup_Time.c: 118: else if(setup_month == 1 ||setup_month == 3 ||setup_month == 5 ||set
      +                          up_month == 7||setup_month == 8 ||setup_month == 10 ||setup_month == 12)
  7720  002FB0  046E               	decf	_setup_month,w,c
  7721  002FB2  B4D8               	btfsc	status,2,c
  7722  002FB4  D018               	goto	l10934
  7723                           
  7724                           ; BSR set to: 0
  7725  002FB6  0E03               	movlw	3
  7726  002FB8  186E               	xorwf	_setup_month,w,c
  7727  002FBA  B4D8               	btfsc	status,2,c
  7728  002FBC  D014               	goto	l10934
  7729                           
  7730                           ; BSR set to: 0
  7731  002FBE  0E05               	movlw	5
  7732  002FC0  186E               	xorwf	_setup_month,w,c
  7733  002FC2  B4D8               	btfsc	status,2,c
  7734  002FC4  D010               	goto	l10934
  7735                           
  7736                           ; BSR set to: 0
  7737  002FC6  0E07               	movlw	7
  7738  002FC8  186E               	xorwf	_setup_month,w,c
  7739  002FCA  B4D8               	btfsc	status,2,c
  7740  002FCC  D00C               	goto	l10934
  7741                           
  7742                           ; BSR set to: 0
  7743  002FCE  0E08               	movlw	8
  7744  002FD0  186E               	xorwf	_setup_month,w,c
  7745  002FD2  B4D8               	btfsc	status,2,c
  7746  002FD4  D008               	goto	l10934
  7747                           
  7748                           ; BSR set to: 0
  7749  002FD6  0E0A               	movlw	10
  7750  002FD8  186E               	xorwf	_setup_month,w,c
  7751  002FDA  B4D8               	btfsc	status,2,c
  7752  002FDC  D004               	goto	l10934
  7753                           
  7754                           ; BSR set to: 0
  7755  002FDE  0E0C               	movlw	12
  7756  002FE0  186E               	xorwf	_setup_month,w,c
  7757  002FE2  A4D8               	btfss	status,2,c
  7758  002FE4  D004               	goto	l10940
  7759  002FE6                     l10934:
  7760                           
  7761                           ; BSR set to: 0
  7762                           ;Setup_Time.c: 119: {
  7763                           ;Setup_Time.c: 120: setup_day++;
  7764  002FE6  2A6D               	incf	_setup_day,f,c
  7765                           
  7766                           ; BSR set to: 0
  7767                           ;Setup_Time.c: 121: if (setup_day == 32) setup_day = 1;
  7768  002FE8  0E20               	movlw	32
  7769  002FEA  D7DC               	goto	L7
  7770                           
  7771                           ; BSR set to: 0
  7772                           ;Setup_Time.c: 123: }
  7773                           
  7774                           ; BSR set to: 0
  7775  002FEC  D028               	goto	l10958
  7776  002FEE                     l10940:
  7777                           
  7778                           ; BSR set to: 0
  7779                           ;Setup_Time.c: 124: else if (setup_month == 2)
  7780  002FEE  0E02               	movlw	2
  7781  002FF0  186E               	xorwf	_setup_month,w,c
  7782  002FF2  A4D8               	btfss	status,2,c
  7783  002FF4  D024               	goto	l10958
  7784                           
  7785                           ; BSR set to: 0
  7786                           ;Setup_Time.c: 125: {
  7787                           ;Setup_Time.c: 126: setup_day++;
  7788  002FF6  2A6D               	incf	_setup_day,f,c
  7789                           
  7790                           ; BSR set to: 0
  7791                           ;Setup_Time.c: 127: if (setup_day == 28) setup_day = 1;
  7792  002FF8  0E1C               	movlw	28
  7793  002FFA  D7D4               	goto	L7
  7794                           
  7795                           ; BSR set to: 0
  7796                           ;Setup_Time.c: 129: }
  7797                           ;Setup_Time.c: 130: break;
  7798                           
  7799                           ; BSR set to: 0
  7800                           
  7801                           ; BSR set to: 0
  7802                           
  7803                           ; BSR set to: 0
  7804                           
  7805                           ; BSR set to: 0
  7806  002FFC  D020               	goto	l10958
  7807  002FFE                     l10948:
  7808                           
  7809                           ; BSR set to: 0
  7810                           ;Setup_Time.c: 135: setup_year++;
  7811  002FFE  0100               	movlb	0	; () banked
  7812  003000  2BB5               	incf	_setup_year& (0+255),f,b
  7813                           
  7814                           ; BSR set to: 0
  7815                           ;Setup_Time.c: 136: if (setup_year == 31) setup_year = 0;
  7816  003002  0E1F               	movlw	31
  7817  003004  0100               	movlb	0	; () banked
  7818  003006  19B5               	xorwf	_setup_year& (0+255),w,b
  7819  003008  A4D8               	btfss	status,2,c
  7820  00300A  D019               	goto	l10958
  7821                           
  7822                           ; BSR set to: 0
  7823  00300C  0E00               	movlw	0
  7824  00300E  0100               	movlb	0	; () banked
  7825  003010  6FB5               	movwf	_setup_year& (0+255),b
  7826                           
  7827                           ; BSR set to: 0
  7828                           ;Setup_Time.c: 141: }
  7829                           
  7830                           ; BSR set to: 0
  7831                           ;Setup_Time.c: 140: break;
  7832                           
  7833                           ;Setup_Time.c: 139: default:
  7834                           
  7835                           ; BSR set to: 0
  7836                           ;Setup_Time.c: 137: break;
  7837  003012  D015               	goto	l10958
  7838  003014                     l10956:
  7839  003014  0100               	movlb	0	; () banked
  7840  003016  51A6               	movf	_Select_Field& (0+255),w,b
  7841                           
  7842                           ; Switch size 1, requested type "space"
  7843                           ; Number of cases is 6, Range of values is 0 to 5
  7844                           ; switch strategies available:
  7845                           ; Name         Instructions Cycles
  7846                           ; simple_byte           19    10 (average)
  7847                           ;	Chosen strategy is simple_byte
  7848  003018  0A00               	xorlw	0	; case 0
  7849  00301A  B4D8               	btfsc	status,2,c
  7850  00301C  D788               	goto	l10882
  7851  00301E  0A01               	xorlw	1	; case 1
  7852  003020  B4D8               	btfsc	status,2,c
  7853  003022  D790               	goto	l10888
  7854  003024  0A03               	xorlw	3	; case 2
  7855  003026  B4D8               	btfsc	status,2,c
  7856  003028  D798               	goto	l10894
  7857  00302A  0A01               	xorlw	1	; case 3
  7858  00302C  B4D8               	btfsc	status,2,c
  7859  00302E  D7A0               	goto	l10900
  7860  003030  0A07               	xorlw	7	; case 4
  7861  003032  B4D8               	btfsc	status,2,c
  7862  003034  D7A5               	goto	l10906
  7863  003036  0A01               	xorlw	1	; case 5
  7864  003038  B4D8               	btfsc	status,2,c
  7865  00303A  D7E1               	goto	l10948
  7866  00303C  D000               	goto	l10958
  7867  00303E                     l10958:
  7868                           
  7869                           ; BSR set to: 0
  7870                           ;Setup_Time.c: 142: Update_Setup_Time_Screen();
  7871  00303E  EC09  F015         	call	_Update_Setup_Time_Screen	;wreg free
  7872  003042  0012               	return		;funcret
  7873  003044                     __end_of_Increase_Time:
  7874                           	opt stack 0
  7875                           tblptru	equ	0xFF8
  7876                           tblptrh	equ	0xFF7
  7877                           tblptrl	equ	0xFF6
  7878                           tablat	equ	0xFF5
  7879                           prodl	equ	0xFF3
  7880                           intcon	equ	0xFF2
  7881                           intcon2	equ	0xFF1
  7882                           postinc0	equ	0xFEE
  7883                           wreg	equ	0xFE8
  7884                           postdec1	equ	0xFE5
  7885                           fsr1l	equ	0xFE1
  7886                           postinc2	equ	0xFDE
  7887                           fsr2h	equ	0xFDA
  7888                           fsr2l	equ	0xFD9
  7889                           status	equ	0xFD8
  7890                           
  7891 ;; *************** function _Go_Prev_Field *****************
  7892 ;; Defined at:
  7893 ;;		line 217 in file "Setup_Time.c"
  7894 ;; Parameters:    Size  Location     Type
  7895 ;;		None
  7896 ;; Auto vars:     Size  Location     Type
  7897 ;;		None
  7898 ;; Return value:  Size  Location     Type
  7899 ;;		None               void
  7900 ;; Registers used:
  7901 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7902 ;; Tracked objects:
  7903 ;;		On entry : 0/0
  7904 ;;		On exit  : 0/0
  7905 ;;		Unchanged: 0/0
  7906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7911 ;;Total ram usage:        0 bytes
  7912 ;; Hardware stack levels used:    1
  7913 ;; Hardware stack levels required when called:    9
  7914 ;; This function calls:
  7915 ;;		_Update_Setup_Screen_Cursor_Backward
  7916 ;; This function is called by:
  7917 ;;		_Do_Setup_Time
  7918 ;; This function uses a non-reentrant model
  7919 ;;
  7920                           
  7921                           	psect	text30
  7922  005266                     __ptext30:
  7923                           	opt stack 0
  7924  005266                     _Go_Prev_Field:
  7925                           	opt stack 20
  7926                           
  7927                           ;Setup_Time.c: 219: if (Select_Field == 0) Select_Field = 5;
  7928                           
  7929                           ;incstack = 0
  7930  005266  0100               	movlb	0	; () banked
  7931  005268  51A6               	movf	_Select_Field& (0+255),w,b
  7932  00526A  A4D8               	btfss	status,2,c
  7933  00526C  D004               	goto	l7950
  7934                           
  7935                           ; BSR set to: 0
  7936  00526E  0E05               	movlw	5
  7937  005270  0100               	movlb	0	; () banked
  7938  005272  6FA6               	movwf	_Select_Field& (0+255),b
  7939  005274  D003               	goto	l7952
  7940  005276                     l7950:
  7941                           
  7942                           ; BSR set to: 0
  7943                           ;Setup_Time.c: 220: else Select_Field--;
  7944  005276  0100               	movlb	0	; () banked
  7945  005278  07A6               	decf	_Select_Field& (0+255),f,b
  7946  00527A  D000               	goto	l7952
  7947  00527C                     l7952:
  7948                           
  7949                           ; BSR set to: 0
  7950                           ;Setup_Time.c: 221: Update_Setup_Screen_Cursor_Backward(Select_Field);
  7951  00527C  0100               	movlb	0	; () banked
  7952  00527E  51A6               	movf	_Select_Field& (0+255),w,b
  7953  005280  EC8A  F012         	call	_Update_Setup_Screen_Cursor_Backward
  7954  005284  0012               	return		;funcret
  7955  005286                     __end_of_Go_Prev_Field:
  7956                           	opt stack 0
  7957                           tblptru	equ	0xFF8
  7958                           tblptrh	equ	0xFF7
  7959                           tblptrl	equ	0xFF6
  7960                           tablat	equ	0xFF5
  7961                           prodl	equ	0xFF3
  7962                           intcon	equ	0xFF2
  7963                           intcon2	equ	0xFF1
  7964                           postinc0	equ	0xFEE
  7965                           wreg	equ	0xFE8
  7966                           postdec1	equ	0xFE5
  7967                           fsr1l	equ	0xFE1
  7968                           postinc2	equ	0xFDE
  7969                           fsr2h	equ	0xFDA
  7970                           fsr2l	equ	0xFD9
  7971                           status	equ	0xFD8
  7972                           
  7973 ;; *************** function _Go_Next_Field *****************
  7974 ;; Defined at:
  7975 ;;		line 208 in file "Setup_Time.c"
  7976 ;; Parameters:    Size  Location     Type
  7977 ;;		None
  7978 ;; Auto vars:     Size  Location     Type
  7979 ;;		None
  7980 ;; Return value:  Size  Location     Type
  7981 ;;		None               void
  7982 ;; Registers used:
  7983 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7984 ;; Tracked objects:
  7985 ;;		On entry : 0/0
  7986 ;;		On exit  : 0/0
  7987 ;;		Unchanged: 0/0
  7988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7993 ;;Total ram usage:        0 bytes
  7994 ;; Hardware stack levels used:    1
  7995 ;; Hardware stack levels required when called:    9
  7996 ;; This function calls:
  7997 ;;		_Update_Setup_Screen_Cursor_Forward
  7998 ;; This function is called by:
  7999 ;;		_Do_Setup_Time
  8000 ;; This function uses a non-reentrant model
  8001 ;;
  8002                           
  8003                           	psect	text31
  8004  005286                     __ptext31:
  8005                           	opt stack 0
  8006  005286                     _Go_Next_Field:
  8007                           	opt stack 20
  8008                           
  8009                           ;Setup_Time.c: 211: Select_Field++;
  8010                           
  8011                           ;incstack = 0
  8012  005286  0100               	movlb	0	; () banked
  8013  005288  2BA6               	incf	_Select_Field& (0+255),f,b
  8014                           
  8015                           ; BSR set to: 0
  8016                           ;Setup_Time.c: 212: if (Select_Field == 6) Select_Field = 0;
  8017  00528A  0E06               	movlw	6
  8018  00528C  0100               	movlb	0	; () banked
  8019  00528E  19A6               	xorwf	_Select_Field& (0+255),w,b
  8020  005290  A4D8               	btfss	status,2,c
  8021  005292  D004               	goto	l7960
  8022                           
  8023                           ; BSR set to: 0
  8024  005294  0E00               	movlw	0
  8025  005296  0100               	movlb	0	; () banked
  8026  005298  6FA6               	movwf	_Select_Field& (0+255),b
  8027  00529A  D000               	goto	l7960
  8028  00529C                     l7960:
  8029                           
  8030                           ; BSR set to: 0
  8031                           ;Setup_Time.c: 213: Update_Setup_Screen_Cursor_Forward(Select_Field);
  8032  00529C  0100               	movlb	0	; () banked
  8033  00529E  51A6               	movf	_Select_Field& (0+255),w,b
  8034  0052A0  ECAD  F011         	call	_Update_Setup_Screen_Cursor_Forward
  8035  0052A4  0012               	return		;funcret
  8036  0052A6                     __end_of_Go_Next_Field:
  8037                           	opt stack 0
  8038                           tblptru	equ	0xFF8
  8039                           tblptrh	equ	0xFF7
  8040                           tblptrl	equ	0xFF6
  8041                           tablat	equ	0xFF5
  8042                           prodl	equ	0xFF3
  8043                           intcon	equ	0xFF2
  8044                           intcon2	equ	0xFF1
  8045                           postinc0	equ	0xFEE
  8046                           wreg	equ	0xFE8
  8047                           postdec1	equ	0xFE5
  8048                           fsr1l	equ	0xFE1
  8049                           postinc2	equ	0xFDE
  8050                           fsr2h	equ	0xFDA
  8051                           fsr2l	equ	0xFD9
  8052                           status	equ	0xFD8
  8053                           
  8054 ;; *************** function _Exit_Time_Setup *****************
  8055 ;; Defined at:
  8056 ;;		line 232 in file "Setup_Time.c"
  8057 ;; Parameters:    Size  Location     Type
  8058 ;;		None
  8059 ;; Auto vars:     Size  Location     Type
  8060 ;;		None
  8061 ;; Return value:  Size  Location     Type
  8062 ;;		None               void
  8063 ;; Registers used:
  8064 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8065 ;; Tracked objects:
  8066 ;;		On entry : 0/0
  8067 ;;		On exit  : 0/0
  8068 ;;		Unchanged: 0/0
  8069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8073 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8074 ;;Total ram usage:        0 bytes
  8075 ;; Hardware stack levels used:    1
  8076 ;; Hardware stack levels required when called:   11
  8077 ;; This function calls:
  8078 ;;		_DS3231_Read_Time
  8079 ;;		_Initialize_Screen
  8080 ;; This function is called by:
  8081 ;;		_Do_Setup_Time
  8082 ;; This function uses a non-reentrant model
  8083 ;;
  8084                           
  8085                           	psect	text32
  8086  00550A                     __ptext32:
  8087                           	opt stack 0
  8088  00550A                     _Exit_Time_Setup:
  8089                           	opt stack 18
  8090                           
  8091                           ;Setup_Time.c: 234: DS3231_Read_Time();
  8092                           
  8093                           ;incstack = 0
  8094  00550A  EC80  F024         	call	_DS3231_Read_Time	;wreg free
  8095                           
  8096                           ;Setup_Time.c: 235: Initialize_Screen();
  8097  00550E  EC32  F00B         	call	_Initialize_Screen	;wreg free
  8098                           
  8099                           ;Setup_Time.c: 236: In_Time_Setup = 0;
  8100  005512  0E00               	movlw	0
  8101  005514  0100               	movlb	0	; () banked
  8102  005516  6FA0               	movwf	_In_Time_Setup& (0+255),b
  8103                           
  8104                           ; BSR set to: 0
  8105  005518  0012               	return		;funcret
  8106  00551A                     __end_of_Exit_Time_Setup:
  8107                           	opt stack 0
  8108                           tblptru	equ	0xFF8
  8109                           tblptrh	equ	0xFF7
  8110                           tblptrl	equ	0xFF6
  8111                           tablat	equ	0xFF5
  8112                           prodl	equ	0xFF3
  8113                           intcon	equ	0xFF2
  8114                           intcon2	equ	0xFF1
  8115                           postinc0	equ	0xFEE
  8116                           wreg	equ	0xFE8
  8117                           postdec1	equ	0xFE5
  8118                           fsr1l	equ	0xFE1
  8119                           postinc2	equ	0xFDE
  8120                           fsr2h	equ	0xFDA
  8121                           fsr2l	equ	0xFD9
  8122                           status	equ	0xFD8
  8123                           
  8124 ;; *************** function _Do_Save_New_Time *****************
  8125 ;; Defined at:
  8126 ;;		line 224 in file "Setup_Time.c"
  8127 ;; Parameters:    Size  Location     Type
  8128 ;;		None
  8129 ;; Auto vars:     Size  Location     Type
  8130 ;;		None
  8131 ;; Return value:  Size  Location     Type
  8132 ;;		None               void
  8133 ;; Registers used:
  8134 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8135 ;; Tracked objects:
  8136 ;;		On entry : 0/0
  8137 ;;		On exit  : 0/0
  8138 ;;		Unchanged: 0/0
  8139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8143 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8144 ;;Total ram usage:        0 bytes
  8145 ;; Hardware stack levels used:    1
  8146 ;; Hardware stack levels required when called:   11
  8147 ;; This function calls:
  8148 ;;		_DS3231_Read_Time
  8149 ;;		_DS3231_Write_Time
  8150 ;;		_Initialize_Screen
  8151 ;; This function is called by:
  8152 ;;		_Do_Setup_Time
  8153 ;; This function uses a non-reentrant model
  8154 ;;
  8155                           
  8156                           	psect	text33
  8157  005440                     __ptext33:
  8158                           	opt stack 0
  8159  005440                     _Do_Save_New_Time:
  8160                           	opt stack 18
  8161                           
  8162                           ;Setup_Time.c: 226: DS3231_Write_Time();
  8163                           
  8164                           ; BSR set to: 0
  8165                           ;incstack = 0
  8166  005440  EC6B  F021         	call	_DS3231_Write_Time	;wreg free
  8167                           
  8168                           ;Setup_Time.c: 227: DS3231_Read_Time();
  8169  005444  EC80  F024         	call	_DS3231_Read_Time	;wreg free
  8170                           
  8171                           ;Setup_Time.c: 228: Initialize_Screen();
  8172  005448  EC32  F00B         	call	_Initialize_Screen	;wreg free
  8173                           
  8174                           ;Setup_Time.c: 229: In_Time_Setup = 0;
  8175  00544C  0E00               	movlw	0
  8176  00544E  0100               	movlb	0	; () banked
  8177  005450  6FA0               	movwf	_In_Time_Setup& (0+255),b
  8178                           
  8179                           ; BSR set to: 0
  8180  005452  0012               	return		;funcret
  8181  005454                     __end_of_Do_Save_New_Time:
  8182                           	opt stack 0
  8183                           tblptru	equ	0xFF8
  8184                           tblptrh	equ	0xFF7
  8185                           tblptrl	equ	0xFF6
  8186                           tablat	equ	0xFF5
  8187                           prodl	equ	0xFF3
  8188                           intcon	equ	0xFF2
  8189                           intcon2	equ	0xFF1
  8190                           postinc0	equ	0xFEE
  8191                           wreg	equ	0xFE8
  8192                           postdec1	equ	0xFE5
  8193                           fsr1l	equ	0xFE1
  8194                           postinc2	equ	0xFDE
  8195                           fsr2h	equ	0xFDA
  8196                           fsr2l	equ	0xFD9
  8197                           status	equ	0xFD8
  8198                           
  8199 ;; *************** function _DS3231_Write_Time *****************
  8200 ;; Defined at:
  8201 ;;		line 89 in file "I2C_Support.c"
  8202 ;; Parameters:    Size  Location     Type
  8203 ;;		None
  8204 ;; Auto vars:     Size  Location     Type
  8205 ;;  Address         1   74[COMRAM] unsigned char 
  8206 ;;  Device          1   73[COMRAM] unsigned char 
  8207 ;; Return value:  Size  Location     Type
  8208 ;;		None               void
  8209 ;; Registers used:
  8210 ;;		wreg, status,2, status,0, cstack
  8211 ;; Tracked objects:
  8212 ;;		On entry : 0/0
  8213 ;;		On exit  : 0/0
  8214 ;;		Unchanged: 0/0
  8215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8217 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8219 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8220 ;;Total ram usage:        2 bytes
  8221 ;; Hardware stack levels used:    1
  8222 ;; Hardware stack levels required when called:    5
  8223 ;; This function calls:
  8224 ;;		_I2C_Start
  8225 ;;		_I2C_Stop
  8226 ;;		_I2C_Write
  8227 ;;		_dec_2_bcd
  8228 ;; This function is called by:
  8229 ;;		_Do_Save_New_Time
  8230 ;; This function uses a non-reentrant model
  8231 ;;
  8232                           
  8233                           	psect	text34
  8234  0042D6                     __ptext34:
  8235                           	opt stack 0
  8236  0042D6                     _DS3231_Write_Time:
  8237                           	opt stack 23
  8238                           
  8239                           ;I2C_Support.c: 91: char Device = 0x68;
  8240                           
  8241                           ; BSR set to: 0
  8242                           ;incstack = 0
  8243  0042D6  0E68               	movlw	104
  8244  0042D8  6E4A               	movwf	DS3231_Write_Time@Device,c
  8245                           
  8246                           ;I2C_Support.c: 92: char Address = 0x00;
  8247  0042DA  0E00               	movlw	0
  8248  0042DC  6E4B               	movwf	DS3231_Write_Time@Address,c
  8249                           
  8250                           ;I2C_Support.c: 93: second = dec_2_bcd(setup_second);
  8251  0042DE  0100               	movlb	0	; () banked
  8252  0042E0  51B4               	movf	_setup_second& (0+255),w,b
  8253  0042E2  ECDB  F025         	call	_dec_2_bcd
  8254  0042E6  5043               	movf	?_dec_2_bcd,w,c
  8255  0042E8  6E6C               	movwf	_second,c
  8256                           
  8257                           ;I2C_Support.c: 94: minute = dec_2_bcd(setup_minute);
  8258  0042EA  0100               	movlb	0	; () banked
  8259  0042EC  51B3               	movf	_setup_minute& (0+255),w,b
  8260  0042EE  ECDB  F025         	call	_dec_2_bcd
  8261  0042F2  5043               	movf	?_dec_2_bcd,w,c
  8262  0042F4  6E6A               	movwf	_minute,c
  8263                           
  8264                           ;I2C_Support.c: 95: hour = dec_2_bcd(setup_hour);
  8265  0042F6  0100               	movlb	0	; () banked
  8266  0042F8  51B2               	movf	_setup_hour& (0+255),w,b
  8267  0042FA  ECDB  F025         	call	_dec_2_bcd
  8268  0042FE  5043               	movf	?_dec_2_bcd,w,c
  8269  004300  6E69               	movwf	_hour,c
  8270                           
  8271                           ;I2C_Support.c: 96: dow = 0x01;
  8272  004302  0E01               	movlw	1
  8273  004304  0100               	movlb	0	; () banked
  8274  004306  6FAA               	movwf	_dow& (0+255),b
  8275                           
  8276                           ;I2C_Support.c: 97: day = dec_2_bcd(setup_day);
  8277  004308  506D               	movf	_setup_day,w,c
  8278  00430A  ECDB  F025         	call	_dec_2_bcd
  8279  00430E  5043               	movf	?_dec_2_bcd,w,c
  8280  004310  6E68               	movwf	_day,c
  8281                           
  8282                           ;I2C_Support.c: 98: month = dec_2_bcd(setup_month);
  8283  004312  506E               	movf	_setup_month,w,c
  8284  004314  ECDB  F025         	call	_dec_2_bcd
  8285  004318  5043               	movf	?_dec_2_bcd,w,c
  8286  00431A  6E6B               	movwf	_month,c
  8287                           
  8288                           ;I2C_Support.c: 99: year = dec_2_bcd(setup_year);
  8289  00431C  0100               	movlb	0	; () banked
  8290  00431E  51B5               	movf	_setup_year& (0+255),w,b
  8291  004320  ECDB  F025         	call	_dec_2_bcd
  8292  004324  5043               	movf	?_dec_2_bcd,w,c
  8293  004326  6E6F               	movwf	_year,c
  8294                           
  8295                           ;I2C_Support.c: 100: I2C_Start();
  8296  004328  EC6B  F02A         	call	_I2C_Start	;wreg free
  8297                           
  8298                           ;I2C_Support.c: 101: I2C_Write((Device << 1) | 0);
  8299  00432C  504A               	movf	DS3231_Write_Time@Device,w,c
  8300  00432E  244A               	addwf	DS3231_Write_Time@Device,w,c
  8301  004330  ECC0  F027         	call	_I2C_Write
  8302                           
  8303                           ;I2C_Support.c: 102: I2C_Write(Address);
  8304  004334  504B               	movf	DS3231_Write_Time@Address,w,c
  8305  004336  ECC0  F027         	call	_I2C_Write
  8306                           
  8307                           ;I2C_Support.c: 103: I2C_Write(second);
  8308  00433A  506C               	movf	_second,w,c
  8309  00433C  ECC0  F027         	call	_I2C_Write
  8310                           
  8311                           ;I2C_Support.c: 104: I2C_Write(minute);
  8312  004340  506A               	movf	_minute,w,c
  8313  004342  ECC0  F027         	call	_I2C_Write
  8314                           
  8315                           ;I2C_Support.c: 105: I2C_Write(hour);
  8316  004346  5069               	movf	_hour,w,c
  8317  004348  ECC0  F027         	call	_I2C_Write
  8318                           
  8319                           ;I2C_Support.c: 106: I2C_Write(dow);
  8320  00434C  0100               	movlb	0	; () banked
  8321  00434E  51AA               	movf	_dow& (0+255),w,b
  8322  004350  ECC0  F027         	call	_I2C_Write
  8323                           
  8324                           ;I2C_Support.c: 107: I2C_Write(day);
  8325  004354  5068               	movf	_day,w,c
  8326  004356  ECC0  F027         	call	_I2C_Write
  8327                           
  8328                           ;I2C_Support.c: 108: I2C_Write(month);
  8329  00435A  506B               	movf	_month,w,c
  8330  00435C  ECC0  F027         	call	_I2C_Write
  8331                           
  8332                           ;I2C_Support.c: 109: I2C_Write(year);
  8333  004360  506F               	movf	_year,w,c
  8334  004362  ECC0  F027         	call	_I2C_Write
  8335                           
  8336                           ;I2C_Support.c: 110: I2C_Stop();
  8337  004366  EC62  F02A         	call	_I2C_Stop	;wreg free
  8338  00436A  0012               	return		;funcret
  8339  00436C                     __end_of_DS3231_Write_Time:
  8340                           	opt stack 0
  8341                           tblptru	equ	0xFF8
  8342                           tblptrh	equ	0xFF7
  8343                           tblptrl	equ	0xFF6
  8344                           tablat	equ	0xFF5
  8345                           prodl	equ	0xFF3
  8346                           intcon	equ	0xFF2
  8347                           intcon2	equ	0xFF1
  8348                           postinc0	equ	0xFEE
  8349                           wreg	equ	0xFE8
  8350                           postdec1	equ	0xFE5
  8351                           fsr1l	equ	0xFE1
  8352                           postinc2	equ	0xFDE
  8353                           fsr2h	equ	0xFDA
  8354                           fsr2l	equ	0xFD9
  8355                           status	equ	0xFD8
  8356                           
  8357 ;; *************** function _Decrease_Time *****************
  8358 ;; Defined at:
  8359 ;;		line 145 in file "Setup_Time.c"
  8360 ;; Parameters:    Size  Location     Type
  8361 ;;		None
  8362 ;; Auto vars:     Size  Location     Type
  8363 ;;		None
  8364 ;; Return value:  Size  Location     Type
  8365 ;;		None               void
  8366 ;; Registers used:
  8367 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8368 ;; Tracked objects:
  8369 ;;		On entry : 0/0
  8370 ;;		On exit  : 0/0
  8371 ;;		Unchanged: 0/0
  8372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8376 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8377 ;;Total ram usage:        0 bytes
  8378 ;; Hardware stack levels used:    1
  8379 ;; Hardware stack levels required when called:   11
  8380 ;; This function calls:
  8381 ;;		_Update_Setup_Time_Screen
  8382 ;; This function is called by:
  8383 ;;		_Do_Setup_Time
  8384 ;; This function uses a non-reentrant model
  8385 ;;
  8386                           
  8387                           	psect	text35
  8388  002CEC                     __ptext35:
  8389                           	opt stack 0
  8390  002CEC                     _Decrease_Time:
  8391                           	opt stack 18
  8392                           
  8393                           ;Setup_Time.c: 147: switch (Select_Field)
  8394                           
  8395                           ;incstack = 0
  8396  002CEC  D079               	goto	l10876
  8397  002CEE                     l10802:
  8398                           
  8399                           ;Setup_Time.c: 150: if (setup_hour == 0) setup_hour = 23;
  8400  002CEE  0100               	movlb	0	; () banked
  8401  002CF0  51B2               	movf	_setup_hour& (0+255),w,b
  8402  002CF2  A4D8               	btfss	status,2,c
  8403  002CF4  D004               	goto	l10806
  8404                           
  8405                           ; BSR set to: 0
  8406  002CF6  0E17               	movlw	23
  8407  002CF8  0100               	movlb	0	; () banked
  8408  002CFA  6FB2               	movwf	_setup_hour& (0+255),b
  8409  002CFC  D086               	goto	l10878
  8410  002CFE                     l10806:
  8411                           
  8412                           ; BSR set to: 0
  8413                           ;Setup_Time.c: 151: else --setup_hour;
  8414  002CFE  0100               	movlb	0	; () banked
  8415  002D00  07B2               	decf	_setup_hour& (0+255),f,b
  8416                           
  8417                           ; BSR set to: 0
  8418                           ;Setup_Time.c: 152: break;
  8419  002D02  D083               	goto	l10878
  8420  002D04                     l10808:
  8421                           
  8422                           ; BSR set to: 0
  8423                           ;Setup_Time.c: 157: if(setup_minute == 0) setup_minute = 59;
  8424  002D04  0100               	movlb	0	; () banked
  8425  002D06  51B3               	movf	_setup_minute& (0+255),w,b
  8426  002D08  A4D8               	btfss	status,2,c
  8427  002D0A  D004               	goto	l10812
  8428                           
  8429                           ; BSR set to: 0
  8430  002D0C  0E3B               	movlw	59
  8431  002D0E  0100               	movlb	0	; () banked
  8432  002D10  6FB3               	movwf	_setup_minute& (0+255),b
  8433  002D12  D07B               	goto	l10878
  8434  002D14                     l10812:
  8435                           
  8436                           ; BSR set to: 0
  8437                           ;Setup_Time.c: 158: else --setup_minute;
  8438  002D14  0100               	movlb	0	; () banked
  8439  002D16  07B3               	decf	_setup_minute& (0+255),f,b
  8440                           
  8441                           ; BSR set to: 0
  8442                           ;Setup_Time.c: 159: break;
  8443  002D18  D078               	goto	l10878
  8444  002D1A                     l10814:
  8445                           
  8446                           ; BSR set to: 0
  8447                           ;Setup_Time.c: 163: if (setup_second == 0) setup_second = 59;
  8448  002D1A  0100               	movlb	0	; () banked
  8449  002D1C  51B4               	movf	_setup_second& (0+255),w,b
  8450  002D1E  A4D8               	btfss	status,2,c
  8451  002D20  D004               	goto	l10818
  8452                           
  8453                           ; BSR set to: 0
  8454  002D22  0E3B               	movlw	59
  8455  002D24  0100               	movlb	0	; () banked
  8456  002D26  6FB4               	movwf	_setup_second& (0+255),b
  8457  002D28  D070               	goto	l10878
  8458  002D2A                     l10818:
  8459                           
  8460                           ; BSR set to: 0
  8461                           ;Setup_Time.c: 164: else --setup_second;
  8462  002D2A  0100               	movlb	0	; () banked
  8463  002D2C  07B4               	decf	_setup_second& (0+255),f,b
  8464                           
  8465                           ; BSR set to: 0
  8466                           ;Setup_Time.c: 165: break;
  8467  002D2E  D06D               	goto	l10878
  8468  002D30                     l10820:
  8469                           
  8470                           ; BSR set to: 0
  8471                           ;Setup_Time.c: 169: if (setup_month == 1) setup_month = 12;
  8472  002D30  046E               	decf	_setup_month,w,c
  8473  002D32  A4D8               	btfss	status,2,c
  8474  002D34  D003               	goto	l10824
  8475                           
  8476                           ; BSR set to: 0
  8477  002D36  0E0C               	movlw	12
  8478  002D38  6E6E               	movwf	_setup_month,c
  8479  002D3A  D067               	goto	l10878
  8480  002D3C                     l10824:
  8481                           
  8482                           ; BSR set to: 0
  8483                           ;Setup_Time.c: 170: else --setup_month;
  8484  002D3C  066E               	decf	_setup_month,f,c
  8485                           
  8486                           ; BSR set to: 0
  8487                           ;Setup_Time.c: 171: break;
  8488  002D3E  D065               	goto	l10878
  8489  002D40                     l10826:
  8490                           
  8491                           ; BSR set to: 0
  8492                           ;Setup_Time.c: 176: if (setup_month == 4 ||setup_month == 6 ||setup_month == 9 ||setup_m
      +                          onth == 11)
  8493  002D40  0E04               	movlw	4
  8494  002D42  186E               	xorwf	_setup_month,w,c
  8495  002D44  B4D8               	btfsc	status,2,c
  8496  002D46  D00C               	goto	l10834
  8497                           
  8498                           ; BSR set to: 0
  8499  002D48  0E06               	movlw	6
  8500  002D4A  186E               	xorwf	_setup_month,w,c
  8501  002D4C  B4D8               	btfsc	status,2,c
  8502  002D4E  D008               	goto	l10834
  8503                           
  8504                           ; BSR set to: 0
  8505  002D50  0E09               	movlw	9
  8506  002D52  186E               	xorwf	_setup_month,w,c
  8507  002D54  B4D8               	btfsc	status,2,c
  8508  002D56  D004               	goto	l10834
  8509                           
  8510                           ; BSR set to: 0
  8511  002D58  0E0B               	movlw	11
  8512  002D5A  186E               	xorwf	_setup_month,w,c
  8513  002D5C  A4D8               	btfss	status,2,c
  8514  002D5E  D007               	goto	l10840
  8515  002D60                     l10834:
  8516                           
  8517                           ; BSR set to: 0
  8518                           ;Setup_Time.c: 177: {
  8519                           ;Setup_Time.c: 178: if (setup_day == 1) setup_day = 30;
  8520  002D60  046D               	decf	_setup_day,w,c
  8521  002D62  A4D8               	btfss	status,2,c
  8522  002D64  D030               	goto	l10866
  8523                           
  8524                           ; BSR set to: 0
  8525  002D66  0E1E               	movlw	30
  8526  002D68  D02C               	goto	L9
  8527                           
  8528                           ; BSR set to: 0
  8529  002D6A  D02D               	goto	l10866
  8530                           
  8531                           ; BSR set to: 0
  8532                           ;Setup_Time.c: 181: }
  8533                           
  8534                           ; BSR set to: 0
  8535                           ;Setup_Time.c: 179: else --setup_day;
  8536  002D6C  D04E               	goto	l10878
  8537  002D6E                     l10840:
  8538                           
  8539                           ; BSR set to: 0
  8540                           ;Setup_Time.c: 182: else if (setup_month == 1 ||setup_month == 3 ||setup_month == 5 ||se
      +                          tup_month == 7||setup_month == 8 ||setup_month == 10 ||setup_month == 12)
  8541  002D6E  046E               	decf	_setup_month,w,c
  8542  002D70  B4D8               	btfsc	status,2,c
  8543  002D72  D018               	goto	l10854
  8544                           
  8545                           ; BSR set to: 0
  8546  002D74  0E03               	movlw	3
  8547  002D76  186E               	xorwf	_setup_month,w,c
  8548  002D78  B4D8               	btfsc	status,2,c
  8549  002D7A  D014               	goto	l10854
  8550                           
  8551                           ; BSR set to: 0
  8552  002D7C  0E05               	movlw	5
  8553  002D7E  186E               	xorwf	_setup_month,w,c
  8554  002D80  B4D8               	btfsc	status,2,c
  8555  002D82  D010               	goto	l10854
  8556                           
  8557                           ; BSR set to: 0
  8558  002D84  0E07               	movlw	7
  8559  002D86  186E               	xorwf	_setup_month,w,c
  8560  002D88  B4D8               	btfsc	status,2,c
  8561  002D8A  D00C               	goto	l10854
  8562                           
  8563                           ; BSR set to: 0
  8564  002D8C  0E08               	movlw	8
  8565  002D8E  186E               	xorwf	_setup_month,w,c
  8566  002D90  B4D8               	btfsc	status,2,c
  8567  002D92  D008               	goto	l10854
  8568                           
  8569                           ; BSR set to: 0
  8570  002D94  0E0A               	movlw	10
  8571  002D96  186E               	xorwf	_setup_month,w,c
  8572  002D98  B4D8               	btfsc	status,2,c
  8573  002D9A  D004               	goto	l10854
  8574                           
  8575                           ; BSR set to: 0
  8576  002D9C  0E0C               	movlw	12
  8577  002D9E  186E               	xorwf	_setup_month,w,c
  8578  002DA0  A4D8               	btfss	status,2,c
  8579  002DA2  D007               	goto	l10860
  8580  002DA4                     l10854:
  8581                           
  8582                           ; BSR set to: 0
  8583                           ;Setup_Time.c: 183: {
  8584                           ;Setup_Time.c: 184: if (setup_day == 1) setup_day = 31;
  8585  002DA4  046D               	decf	_setup_day,w,c
  8586  002DA6  A4D8               	btfss	status,2,c
  8587  002DA8  D00E               	goto	l10866
  8588                           
  8589                           ; BSR set to: 0
  8590  002DAA  0E1F               	movlw	31
  8591  002DAC  D00A               	goto	L9
  8592                           
  8593                           ; BSR set to: 0
  8594  002DAE  D00B               	goto	l10866
  8595                           
  8596                           ; BSR set to: 0
  8597                           ;Setup_Time.c: 187: }
  8598                           
  8599                           ; BSR set to: 0
  8600                           ;Setup_Time.c: 185: else --setup_day;
  8601  002DB0  D02C               	goto	l10878
  8602  002DB2                     l10860:
  8603                           
  8604                           ; BSR set to: 0
  8605                           ;Setup_Time.c: 188: else if (setup_month == 2)
  8606  002DB2  0E02               	movlw	2
  8607  002DB4  186E               	xorwf	_setup_month,w,c
  8608  002DB6  A4D8               	btfss	status,2,c
  8609  002DB8  D028               	goto	l10878
  8610                           
  8611                           ; BSR set to: 0
  8612                           ;Setup_Time.c: 189: {
  8613                           ;Setup_Time.c: 190: if (setup_day == 1) setup_day = 28;
  8614  002DBA  046D               	decf	_setup_day,w,c
  8615  002DBC  A4D8               	btfss	status,2,c
  8616  002DBE  D003               	goto	l10866
  8617                           
  8618                           ; BSR set to: 0
  8619  002DC0  0E1C               	movlw	28
  8620  002DC2                     L9:
  8621  002DC2  6E6D               	movwf	_setup_day,c
  8622  002DC4  D022               	goto	l10878
  8623  002DC6                     l10866:
  8624                           
  8625                           ; BSR set to: 0
  8626                           ;Setup_Time.c: 191: else --setup_day;
  8627  002DC6  066D               	decf	_setup_day,f,c
  8628                           
  8629                           ; BSR set to: 0
  8630                           ;Setup_Time.c: 193: }
  8631                           ;Setup_Time.c: 194: break;
  8632                           
  8633                           ; BSR set to: 0
  8634                           
  8635                           ; BSR set to: 0
  8636                           
  8637                           ; BSR set to: 0
  8638  002DC8  D020               	goto	l10878
  8639  002DCA                     l10868:
  8640                           
  8641                           ; BSR set to: 0
  8642                           ;Setup_Time.c: 198: if (setup_year == 0) setup_year = 30;
  8643  002DCA  0100               	movlb	0	; () banked
  8644  002DCC  51B5               	movf	_setup_year& (0+255),w,b
  8645  002DCE  A4D8               	btfss	status,2,c
  8646  002DD0  D004               	goto	l10872
  8647                           
  8648                           ; BSR set to: 0
  8649  002DD2  0E1E               	movlw	30
  8650  002DD4  0100               	movlb	0	; () banked
  8651  002DD6  6FB5               	movwf	_setup_year& (0+255),b
  8652  002DD8  D018               	goto	l10878
  8653  002DDA                     l10872:
  8654                           
  8655                           ; BSR set to: 0
  8656                           ;Setup_Time.c: 199: else --setup_year;
  8657  002DDA  0100               	movlb	0	; () banked
  8658  002DDC  07B5               	decf	_setup_year& (0+255),f,b
  8659                           
  8660                           ; BSR set to: 0
  8661                           ;Setup_Time.c: 204: }
  8662                           
  8663                           ; BSR set to: 0
  8664                           ;Setup_Time.c: 203: break;
  8665                           
  8666                           ;Setup_Time.c: 202: default:
  8667                           
  8668                           ; BSR set to: 0
  8669                           ;Setup_Time.c: 200: break;
  8670  002DDE  D015               	goto	l10878
  8671  002DE0                     l10876:
  8672  002DE0  0100               	movlb	0	; () banked
  8673  002DE2  51A6               	movf	_Select_Field& (0+255),w,b
  8674                           
  8675                           ; Switch size 1, requested type "space"
  8676                           ; Number of cases is 6, Range of values is 0 to 5
  8677                           ; switch strategies available:
  8678                           ; Name         Instructions Cycles
  8679                           ; simple_byte           19    10 (average)
  8680                           ;	Chosen strategy is simple_byte
  8681  002DE4  0A00               	xorlw	0	; case 0
  8682  002DE6  B4D8               	btfsc	status,2,c
  8683  002DE8  D782               	goto	l10802
  8684  002DEA  0A01               	xorlw	1	; case 1
  8685  002DEC  B4D8               	btfsc	status,2,c
  8686  002DEE  D78A               	goto	l10808
  8687  002DF0  0A03               	xorlw	3	; case 2
  8688  002DF2  B4D8               	btfsc	status,2,c
  8689  002DF4  D792               	goto	l10814
  8690  002DF6  0A01               	xorlw	1	; case 3
  8691  002DF8  B4D8               	btfsc	status,2,c
  8692  002DFA  D79A               	goto	l10820
  8693  002DFC  0A07               	xorlw	7	; case 4
  8694  002DFE  B4D8               	btfsc	status,2,c
  8695  002E00  D79F               	goto	l10826
  8696  002E02  0A01               	xorlw	1	; case 5
  8697  002E04  B4D8               	btfsc	status,2,c
  8698  002E06  D7E1               	goto	l10868
  8699  002E08  D000               	goto	l10878
  8700  002E0A                     l10878:
  8701                           
  8702                           ; BSR set to: 0
  8703                           ;Setup_Time.c: 205: Update_Setup_Time_Screen();
  8704  002E0A  EC09  F015         	call	_Update_Setup_Time_Screen	;wreg free
  8705  002E0E  0012               	return		;funcret
  8706  002E10                     __end_of_Decrease_Time:
  8707                           	opt stack 0
  8708                           tblptru	equ	0xFF8
  8709                           tblptrh	equ	0xFF7
  8710                           tblptrl	equ	0xFF6
  8711                           tablat	equ	0xFF5
  8712                           prodl	equ	0xFF3
  8713                           intcon	equ	0xFF2
  8714                           intcon2	equ	0xFF1
  8715                           postinc0	equ	0xFEE
  8716                           wreg	equ	0xFE8
  8717                           postdec1	equ	0xFE5
  8718                           fsr1l	equ	0xFE1
  8719                           postinc2	equ	0xFDE
  8720                           fsr2h	equ	0xFDA
  8721                           fsr2l	equ	0xFD9
  8722                           status	equ	0xFD8
  8723                           
  8724 ;; *************** function _Update_Setup_Time_Screen *****************
  8725 ;; Defined at:
  8726 ;;		line 257 in file "Setup_Time.c"
  8727 ;; Parameters:    Size  Location     Type
  8728 ;;		None
  8729 ;; Auto vars:     Size  Location     Type
  8730 ;;		None
  8731 ;; Return value:  Size  Location     Type
  8732 ;;		None               void
  8733 ;; Registers used:
  8734 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8735 ;; Tracked objects:
  8736 ;;		On entry : 0/0
  8737 ;;		On exit  : 0/0
  8738 ;;		Unchanged: 0/0
  8739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8743 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8744 ;;Total ram usage:        0 bytes
  8745 ;; Hardware stack levels used:    1
  8746 ;; Hardware stack levels required when called:   10
  8747 ;; This function calls:
  8748 ;;		___awdiv
  8749 ;;		___awmod
  8750 ;;		_drawtext
  8751 ;; This function is called by:
  8752 ;;		_Do_Setup_Time
  8753 ;;		_Increase_Time
  8754 ;;		_Decrease_Time
  8755 ;; This function uses a non-reentrant model
  8756 ;;
  8757                           
  8758                           	psect	text36
  8759  002A12                     __ptext36:
  8760                           	opt stack 0
  8761  002A12                     _Update_Setup_Time_Screen:
  8762                           	opt stack 19
  8763                           
  8764                           ;Setup_Time.c: 259: setup_time[0] = (setup_hour / 10) + '0';
  8765                           
  8766                           ;incstack = 0
  8767  002A12  C0B2  F017         	movff	_setup_hour,___awdiv@dividend
  8768  002A16  6A18               	clrf	___awdiv@dividend+1,c
  8769  002A18  0E00               	movlw	0
  8770  002A1A  6E1A               	movwf	___awdiv@divisor+1,c
  8771  002A1C  0E0A               	movlw	10
  8772  002A1E  6E19               	movwf	___awdiv@divisor,c
  8773  002A20  ECB6  F021         	call	___awdiv	;wreg free
  8774  002A24  5017               	movf	?___awdiv,w,c
  8775  002A26  0F30               	addlw	48
  8776  002A28  0101               	movlb	1	; () banked
  8777  002A2A  6F5F               	movwf	_setup_time& (0+255),b
  8778                           
  8779                           ;Setup_Time.c: 260: setup_time[1] = (setup_hour % 10) + '0';
  8780  002A2C  C0B2  F03D         	movff	_setup_hour,___awmod@dividend
  8781  002A30  6A3E               	clrf	___awmod@dividend+1,c
  8782  002A32  0E00               	movlw	0
  8783  002A34  6E40               	movwf	___awmod@divisor+1,c
  8784  002A36  0E0A               	movlw	10
  8785  002A38  6E3F               	movwf	___awmod@divisor,c
  8786  002A3A  EC1E  F023         	call	___awmod	;wreg free
  8787  002A3E  503D               	movf	?___awmod,w,c
  8788  002A40  0F30               	addlw	48
  8789  002A42  0101               	movlb	1	; () banked
  8790  002A44  6F60               	movwf	(_setup_time+1)& (0+255),b
  8791                           
  8792                           ;Setup_Time.c: 261: setup_time[3] = (setup_minute / 10) + '0';
  8793  002A46  C0B3  F017         	movff	_setup_minute,___awdiv@dividend
  8794  002A4A  6A18               	clrf	___awdiv@dividend+1,c
  8795  002A4C  0E00               	movlw	0
  8796  002A4E  6E1A               	movwf	___awdiv@divisor+1,c
  8797  002A50  0E0A               	movlw	10
  8798  002A52  6E19               	movwf	___awdiv@divisor,c
  8799  002A54  ECB6  F021         	call	___awdiv	;wreg free
  8800  002A58  5017               	movf	?___awdiv,w,c
  8801  002A5A  0F30               	addlw	48
  8802  002A5C  0101               	movlb	1	; () banked
  8803  002A5E  6F62               	movwf	(_setup_time+3)& (0+255),b
  8804                           
  8805                           ;Setup_Time.c: 262: setup_time[4] = (setup_minute % 10) + '0';
  8806  002A60  C0B3  F03D         	movff	_setup_minute,___awmod@dividend
  8807  002A64  6A3E               	clrf	___awmod@dividend+1,c
  8808  002A66  0E00               	movlw	0
  8809  002A68  6E40               	movwf	___awmod@divisor+1,c
  8810  002A6A  0E0A               	movlw	10
  8811  002A6C  6E3F               	movwf	___awmod@divisor,c
  8812  002A6E  EC1E  F023         	call	___awmod	;wreg free
  8813  002A72  503D               	movf	?___awmod,w,c
  8814  002A74  0F30               	addlw	48
  8815  002A76  0101               	movlb	1	; () banked
  8816  002A78  6F63               	movwf	(_setup_time+4)& (0+255),b
  8817                           
  8818                           ;Setup_Time.c: 263: setup_time[6] = (setup_second / 10) + '0';
  8819  002A7A  C0B4  F017         	movff	_setup_second,___awdiv@dividend
  8820  002A7E  6A18               	clrf	___awdiv@dividend+1,c
  8821  002A80  0E00               	movlw	0
  8822  002A82  6E1A               	movwf	___awdiv@divisor+1,c
  8823  002A84  0E0A               	movlw	10
  8824  002A86  6E19               	movwf	___awdiv@divisor,c
  8825  002A88  ECB6  F021         	call	___awdiv	;wreg free
  8826  002A8C  5017               	movf	?___awdiv,w,c
  8827  002A8E  0F30               	addlw	48
  8828  002A90  0101               	movlb	1	; () banked
  8829  002A92  6F65               	movwf	(_setup_time+6)& (0+255),b
  8830                           
  8831                           ;Setup_Time.c: 264: setup_time[7] = (setup_second % 10) + '0';
  8832  002A94  C0B4  F03D         	movff	_setup_second,___awmod@dividend
  8833  002A98  6A3E               	clrf	___awmod@dividend+1,c
  8834  002A9A  0E00               	movlw	0
  8835  002A9C  6E40               	movwf	___awmod@divisor+1,c
  8836  002A9E  0E0A               	movlw	10
  8837  002AA0  6E3F               	movwf	___awmod@divisor,c
  8838  002AA2  EC1E  F023         	call	___awmod	;wreg free
  8839  002AA6  503D               	movf	?___awmod,w,c
  8840  002AA8  0F30               	addlw	48
  8841  002AAA  0101               	movlb	1	; () banked
  8842  002AAC  6F66               	movwf	(_setup_time+7)& (0+255),b
  8843                           
  8844                           ;Setup_Time.c: 265: setup_date[0] = (setup_month / 10) + '0';
  8845  002AAE  C06E  F017         	movff	_setup_month,___awdiv@dividend
  8846  002AB2  6A18               	clrf	___awdiv@dividend+1,c
  8847  002AB4  0E00               	movlw	0
  8848  002AB6  6E1A               	movwf	___awdiv@divisor+1,c
  8849  002AB8  0E0A               	movlw	10
  8850  002ABA  6E19               	movwf	___awdiv@divisor,c
  8851  002ABC  ECB6  F021         	call	___awdiv	;wreg free
  8852  002AC0  5017               	movf	?___awdiv,w,c
  8853  002AC2  0F30               	addlw	48
  8854  002AC4  0101               	movlb	1	; () banked
  8855  002AC6  6F56               	movwf	_setup_date& (0+255),b
  8856                           
  8857                           ;Setup_Time.c: 266: setup_date[1] = (setup_month % 10) + '0';
  8858  002AC8  C06E  F03D         	movff	_setup_month,___awmod@dividend
  8859  002ACC  6A3E               	clrf	___awmod@dividend+1,c
  8860  002ACE  0E00               	movlw	0
  8861  002AD0  6E40               	movwf	___awmod@divisor+1,c
  8862  002AD2  0E0A               	movlw	10
  8863  002AD4  6E3F               	movwf	___awmod@divisor,c
  8864  002AD6  EC1E  F023         	call	___awmod	;wreg free
  8865  002ADA  503D               	movf	?___awmod,w,c
  8866  002ADC  0F30               	addlw	48
  8867  002ADE  0101               	movlb	1	; () banked
  8868  002AE0  6F57               	movwf	(_setup_date+1)& (0+255),b
  8869                           
  8870                           ;Setup_Time.c: 267: setup_date[3] = (setup_day / 10) + '0';
  8871  002AE2  C06D  F017         	movff	_setup_day,___awdiv@dividend
  8872  002AE6  6A18               	clrf	___awdiv@dividend+1,c
  8873  002AE8  0E00               	movlw	0
  8874  002AEA  6E1A               	movwf	___awdiv@divisor+1,c
  8875  002AEC  0E0A               	movlw	10
  8876  002AEE  6E19               	movwf	___awdiv@divisor,c
  8877  002AF0  ECB6  F021         	call	___awdiv	;wreg free
  8878  002AF4  5017               	movf	?___awdiv,w,c
  8879  002AF6  0F30               	addlw	48
  8880  002AF8  0101               	movlb	1	; () banked
  8881  002AFA  6F59               	movwf	(_setup_date+3)& (0+255),b
  8882                           
  8883                           ;Setup_Time.c: 268: setup_date[4] = (setup_day % 10) + '0';
  8884  002AFC  C06D  F03D         	movff	_setup_day,___awmod@dividend
  8885  002B00  6A3E               	clrf	___awmod@dividend+1,c
  8886  002B02  0E00               	movlw	0
  8887  002B04  6E40               	movwf	___awmod@divisor+1,c
  8888  002B06  0E0A               	movlw	10
  8889  002B08  6E3F               	movwf	___awmod@divisor,c
  8890  002B0A  EC1E  F023         	call	___awmod	;wreg free
  8891  002B0E  503D               	movf	?___awmod,w,c
  8892  002B10  0F30               	addlw	48
  8893  002B12  0101               	movlb	1	; () banked
  8894  002B14  6F5A               	movwf	(_setup_date+4)& (0+255),b
  8895                           
  8896                           ;Setup_Time.c: 269: setup_date[6] = (setup_year / 10) + '0';
  8897  002B16  C0B5  F017         	movff	_setup_year,___awdiv@dividend
  8898  002B1A  6A18               	clrf	___awdiv@dividend+1,c
  8899  002B1C  0E00               	movlw	0
  8900  002B1E  6E1A               	movwf	___awdiv@divisor+1,c
  8901  002B20  0E0A               	movlw	10
  8902  002B22  6E19               	movwf	___awdiv@divisor,c
  8903  002B24  ECB6  F021         	call	___awdiv	;wreg free
  8904  002B28  5017               	movf	?___awdiv,w,c
  8905  002B2A  0F30               	addlw	48
  8906  002B2C  0101               	movlb	1	; () banked
  8907  002B2E  6F5C               	movwf	(_setup_date+6)& (0+255),b
  8908                           
  8909                           ;Setup_Time.c: 270: setup_date[7] = (setup_year % 10) + '0';
  8910  002B30  C0B5  F03D         	movff	_setup_year,___awmod@dividend
  8911  002B34  6A3E               	clrf	___awmod@dividend+1,c
  8912  002B36  0E00               	movlw	0
  8913  002B38  6E40               	movwf	___awmod@divisor+1,c
  8914  002B3A  0E0A               	movlw	10
  8915  002B3C  6E3F               	movwf	___awmod@divisor,c
  8916  002B3E  EC1E  F023         	call	___awmod	;wreg free
  8917  002B42  503D               	movf	?___awmod,w,c
  8918  002B44  0F30               	addlw	48
  8919  002B46  0101               	movlb	1	; () banked
  8920  002B48  6F5D               	movwf	(_setup_date+7)& (0+255),b
  8921                           
  8922                           ; BSR set to: 1
  8923                           ;Setup_Time.c: 272: drawtext(15, 52, setup_time, 0x07FF, 0x0000, 2);
  8924  002B4A  0E34               	movlw	52
  8925  002B4C  6E39               	movwf	drawtext@y,c
  8926  002B4E  0E5F               	movlw	low _setup_time
  8927  002B50  6E3A               	movwf	drawtext@_text,c
  8928  002B52  0E01               	movlw	high _setup_time
  8929  002B54  6E3B               	movwf	drawtext@_text+1,c
  8930  002B56  0E07               	movlw	7
  8931  002B58  6E3D               	movwf	drawtext@color+1,c
  8932  002B5A  683C               	setf	drawtext@color,c
  8933  002B5C  0E00               	movlw	0
  8934  002B5E  6E3F               	movwf	drawtext@bg+1,c
  8935  002B60  0E00               	movlw	0
  8936  002B62  6E3E               	movwf	drawtext@bg,c
  8937  002B64  0E02               	movlw	2
  8938  002B66  6E40               	movwf	drawtext@size,c
  8939  002B68  0E0F               	movlw	15
  8940  002B6A  EC08  F01E         	call	_drawtext
  8941                           
  8942                           ;Setup_Time.c: 273: drawtext(15, 82, setup_date, 0x07E0, 0x0000, 2);
  8943  002B6E  0E52               	movlw	82
  8944  002B70  6E39               	movwf	drawtext@y,c
  8945  002B72  0E56               	movlw	low _setup_date
  8946  002B74  6E3A               	movwf	drawtext@_text,c
  8947  002B76  0E01               	movlw	high _setup_date
  8948  002B78  6E3B               	movwf	drawtext@_text+1,c
  8949  002B7A  0E07               	movlw	7
  8950  002B7C  6E3D               	movwf	drawtext@color+1,c
  8951  002B7E  0EE0               	movlw	224
  8952  002B80  6E3C               	movwf	drawtext@color,c
  8953  002B82  0E00               	movlw	0
  8954  002B84  6E3F               	movwf	drawtext@bg+1,c
  8955  002B86  0E00               	movlw	0
  8956  002B88  6E3E               	movwf	drawtext@bg,c
  8957  002B8A  0E02               	movlw	2
  8958  002B8C  6E40               	movwf	drawtext@size,c
  8959  002B8E  0E0F               	movlw	15
  8960  002B90  EC08  F01E         	call	_drawtext
  8961  002B94  0012               	return		;funcret
  8962  002B96                     __end_of_Update_Setup_Time_Screen:
  8963                           	opt stack 0
  8964                           tblptru	equ	0xFF8
  8965                           tblptrh	equ	0xFF7
  8966                           tblptrl	equ	0xFF6
  8967                           tablat	equ	0xFF5
  8968                           prodl	equ	0xFF3
  8969                           intcon	equ	0xFF2
  8970                           intcon2	equ	0xFF1
  8971                           postinc0	equ	0xFEE
  8972                           wreg	equ	0xFE8
  8973                           postdec1	equ	0xFE5
  8974                           fsr1l	equ	0xFE1
  8975                           postinc2	equ	0xFDE
  8976                           fsr2h	equ	0xFDA
  8977                           fsr2l	equ	0xFD9
  8978                           status	equ	0xFD8
  8979                           
  8980 ;; *************** function _Do_Setup_Alarm_Time *****************
  8981 ;; Defined at:
  8982 ;;		line 23 in file "Setup_Alarm_Time.c"
  8983 ;; Parameters:    Size  Location     Type
  8984 ;;		None
  8985 ;; Auto vars:     Size  Location     Type
  8986 ;;		None
  8987 ;; Return value:  Size  Location     Type
  8988 ;;                  2  183[None  ] int 
  8989 ;; Registers used:
  8990 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8991 ;; Tracked objects:
  8992 ;;		On entry : 0/0
  8993 ;;		On exit  : 0/0
  8994 ;;		Unchanged: 0/0
  8995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9000 ;;Total ram usage:        0 bytes
  9001 ;; Hardware stack levels used:    1
  9002 ;; Hardware stack levels required when called:   12
  9003 ;; This function calls:
  9004 ;;		_DS3231_Read_Alarm_Time
  9005 ;;		_Decrease_Alarm_Time
  9006 ;;		_Do_Beep_Bad
  9007 ;;		_Do_Beep_Good
  9008 ;;		_Do_Save_New_Alarm_Time
  9009 ;;		_Exit_Setup_Alarm_Time
  9010 ;;		_Go_Next_Alarm_Field
  9011 ;;		_Go_Prev_Alarm_Field
  9012 ;;		_Increase_Alarm_Time
  9013 ;;		_Initialize_Setup_Alarm_Time_Screen
  9014 ;;		_Update_Setup_Alarm_Time_Screen
  9015 ;;		_bcd_2_dec
  9016 ;;		_check_for_button_input
  9017 ;; This function is called by:
  9018 ;;		_main
  9019 ;; This function uses a non-reentrant model
  9020 ;;
  9021                           
  9022                           	psect	text37
  9023  003588                     __ptext37:
  9024                           	opt stack 0
  9025  003588                     _Do_Setup_Alarm_Time:
  9026                           	opt stack 18
  9027                           
  9028                           ;Setup_Alarm_Time.c: 25: Select_Alarm_Field = 0;
  9029                           
  9030                           ;incstack = 0
  9031  003588  0E00               	movlw	0
  9032  00358A  0100               	movlb	0	; () banked
  9033  00358C  6FA4               	movwf	_Select_Alarm_Field& (0+255),b
  9034                           
  9035                           ;Setup_Alarm_Time.c: 26: In_Alarm_Time_Setup = 1;
  9036  00358E  0E01               	movlw	1
  9037  003590  0100               	movlb	0	; () banked
  9038  003592  6F9E               	movwf	_In_Alarm_Time_Setup& (0+255),b
  9039                           
  9040                           ; BSR set to: 0
  9041                           ;Setup_Alarm_Time.c: 27: DS3231_Read_Alarm_Time();
  9042  003594  ECAD  F026         	call	_DS3231_Read_Alarm_Time	;wreg free
  9043                           
  9044                           ;Setup_Alarm_Time.c: 28: alarm_second = bcd_2_dec(alarm_second);
  9045  003598  5067               	movf	_alarm_second,w,c
  9046  00359A  EC7B  F028         	call	_bcd_2_dec
  9047  00359E  6E67               	movwf	_alarm_second,c
  9048                           
  9049                           ;Setup_Alarm_Time.c: 29: alarm_minute = bcd_2_dec(alarm_minute);
  9050  0035A0  5066               	movf	_alarm_minute,w,c
  9051  0035A2  EC7B  F028         	call	_bcd_2_dec
  9052  0035A6  6E66               	movwf	_alarm_minute,c
  9053                           
  9054                           ;Setup_Alarm_Time.c: 30: alarm_hour = bcd_2_dec(alarm_hour);
  9055  0035A8  5065               	movf	_alarm_hour,w,c
  9056  0035AA  EC7B  F028         	call	_bcd_2_dec
  9057  0035AE  6E65               	movwf	_alarm_hour,c
  9058                           
  9059                           ;Setup_Alarm_Time.c: 31: setup_alarm_second = alarm_second;
  9060  0035B0  C067  F0B0         	movff	_alarm_second,_setup_alarm_second
  9061                           
  9062                           ;Setup_Alarm_Time.c: 32: setup_alarm_minute = alarm_minute;
  9063  0035B4  C066  F0AF         	movff	_alarm_minute,_setup_alarm_minute
  9064                           
  9065                           ;Setup_Alarm_Time.c: 33: setup_alarm_hour = alarm_hour;
  9066  0035B8  C065  F0AE         	movff	_alarm_hour,_setup_alarm_hour
  9067                           
  9068                           ;Setup_Alarm_Time.c: 34: Initialize_Setup_Alarm_Time_Screen();
  9069  0035BC  ECE7  F01E         	call	_Initialize_Setup_Alarm_Time_Screen	;wreg free
  9070                           
  9071                           ;Setup_Alarm_Time.c: 35: Update_Setup_Alarm_Time_Screen();
  9072  0035C0  ECAF  F01C         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
  9073                           
  9074                           ;Setup_Alarm_Time.c: 36: while (In_Alarm_Time_Setup == 1)
  9075  0035C4  D059               	goto	l11336
  9076  0035C6                     l11292:
  9077                           
  9078                           ;Setup_Alarm_Time.c: 37: {
  9079                           ;Setup_Alarm_Time.c: 38: if (check_for_button_input() == 1)
  9080  0035C6  ECB3  F01F         	call	_check_for_button_input	;wreg free
  9081  0035CA  06E8               	decf	wreg,f,c
  9082  0035CC  A4D8               	btfss	status,2,c
  9083  0035CE  D054               	goto	l11336
  9084                           
  9085                           ;Setup_Alarm_Time.c: 39: {
  9086                           ;Setup_Alarm_Time.c: 40: if ((found == 0x03) || (found == 0x04) || (found == 0x00) || (f
      +                          ound == 0x02) || (found == 0x06) || (found == 0x07))
  9087  0035D0  0E03               	movlw	3
  9088  0035D2  0100               	movlb	0	; () banked
  9089  0035D4  19AC               	xorwf	_found& (0+255),w,b
  9090  0035D6  B4D8               	btfsc	status,2,c
  9091  0035D8  D018               	goto	l11306
  9092                           
  9093                           ; BSR set to: 0
  9094  0035DA  0E04               	movlw	4
  9095  0035DC  0100               	movlb	0	; () banked
  9096  0035DE  19AC               	xorwf	_found& (0+255),w,b
  9097  0035E0  B4D8               	btfsc	status,2,c
  9098  0035E2  D013               	goto	l11306
  9099                           
  9100                           ; BSR set to: 0
  9101  0035E4  0100               	movlb	0	; () banked
  9102  0035E6  51AC               	movf	_found& (0+255),w,b
  9103  0035E8  B4D8               	btfsc	status,2,c
  9104  0035EA  D00F               	goto	l11306
  9105                           
  9106                           ; BSR set to: 0
  9107  0035EC  0E02               	movlw	2
  9108  0035EE  0100               	movlb	0	; () banked
  9109  0035F0  19AC               	xorwf	_found& (0+255),w,b
  9110  0035F2  B4D8               	btfsc	status,2,c
  9111  0035F4  D00A               	goto	l11306
  9112                           
  9113                           ; BSR set to: 0
  9114  0035F6  0E06               	movlw	6
  9115  0035F8  0100               	movlb	0	; () banked
  9116  0035FA  19AC               	xorwf	_found& (0+255),w,b
  9117  0035FC  B4D8               	btfsc	status,2,c
  9118  0035FE  D005               	goto	l11306
  9119                           
  9120                           ; BSR set to: 0
  9121  003600  0E07               	movlw	7
  9122  003602  0100               	movlb	0	; () banked
  9123  003604  19AC               	xorwf	_found& (0+255),w,b
  9124  003606  A4D8               	btfss	status,2,c
  9125  003608  D034               	goto	l11334
  9126  00360A                     l11306:
  9127                           
  9128                           ; BSR set to: 0
  9129                           ;Setup_Alarm_Time.c: 41: {
  9130                           ;Setup_Alarm_Time.c: 42: Do_Beep_Good();
  9131  00360A  ECD8  F029         	call	_Do_Beep_Good	;wreg free
  9132                           
  9133                           ;Setup_Alarm_Time.c: 43: if (found == 0x03) Go_Prev_Alarm_Field();
  9134  00360E  0E03               	movlw	3
  9135  003610  0100               	movlb	0	; () banked
  9136  003612  19AC               	xorwf	_found& (0+255),w,b
  9137  003614  A4D8               	btfss	status,2,c
  9138  003616  D003               	goto	l11312
  9139                           
  9140                           ; BSR set to: 0
  9141  003618  EC53  F029         	call	_Go_Prev_Alarm_Field	;wreg free
  9142  00361C  D000               	goto	l11312
  9143  00361E                     l11312:
  9144                           
  9145                           ;Setup_Alarm_Time.c: 45: if (found == 0x04) Go_Next_Alarm_Field();
  9146  00361E  0E04               	movlw	4
  9147  003620  0100               	movlb	0	; () banked
  9148  003622  19AC               	xorwf	_found& (0+255),w,b
  9149  003624  A4D8               	btfss	status,2,c
  9150  003626  D003               	goto	l11316
  9151                           
  9152                           ; BSR set to: 0
  9153  003628  EC63  F029         	call	_Go_Next_Alarm_Field	;wreg free
  9154  00362C  D000               	goto	l11316
  9155  00362E                     l11316:
  9156                           
  9157                           ;Setup_Alarm_Time.c: 46: if (found == 0x00) Exit_Setup_Alarm_Time();
  9158  00362E  0100               	movlb	0	; () banked
  9159  003630  51AC               	movf	_found& (0+255),w,b
  9160  003632  A4D8               	btfss	status,2,c
  9161  003634  D003               	goto	l11320
  9162                           
  9163                           ; BSR set to: 0
  9164  003636  EC8D  F02A         	call	_Exit_Setup_Alarm_Time	;wreg free
  9165  00363A  D000               	goto	l11320
  9166  00363C                     l11320:
  9167                           
  9168                           ;Setup_Alarm_Time.c: 47: if (found == 0x02) Do_Save_New_Alarm_Time();
  9169  00363C  0E02               	movlw	2
  9170  00363E  0100               	movlb	0	; () banked
  9171  003640  19AC               	xorwf	_found& (0+255),w,b
  9172  003642  A4D8               	btfss	status,2,c
  9173  003644  D003               	goto	l11324
  9174                           
  9175                           ; BSR set to: 0
  9176  003646  ECFF  F029         	call	_Do_Save_New_Alarm_Time	;wreg free
  9177  00364A  D000               	goto	l11324
  9178  00364C                     l11324:
  9179                           
  9180                           ;Setup_Alarm_Time.c: 48: if (found == 0x06) Decrease_Alarm_Time();
  9181  00364C  0E06               	movlw	6
  9182  00364E  0100               	movlb	0	; () banked
  9183  003650  19AC               	xorwf	_found& (0+255),w,b
  9184  003652  A4D8               	btfss	status,2,c
  9185  003654  D003               	goto	l11328
  9186                           
  9187                           ; BSR set to: 0
  9188  003656  EC7A  F025         	call	_Decrease_Alarm_Time	;wreg free
  9189  00365A  D000               	goto	l11328
  9190  00365C                     l11328:
  9191                           
  9192                           ;Setup_Alarm_Time.c: 49: if (found == 0x07) Increase_Alarm_Time();
  9193  00365C  0E07               	movlw	7
  9194  00365E  0100               	movlb	0	; () banked
  9195  003660  19AC               	xorwf	_found& (0+255),w,b
  9196  003662  A4D8               	btfss	status,2,c
  9197  003664  D003               	goto	l11332
  9198                           
  9199                           ; BSR set to: 0
  9200  003666  EC49  F025         	call	_Increase_Alarm_Time	;wreg free
  9201  00366A  D000               	goto	l11332
  9202  00366C                     l11332:
  9203                           
  9204                           ;Setup_Alarm_Time.c: 50: found = 0xff;
  9205  00366C  0100               	movlb	0	; () banked
  9206  00366E  69AC               	setf	_found& (0+255),b
  9207                           
  9208                           ;Setup_Alarm_Time.c: 51: }
  9209  003670  D003               	goto	l11336
  9210  003672                     l11334:
  9211                           
  9212                           ; BSR set to: 0
  9213                           ;Setup_Alarm_Time.c: 52: else
  9214                           ;Setup_Alarm_Time.c: 53: {
  9215                           ;Setup_Alarm_Time.c: 54: Do_Beep_Bad();
  9216  003672  ECE5  F029         	call	_Do_Beep_Bad	;wreg free
  9217  003676  D000               	goto	l11336
  9218  003678                     l11336:
  9219  003678  0100               	movlb	0	; () banked
  9220  00367A  059E               	decf	_In_Alarm_Time_Setup& (0+255),w,b
  9221  00367C  B4D8               	btfsc	status,2,c
  9222  00367E  D7A3               	goto	l11292
  9223                           
  9224                           ; BSR set to: 0
  9225                           
  9226                           ; BSR set to: 0
  9227  003680  0012               	return		;funcret
  9228  003682                     __end_of_Do_Setup_Alarm_Time:
  9229                           	opt stack 0
  9230                           tblptru	equ	0xFF8
  9231                           tblptrh	equ	0xFF7
  9232                           tblptrl	equ	0xFF6
  9233                           tablat	equ	0xFF5
  9234                           prodl	equ	0xFF3
  9235                           intcon	equ	0xFF2
  9236                           intcon2	equ	0xFF1
  9237                           postinc0	equ	0xFEE
  9238                           wreg	equ	0xFE8
  9239                           postdec1	equ	0xFE5
  9240                           fsr1l	equ	0xFE1
  9241                           postinc2	equ	0xFDE
  9242                           fsr2h	equ	0xFDA
  9243                           fsr2l	equ	0xFD9
  9244                           status	equ	0xFD8
  9245                           
  9246 ;; *************** function _check_for_button_input *****************
  9247 ;; Defined at:
  9248 ;;		line 151 in file "utils.c"
  9249 ;; Parameters:    Size  Location     Type
  9250 ;;		None
  9251 ;; Auto vars:     Size  Location     Type
  9252 ;;  j               2   20[BANK0 ] int 
  9253 ;; Return value:  Size  Location     Type
  9254 ;;                  1    wreg      unsigned char 
  9255 ;; Registers used:
  9256 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9257 ;; Tracked objects:
  9258 ;;		On entry : 0/0
  9259 ;;		On exit  : 0/0
  9260 ;;		Unchanged: 0/0
  9261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9263 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9264 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9265 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9266 ;;Total ram usage:        3 bytes
  9267 ;; Hardware stack levels used:    1
  9268 ;; Hardware stack levels required when called:    7
  9269 ;; This function calls:
  9270 ;;		_Activate_Buzzer
  9271 ;;		_Deactivate_Buzzer
  9272 ;;		_Wait_One_Sec
  9273 ;;		_printf
  9274 ;; This function is called by:
  9275 ;;		_Do_Setup_Alarm_Time
  9276 ;;		_Setup_Temp_Fan
  9277 ;;		_Do_Setup_Time
  9278 ;; This function uses a non-reentrant model
  9279 ;;
  9280                           
  9281                           	psect	text38
  9282  003F66                     __ptext38:
  9283                           	opt stack 0
  9284  003F66                     _check_for_button_input:
  9285                           	opt stack 22
  9286                           
  9287                           ;utils.c: 153: if (nec_ok == 1)
  9288                           
  9289                           ; BSR set to: 0
  9290                           ;incstack = 0
  9291  003F66  0100               	movlb	0	; () banked
  9292  003F68  0595               	decf	_nec_ok& (0+255),w,b
  9293  003F6A  0100               	movlb	0	; () banked
  9294  003F6C  1196               	iorwf	(_nec_ok+1)& (0+255),w,b
  9295  003F6E  A4D8               	btfss	status,2,c
  9296  003F70  D059               	goto	l1012
  9297                           
  9298                           ; BSR set to: 0
  9299                           ;utils.c: 154: {
  9300                           ;utils.c: 155: nec_ok = 0;
  9301  003F72  0E00               	movlw	0
  9302  003F74  0100               	movlb	0	; () banked
  9303  003F76  6F96               	movwf	(_nec_ok+1)& (0+255),b
  9304  003F78  0E00               	movlw	0
  9305  003F7A  6F95               	movwf	_nec_ok& (0+255),b
  9306                           
  9307                           ; BSR set to: 0
  9308                           ;utils.c: 157: printf ("NEC_Code = %x\r\n", Nec_Button);
  9309  003F7C  0E38               	movlw	low STR_37
  9310  003F7E  0100               	movlb	0	; () banked
  9311  003F80  6FD9               	movwf	printf@f& (0+255),b
  9312  003F82  0EFF               	movlw	high STR_37
  9313  003F84  0100               	movlb	0	; () banked
  9314  003F86  6FDA               	movwf	(printf@f+1)& (0+255),b
  9315  003F88  C0A1  F0DB         	movff	_Nec_Button,?_printf+2
  9316  003F8C  0100               	movlb	0	; () banked
  9317  003F8E  6BDC               	clrf	(?_printf+3)& (0+255),b
  9318  003F90  EC0E  F000         	call	_printf	;wreg free
  9319                           
  9320                           ;utils.c: 159: INTCONbits.INT0IE = 1;
  9321  003F94  88F2               	bsf	intcon,4,c	;volatile
  9322                           
  9323                           ;utils.c: 160: INTCON2bits.INTEDG0 = 0;
  9324  003F96  9CF1               	bcf	intcon2,6,c	;volatile
  9325                           
  9326                           ;utils.c: 162: found = 0xff;
  9327  003F98  0100               	movlb	0	; () banked
  9328  003F9A  69AC               	setf	_found& (0+255),b
  9329                           
  9330                           ; BSR set to: 0
  9331                           ;utils.c: 163: for (int j=0; j< 21; j++)
  9332  003F9C  0E00               	movlw	0
  9333  003F9E  0100               	movlb	0	; () banked
  9334  003FA0  6FEE               	movwf	(check_for_button_input@j+1)& (0+255),b
  9335  003FA2  0E00               	movlw	0
  9336  003FA4  6FED               	movwf	check_for_button_input@j& (0+255),b
  9337  003FA6                     l10622:
  9338                           
  9339                           ; BSR set to: 0
  9340  003FA6  0100               	movlb	0	; () banked
  9341  003FA8  BFEE               	btfsc	(check_for_button_input@j+1)& (0+255),7,b
  9342  003FAA  D00A               	goto	l10626
  9343  003FAC  0100               	movlb	0	; () banked
  9344  003FAE  51EE               	movf	(check_for_button_input@j+1)& (0+255),w,b
  9345  003FB0  E121               	bnz	l10636
  9346  003FB2  0E15               	movlw	21
  9347  003FB4  0100               	movlb	0	; () banked
  9348  003FB6  5DED               	subwf	check_for_button_input@j& (0+255),w,b
  9349  003FB8  B0D8               	btfsc	status,0,c
  9350  003FBA  D01C               	goto	l10636
  9351  003FBC  D001               	goto	l10626
  9352                           
  9353                           ; BSR set to: 0
  9354  003FBE  D01A               	goto	l10636
  9355  003FC0                     l10626:
  9356                           
  9357                           ; BSR set to: 0
  9358                           ;utils.c: 164: {
  9359                           ;utils.c: 165: if (Nec_Button == array1[j])
  9360  003FC0  0E26               	movlw	low _array1
  9361  003FC2  0100               	movlb	0	; () banked
  9362  003FC4  25ED               	addwf	check_for_button_input@j& (0+255),w,b
  9363  003FC6  6ED9               	movwf	fsr2l,c
  9364  003FC8  0E01               	movlw	high _array1
  9365  003FCA  0100               	movlb	0	; () banked
  9366  003FCC  21EE               	addwfc	(check_for_button_input@j+1)& (0+255),w,b
  9367  003FCE  6EDA               	movwf	fsr2h,c
  9368  003FD0  0100               	movlb	0	; () banked
  9369  003FD2  51A1               	movf	_Nec_Button& (0+255),w,b
  9370  003FD4  18DE               	xorwf	postinc2,w,c
  9371  003FD6  A4D8               	btfss	status,2,c
  9372  003FD8  D008               	goto	l10632
  9373                           
  9374                           ; BSR set to: 0
  9375                           ;utils.c: 166: {
  9376                           ;utils.c: 167: found = j;
  9377  003FDA  C0ED  F0AC         	movff	check_for_button_input@j,_found
  9378                           
  9379                           ; BSR set to: 0
  9380                           ;utils.c: 168: j = 21;
  9381  003FDE  0E00               	movlw	0
  9382  003FE0  0100               	movlb	0	; () banked
  9383  003FE2  6FEE               	movwf	(check_for_button_input@j+1)& (0+255),b
  9384  003FE4  0E15               	movlw	21
  9385  003FE6  6FED               	movwf	check_for_button_input@j& (0+255),b
  9386  003FE8  D000               	goto	l10632
  9387  003FEA                     l10632:
  9388                           
  9389                           ; BSR set to: 0
  9390  003FEA  0100               	movlb	0	; () banked
  9391  003FEC  4BED               	infsnz	check_for_button_input@j& (0+255),f,b
  9392  003FEE  2BEE               	incf	(check_for_button_input@j+1)& (0+255),f,b
  9393  003FF0  D7DA               	goto	l10622
  9394                           
  9395                           ; BSR set to: 0
  9396  003FF2  D000               	goto	l10636
  9397  003FF4                     l10636:
  9398                           
  9399                           ; BSR set to: 0
  9400                           ;utils.c: 169: }
  9401                           ;utils.c: 170: }
  9402                           ;utils.c: 172: if (found == 0xff)
  9403  003FF4  0100               	movlb	0	; () banked
  9404  003FF6  29AC               	incf	_found& (0+255),w,b
  9405  003FF8  A4D8               	btfss	status,2,c
  9406  003FFA  D00A               	goto	l1011
  9407                           
  9408                           ; BSR set to: 0
  9409                           ;utils.c: 173: {
  9410                           ;utils.c: 174: printf ("Cannot find button \r\n");
  9411  003FFC  0EC2               	movlw	low STR_6
  9412  003FFE  0100               	movlb	0	; () banked
  9413  004000  6FD9               	movwf	printf@f& (0+255),b
  9414  004002  0EFE               	movlw	high STR_6
  9415  004004  0100               	movlb	0	; () banked
  9416  004006  6FDA               	movwf	(printf@f+1)& (0+255),b
  9417  004008  EC0E  F000         	call	_printf	;wreg free
  9418                           
  9419                           ;utils.c: 175: return (0);
  9420  00400C  0E00               	movlw	0
  9421                           
  9422                           ;utils.c: 176: }
  9423  00400E  D00A               	goto	l1012
  9424  004010                     l1011:
  9425                           
  9426                           ; BSR set to: 0
  9427                           ;utils.c: 177: else
  9428                           ;utils.c: 178: {
  9429                           ;utils.c: 180: PORTCbits.RC4 = 1;
  9430  004010  8882               	bsf	3970,4,c	;volatile
  9431                           
  9432                           ; BSR set to: 0
  9433                           ;utils.c: 182: Activate_Buzzer();
  9434  004012  EC3E  F02A         	call	_Activate_Buzzer	;wreg free
  9435                           
  9436                           ;utils.c: 184: Wait_One_Sec();
  9437  004016  EC73  F029         	call	_Wait_One_Sec	;wreg free
  9438                           
  9439                           ;utils.c: 186: Deactivate_Buzzer();
  9440  00401A  ECF6  F02A         	call	_Deactivate_Buzzer	;wreg free
  9441                           
  9442                           ;utils.c: 188: PORTCbits.RC4 = 0;
  9443  00401E  9882               	bcf	3970,4,c	;volatile
  9444                           
  9445                           ;utils.c: 191: return (1);
  9446  004020  0E01               	movlw	1
  9447  004022  D000               	goto	l1012
  9448  004024                     l1012:
  9449  004024  0012               	return		;funcret
  9450  004026                     __end_of_check_for_button_input:
  9451                           	opt stack 0
  9452                           tblptru	equ	0xFF8
  9453                           tblptrh	equ	0xFF7
  9454                           tblptrl	equ	0xFF6
  9455                           tablat	equ	0xFF5
  9456                           prodl	equ	0xFF3
  9457                           intcon	equ	0xFF2
  9458                           intcon2	equ	0xFF1
  9459                           postinc0	equ	0xFEE
  9460                           wreg	equ	0xFE8
  9461                           postdec1	equ	0xFE5
  9462                           fsr1l	equ	0xFE1
  9463                           postinc2	equ	0xFDE
  9464                           fsr2h	equ	0xFDA
  9465                           fsr2l	equ	0xFD9
  9466                           status	equ	0xFD8
  9467                           
  9468 ;; *************** function _Activate_Buzzer *****************
  9469 ;; Defined at:
  9470 ;;		line 64 in file "utils.c"
  9471 ;; Parameters:    Size  Location     Type
  9472 ;;		None
  9473 ;; Auto vars:     Size  Location     Type
  9474 ;;		None
  9475 ;; Return value:  Size  Location     Type
  9476 ;;		None               void
  9477 ;; Registers used:
  9478 ;;		wreg, status,2
  9479 ;; Tracked objects:
  9480 ;;		On entry : 0/0
  9481 ;;		On exit  : 0/0
  9482 ;;		Unchanged: 0/0
  9483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9487 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9488 ;;Total ram usage:        0 bytes
  9489 ;; Hardware stack levels used:    1
  9490 ;; Hardware stack levels required when called:    3
  9491 ;; This function calls:
  9492 ;;		Nothing
  9493 ;; This function is called by:
  9494 ;;		_main
  9495 ;;		_check_for_button_input
  9496 ;;		_Do_Beep
  9497 ;; This function uses a non-reentrant model
  9498 ;;
  9499                           
  9500                           	psect	text39
  9501  00547C                     __ptext39:
  9502                           	opt stack 0
  9503  00547C                     _Activate_Buzzer:
  9504                           	opt stack 25
  9505                           
  9506                           ;utils.c: 66: PR2 = 0b11111001 ;
  9507                           
  9508                           ;incstack = 0
  9509  00547C  0EF9               	movlw	249
  9510  00547E  6ECB               	movwf	4043,c	;volatile
  9511                           
  9512                           ;utils.c: 67: T2CON = 0b00000101 ;
  9513  005480  0E05               	movlw	5
  9514  005482  6ECA               	movwf	4042,c	;volatile
  9515                           
  9516                           ;utils.c: 68: CCPR2L = 0b01001010 ;
  9517  005484  0E4A               	movlw	74
  9518  005486  6EBB               	movwf	4027,c	;volatile
  9519                           
  9520                           ;utils.c: 69: CCP2CON = 0b00111100 ;
  9521  005488  0E3C               	movlw	60
  9522  00548A  6EBA               	movwf	4026,c	;volatile
  9523  00548C  0012               	return		;funcret
  9524  00548E                     __end_of_Activate_Buzzer:
  9525                           	opt stack 0
  9526                           tblptru	equ	0xFF8
  9527                           tblptrh	equ	0xFF7
  9528                           tblptrl	equ	0xFF6
  9529                           tablat	equ	0xFF5
  9530                           prodl	equ	0xFF3
  9531                           intcon	equ	0xFF2
  9532                           intcon2	equ	0xFF1
  9533                           postinc0	equ	0xFEE
  9534                           wreg	equ	0xFE8
  9535                           postdec1	equ	0xFE5
  9536                           fsr1l	equ	0xFE1
  9537                           postinc2	equ	0xFDE
  9538                           fsr2h	equ	0xFDA
  9539                           fsr2l	equ	0xFD9
  9540                           status	equ	0xFD8
  9541                           
  9542 ;; *************** function _bcd_2_dec *****************
  9543 ;; Defined at:
  9544 ;;		line 15 in file "utils.c"
  9545 ;; Parameters:    Size  Location     Type
  9546 ;;  bcd             1    wreg     unsigned char 
  9547 ;; Auto vars:     Size  Location     Type
  9548 ;;  bcd             1   20[COMRAM] unsigned char 
  9549 ;;  dec             2   18[COMRAM] int 
  9550 ;; Return value:  Size  Location     Type
  9551 ;;                  1    wreg      unsigned char 
  9552 ;; Registers used:
  9553 ;;		wreg, status,2, status,0, prodl, prodh
  9554 ;; Tracked objects:
  9555 ;;		On entry : 0/0
  9556 ;;		On exit  : 0/0
  9557 ;;		Unchanged: 0/0
  9558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9560 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9561 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9562 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9563 ;;Total ram usage:        5 bytes
  9564 ;; Hardware stack levels used:    1
  9565 ;; Hardware stack levels required when called:    3
  9566 ;; This function calls:
  9567 ;;		Nothing
  9568 ;; This function is called by:
  9569 ;;		_Do_Setup_Alarm_Time
  9570 ;;		_Do_Setup_Time
  9571 ;; This function uses a non-reentrant model
  9572 ;;
  9573                           
  9574                           	psect	text40
  9575  0050F6                     __ptext40:
  9576                           	opt stack 0
  9577  0050F6                     _bcd_2_dec:
  9578                           	opt stack 26
  9579                           
  9580                           ;incstack = 0
  9581                           ;bcd_2_dec@bcd stored from wreg
  9582  0050F6  6E15               	movwf	bcd_2_dec@bcd,c
  9583                           
  9584                           ;utils.c: 17: int dec;
  9585                           ;utils.c: 18: dec = ((bcd>> 4) * 10) + (bcd & 0x0f);
  9586  0050F8  C015  F011         	movff	bcd_2_dec@bcd,??_bcd_2_dec
  9587  0050FC  0E0F               	movlw	15
  9588  0050FE  1611               	andwf	??_bcd_2_dec,f,c
  9589  005100  C015  F012         	movff	bcd_2_dec@bcd,??_bcd_2_dec+1
  9590  005104  3A12               	swapf	??_bcd_2_dec+1,f,c
  9591  005106  0E0F               	movlw	15
  9592  005108  1612               	andwf	??_bcd_2_dec+1,f,c
  9593  00510A  5012               	movf	??_bcd_2_dec+1,w,c
  9594  00510C  0D0A               	mullw	10
  9595  00510E  5011               	movf	??_bcd_2_dec,w,c
  9596  005110  24F3               	addwf	prodl,w,c
  9597  005112  6E13               	movwf	bcd_2_dec@dec,c
  9598  005114  0E00               	movlw	0
  9599  005116  20F4               	addwfc	prodh,w,c
  9600  005118  6E14               	movwf	bcd_2_dec@dec+1,c
  9601                           
  9602                           ;utils.c: 19: return dec;
  9603  00511A  5013               	movf	bcd_2_dec@dec,w,c
  9604  00511C  D000               	goto	l953
  9605  00511E                     l953:
  9606  00511E  0012               	return		;funcret
  9607  005120                     __end_of_bcd_2_dec:
  9608                           	opt stack 0
  9609                           tblptru	equ	0xFF8
  9610                           tblptrh	equ	0xFF7
  9611                           tblptrl	equ	0xFF6
  9612                           tablat	equ	0xFF5
  9613                           prodh	equ	0xFF4
  9614                           prodl	equ	0xFF3
  9615                           intcon	equ	0xFF2
  9616                           intcon2	equ	0xFF1
  9617                           postinc0	equ	0xFEE
  9618                           wreg	equ	0xFE8
  9619                           postdec1	equ	0xFE5
  9620                           fsr1l	equ	0xFE1
  9621                           postinc2	equ	0xFDE
  9622                           fsr2h	equ	0xFDA
  9623                           fsr2l	equ	0xFD9
  9624                           status	equ	0xFD8
  9625                           
  9626 ;; *************** function _Initialize_Setup_Alarm_Time_Screen *****************
  9627 ;; Defined at:
  9628 ;;		line 149 in file "Setup_Alarm_Time.c"
  9629 ;; Parameters:    Size  Location     Type
  9630 ;;		None
  9631 ;; Auto vars:     Size  Location     Type
  9632 ;;		None
  9633 ;; Return value:  Size  Location     Type
  9634 ;;		None               void
  9635 ;; Registers used:
  9636 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9637 ;; Tracked objects:
  9638 ;;		On entry : 0/0
  9639 ;;		On exit  : 0/0
  9640 ;;		Unchanged: 0/0
  9641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9645 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9646 ;;Total ram usage:        0 bytes
  9647 ;; Hardware stack levels used:    1
  9648 ;; Hardware stack levels required when called:   10
  9649 ;; This function calls:
  9650 ;;		_drawtext
  9651 ;;		_fillRect
  9652 ;;		_fillScreen
  9653 ;;		_strcpy
  9654 ;; This function is called by:
  9655 ;;		_Do_Setup_Alarm_Time
  9656 ;; This function uses a non-reentrant model
  9657 ;;
  9658                           
  9659                           	psect	text41
  9660  003DCE                     __ptext41:
  9661                           	opt stack 0
  9662  003DCE                     _Initialize_Setup_Alarm_Time_Screen:
  9663                           	opt stack 19
  9664                           
  9665                           ;Setup_Alarm_Time.c: 151: fillScreen(0x0000);
  9666                           
  9667                           ;incstack = 0
  9668  003DCE  0E00               	movlw	0
  9669  003DD0  6E25               	movwf	fillScreen@color+1,c
  9670  003DD2  0E00               	movlw	0
  9671  003DD4  6E24               	movwf	fillScreen@color,c
  9672  003DD6  ECB0  F029         	call	_fillScreen	;wreg free
  9673                           
  9674                           ;Setup_Alarm_Time.c: 153: strcpy(txt, "ECE3301L F23 S4");
  9675  003DDA  C062  F011         	movff	_txt,strcpy@to
  9676  003DDE  C063  F012         	movff	_txt+1,strcpy@to+1
  9677  003DE2  0E58               	movlw	low STR_25
  9678  003DE4  6E13               	movwf	strcpy@from,c
  9679  003DE6  0EFF               	movlw	high STR_25
  9680  003DE8  6E14               	movwf	strcpy@from+1,c
  9681  003DEA  EC34  F028         	call	_strcpy	;wreg free
  9682                           
  9683                           ;Setup_Alarm_Time.c: 154: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  9684  003DEE  0E01               	movlw	1
  9685  003DF0  6E39               	movwf	drawtext@y,c
  9686  003DF2  C062  F03A         	movff	_txt,drawtext@_text
  9687  003DF6  C063  F03B         	movff	_txt+1,drawtext@_text+1
  9688  003DFA  0EFF               	movlw	255
  9689  003DFC  6E3D               	movwf	drawtext@color+1,c
  9690  003DFE  683C               	setf	drawtext@color,c
  9691  003E00  0E00               	movlw	0
  9692  003E02  6E3F               	movwf	drawtext@bg+1,c
  9693  003E04  0E00               	movlw	0
  9694  003E06  6E3E               	movwf	drawtext@bg,c
  9695  003E08  0E01               	movlw	1
  9696  003E0A  6E40               	movwf	drawtext@size,c
  9697  003E0C  0E01               	movlw	1
  9698  003E0E  EC08  F01E         	call	_drawtext
  9699                           
  9700                           ;Setup_Alarm_Time.c: 157: strcpy(txt, "Alrm Setup");
  9701  003E12  C062  F011         	movff	_txt,strcpy@to
  9702  003E16  C063  F012         	movff	_txt+1,strcpy@to+1
  9703  003E1A  0EA6               	movlw	low STR_26
  9704  003E1C  6E13               	movwf	strcpy@from,c
  9705  003E1E  0EFF               	movlw	high STR_26
  9706  003E20  6E14               	movwf	strcpy@from+1,c
  9707  003E22  EC34  F028         	call	_strcpy	;wreg free
  9708                           
  9709                           ;Setup_Alarm_Time.c: 158: drawtext(1+5 , 1+20, txt, 0xF81F, 0x0000, 2);
  9710  003E26  0E15               	movlw	21
  9711  003E28  6E39               	movwf	drawtext@y,c
  9712  003E2A  C062  F03A         	movff	_txt,drawtext@_text
  9713  003E2E  C063  F03B         	movff	_txt+1,drawtext@_text+1
  9714  003E32  0EF8               	movlw	248
  9715  003E34  6E3D               	movwf	drawtext@color+1,c
  9716  003E36  0E1F               	movlw	31
  9717  003E38  6E3C               	movwf	drawtext@color,c
  9718  003E3A  0E00               	movlw	0
  9719  003E3C  6E3F               	movwf	drawtext@bg+1,c
  9720  003E3E  0E00               	movlw	0
  9721  003E40  6E3E               	movwf	drawtext@bg,c
  9722  003E42  0E02               	movlw	2
  9723  003E44  6E40               	movwf	drawtext@size,c
  9724  003E46  0E06               	movlw	6
  9725  003E48  EC08  F01E         	call	_drawtext
  9726                           
  9727                           ;Setup_Alarm_Time.c: 160: strcpy(txt, "Time");
  9728  003E4C  C062  F011         	movff	_txt,strcpy@to
  9729  003E50  C063  F012         	movff	_txt+1,strcpy@to+1
  9730  003E54  0EB7               	movlw	low (STR_13+6)
  9731  003E56  6E13               	movwf	strcpy@from,c
  9732  003E58  0EFF               	movlw	high (STR_13+6)
  9733  003E5A  6E14               	movwf	strcpy@from+1,c
  9734  003E5C  EC34  F028         	call	_strcpy	;wreg free
  9735                           
  9736                           ;Setup_Alarm_Time.c: 161: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  9737  003E60  0E28               	movlw	40
  9738  003E62  6E39               	movwf	drawtext@y,c
  9739  003E64  C062  F03A         	movff	_txt,drawtext@_text
  9740  003E68  C063  F03B         	movff	_txt+1,drawtext@_text+1
  9741  003E6C  0E00               	movlw	0
  9742  003E6E  6E3D               	movwf	drawtext@color+1,c
  9743  003E70  0E1F               	movlw	31
  9744  003E72  6E3C               	movwf	drawtext@color,c
  9745  003E74  0E00               	movlw	0
  9746  003E76  6E3F               	movwf	drawtext@bg+1,c
  9747  003E78  0E00               	movlw	0
  9748  003E7A  6E3E               	movwf	drawtext@bg,c
  9749  003E7C  0E01               	movlw	1
  9750  003E7E  6E40               	movwf	drawtext@size,c
  9751  003E80  0E32               	movlw	50
  9752  003E82  EC08  F01E         	call	_drawtext
  9753                           
  9754                           ;Setup_Alarm_Time.c: 162: fillRect(15-1, 52+16, 25,2,0x07FF);
  9755  003E86  0E44               	movlw	68
  9756  003E88  6E23               	movwf	fillRect@y,c
  9757  003E8A  0E19               	movlw	25
  9758  003E8C  6E24               	movwf	fillRect@w,c
  9759  003E8E  0E02               	movlw	2
  9760  003E90  6E25               	movwf	fillRect@h,c
  9761  003E92  0E07               	movlw	7
  9762  003E94  6E27               	movwf	fillRect@color+1,c
  9763  003E96  6826               	setf	fillRect@color,c
  9764  003E98  0E0E               	movlw	14
  9765  003E9A  ECF8  F026         	call	_fillRect
  9766  003E9E  0012               	return		;funcret
  9767  003EA0                     __end_of_Initialize_Setup_Alarm_Time_Screen:
  9768                           	opt stack 0
  9769                           tblptru	equ	0xFF8
  9770                           tblptrh	equ	0xFF7
  9771                           tblptrl	equ	0xFF6
  9772                           tablat	equ	0xFF5
  9773                           prodh	equ	0xFF4
  9774                           prodl	equ	0xFF3
  9775                           intcon	equ	0xFF2
  9776                           intcon2	equ	0xFF1
  9777                           postinc0	equ	0xFEE
  9778                           wreg	equ	0xFE8
  9779                           postdec1	equ	0xFE5
  9780                           fsr1l	equ	0xFE1
  9781                           postinc2	equ	0xFDE
  9782                           fsr2h	equ	0xFDA
  9783                           fsr2l	equ	0xFD9
  9784                           status	equ	0xFD8
  9785                           
  9786 ;; *************** function _Increase_Alarm_Time *****************
  9787 ;; Defined at:
  9788 ;;		line 60 in file "Setup_Alarm_Time.c"
  9789 ;; Parameters:    Size  Location     Type
  9790 ;;		None
  9791 ;; Auto vars:     Size  Location     Type
  9792 ;;		None
  9793 ;; Return value:  Size  Location     Type
  9794 ;;		None               void
  9795 ;; Registers used:
  9796 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9797 ;; Tracked objects:
  9798 ;;		On entry : 0/0
  9799 ;;		On exit  : 0/0
  9800 ;;		Unchanged: 0/0
  9801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9805 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9806 ;;Total ram usage:        0 bytes
  9807 ;; Hardware stack levels used:    1
  9808 ;; Hardware stack levels required when called:   11
  9809 ;; This function calls:
  9810 ;;		_Update_Setup_Alarm_Time_Screen
  9811 ;; This function is called by:
  9812 ;;		_Do_Setup_Alarm_Time
  9813 ;; This function uses a non-reentrant model
  9814 ;;
  9815                           
  9816                           	psect	text42
  9817  004A92                     __ptext42:
  9818                           	opt stack 0
  9819  004A92                     _Increase_Alarm_Time:
  9820                           	opt stack 18
  9821                           
  9822                           ;Setup_Alarm_Time.c: 62: switch (Select_Alarm_Field)
  9823                           
  9824                           ;incstack = 0
  9825  004A92  D021               	goto	l10718
  9826  004A94                     l10698:
  9827                           
  9828                           ;Setup_Alarm_Time.c: 65: setup_alarm_hour++;
  9829  004A94  0100               	movlb	0	; () banked
  9830  004A96  2BAE               	incf	_setup_alarm_hour& (0+255),f,b
  9831                           
  9832                           ; BSR set to: 0
  9833                           ;Setup_Alarm_Time.c: 66: if (setup_alarm_hour == 24) setup_alarm_hour = 0;
  9834  004A98  0E18               	movlw	24
  9835  004A9A  0100               	movlb	0	; () banked
  9836  004A9C  19AE               	xorwf	_setup_alarm_hour& (0+255),w,b
  9837  004A9E  A4D8               	btfss	status,2,c
  9838  004AA0  D026               	goto	l10720
  9839                           
  9840                           ; BSR set to: 0
  9841  004AA2  0E00               	movlw	0
  9842  004AA4  0100               	movlb	0	; () banked
  9843  004AA6  6FAE               	movwf	_setup_alarm_hour& (0+255),b
  9844                           
  9845                           ; BSR set to: 0
  9846                           ;Setup_Alarm_Time.c: 67: break;
  9847  004AA8  D022               	goto	l10720
  9848  004AAA                     l10704:
  9849                           
  9850                           ; BSR set to: 0
  9851                           ;Setup_Alarm_Time.c: 71: setup_alarm_minute++;
  9852  004AAA  0100               	movlb	0	; () banked
  9853  004AAC  2BAF               	incf	_setup_alarm_minute& (0+255),f,b
  9854                           
  9855                           ; BSR set to: 0
  9856                           ;Setup_Alarm_Time.c: 72: if (setup_alarm_minute == 60) setup_alarm_minute = 0;
  9857  004AAE  0E3C               	movlw	60
  9858  004AB0  0100               	movlb	0	; () banked
  9859  004AB2  19AF               	xorwf	_setup_alarm_minute& (0+255),w,b
  9860  004AB4  A4D8               	btfss	status,2,c
  9861  004AB6  D01B               	goto	l10720
  9862                           
  9863                           ; BSR set to: 0
  9864  004AB8  0E00               	movlw	0
  9865  004ABA  0100               	movlb	0	; () banked
  9866  004ABC  6FAF               	movwf	_setup_alarm_minute& (0+255),b
  9867                           
  9868                           ; BSR set to: 0
  9869                           ;Setup_Alarm_Time.c: 73: break;
  9870  004ABE  D017               	goto	l10720
  9871  004AC0                     l10710:
  9872                           
  9873                           ; BSR set to: 0
  9874                           ;Setup_Alarm_Time.c: 77: setup_alarm_second++;
  9875  004AC0  0100               	movlb	0	; () banked
  9876  004AC2  2BB0               	incf	_setup_alarm_second& (0+255),f,b
  9877                           
  9878                           ; BSR set to: 0
  9879                           ;Setup_Alarm_Time.c: 78: if (setup_alarm_second == 60) setup_alarm_second = 0;
  9880  004AC4  0E3C               	movlw	60
  9881  004AC6  0100               	movlb	0	; () banked
  9882  004AC8  19B0               	xorwf	_setup_alarm_second& (0+255),w,b
  9883  004ACA  A4D8               	btfss	status,2,c
  9884  004ACC  D010               	goto	l10720
  9885                           
  9886                           ; BSR set to: 0
  9887  004ACE  0E00               	movlw	0
  9888  004AD0  0100               	movlb	0	; () banked
  9889  004AD2  6FB0               	movwf	_setup_alarm_second& (0+255),b
  9890                           
  9891                           ; BSR set to: 0
  9892                           ;Setup_Alarm_Time.c: 83: }
  9893                           
  9894                           ; BSR set to: 0
  9895                           ;Setup_Alarm_Time.c: 82: break;
  9896                           
  9897                           ;Setup_Alarm_Time.c: 81: default:
  9898                           
  9899                           ; BSR set to: 0
  9900                           ;Setup_Alarm_Time.c: 79: break;
  9901  004AD4  D00C               	goto	l10720
  9902  004AD6                     l10718:
  9903  004AD6  0100               	movlb	0	; () banked
  9904  004AD8  51A4               	movf	_Select_Alarm_Field& (0+255),w,b
  9905                           
  9906                           ; Switch size 1, requested type "space"
  9907                           ; Number of cases is 3, Range of values is 0 to 2
  9908                           ; switch strategies available:
  9909                           ; Name         Instructions Cycles
  9910                           ; simple_byte           10     6 (average)
  9911                           ;	Chosen strategy is simple_byte
  9912  004ADA  0A00               	xorlw	0	; case 0
  9913  004ADC  B4D8               	btfsc	status,2,c
  9914  004ADE  D7DA               	goto	l10698
  9915  004AE0  0A01               	xorlw	1	; case 1
  9916  004AE2  B4D8               	btfsc	status,2,c
  9917  004AE4  D7E2               	goto	l10704
  9918  004AE6  0A03               	xorlw	3	; case 2
  9919  004AE8  B4D8               	btfsc	status,2,c
  9920  004AEA  D7EA               	goto	l10710
  9921  004AEC  D000               	goto	l10720
  9922  004AEE                     l10720:
  9923                           
  9924                           ; BSR set to: 0
  9925                           ;Setup_Alarm_Time.c: 84: Update_Setup_Alarm_Time_Screen();
  9926  004AEE  ECAF  F01C         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
  9927  004AF2  0012               	return		;funcret
  9928  004AF4                     __end_of_Increase_Alarm_Time:
  9929                           	opt stack 0
  9930                           tblptru	equ	0xFF8
  9931                           tblptrh	equ	0xFF7
  9932                           tblptrl	equ	0xFF6
  9933                           tablat	equ	0xFF5
  9934                           prodh	equ	0xFF4
  9935                           prodl	equ	0xFF3
  9936                           intcon	equ	0xFF2
  9937                           intcon2	equ	0xFF1
  9938                           postinc0	equ	0xFEE
  9939                           wreg	equ	0xFE8
  9940                           postdec1	equ	0xFE5
  9941                           fsr1l	equ	0xFE1
  9942                           postinc2	equ	0xFDE
  9943                           fsr2h	equ	0xFDA
  9944                           fsr2l	equ	0xFD9
  9945                           status	equ	0xFD8
  9946                           
  9947 ;; *************** function _Go_Prev_Alarm_Field *****************
  9948 ;; Defined at:
  9949 ;;		line 126 in file "Setup_Alarm_Time.c"
  9950 ;; Parameters:    Size  Location     Type
  9951 ;;		None
  9952 ;; Auto vars:     Size  Location     Type
  9953 ;;		None
  9954 ;; Return value:  Size  Location     Type
  9955 ;;		None               void
  9956 ;; Registers used:
  9957 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9958 ;; Tracked objects:
  9959 ;;		On entry : 0/0
  9960 ;;		On exit  : 0/0
  9961 ;;		Unchanged: 0/0
  9962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9966 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9967 ;;Total ram usage:        0 bytes
  9968 ;; Hardware stack levels used:    1
  9969 ;; Hardware stack levels required when called:    9
  9970 ;; This function calls:
  9971 ;;		_Update_Setup_Screen_Cursor_Backward
  9972 ;; This function is called by:
  9973 ;;		_Do_Setup_Alarm_Time
  9974 ;; This function uses a non-reentrant model
  9975 ;;
  9976                           
  9977                           	psect	text43
  9978  0052A6                     __ptext43:
  9979                           	opt stack 0
  9980  0052A6                     _Go_Prev_Alarm_Field:
  9981                           	opt stack 20
  9982                           
  9983                           ;Setup_Alarm_Time.c: 128: if (Select_Alarm_Field == 0) Select_Alarm_Field = 2;
  9984                           
  9985                           ;incstack = 0
  9986  0052A6  0100               	movlb	0	; () banked
  9987  0052A8  51A4               	movf	_Select_Alarm_Field& (0+255),w,b
  9988  0052AA  A4D8               	btfss	status,2,c
  9989  0052AC  D004               	goto	l7804
  9990                           
  9991                           ; BSR set to: 0
  9992  0052AE  0E02               	movlw	2
  9993  0052B0  0100               	movlb	0	; () banked
  9994  0052B2  6FA4               	movwf	_Select_Alarm_Field& (0+255),b
  9995  0052B4  D003               	goto	l7806
  9996  0052B6                     l7804:
  9997                           
  9998                           ; BSR set to: 0
  9999                           ;Setup_Alarm_Time.c: 129: else Select_Alarm_Field--;
 10000  0052B6  0100               	movlb	0	; () banked
 10001  0052B8  07A4               	decf	_Select_Alarm_Field& (0+255),f,b
 10002  0052BA  D000               	goto	l7806
 10003  0052BC                     l7806:
 10004                           
 10005                           ; BSR set to: 0
 10006                           ;Setup_Alarm_Time.c: 130: Update_Setup_Screen_Cursor_Backward(Select_Alarm_Field);
 10007  0052BC  0100               	movlb	0	; () banked
 10008  0052BE  51A4               	movf	_Select_Alarm_Field& (0+255),w,b
 10009  0052C0  EC8A  F012         	call	_Update_Setup_Screen_Cursor_Backward
 10010  0052C4  0012               	return		;funcret
 10011  0052C6                     __end_of_Go_Prev_Alarm_Field:
 10012                           	opt stack 0
 10013                           tblptru	equ	0xFF8
 10014                           tblptrh	equ	0xFF7
 10015                           tblptrl	equ	0xFF6
 10016                           tablat	equ	0xFF5
 10017                           prodh	equ	0xFF4
 10018                           prodl	equ	0xFF3
 10019                           intcon	equ	0xFF2
 10020                           intcon2	equ	0xFF1
 10021                           postinc0	equ	0xFEE
 10022                           wreg	equ	0xFE8
 10023                           postdec1	equ	0xFE5
 10024                           fsr1l	equ	0xFE1
 10025                           postinc2	equ	0xFDE
 10026                           fsr2h	equ	0xFDA
 10027                           fsr2l	equ	0xFD9
 10028                           status	equ	0xFD8
 10029                           
 10030 ;; *************** function _Update_Setup_Screen_Cursor_Backward *****************
 10031 ;; Defined at:
 10032 ;;		line 315 in file "Setup_Time.c"
 10033 ;; Parameters:    Size  Location     Type
 10034 ;;  field           1    wreg     unsigned char 
 10035 ;; Auto vars:     Size  Location     Type
 10036 ;;  field           1   45[COMRAM] unsigned char 
 10037 ;;  xinc            1   47[COMRAM] unsigned char 
 10038 ;;  yinc            1   46[COMRAM] unsigned char 
 10039 ;; Return value:  Size  Location     Type
 10040 ;;		None               void
 10041 ;; Registers used:
 10042 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10043 ;; Tracked objects:
 10044 ;;		On entry : 0/0
 10045 ;;		On exit  : 0/0
 10046 ;;		Unchanged: 0/0
 10047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10049 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10051 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10052 ;;Total ram usage:        3 bytes
 10053 ;; Hardware stack levels used:    1
 10054 ;; Hardware stack levels required when called:    8
 10055 ;; This function calls:
 10056 ;;		_fillRect
 10057 ;; This function is called by:
 10058 ;;		_Go_Prev_Alarm_Field
 10059 ;;		_Go_Prev_Field
 10060 ;; This function uses a non-reentrant model
 10061 ;;
 10062                           
 10063                           	psect	text44
 10064  002514                     __ptext44:
 10065                           	opt stack 0
 10066  002514                     _Update_Setup_Screen_Cursor_Backward:
 10067                           	opt stack 20
 10068                           
 10069                           ;incstack = 0
 10070                           ;Update_Setup_Screen_Cursor_Backward@field stored from wreg
 10071  002514  6E2E               	movwf	Update_Setup_Screen_Cursor_Backward@field,c
 10072                           
 10073                           ;Setup_Time.c: 317: char xinc = 36;
 10074  002516  0E24               	movlw	36
 10075  002518  6E30               	movwf	Update_Setup_Screen_Cursor_Backward@xinc,c
 10076                           
 10077                           ;Setup_Time.c: 318: char yinc = 30;
 10078  00251A  0E1E               	movlw	30
 10079  00251C  6E2F               	movwf	Update_Setup_Screen_Cursor_Backward@yinc,c
 10080                           
 10081                           ;Setup_Time.c: 319: switch (field)
 10082  00251E  D0BF               	goto	l7584
 10083  002520                     l7562:
 10084                           
 10085                           ;Setup_Time.c: 322: fillRect(15-1+xinc, 52+16, 25,2,0x0000);
 10086  002520  0E44               	movlw	68
 10087  002522  6E23               	movwf	fillRect@y,c
 10088  002524  0E19               	movlw	25
 10089  002526  6E24               	movwf	fillRect@w,c
 10090  002528  0E02               	movlw	2
 10091  00252A  6E25               	movwf	fillRect@h,c
 10092  00252C  0E00               	movlw	0
 10093  00252E  6E27               	movwf	fillRect@color+1,c
 10094  002530  0E00               	movlw	0
 10095  002532  6E26               	movwf	fillRect@color,c
 10096  002534  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
 10097  002536  0F0E               	addlw	14
 10098  002538  ECF8  F026         	call	_fillRect
 10099                           
 10100                           ;Setup_Time.c: 323: fillRect(15-1, 52+16, 25,2,0x07FF);
 10101  00253C  0E44               	movlw	68
 10102  00253E  6E23               	movwf	fillRect@y,c
 10103  002540  0E19               	movlw	25
 10104  002542  6E24               	movwf	fillRect@w,c
 10105  002544  0E02               	movlw	2
 10106  002546  6E25               	movwf	fillRect@h,c
 10107  002548  0E07               	movlw	7
 10108  00254A  6E27               	movwf	fillRect@color+1,c
 10109  00254C  6826               	setf	fillRect@color,c
 10110  00254E  0E0E               	movlw	14
 10111  002550  ECF8  F026         	call	_fillRect
 10112                           
 10113                           ;Setup_Time.c: 324: break;
 10114  002554  D0B8               	goto	l892
 10115  002556                     l7564:
 10116                           
 10117                           ;Setup_Time.c: 327: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
 10118  002556  0E44               	movlw	68
 10119  002558  6E23               	movwf	fillRect@y,c
 10120  00255A  0E19               	movlw	25
 10121  00255C  6E24               	movwf	fillRect@w,c
 10122  00255E  0E02               	movlw	2
 10123  002560  6E25               	movwf	fillRect@h,c
 10124  002562  0E00               	movlw	0
 10125  002564  6E27               	movwf	fillRect@color+1,c
 10126  002566  0E00               	movlw	0
 10127  002568  6E26               	movwf	fillRect@color,c
 10128  00256A  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
 10129  00256C  0D02               	mullw	2
 10130  00256E  50F3               	movf	prodl,w,c
 10131  002570  0F0E               	addlw	14
 10132  002572  ECF8  F026         	call	_fillRect
 10133                           
 10134                           ;Setup_Time.c: 328: fillRect(15-1+xinc, 52+16, 25,2,0x07FF);
 10135  002576  0E44               	movlw	68
 10136  002578  6E23               	movwf	fillRect@y,c
 10137  00257A  0E19               	movlw	25
 10138  00257C  6E24               	movwf	fillRect@w,c
 10139  00257E  0E02               	movlw	2
 10140  002580  6E25               	movwf	fillRect@h,c
 10141  002582  0E07               	movlw	7
 10142  002584  6E27               	movwf	fillRect@color+1,c
 10143  002586  6826               	setf	fillRect@color,c
 10144  002588  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
 10145  00258A  0F0E               	addlw	14
 10146  00258C  ECF8  F026         	call	_fillRect
 10147                           
 10148                           ;Setup_Time.c: 329: break;
 10149  002590  D09A               	goto	l892
 10150  002592                     l7568:
 10151                           
 10152                           ;Setup_Time.c: 332: fillRect(15-1, 52+16, 25,2,0x0000);
 10153  002592  0E44               	movlw	68
 10154  002594  6E23               	movwf	fillRect@y,c
 10155  002596  0E19               	movlw	25
 10156  002598  6E24               	movwf	fillRect@w,c
 10157  00259A  0E02               	movlw	2
 10158  00259C  6E25               	movwf	fillRect@h,c
 10159  00259E  0E00               	movlw	0
 10160  0025A0  6E27               	movwf	fillRect@color+1,c
 10161  0025A2  0E00               	movlw	0
 10162  0025A4  6E26               	movwf	fillRect@color,c
 10163  0025A6  0E0E               	movlw	14
 10164  0025A8  ECF8  F026         	call	_fillRect
 10165                           
 10166                           ;Setup_Time.c: 333: fillRect(15-1, 52+16+yinc, 25,2,0x0000);
 10167  0025AC  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
 10168  0025AE  0F44               	addlw	68
 10169  0025B0  6E23               	movwf	fillRect@y,c
 10170  0025B2  0E19               	movlw	25
 10171  0025B4  6E24               	movwf	fillRect@w,c
 10172  0025B6  0E02               	movlw	2
 10173  0025B8  6E25               	movwf	fillRect@h,c
 10174  0025BA  0E00               	movlw	0
 10175  0025BC  6E27               	movwf	fillRect@color+1,c
 10176  0025BE  0E00               	movlw	0
 10177  0025C0  6E26               	movwf	fillRect@color,c
 10178  0025C2  0E0E               	movlw	14
 10179  0025C4  ECF8  F026         	call	_fillRect
 10180                           
 10181                           ;Setup_Time.c: 334: fillRect(15-1+2*xinc, 52+16, 25,2,0x07FF);
 10182  0025C8  0E44               	movlw	68
 10183  0025CA  6E23               	movwf	fillRect@y,c
 10184  0025CC  0E19               	movlw	25
 10185  0025CE  6E24               	movwf	fillRect@w,c
 10186  0025D0  0E02               	movlw	2
 10187  0025D2  6E25               	movwf	fillRect@h,c
 10188  0025D4  0E07               	movlw	7
 10189  0025D6  6E27               	movwf	fillRect@color+1,c
 10190  0025D8  6826               	setf	fillRect@color,c
 10191  0025DA  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
 10192  0025DC  0D02               	mullw	2
 10193  0025DE  50F3               	movf	prodl,w,c
 10194  0025E0  0F0E               	addlw	14
 10195  0025E2  ECF8  F026         	call	_fillRect
 10196                           
 10197                           ;Setup_Time.c: 335: break;
 10198  0025E6  D06F               	goto	l892
 10199  0025E8                     l7572:
 10200                           
 10201                           ;Setup_Time.c: 338: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x0000);
 10202  0025E8  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
 10203  0025EA  0F44               	addlw	68
 10204  0025EC  6E23               	movwf	fillRect@y,c
 10205  0025EE  0E19               	movlw	25
 10206  0025F0  6E24               	movwf	fillRect@w,c
 10207  0025F2  0E02               	movlw	2
 10208  0025F4  6E25               	movwf	fillRect@h,c
 10209  0025F6  0E00               	movlw	0
 10210  0025F8  6E27               	movwf	fillRect@color+1,c
 10211  0025FA  0E00               	movlw	0
 10212  0025FC  6E26               	movwf	fillRect@color,c
 10213  0025FE  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
 10214  002600  0F0E               	addlw	14
 10215  002602  ECF8  F026         	call	_fillRect
 10216                           
 10217                           ;Setup_Time.c: 339: fillRect(15-1, 52+16+yinc, 25,2,0x07FF);
 10218  002606  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
 10219  002608  0F44               	addlw	68
 10220  00260A  6E23               	movwf	fillRect@y,c
 10221  00260C  0E19               	movlw	25
 10222  00260E  6E24               	movwf	fillRect@w,c
 10223  002610  0E02               	movlw	2
 10224  002612  6E25               	movwf	fillRect@h,c
 10225  002614  0E07               	movlw	7
 10226  002616  6E27               	movwf	fillRect@color+1,c
 10227  002618  6826               	setf	fillRect@color,c
 10228  00261A  0E0E               	movlw	14
 10229  00261C  ECF8  F026         	call	_fillRect
 10230                           
 10231                           ;Setup_Time.c: 340: break;
 10232  002620  D052               	goto	l892
 10233  002622                     l7574:
 10234                           
 10235                           ;Setup_Time.c: 343: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x0000);
 10236  002622  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
 10237  002624  0F44               	addlw	68
 10238  002626  6E23               	movwf	fillRect@y,c
 10239  002628  0E19               	movlw	25
 10240  00262A  6E24               	movwf	fillRect@w,c
 10241  00262C  0E02               	movlw	2
 10242  00262E  6E25               	movwf	fillRect@h,c
 10243  002630  0E00               	movlw	0
 10244  002632  6E27               	movwf	fillRect@color+1,c
 10245  002634  0E00               	movlw	0
 10246  002636  6E26               	movwf	fillRect@color,c
 10247  002638  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
 10248  00263A  0D02               	mullw	2
 10249  00263C  50F3               	movf	prodl,w,c
 10250  00263E  0F0E               	addlw	14
 10251  002640  ECF8  F026         	call	_fillRect
 10252                           
 10253                           ;Setup_Time.c: 344: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x07FF);
 10254  002644  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
 10255  002646  0F44               	addlw	68
 10256  002648  6E23               	movwf	fillRect@y,c
 10257  00264A  0E19               	movlw	25
 10258  00264C  6E24               	movwf	fillRect@w,c
 10259  00264E  0E02               	movlw	2
 10260  002650  6E25               	movwf	fillRect@h,c
 10261  002652  0E07               	movlw	7
 10262  002654  6E27               	movwf	fillRect@color+1,c
 10263  002656  6826               	setf	fillRect@color,c
 10264  002658  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
 10265  00265A  0F0E               	addlw	14
 10266  00265C  ECF8  F026         	call	_fillRect
 10267                           
 10268                           ;Setup_Time.c: 345: break;
 10269  002660  D032               	goto	l892
 10270  002662                     l7578:
 10271                           
 10272                           ;Setup_Time.c: 348: fillRect(15-1, 52+16, 25,2,0x0000);
 10273  002662  0E44               	movlw	68
 10274  002664  6E23               	movwf	fillRect@y,c
 10275  002666  0E19               	movlw	25
 10276  002668  6E24               	movwf	fillRect@w,c
 10277  00266A  0E02               	movlw	2
 10278  00266C  6E25               	movwf	fillRect@h,c
 10279  00266E  0E00               	movlw	0
 10280  002670  6E27               	movwf	fillRect@color+1,c
 10281  002672  0E00               	movlw	0
 10282  002674  6E26               	movwf	fillRect@color,c
 10283  002676  0E0E               	movlw	14
 10284  002678  ECF8  F026         	call	_fillRect
 10285                           
 10286                           ;Setup_Time.c: 349: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x07FF);
 10287  00267C  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
 10288  00267E  0F44               	addlw	68
 10289  002680  6E23               	movwf	fillRect@y,c
 10290  002682  0E19               	movlw	25
 10291  002684  6E24               	movwf	fillRect@w,c
 10292  002686  0E02               	movlw	2
 10293  002688  6E25               	movwf	fillRect@h,c
 10294  00268A  0E07               	movlw	7
 10295  00268C  6E27               	movwf	fillRect@color+1,c
 10296  00268E  6826               	setf	fillRect@color,c
 10297  002690  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
 10298  002692  0D02               	mullw	2
 10299  002694  50F3               	movf	prodl,w,c
 10300  002696  0F0E               	addlw	14
 10301  002698  ECF8  F026         	call	_fillRect
 10302                           
 10303                           ;Setup_Time.c: 351: }
 10304                           
 10305                           ;Setup_Time.c: 350: break;
 10306  00269C  D014               	goto	l892
 10307  00269E                     l7584:
 10308  00269E  502E               	movf	Update_Setup_Screen_Cursor_Backward@field,w,c
 10309                           
 10310                           ; Switch size 1, requested type "space"
 10311                           ; Number of cases is 6, Range of values is 0 to 5
 10312                           ; switch strategies available:
 10313                           ; Name         Instructions Cycles
 10314                           ; simple_byte           19    10 (average)
 10315                           ;	Chosen strategy is simple_byte
 10316  0026A0  0A00               	xorlw	0	; case 0
 10317  0026A2  B4D8               	btfsc	status,2,c
 10318  0026A4  D73D               	goto	l7562
 10319  0026A6  0A01               	xorlw	1	; case 1
 10320  0026A8  B4D8               	btfsc	status,2,c
 10321  0026AA  D755               	goto	l7564
 10322  0026AC  0A03               	xorlw	3	; case 2
 10323  0026AE  B4D8               	btfsc	status,2,c
 10324  0026B0  D770               	goto	l7568
 10325  0026B2  0A01               	xorlw	1	; case 3
 10326  0026B4  B4D8               	btfsc	status,2,c
 10327  0026B6  D798               	goto	l7572
 10328  0026B8  0A07               	xorlw	7	; case 4
 10329  0026BA  B4D8               	btfsc	status,2,c
 10330  0026BC  D7B2               	goto	l7574
 10331  0026BE  0A01               	xorlw	1	; case 5
 10332  0026C0  B4D8               	btfsc	status,2,c
 10333  0026C2  D7CF               	goto	l7578
 10334  0026C4  D000               	goto	l892
 10335  0026C6                     l892:
 10336  0026C6  0012               	return		;funcret
 10337  0026C8                     __end_of_Update_Setup_Screen_Cursor_Backward:
 10338                           	opt stack 0
 10339                           tblptru	equ	0xFF8
 10340                           tblptrh	equ	0xFF7
 10341                           tblptrl	equ	0xFF6
 10342                           tablat	equ	0xFF5
 10343                           prodh	equ	0xFF4
 10344                           prodl	equ	0xFF3
 10345                           intcon	equ	0xFF2
 10346                           intcon2	equ	0xFF1
 10347                           postinc0	equ	0xFEE
 10348                           wreg	equ	0xFE8
 10349                           postdec1	equ	0xFE5
 10350                           fsr1l	equ	0xFE1
 10351                           postinc2	equ	0xFDE
 10352                           fsr2h	equ	0xFDA
 10353                           fsr2l	equ	0xFD9
 10354                           status	equ	0xFD8
 10355                           
 10356 ;; *************** function _Go_Next_Alarm_Field *****************
 10357 ;; Defined at:
 10358 ;;		line 117 in file "Setup_Alarm_Time.c"
 10359 ;; Parameters:    Size  Location     Type
 10360 ;;		None
 10361 ;; Auto vars:     Size  Location     Type
 10362 ;;		None
 10363 ;; Return value:  Size  Location     Type
 10364 ;;		None               void
 10365 ;; Registers used:
 10366 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10367 ;; Tracked objects:
 10368 ;;		On entry : 0/0
 10369 ;;		On exit  : 0/0
 10370 ;;		Unchanged: 0/0
 10371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10376 ;;Total ram usage:        0 bytes
 10377 ;; Hardware stack levels used:    1
 10378 ;; Hardware stack levels required when called:    9
 10379 ;; This function calls:
 10380 ;;		_Update_Setup_Screen_Cursor_Forward
 10381 ;; This function is called by:
 10382 ;;		_Do_Setup_Alarm_Time
 10383 ;; This function uses a non-reentrant model
 10384 ;;
 10385                           
 10386                           	psect	text45
 10387  0052C6                     __ptext45:
 10388                           	opt stack 0
 10389  0052C6                     _Go_Next_Alarm_Field:
 10390                           	opt stack 20
 10391                           
 10392                           ;Setup_Alarm_Time.c: 120: Select_Alarm_Field++;
 10393                           
 10394                           ;incstack = 0
 10395  0052C6  0100               	movlb	0	; () banked
 10396  0052C8  2BA4               	incf	_Select_Alarm_Field& (0+255),f,b
 10397                           
 10398                           ; BSR set to: 0
 10399                           ;Setup_Alarm_Time.c: 121: if (Select_Alarm_Field == 3) Select_Alarm_Field = 0;
 10400  0052CA  0E03               	movlw	3
 10401  0052CC  0100               	movlb	0	; () banked
 10402  0052CE  19A4               	xorwf	_Select_Alarm_Field& (0+255),w,b
 10403  0052D0  A4D8               	btfss	status,2,c
 10404  0052D2  D004               	goto	l7814
 10405                           
 10406                           ; BSR set to: 0
 10407  0052D4  0E00               	movlw	0
 10408  0052D6  0100               	movlb	0	; () banked
 10409  0052D8  6FA4               	movwf	_Select_Alarm_Field& (0+255),b
 10410  0052DA  D000               	goto	l7814
 10411  0052DC                     l7814:
 10412                           
 10413                           ; BSR set to: 0
 10414                           ;Setup_Alarm_Time.c: 122: Update_Setup_Screen_Cursor_Forward(Select_Alarm_Field);
 10415  0052DC  0100               	movlb	0	; () banked
 10416  0052DE  51A4               	movf	_Select_Alarm_Field& (0+255),w,b
 10417  0052E0  ECAD  F011         	call	_Update_Setup_Screen_Cursor_Forward
 10418  0052E4  0012               	return		;funcret
 10419  0052E6                     __end_of_Go_Next_Alarm_Field:
 10420                           	opt stack 0
 10421                           tblptru	equ	0xFF8
 10422                           tblptrh	equ	0xFF7
 10423                           tblptrl	equ	0xFF6
 10424                           tablat	equ	0xFF5
 10425                           prodh	equ	0xFF4
 10426                           prodl	equ	0xFF3
 10427                           intcon	equ	0xFF2
 10428                           intcon2	equ	0xFF1
 10429                           postinc0	equ	0xFEE
 10430                           wreg	equ	0xFE8
 10431                           postdec1	equ	0xFE5
 10432                           fsr1l	equ	0xFE1
 10433                           postinc2	equ	0xFDE
 10434                           fsr2h	equ	0xFDA
 10435                           fsr2l	equ	0xFD9
 10436                           status	equ	0xFD8
 10437                           
 10438 ;; *************** function _Update_Setup_Screen_Cursor_Forward *****************
 10439 ;; Defined at:
 10440 ;;		line 276 in file "Setup_Time.c"
 10441 ;; Parameters:    Size  Location     Type
 10442 ;;  field           1    wreg     unsigned char 
 10443 ;; Auto vars:     Size  Location     Type
 10444 ;;  field           1   45[COMRAM] unsigned char 
 10445 ;;  xinc            1   47[COMRAM] unsigned char 
 10446 ;;  yinc            1   46[COMRAM] unsigned char 
 10447 ;; Return value:  Size  Location     Type
 10448 ;;		None               void
 10449 ;; Registers used:
 10450 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10451 ;; Tracked objects:
 10452 ;;		On entry : 0/0
 10453 ;;		On exit  : 0/0
 10454 ;;		Unchanged: 0/0
 10455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10457 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10459 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10460 ;;Total ram usage:        3 bytes
 10461 ;; Hardware stack levels used:    1
 10462 ;; Hardware stack levels required when called:    8
 10463 ;; This function calls:
 10464 ;;		_fillRect
 10465 ;; This function is called by:
 10466 ;;		_Go_Next_Alarm_Field
 10467 ;;		_Go_Next_Field
 10468 ;; This function uses a non-reentrant model
 10469 ;;
 10470                           
 10471                           	psect	text46
 10472  00235A                     __ptext46:
 10473                           	opt stack 0
 10474  00235A                     _Update_Setup_Screen_Cursor_Forward:
 10475                           	opt stack 20
 10476                           
 10477                           ;incstack = 0
 10478                           ;Update_Setup_Screen_Cursor_Forward@field stored from wreg
 10479  00235A  6E2E               	movwf	Update_Setup_Screen_Cursor_Forward@field,c
 10480                           
 10481                           ;Setup_Time.c: 278: char xinc = 36;
 10482  00235C  0E24               	movlw	36
 10483  00235E  6E30               	movwf	Update_Setup_Screen_Cursor_Forward@xinc,c
 10484                           
 10485                           ;Setup_Time.c: 279: char yinc = 30;
 10486  002360  0E1E               	movlw	30
 10487  002362  6E2F               	movwf	Update_Setup_Screen_Cursor_Forward@yinc,c
 10488                           
 10489                           ;Setup_Time.c: 280: switch (field)
 10490  002364  D0C2               	goto	l7558
 10491  002366                     l7536:
 10492                           
 10493                           ;Setup_Time.c: 283: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x0000);
 10494  002366  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
 10495  002368  0F44               	addlw	68
 10496  00236A  6E23               	movwf	fillRect@y,c
 10497  00236C  0E19               	movlw	25
 10498  00236E  6E24               	movwf	fillRect@w,c
 10499  002370  0E02               	movlw	2
 10500  002372  6E25               	movwf	fillRect@h,c
 10501  002374  0E00               	movlw	0
 10502  002376  6E27               	movwf	fillRect@color+1,c
 10503  002378  0E00               	movlw	0
 10504  00237A  6E26               	movwf	fillRect@color,c
 10505  00237C  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
 10506  00237E  0D02               	mullw	2
 10507  002380  50F3               	movf	prodl,w,c
 10508  002382  0F0E               	addlw	14
 10509  002384  ECF8  F026         	call	_fillRect
 10510                           
 10511                           ;Setup_Time.c: 284: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
 10512  002388  0E44               	movlw	68
 10513  00238A  6E23               	movwf	fillRect@y,c
 10514  00238C  0E19               	movlw	25
 10515  00238E  6E24               	movwf	fillRect@w,c
 10516  002390  0E02               	movlw	2
 10517  002392  6E25               	movwf	fillRect@h,c
 10518  002394  0E00               	movlw	0
 10519  002396  6E27               	movwf	fillRect@color+1,c
 10520  002398  0E00               	movlw	0
 10521  00239A  6E26               	movwf	fillRect@color,c
 10522  00239C  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
 10523  00239E  0D02               	mullw	2
 10524  0023A0  50F3               	movf	prodl,w,c
 10525  0023A2  0F0E               	addlw	14
 10526  0023A4  ECF8  F026         	call	_fillRect
 10527                           
 10528                           ;Setup_Time.c: 285: fillRect(15-1, 52+16, 25,2,0x07FF);
 10529  0023A8  0E44               	movlw	68
 10530  0023AA  6E23               	movwf	fillRect@y,c
 10531  0023AC  0E19               	movlw	25
 10532  0023AE  6E24               	movwf	fillRect@w,c
 10533  0023B0  0E02               	movlw	2
 10534  0023B2  6E25               	movwf	fillRect@h,c
 10535  0023B4  0E07               	movlw	7
 10536  0023B6  6E27               	movwf	fillRect@color+1,c
 10537  0023B8  6826               	setf	fillRect@color,c
 10538  0023BA  0E0E               	movlw	14
 10539  0023BC  ECF8  F026         	call	_fillRect
 10540                           
 10541                           ;Setup_Time.c: 286: break;
 10542  0023C0  D0A8               	goto	l881
 10543  0023C2                     l7540:
 10544                           
 10545                           ;Setup_Time.c: 289: fillRect(15-1, 52+16, 25,2,0x0000);
 10546  0023C2  0E44               	movlw	68
 10547  0023C4  6E23               	movwf	fillRect@y,c
 10548  0023C6  0E19               	movlw	25
 10549  0023C8  6E24               	movwf	fillRect@w,c
 10550  0023CA  0E02               	movlw	2
 10551  0023CC  6E25               	movwf	fillRect@h,c
 10552  0023CE  0E00               	movlw	0
 10553  0023D0  6E27               	movwf	fillRect@color+1,c
 10554  0023D2  0E00               	movlw	0
 10555  0023D4  6E26               	movwf	fillRect@color,c
 10556  0023D6  0E0E               	movlw	14
 10557  0023D8  ECF8  F026         	call	_fillRect
 10558                           
 10559                           ;Setup_Time.c: 290: fillRect(15-1+xinc, 52+16, 25,2,0x07FF);
 10560  0023DC  0E44               	movlw	68
 10561  0023DE  6E23               	movwf	fillRect@y,c
 10562  0023E0  0E19               	movlw	25
 10563  0023E2  6E24               	movwf	fillRect@w,c
 10564  0023E4  0E02               	movlw	2
 10565  0023E6  6E25               	movwf	fillRect@h,c
 10566  0023E8  0E07               	movlw	7
 10567  0023EA  6E27               	movwf	fillRect@color+1,c
 10568  0023EC  6826               	setf	fillRect@color,c
 10569  0023EE  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
 10570  0023F0  0F0E               	addlw	14
 10571  0023F2  ECF8  F026         	call	_fillRect
 10572                           
 10573                           ;Setup_Time.c: 291: break;
 10574  0023F6  D08D               	goto	l881
 10575  0023F8                     l7542:
 10576                           
 10577                           ;Setup_Time.c: 294: fillRect(15-1+xinc, 52+16, 25,2,0x0000);
 10578  0023F8  0E44               	movlw	68
 10579  0023FA  6E23               	movwf	fillRect@y,c
 10580  0023FC  0E19               	movlw	25
 10581  0023FE  6E24               	movwf	fillRect@w,c
 10582  002400  0E02               	movlw	2
 10583  002402  6E25               	movwf	fillRect@h,c
 10584  002404  0E00               	movlw	0
 10585  002406  6E27               	movwf	fillRect@color+1,c
 10586  002408  0E00               	movlw	0
 10587  00240A  6E26               	movwf	fillRect@color,c
 10588  00240C  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
 10589  00240E  0F0E               	addlw	14
 10590  002410  ECF8  F026         	call	_fillRect
 10591                           
 10592                           ;Setup_Time.c: 295: fillRect(15-1+2*xinc, 52+16, 25,2,0x07FF);
 10593  002414  0E44               	movlw	68
 10594  002416  6E23               	movwf	fillRect@y,c
 10595  002418  0E19               	movlw	25
 10596  00241A  6E24               	movwf	fillRect@w,c
 10597  00241C  0E02               	movlw	2
 10598  00241E  6E25               	movwf	fillRect@h,c
 10599  002420  0E07               	movlw	7
 10600  002422  6E27               	movwf	fillRect@color+1,c
 10601  002424  6826               	setf	fillRect@color,c
 10602  002426  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
 10603  002428  0D02               	mullw	2
 10604  00242A  50F3               	movf	prodl,w,c
 10605  00242C  0F0E               	addlw	14
 10606  00242E  ECF8  F026         	call	_fillRect
 10607                           
 10608                           ;Setup_Time.c: 296: break;
 10609  002432  D06F               	goto	l881
 10610  002434                     l7546:
 10611                           
 10612                           ;Setup_Time.c: 299: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
 10613  002434  0E44               	movlw	68
 10614  002436  6E23               	movwf	fillRect@y,c
 10615  002438  0E19               	movlw	25
 10616  00243A  6E24               	movwf	fillRect@w,c
 10617  00243C  0E02               	movlw	2
 10618  00243E  6E25               	movwf	fillRect@h,c
 10619  002440  0E00               	movlw	0
 10620  002442  6E27               	movwf	fillRect@color+1,c
 10621  002444  0E00               	movlw	0
 10622  002446  6E26               	movwf	fillRect@color,c
 10623  002448  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
 10624  00244A  0D02               	mullw	2
 10625  00244C  50F3               	movf	prodl,w,c
 10626  00244E  0F0E               	addlw	14
 10627  002450  ECF8  F026         	call	_fillRect
 10628                           
 10629                           ;Setup_Time.c: 300: fillRect(15-1, 52+16+yinc, 25,2,0x07FF);
 10630  002454  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
 10631  002456  0F44               	addlw	68
 10632  002458  6E23               	movwf	fillRect@y,c
 10633  00245A  0E19               	movlw	25
 10634  00245C  6E24               	movwf	fillRect@w,c
 10635  00245E  0E02               	movlw	2
 10636  002460  6E25               	movwf	fillRect@h,c
 10637  002462  0E07               	movlw	7
 10638  002464  6E27               	movwf	fillRect@color+1,c
 10639  002466  6826               	setf	fillRect@color,c
 10640  002468  0E0E               	movlw	14
 10641  00246A  ECF8  F026         	call	_fillRect
 10642                           
 10643                           ;Setup_Time.c: 301: break;
 10644  00246E  D051               	goto	l881
 10645  002470                     l7550:
 10646                           
 10647                           ;Setup_Time.c: 304: fillRect(15-1, 52+16+yinc, 25,2,0x0000);
 10648  002470  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
 10649  002472  0F44               	addlw	68
 10650  002474  6E23               	movwf	fillRect@y,c
 10651  002476  0E19               	movlw	25
 10652  002478  6E24               	movwf	fillRect@w,c
 10653  00247A  0E02               	movlw	2
 10654  00247C  6E25               	movwf	fillRect@h,c
 10655  00247E  0E00               	movlw	0
 10656  002480  6E27               	movwf	fillRect@color+1,c
 10657  002482  0E00               	movlw	0
 10658  002484  6E26               	movwf	fillRect@color,c
 10659  002486  0E0E               	movlw	14
 10660  002488  ECF8  F026         	call	_fillRect
 10661                           
 10662                           ;Setup_Time.c: 305: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x07FF);
 10663  00248C  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
 10664  00248E  0F44               	addlw	68
 10665  002490  6E23               	movwf	fillRect@y,c
 10666  002492  0E19               	movlw	25
 10667  002494  6E24               	movwf	fillRect@w,c
 10668  002496  0E02               	movlw	2
 10669  002498  6E25               	movwf	fillRect@h,c
 10670  00249A  0E07               	movlw	7
 10671  00249C  6E27               	movwf	fillRect@color+1,c
 10672  00249E  6826               	setf	fillRect@color,c
 10673  0024A0  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
 10674  0024A2  0F0E               	addlw	14
 10675  0024A4  ECF8  F026         	call	_fillRect
 10676                           
 10677                           ;Setup_Time.c: 306: break;
 10678  0024A8  D034               	goto	l881
 10679  0024AA                     l7552:
 10680                           
 10681                           ;Setup_Time.c: 309: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x0000);
 10682  0024AA  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
 10683  0024AC  0F44               	addlw	68
 10684  0024AE  6E23               	movwf	fillRect@y,c
 10685  0024B0  0E19               	movlw	25
 10686  0024B2  6E24               	movwf	fillRect@w,c
 10687  0024B4  0E02               	movlw	2
 10688  0024B6  6E25               	movwf	fillRect@h,c
 10689  0024B8  0E00               	movlw	0
 10690  0024BA  6E27               	movwf	fillRect@color+1,c
 10691  0024BC  0E00               	movlw	0
 10692  0024BE  6E26               	movwf	fillRect@color,c
 10693  0024C0  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
 10694  0024C2  0F0E               	addlw	14
 10695  0024C4  ECF8  F026         	call	_fillRect
 10696                           
 10697                           ;Setup_Time.c: 310: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x07FF);
 10698  0024C8  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
 10699  0024CA  0F44               	addlw	68
 10700  0024CC  6E23               	movwf	fillRect@y,c
 10701  0024CE  0E19               	movlw	25
 10702  0024D0  6E24               	movwf	fillRect@w,c
 10703  0024D2  0E02               	movlw	2
 10704  0024D4  6E25               	movwf	fillRect@h,c
 10705  0024D6  0E07               	movlw	7
 10706  0024D8  6E27               	movwf	fillRect@color+1,c
 10707  0024DA  6826               	setf	fillRect@color,c
 10708  0024DC  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
 10709  0024DE  0D02               	mullw	2
 10710  0024E0  50F3               	movf	prodl,w,c
 10711  0024E2  0F0E               	addlw	14
 10712  0024E4  ECF8  F026         	call	_fillRect
 10713                           
 10714                           ;Setup_Time.c: 312: }
 10715                           
 10716                           ;Setup_Time.c: 311: break;
 10717  0024E8  D014               	goto	l881
 10718  0024EA                     l7558:
 10719  0024EA  502E               	movf	Update_Setup_Screen_Cursor_Forward@field,w,c
 10720                           
 10721                           ; Switch size 1, requested type "space"
 10722                           ; Number of cases is 6, Range of values is 0 to 5
 10723                           ; switch strategies available:
 10724                           ; Name         Instructions Cycles
 10725                           ; simple_byte           19    10 (average)
 10726                           ;	Chosen strategy is simple_byte
 10727  0024EC  0A00               	xorlw	0	; case 0
 10728  0024EE  B4D8               	btfsc	status,2,c
 10729  0024F0  D73A               	goto	l7536
 10730  0024F2  0A01               	xorlw	1	; case 1
 10731  0024F4  B4D8               	btfsc	status,2,c
 10732  0024F6  D765               	goto	l7540
 10733  0024F8  0A03               	xorlw	3	; case 2
 10734  0024FA  B4D8               	btfsc	status,2,c
 10735  0024FC  D77D               	goto	l7542
 10736  0024FE  0A01               	xorlw	1	; case 3
 10737  002500  B4D8               	btfsc	status,2,c
 10738  002502  D798               	goto	l7546
 10739  002504  0A07               	xorlw	7	; case 4
 10740  002506  B4D8               	btfsc	status,2,c
 10741  002508  D7B3               	goto	l7550
 10742  00250A  0A01               	xorlw	1	; case 5
 10743  00250C  B4D8               	btfsc	status,2,c
 10744  00250E  D7CD               	goto	l7552
 10745  002510  D000               	goto	l881
 10746  002512                     l881:
 10747  002512  0012               	return		;funcret
 10748  002514                     __end_of_Update_Setup_Screen_Cursor_Forward:
 10749                           	opt stack 0
 10750                           tblptru	equ	0xFF8
 10751                           tblptrh	equ	0xFF7
 10752                           tblptrl	equ	0xFF6
 10753                           tablat	equ	0xFF5
 10754                           prodh	equ	0xFF4
 10755                           prodl	equ	0xFF3
 10756                           intcon	equ	0xFF2
 10757                           intcon2	equ	0xFF1
 10758                           postinc0	equ	0xFEE
 10759                           wreg	equ	0xFE8
 10760                           postdec1	equ	0xFE5
 10761                           fsr1l	equ	0xFE1
 10762                           postinc2	equ	0xFDE
 10763                           fsr2h	equ	0xFDA
 10764                           fsr2l	equ	0xFD9
 10765                           status	equ	0xFD8
 10766                           
 10767 ;; *************** function _Exit_Setup_Alarm_Time *****************
 10768 ;; Defined at:
 10769 ;;		line 133 in file "Setup_Alarm_Time.c"
 10770 ;; Parameters:    Size  Location     Type
 10771 ;;		None
 10772 ;; Auto vars:     Size  Location     Type
 10773 ;;		None
 10774 ;; Return value:  Size  Location     Type
 10775 ;;		None               void
 10776 ;; Registers used:
 10777 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10778 ;; Tracked objects:
 10779 ;;		On entry : 0/0
 10780 ;;		On exit  : 0/0
 10781 ;;		Unchanged: 0/0
 10782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10787 ;;Total ram usage:        0 bytes
 10788 ;; Hardware stack levels used:    1
 10789 ;; Hardware stack levels required when called:   11
 10790 ;; This function calls:
 10791 ;;		_DS3231_Read_Time
 10792 ;;		_Initialize_Screen
 10793 ;; This function is called by:
 10794 ;;		_Do_Setup_Alarm_Time
 10795 ;; This function uses a non-reentrant model
 10796 ;;
 10797                           
 10798                           	psect	text47
 10799  00551A                     __ptext47:
 10800                           	opt stack 0
 10801  00551A                     _Exit_Setup_Alarm_Time:
 10802                           	opt stack 18
 10803                           
 10804                           ;Setup_Alarm_Time.c: 135: DS3231_Read_Time();
 10805                           
 10806                           ;incstack = 0
 10807  00551A  EC80  F024         	call	_DS3231_Read_Time	;wreg free
 10808                           
 10809                           ;Setup_Alarm_Time.c: 136: Initialize_Screen();
 10810  00551E  EC32  F00B         	call	_Initialize_Screen	;wreg free
 10811                           
 10812                           ;Setup_Alarm_Time.c: 137: In_Alarm_Time_Setup = 0;
 10813  005522  0E00               	movlw	0
 10814  005524  0100               	movlb	0	; () banked
 10815  005526  6F9E               	movwf	_In_Alarm_Time_Setup& (0+255),b
 10816                           
 10817                           ; BSR set to: 0
 10818  005528  0012               	return		;funcret
 10819  00552A                     __end_of_Exit_Setup_Alarm_Time:
 10820                           	opt stack 0
 10821                           tblptru	equ	0xFF8
 10822                           tblptrh	equ	0xFF7
 10823                           tblptrl	equ	0xFF6
 10824                           tablat	equ	0xFF5
 10825                           prodh	equ	0xFF4
 10826                           prodl	equ	0xFF3
 10827                           intcon	equ	0xFF2
 10828                           intcon2	equ	0xFF1
 10829                           postinc0	equ	0xFEE
 10830                           wreg	equ	0xFE8
 10831                           postdec1	equ	0xFE5
 10832                           fsr1l	equ	0xFE1
 10833                           postinc2	equ	0xFDE
 10834                           fsr2h	equ	0xFDA
 10835                           fsr2l	equ	0xFD9
 10836                           status	equ	0xFD8
 10837                           
 10838 ;; *************** function _Do_Save_New_Alarm_Time *****************
 10839 ;; Defined at:
 10840 ;;		line 140 in file "Setup_Alarm_Time.c"
 10841 ;; Parameters:    Size  Location     Type
 10842 ;;		None
 10843 ;; Auto vars:     Size  Location     Type
 10844 ;;		None
 10845 ;; Return value:  Size  Location     Type
 10846 ;;		None               void
 10847 ;; Registers used:
 10848 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10849 ;; Tracked objects:
 10850 ;;		On entry : 0/0
 10851 ;;		On exit  : 0/0
 10852 ;;		Unchanged: 0/0
 10853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10857 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10858 ;;Total ram usage:        0 bytes
 10859 ;; Hardware stack levels used:    1
 10860 ;; Hardware stack levels required when called:   11
 10861 ;; This function calls:
 10862 ;;		_DS3231_Read_Alarm_Time
 10863 ;;		_DS3231_Read_Time
 10864 ;;		_DS3231_Write_Alarm_Time
 10865 ;;		_Initialize_Screen
 10866 ;; This function is called by:
 10867 ;;		_Do_Setup_Alarm_Time
 10868 ;; This function uses a non-reentrant model
 10869 ;;
 10870                           
 10871                           	psect	text48
 10872  0053FE                     __ptext48:
 10873                           	opt stack 0
 10874  0053FE                     _Do_Save_New_Alarm_Time:
 10875                           	opt stack 18
 10876                           
 10877                           ;Setup_Alarm_Time.c: 142: DS3231_Write_Alarm_Time();
 10878                           
 10879                           ; BSR set to: 0
 10880                           ;incstack = 0
 10881  0053FE  EC9D  F023         	call	_DS3231_Write_Alarm_Time	;wreg free
 10882                           
 10883                           ;Setup_Alarm_Time.c: 143: DS3231_Read_Alarm_Time();
 10884  005402  ECAD  F026         	call	_DS3231_Read_Alarm_Time	;wreg free
 10885                           
 10886                           ;Setup_Alarm_Time.c: 144: DS3231_Read_Time();
 10887  005406  EC80  F024         	call	_DS3231_Read_Time	;wreg free
 10888                           
 10889                           ;Setup_Alarm_Time.c: 145: Initialize_Screen();
 10890  00540A  EC32  F00B         	call	_Initialize_Screen	;wreg free
 10891                           
 10892                           ;Setup_Alarm_Time.c: 146: In_Alarm_Time_Setup = 0;
 10893  00540E  0E00               	movlw	0
 10894  005410  0100               	movlb	0	; () banked
 10895  005412  6F9E               	movwf	_In_Alarm_Time_Setup& (0+255),b
 10896                           
 10897                           ; BSR set to: 0
 10898  005414  0012               	return		;funcret
 10899  005416                     __end_of_Do_Save_New_Alarm_Time:
 10900                           	opt stack 0
 10901                           tblptru	equ	0xFF8
 10902                           tblptrh	equ	0xFF7
 10903                           tblptrl	equ	0xFF6
 10904                           tablat	equ	0xFF5
 10905                           prodh	equ	0xFF4
 10906                           prodl	equ	0xFF3
 10907                           intcon	equ	0xFF2
 10908                           intcon2	equ	0xFF1
 10909                           postinc0	equ	0xFEE
 10910                           wreg	equ	0xFE8
 10911                           postdec1	equ	0xFE5
 10912                           fsr1l	equ	0xFE1
 10913                           postinc2	equ	0xFDE
 10914                           fsr2h	equ	0xFDA
 10915                           fsr2l	equ	0xFD9
 10916                           status	equ	0xFD8
 10917                           
 10918 ;; *************** function _Initialize_Screen *****************
 10919 ;; Defined at:
 10920 ;;		line 36 in file "Main_Screen.c"
 10921 ;; Parameters:    Size  Location     Type
 10922 ;;		None
 10923 ;; Auto vars:     Size  Location     Type
 10924 ;;		None
 10925 ;; Return value:  Size  Location     Type
 10926 ;;		None               void
 10927 ;; Registers used:
 10928 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10929 ;; Tracked objects:
 10930 ;;		On entry : 0/0
 10931 ;;		On exit  : 0/0
 10932 ;;		Unchanged: 0/0
 10933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10937 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10938 ;;Total ram usage:        0 bytes
 10939 ;; Hardware stack levels used:    1
 10940 ;; Hardware stack levels required when called:   10
 10941 ;; This function calls:
 10942 ;;		_LCD_Reset
 10943 ;;		_TFT_GreenTab_Initialize
 10944 ;;		_drawCircle
 10945 ;;		_drawtext
 10946 ;;		_fillScreen
 10947 ;;		_strcpy
 10948 ;; This function is called by:
 10949 ;;		_main
 10950 ;;		_Exit_Setup_Alarm_Time
 10951 ;;		_Do_Save_New_Alarm_Time
 10952 ;;		_Exit_Setup_Fan_Temp
 10953 ;;		_Do_Save_New_Fan_Temp
 10954 ;;		_Do_Save_New_Time
 10955 ;;		_Exit_Time_Setup
 10956 ;; This function uses a non-reentrant model
 10957 ;;
 10958                           
 10959                           	psect	text49
 10960  001664                     __ptext49:
 10961                           	opt stack 0
 10962  001664                     _Initialize_Screen:
 10963                           	opt stack 18
 10964                           
 10965                           ;Main_Screen.c: 38: LCD_Reset();
 10966                           
 10967                           ; BSR set to: 0
 10968                           ;incstack = 0
 10969  001664  EC47  F02A         	call	_LCD_Reset	;wreg free
 10970                           
 10971                           ;Main_Screen.c: 39: TFT_GreenTab_Initialize();
 10972  001668  EC65  F028         	call	_TFT_GreenTab_Initialize	;wreg free
 10973                           
 10974                           ;Main_Screen.c: 40: fillScreen(0x0000);
 10975  00166C  0E00               	movlw	0
 10976  00166E  6E25               	movwf	fillScreen@color+1,c
 10977  001670  0E00               	movlw	0
 10978  001672  6E24               	movwf	fillScreen@color,c
 10979  001674  ECB0  F029         	call	_fillScreen	;wreg free
 10980                           
 10981                           ;Main_Screen.c: 42: strcpy(txt, "ECE3301L F23 S4\0");
 10982  001678  C062  F011         	movff	_txt,strcpy@to
 10983  00167C  C063  F012         	movff	_txt+1,strcpy@to+1
 10984  001680  0E27               	movlw	low STR_7
 10985  001682  6E13               	movwf	strcpy@from,c
 10986  001684  0EFF               	movlw	high STR_7
 10987  001686  6E14               	movwf	strcpy@from+1,c
 10988  001688  EC34  F028         	call	_strcpy	;wreg free
 10989                           
 10990                           ;Main_Screen.c: 43: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
 10991  00168C  0E01               	movlw	1
 10992  00168E  6E39               	movwf	drawtext@y,c
 10993  001690  C062  F03A         	movff	_txt,drawtext@_text
 10994  001694  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10995  001698  0EFF               	movlw	255
 10996  00169A  6E3D               	movwf	drawtext@color+1,c
 10997  00169C  683C               	setf	drawtext@color,c
 10998  00169E  0E00               	movlw	0
 10999  0016A0  6E3F               	movwf	drawtext@bg+1,c
 11000  0016A2  0E00               	movlw	0
 11001  0016A4  6E3E               	movwf	drawtext@bg,c
 11002  0016A6  0E01               	movlw	1
 11003  0016A8  6E40               	movwf	drawtext@size,c
 11004  0016AA  0E01               	movlw	1
 11005  0016AC  EC08  F01E         	call	_drawtext
 11006                           
 11007                           ;Main_Screen.c: 45: strcpy(txt, "Temperature:");
 11008  0016B0  C062  F011         	movff	_txt,strcpy@to
 11009  0016B4  C063  F012         	movff	_txt+1,strcpy@to+1
 11010  0016B8  0E68               	movlw	low STR_8
 11011  0016BA  6E13               	movwf	strcpy@from,c
 11012  0016BC  0EFF               	movlw	high STR_8
 11013  0016BE  6E14               	movwf	strcpy@from+1,c
 11014  0016C0  EC34  F028         	call	_strcpy	;wreg free
 11015                           
 11016                           ;Main_Screen.c: 46: drawtext(24 , 11 , txt, 0xF81F, 0x0000, 1);
 11017  0016C4  0E0B               	movlw	11
 11018  0016C6  6E39               	movwf	drawtext@y,c
 11019  0016C8  C062  F03A         	movff	_txt,drawtext@_text
 11020  0016CC  C063  F03B         	movff	_txt+1,drawtext@_text+1
 11021  0016D0  0EF8               	movlw	248
 11022  0016D2  6E3D               	movwf	drawtext@color+1,c
 11023  0016D4  0E1F               	movlw	31
 11024  0016D6  6E3C               	movwf	drawtext@color,c
 11025  0016D8  0E00               	movlw	0
 11026  0016DA  6E3F               	movwf	drawtext@bg+1,c
 11027  0016DC  0E00               	movlw	0
 11028  0016DE  6E3E               	movwf	drawtext@bg,c
 11029  0016E0  0E01               	movlw	1
 11030  0016E2  6E40               	movwf	drawtext@size,c
 11031  0016E4  0E18               	movlw	24
 11032  0016E6  EC08  F01E         	call	_drawtext
 11033                           
 11034                           ;Main_Screen.c: 47: drawCircle(40, 23 , 2 , 0xFFE0);
 11035  0016EA  0E00               	movlw	0
 11036  0016EC  6E1D               	movwf	drawCircle@x0+1,c
 11037  0016EE  0E28               	movlw	40
 11038  0016F0  6E1C               	movwf	drawCircle@x0,c
 11039  0016F2  0E00               	movlw	0
 11040  0016F4  6E1F               	movwf	drawCircle@y0+1,c
 11041  0016F6  0E17               	movlw	23
 11042  0016F8  6E1E               	movwf	drawCircle@y0,c
 11043  0016FA  0E00               	movlw	0
 11044  0016FC  6E21               	movwf	drawCircle@r+1,c
 11045  0016FE  0E02               	movlw	2
 11046  001700  6E20               	movwf	drawCircle@r,c
 11047  001702  0EFF               	movlw	255
 11048  001704  6E23               	movwf	drawCircle@color+1,c
 11049  001706  0EE0               	movlw	224
 11050  001708  6E22               	movwf	drawCircle@color,c
 11051  00170A  EC64  F013         	call	_drawCircle	;wreg free
 11052                           
 11053                           ;Main_Screen.c: 48: strcpy(txt, "C/");
 11054  00170E  C062  F011         	movff	_txt,strcpy@to
 11055  001712  C063  F012         	movff	_txt+1,strcpy@to+1
 11056  001716  0EF5               	movlw	low STR_9
 11057  001718  6E13               	movwf	strcpy@from,c
 11058  00171A  0EFF               	movlw	high STR_9
 11059  00171C  6E14               	movwf	strcpy@from+1,c
 11060  00171E  EC34  F028         	call	_strcpy	;wreg free
 11061                           
 11062                           ;Main_Screen.c: 49: drawtext(45 , 23, txt, 0xFFE0 , 0x0000, 2);
 11063  001722  0E17               	movlw	23
 11064  001724  6E39               	movwf	drawtext@y,c
 11065  001726  C062  F03A         	movff	_txt,drawtext@_text
 11066  00172A  C063  F03B         	movff	_txt+1,drawtext@_text+1
 11067  00172E  0EFF               	movlw	255
 11068  001730  6E3D               	movwf	drawtext@color+1,c
 11069  001732  0EE0               	movlw	224
 11070  001734  6E3C               	movwf	drawtext@color,c
 11071  001736  0E00               	movlw	0
 11072  001738  6E3F               	movwf	drawtext@bg+1,c
 11073  00173A  0E00               	movlw	0
 11074  00173C  6E3E               	movwf	drawtext@bg,c
 11075  00173E  0E02               	movlw	2
 11076  001740  6E40               	movwf	drawtext@size,c
 11077  001742  0E2D               	movlw	45
 11078  001744  EC08  F01E         	call	_drawtext
 11079                           
 11080                           ;Main_Screen.c: 50: strcpy(txt, "F");
 11081  001748  C062  F011         	movff	_txt,strcpy@to
 11082  00174C  C063  F012         	movff	_txt+1,strcpy@to+1
 11083  001750  0EEF               	movlw	low (STR_22+2)
 11084  001752  6E13               	movwf	strcpy@from,c
 11085  001754  0EFF               	movlw	high (STR_22+2)
 11086  001756  6E14               	movwf	strcpy@from+1,c
 11087  001758  EC34  F028         	call	_strcpy	;wreg free
 11088                           
 11089                           ;Main_Screen.c: 51: drawCircle(110, 23 , 2 , 0xFFE0);
 11090  00175C  0E00               	movlw	0
 11091  00175E  6E1D               	movwf	drawCircle@x0+1,c
 11092  001760  0E6E               	movlw	110
 11093  001762  6E1C               	movwf	drawCircle@x0,c
 11094  001764  0E00               	movlw	0
 11095  001766  6E1F               	movwf	drawCircle@y0+1,c
 11096  001768  0E17               	movlw	23
 11097  00176A  6E1E               	movwf	drawCircle@y0,c
 11098  00176C  0E00               	movlw	0
 11099  00176E  6E21               	movwf	drawCircle@r+1,c
 11100  001770  0E02               	movlw	2
 11101  001772  6E20               	movwf	drawCircle@r,c
 11102  001774  0EFF               	movlw	255
 11103  001776  6E23               	movwf	drawCircle@color+1,c
 11104  001778  0EE0               	movlw	224
 11105  00177A  6E22               	movwf	drawCircle@color,c
 11106  00177C  EC64  F013         	call	_drawCircle	;wreg free
 11107                           
 11108                           ;Main_Screen.c: 52: drawtext(115 , 23, txt, 0xFFE0 , 0x0000, 2);
 11109  001780  0E17               	movlw	23
 11110  001782  6E39               	movwf	drawtext@y,c
 11111  001784  C062  F03A         	movff	_txt,drawtext@_text
 11112  001788  C063  F03B         	movff	_txt+1,drawtext@_text+1
 11113  00178C  0EFF               	movlw	255
 11114  00178E  6E3D               	movwf	drawtext@color+1,c
 11115  001790  0EE0               	movlw	224
 11116  001792  6E3C               	movwf	drawtext@color,c
 11117  001794  0E00               	movlw	0
 11118  001796  6E3F               	movwf	drawtext@bg+1,c
 11119  001798  0E00               	movlw	0
 11120  00179A  6E3E               	movwf	drawtext@bg,c
 11121  00179C  0E02               	movlw	2
 11122  00179E  6E40               	movwf	drawtext@size,c
 11123  0017A0  0E73               	movlw	115
 11124  0017A2  EC08  F01E         	call	_drawtext
 11125                           
 11126                           ;Main_Screen.c: 53: strcpy(txt, "Time");
 11127  0017A6  C062  F011         	movff	_txt,strcpy@to
 11128  0017AA  C063  F012         	movff	_txt+1,strcpy@to+1
 11129  0017AE  0EB7               	movlw	low (STR_13+6)
 11130  0017B0  6E13               	movwf	strcpy@from,c
 11131  0017B2  0EFF               	movlw	high (STR_13+6)
 11132  0017B4  6E14               	movwf	strcpy@from+1,c
 11133  0017B6  EC34  F028         	call	_strcpy	;wreg free
 11134                           
 11135                           ;Main_Screen.c: 54: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
 11136  0017BA  0E28               	movlw	40
 11137  0017BC  6E39               	movwf	drawtext@y,c
 11138  0017BE  C062  F03A         	movff	_txt,drawtext@_text
 11139  0017C2  C063  F03B         	movff	_txt+1,drawtext@_text+1
 11140  0017C6  0E00               	movlw	0
 11141  0017C8  6E3D               	movwf	drawtext@color+1,c
 11142  0017CA  0E1F               	movlw	31
 11143  0017CC  6E3C               	movwf	drawtext@color,c
 11144  0017CE  0E00               	movlw	0
 11145  0017D0  6E3F               	movwf	drawtext@bg+1,c
 11146  0017D2  0E00               	movlw	0
 11147  0017D4  6E3E               	movwf	drawtext@bg,c
 11148  0017D6  0E01               	movlw	1
 11149  0017D8  6E40               	movwf	drawtext@size,c
 11150  0017DA  0E32               	movlw	50
 11151  0017DC  EC08  F01E         	call	_drawtext
 11152                           
 11153                           ;Main_Screen.c: 55: strcpy(txt, "Date");
 11154  0017E0  C062  F011         	movff	_txt,strcpy@to
 11155  0017E4  C063  F012         	movff	_txt+1,strcpy@to+1
 11156  0017E8  0EDF               	movlw	low STR_12
 11157  0017EA  6E13               	movwf	strcpy@from,c
 11158  0017EC  0EFF               	movlw	high STR_12
 11159  0017EE  6E14               	movwf	strcpy@from+1,c
 11160  0017F0  EC34  F028         	call	_strcpy	;wreg free
 11161                           
 11162                           ;Main_Screen.c: 56: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
 11163  0017F4  0E47               	movlw	71
 11164  0017F6  6E39               	movwf	drawtext@y,c
 11165  0017F8  C062  F03A         	movff	_txt,drawtext@_text
 11166  0017FC  C063  F03B         	movff	_txt+1,drawtext@_text+1
 11167  001800  0EF8               	movlw	248
 11168  001802  6E3D               	movwf	drawtext@color+1,c
 11169  001804  0E00               	movlw	0
 11170  001806  6E3C               	movwf	drawtext@color,c
 11171  001808  0E00               	movlw	0
 11172  00180A  6E3F               	movwf	drawtext@bg+1,c
 11173  00180C  0E00               	movlw	0
 11174  00180E  6E3E               	movwf	drawtext@bg,c
 11175  001810  0E01               	movlw	1
 11176  001812  6E40               	movwf	drawtext@size,c
 11177  001814  0E32               	movlw	50
 11178  001816  EC08  F01E         	call	_drawtext
 11179                           
 11180                           ;Main_Screen.c: 57: strcpy(txt, "Alarm Time");
 11181  00181A  C062  F011         	movff	_txt,strcpy@to
 11182  00181E  C063  F012         	movff	_txt+1,strcpy@to+1
 11183  001822  0EB1               	movlw	low STR_13
 11184  001824  6E13               	movwf	strcpy@from,c
 11185  001826  0EFF               	movlw	high STR_13
 11186  001828  6E14               	movwf	strcpy@from+1,c
 11187  00182A  EC34  F028         	call	_strcpy	;wreg free
 11188                           
 11189                           ;Main_Screen.c: 58: drawtext(4 , 100 , txt, 0xFFE0, 0x0000, 1);
 11190  00182E  0E64               	movlw	100
 11191  001830  6E39               	movwf	drawtext@y,c
 11192  001832  C062  F03A         	movff	_txt,drawtext@_text
 11193  001836  C063  F03B         	movff	_txt+1,drawtext@_text+1
 11194  00183A  0EFF               	movlw	255
 11195  00183C  6E3D               	movwf	drawtext@color+1,c
 11196  00183E  0EE0               	movlw	224
 11197  001840  6E3C               	movwf	drawtext@color,c
 11198  001842  0E00               	movlw	0
 11199  001844  6E3F               	movwf	drawtext@bg+1,c
 11200  001846  0E00               	movlw	0
 11201  001848  6E3E               	movwf	drawtext@bg,c
 11202  00184A  0E01               	movlw	1
 11203  00184C  6E40               	movwf	drawtext@size,c
 11204  00184E  0E04               	movlw	4
 11205  001850  EC08  F01E         	call	_drawtext
 11206                           
 11207                           ;Main_Screen.c: 59: strcpy(txt, "Alarm SW");
 11208  001854  C062  F011         	movff	_txt,strcpy@to
 11209  001858  C063  F012         	movff	_txt+1,strcpy@to+1
 11210  00185C  0ECF               	movlw	low STR_14
 11211  00185E  6E13               	movwf	strcpy@from,c
 11212  001860  0EFF               	movlw	high STR_14
 11213  001862  6E14               	movwf	strcpy@from+1,c
 11214  001864  EC34  F028         	call	_strcpy	;wreg free
 11215                           
 11216                           ;Main_Screen.c: 60: drawtext(77, 100, txt, 0xFFE0, 0x0000, 1);
 11217  001868  0E64               	movlw	100
 11218  00186A  6E39               	movwf	drawtext@y,c
 11219  00186C  C062  F03A         	movff	_txt,drawtext@_text
 11220  001870  C063  F03B         	movff	_txt+1,drawtext@_text+1
 11221  001874  0EFF               	movlw	255
 11222  001876  6E3D               	movwf	drawtext@color+1,c
 11223  001878  0EE0               	movlw	224
 11224  00187A  6E3C               	movwf	drawtext@color,c
 11225  00187C  0E00               	movlw	0
 11226  00187E  6E3F               	movwf	drawtext@bg+1,c
 11227  001880  0E00               	movlw	0
 11228  001882  6E3E               	movwf	drawtext@bg,c
 11229  001884  0E01               	movlw	1
 11230  001886  6E40               	movwf	drawtext@size,c
 11231  001888  0E4D               	movlw	77
 11232  00188A  EC08  F01E         	call	_drawtext
 11233                           
 11234                           ;Main_Screen.c: 61: strcpy(txt, "HTR Set Temp");
 11235  00188E  C062  F011         	movff	_txt,strcpy@to
 11236  001892  C063  F012         	movff	_txt+1,strcpy@to+1
 11237  001896  0E75               	movlw	low STR_15
 11238  001898  6E13               	movwf	strcpy@from,c
 11239  00189A  0EFF               	movlw	high STR_15
 11240  00189C  6E14               	movwf	strcpy@from+1,c
 11241  00189E  EC34  F028         	call	_strcpy	;wreg free
 11242                           
 11243                           ;Main_Screen.c: 62: drawtext(6, 120, txt, 0x001F , 0x0000, 1);
 11244  0018A2  0E78               	movlw	120
 11245  0018A4  6E39               	movwf	drawtext@y,c
 11246  0018A6  C062  F03A         	movff	_txt,drawtext@_text
 11247  0018AA  C063  F03B         	movff	_txt+1,drawtext@_text+1
 11248  0018AE  0E00               	movlw	0
 11249  0018B0  6E3D               	movwf	drawtext@color+1,c
 11250  0018B2  0E1F               	movlw	31
 11251  0018B4  6E3C               	movwf	drawtext@color,c
 11252  0018B6  0E00               	movlw	0
 11253  0018B8  6E3F               	movwf	drawtext@bg+1,c
 11254  0018BA  0E00               	movlw	0
 11255  0018BC  6E3E               	movwf	drawtext@bg,c
 11256  0018BE  0E01               	movlw	1
 11257  0018C0  6E40               	movwf	drawtext@size,c
 11258  0018C2  0E06               	movlw	6
 11259  0018C4  EC08  F01E         	call	_drawtext
 11260                           
 11261                           ;Main_Screen.c: 63: strcpy(txt, "HTR SW");
 11262  0018C8  C062  F011         	movff	_txt,strcpy@to
 11263  0018CC  C063  F012         	movff	_txt+1,strcpy@to+1
 11264  0018D0  0ED8               	movlw	low STR_16
 11265  0018D2  6E13               	movwf	strcpy@from,c
 11266  0018D4  0EFF               	movlw	high STR_16
 11267  0018D6  6E14               	movwf	strcpy@from+1,c
 11268  0018D8  EC34  F028         	call	_strcpy	;wreg free
 11269                           
 11270                           ;Main_Screen.c: 64: drawtext(85, 120, txt, 0x001F , 0x0000, 1);
 11271  0018DC  0E78               	movlw	120
 11272  0018DE  6E39               	movwf	drawtext@y,c
 11273  0018E0  C062  F03A         	movff	_txt,drawtext@_text
 11274  0018E4  C063  F03B         	movff	_txt+1,drawtext@_text+1
 11275  0018E8  0E00               	movlw	0
 11276  0018EA  6E3D               	movwf	drawtext@color+1,c
 11277  0018EC  0E1F               	movlw	31
 11278  0018EE  6E3C               	movwf	drawtext@color,c
 11279  0018F0  0E00               	movlw	0
 11280  0018F2  6E3F               	movwf	drawtext@bg+1,c
 11281  0018F4  0E00               	movlw	0
 11282  0018F6  6E3E               	movwf	drawtext@bg,c
 11283  0018F8  0E01               	movlw	1
 11284  0018FA  6E40               	movwf	drawtext@size,c
 11285  0018FC  0E55               	movlw	85
 11286  0018FE  EC08  F01E         	call	_drawtext
 11287                           
 11288                           ;Main_Screen.c: 65: strcpy(txt, "DC");
 11289  001902  C062  F011         	movff	_txt,strcpy@to
 11290  001906  C063  F012         	movff	_txt+1,strcpy@to+1
 11291  00190A  0EF8               	movlw	low STR_17
 11292  00190C  6E13               	movwf	strcpy@from,c
 11293  00190E  0EFF               	movlw	high STR_17
 11294  001910  6E14               	movwf	strcpy@from+1,c
 11295  001912  EC34  F028         	call	_strcpy	;wreg free
 11296                           
 11297                           ;Main_Screen.c: 66: drawtext(12, 140, txt, 0xFFFF , 0x0000, 1);
 11298  001916  0E8C               	movlw	140
 11299  001918  6E39               	movwf	drawtext@y,c
 11300  00191A  C062  F03A         	movff	_txt,drawtext@_text
 11301  00191E  C063  F03B         	movff	_txt+1,drawtext@_text+1
 11302  001922  0EFF               	movlw	255
 11303  001924  6E3D               	movwf	drawtext@color+1,c
 11304  001926  683C               	setf	drawtext@color,c
 11305  001928  0E00               	movlw	0
 11306  00192A  6E3F               	movwf	drawtext@bg+1,c
 11307  00192C  0E00               	movlw	0
 11308  00192E  6E3E               	movwf	drawtext@bg,c
 11309  001930  0E01               	movlw	1
 11310  001932  6E40               	movwf	drawtext@size,c
 11311  001934  0E0C               	movlw	12
 11312  001936  EC08  F01E         	call	_drawtext
 11313                           
 11314                           ;Main_Screen.c: 67: strcpy(txt, "RM");
 11315  00193A  C062  F011         	movff	_txt,strcpy@to
 11316  00193E  C063  F012         	movff	_txt+1,strcpy@to+1
 11317  001942  0EFB               	movlw	low STR_18
 11318  001944  6E13               	movwf	strcpy@from,c
 11319  001946  0EFF               	movlw	high STR_18
 11320  001948  6E14               	movwf	strcpy@from+1,c
 11321  00194A  EC34  F028         	call	_strcpy	;wreg free
 11322                           
 11323                           ;Main_Screen.c: 68: drawtext(33, 140, txt, 0xFFFF , 0x0000 , 1);
 11324  00194E  0E8C               	movlw	140
 11325  001950  6E39               	movwf	drawtext@y,c
 11326  001952  C062  F03A         	movff	_txt,drawtext@_text
 11327  001956  C063  F03B         	movff	_txt+1,drawtext@_text+1
 11328  00195A  0EFF               	movlw	255
 11329  00195C  6E3D               	movwf	drawtext@color+1,c
 11330  00195E  683C               	setf	drawtext@color,c
 11331  001960  0E00               	movlw	0
 11332  001962  6E3F               	movwf	drawtext@bg+1,c
 11333  001964  0E00               	movlw	0
 11334  001966  6E3E               	movwf	drawtext@bg,c
 11335  001968  0E01               	movlw	1
 11336  00196A  6E40               	movwf	drawtext@size,c
 11337  00196C  0E21               	movlw	33
 11338  00196E  EC08  F01E         	call	_drawtext
 11339                           
 11340                           ;Main_Screen.c: 69: strcpy(txt, "Volt");
 11341  001972  C062  F011         	movff	_txt,strcpy@to
 11342  001976  C063  F012         	movff	_txt+1,strcpy@to+1
 11343  00197A  0EE4               	movlw	low STR_19
 11344  00197C  6E13               	movwf	strcpy@from,c
 11345  00197E  0EFF               	movlw	high STR_19
 11346  001980  6E14               	movwf	strcpy@from+1,c
 11347  001982  EC34  F028         	call	_strcpy	;wreg free
 11348                           
 11349                           ;Main_Screen.c: 70: drawtext(50, 140, txt, 0xFFFF , 0x0000 , 1);
 11350  001986  0E8C               	movlw	140
 11351  001988  6E39               	movwf	drawtext@y,c
 11352  00198A  C062  F03A         	movff	_txt,drawtext@_text
 11353  00198E  C063  F03B         	movff	_txt+1,drawtext@_text+1
 11354  001992  0EFF               	movlw	255
 11355  001994  6E3D               	movwf	drawtext@color+1,c
 11356  001996  683C               	setf	drawtext@color,c
 11357  001998  0E00               	movlw	0
 11358  00199A  6E3F               	movwf	drawtext@bg+1,c
 11359  00199C  0E00               	movlw	0
 11360  00199E  6E3E               	movwf	drawtext@bg,c
 11361  0019A0  0E01               	movlw	1
 11362  0019A2  6E40               	movwf	drawtext@size,c
 11363  0019A4  0E32               	movlw	50
 11364  0019A6  EC08  F01E         	call	_drawtext
 11365                           
 11366                           ;Main_Screen.c: 71: strcpy(txt, "RPM");
 11367  0019AA  C062  F011         	movff	_txt,strcpy@to
 11368  0019AE  C063  F012         	movff	_txt+1,strcpy@to+1
 11369  0019B2  0EF1               	movlw	low STR_20
 11370  0019B4  6E13               	movwf	strcpy@from,c
 11371  0019B6  0EFF               	movlw	high STR_20
 11372  0019B8  6E14               	movwf	strcpy@from+1,c
 11373  0019BA  EC34  F028         	call	_strcpy	;wreg free
 11374                           
 11375                           ;Main_Screen.c: 72: drawtext(95, 140, txt, 0xFFFF , 0x0000 , 1);
 11376  0019BE  0E8C               	movlw	140
 11377  0019C0  6E39               	movwf	drawtext@y,c
 11378  0019C2  C062  F03A         	movff	_txt,drawtext@_text
 11379  0019C6  C063  F03B         	movff	_txt+1,drawtext@_text+1
 11380  0019CA  0EFF               	movlw	255
 11381  0019CC  6E3D               	movwf	drawtext@color+1,c
 11382  0019CE  683C               	setf	drawtext@color,c
 11383  0019D0  0E00               	movlw	0
 11384  0019D2  6E3F               	movwf	drawtext@bg+1,c
 11385  0019D4  0E00               	movlw	0
 11386  0019D6  6E3E               	movwf	drawtext@bg,c
 11387  0019D8  0E01               	movlw	1
 11388  0019DA  6E40               	movwf	drawtext@size,c
 11389  0019DC  0E5F               	movlw	95
 11390  0019DE  EC08  F01E         	call	_drawtext
 11391  0019E2  0012               	return		;funcret
 11392  0019E4                     __end_of_Initialize_Screen:
 11393                           	opt stack 0
 11394                           tblptru	equ	0xFF8
 11395                           tblptrh	equ	0xFF7
 11396                           tblptrl	equ	0xFF6
 11397                           tablat	equ	0xFF5
 11398                           prodh	equ	0xFF4
 11399                           prodl	equ	0xFF3
 11400                           intcon	equ	0xFF2
 11401                           intcon2	equ	0xFF1
 11402                           postinc0	equ	0xFEE
 11403                           wreg	equ	0xFE8
 11404                           postdec1	equ	0xFE5
 11405                           fsr1l	equ	0xFE1
 11406                           postinc2	equ	0xFDE
 11407                           fsr2h	equ	0xFDA
 11408                           fsr2l	equ	0xFD9
 11409                           status	equ	0xFD8
 11410                           
 11411 ;; *************** function _strcpy *****************
 11412 ;; Defined at:
 11413 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
 11414 ;; Parameters:    Size  Location     Type
 11415 ;;  to              2   16[COMRAM] PTR unsigned char 
 11416 ;;		 -> NULL(0), Fan_SW_Txt(4), Alarm_SW_Txt(4), 
 11417 ;;  from            2   18[COMRAM] PTR const unsigned char 
 11418 ;;		 -> STR_36(5), STR_35(5), STR_34(12), STR_33(17), 
 11419 ;;		 -> STR_32(16), STR_31(9), STR_30(10), STR_29(17), 
 11420 ;;		 -> STR_27(5), STR_26(11), STR_25(16), STR_24(4), 
 11421 ;;		 -> STR_23(4), STR_22(4), STR_21(4), STR_20(4), 
 11422 ;;		 -> STR_19(5), STR_18(3), STR_17(3), STR_16(7), 
 11423 ;;		 -> STR_15(13), STR_14(9), STR_13(11), STR_12(5), 
 11424 ;;		 -> STR_11(5), STR_10(2), STR_9(3), STR_8(13), 
 11425 ;;		 -> STR_7(17), 
 11426 ;; Auto vars:     Size  Location     Type
 11427 ;;  cp              2   20[COMRAM] PTR unsigned char 
 11428 ;;		 -> NULL(0), Fan_SW_Txt(4), Alarm_SW_Txt(4), 
 11429 ;; Return value:  Size  Location     Type
 11430 ;;                  2   16[COMRAM] PTR unsigned char 
 11431 ;; Registers used:
 11432 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 11433 ;; Tracked objects:
 11434 ;;		On entry : 0/0
 11435 ;;		On exit  : 0/0
 11436 ;;		Unchanged: 0/0
 11437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11438 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11439 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11441 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11442 ;;Total ram usage:        6 bytes
 11443 ;; Hardware stack levels used:    1
 11444 ;; Hardware stack levels required when called:    3
 11445 ;; This function calls:
 11446 ;;		Nothing
 11447 ;; This function is called by:
 11448 ;;		_Initialize_Screen
 11449 ;;		_Update_Screen
 11450 ;;		_Initialize_Setup_Alarm_Time_Screen
 11451 ;;		_Initialize_Setup_Fan_Screen
 11452 ;;		_Initialize_Setup_Time_Screen
 11453 ;; This function uses a non-reentrant model
 11454 ;;
 11455                           
 11456                           	psect	text50
 11457  005068                     __ptext50:
 11458                           	opt stack 0
 11459  005068                     _strcpy:
 11460                           	opt stack 26
 11461                           
 11462                           ;incstack = 0
 11463  005068  C011  F015         	movff	strcpy@to,strcpy@cp
 11464  00506C  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
 11465  005070  D005               	goto	l7096
 11466  005072                     l7094:
 11467  005072  4A15               	infsnz	strcpy@cp,f,c
 11468  005074  2A16               	incf	strcpy@cp+1,f,c
 11469  005076  4A13               	infsnz	strcpy@from,f,c
 11470  005078  2A14               	incf	strcpy@from+1,f,c
 11471  00507A  D000               	goto	l7096
 11472  00507C                     l7096:
 11473  00507C  C013  FFF6         	movff	strcpy@from,tblptrl
 11474  005080  C014  FFF7         	movff	strcpy@from+1,tblptrh
 11475  005084                     	if	0	;tblptru may be non-zero
 11476  005084                     	endif
 11477  005084                     	if	0	;tblptru may be non-zero
 11478  005084                     	endif
 11479  005084  C015  FFD9         	movff	strcpy@cp,fsr2l
 11480  005088  C016  FFDA         	movff	strcpy@cp+1,fsr2h
 11481  00508C  0008               	tblrd		*
 11482  00508E  CFF5 FFDF          	movff	tablat,indf2
 11483  005092  50DF               	movf	indf2,w,c
 11484  005094  A4D8               	btfss	status,2,c
 11485  005096  D7ED               	goto	l7094
 11486                           
 11487                           ;	Return value of _strcpy is never used
 11488  005098  0012               	return		;funcret
 11489  00509A                     __end_of_strcpy:
 11490                           	opt stack 0
 11491                           tblptru	equ	0xFF8
 11492                           tblptrh	equ	0xFF7
 11493                           tblptrl	equ	0xFF6
 11494                           tablat	equ	0xFF5
 11495                           prodh	equ	0xFF4
 11496                           prodl	equ	0xFF3
 11497                           intcon	equ	0xFF2
 11498                           intcon2	equ	0xFF1
 11499                           postinc0	equ	0xFEE
 11500                           wreg	equ	0xFE8
 11501                           postdec1	equ	0xFE5
 11502                           fsr1l	equ	0xFE1
 11503                           indf2	equ	0xFDF
 11504                           postinc2	equ	0xFDE
 11505                           fsr2h	equ	0xFDA
 11506                           fsr2l	equ	0xFD9
 11507                           status	equ	0xFD8
 11508                           
 11509 ;; *************** function _fillScreen *****************
 11510 ;; Defined at:
 11511 ;;		line 620 in file "ST7735_TFT.c"
 11512 ;; Parameters:    Size  Location     Type
 11513 ;;  color           2   35[COMRAM] unsigned int 
 11514 ;; Auto vars:     Size  Location     Type
 11515 ;;		None
 11516 ;; Return value:  Size  Location     Type
 11517 ;;		None               void
 11518 ;; Registers used:
 11519 ;;		wreg, status,2, status,0, cstack
 11520 ;; Tracked objects:
 11521 ;;		On entry : 0/0
 11522 ;;		On exit  : 0/0
 11523 ;;		Unchanged: 0/0
 11524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11525 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11528 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11529 ;;Total ram usage:        2 bytes
 11530 ;; Hardware stack levels used:    1
 11531 ;; Hardware stack levels required when called:    7
 11532 ;; This function calls:
 11533 ;;		_fillRectangle
 11534 ;; This function is called by:
 11535 ;;		_Initialize_Screen
 11536 ;;		_Initialize_Setup_Alarm_Time_Screen
 11537 ;;		_Initialize_Setup_Fan_Screen
 11538 ;;		_Initialize_Setup_Time_Screen
 11539 ;; This function uses a non-reentrant model
 11540 ;;
 11541                           
 11542                           	psect	text51
 11543  005360                     __ptext51:
 11544                           	opt stack 0
 11545  005360                     _fillScreen:
 11546                           	opt stack 21
 11547                           
 11548                           ;ST7735_TFT.c: 622: fillRectangle(0, 0, 128, 160, color);
 11549                           
 11550                           ;incstack = 0
 11551  005360  0E00               	movlw	0
 11552  005362  6E18               	movwf	fillRectangle@y,c
 11553  005364  0E80               	movlw	128
 11554  005366  6E19               	movwf	fillRectangle@w,c
 11555  005368  0EA0               	movlw	160
 11556  00536A  6E1A               	movwf	fillRectangle@h,c
 11557  00536C  C024  F01B         	movff	fillScreen@color,fillRectangle@color
 11558  005370  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
 11559  005374  0E00               	movlw	0
 11560  005376  EC79  F01E         	call	_fillRectangle
 11561  00537A  0012               	return		;funcret
 11562  00537C                     __end_of_fillScreen:
 11563                           	opt stack 0
 11564                           tblptru	equ	0xFF8
 11565                           tblptrh	equ	0xFF7
 11566                           tblptrl	equ	0xFF6
 11567                           tablat	equ	0xFF5
 11568                           prodh	equ	0xFF4
 11569                           prodl	equ	0xFF3
 11570                           intcon	equ	0xFF2
 11571                           intcon2	equ	0xFF1
 11572                           postinc0	equ	0xFEE
 11573                           wreg	equ	0xFE8
 11574                           postdec1	equ	0xFE5
 11575                           fsr1l	equ	0xFE1
 11576                           indf2	equ	0xFDF
 11577                           postinc2	equ	0xFDE
 11578                           fsr2h	equ	0xFDA
 11579                           fsr2l	equ	0xFD9
 11580                           status	equ	0xFD8
 11581                           
 11582 ;; *************** function _fillRectangle *****************
 11583 ;; Defined at:
 11584 ;;		line 504 in file "ST7735_TFT.c"
 11585 ;; Parameters:    Size  Location     Type
 11586 ;;  x               1    wreg     unsigned char 
 11587 ;;  y               1   23[COMRAM] unsigned char 
 11588 ;;  w               1   24[COMRAM] unsigned char 
 11589 ;;  h               1   25[COMRAM] unsigned char 
 11590 ;;  color           2   26[COMRAM] unsigned int 
 11591 ;; Auto vars:     Size  Location     Type
 11592 ;;  x               1   34[COMRAM] unsigned char 
 11593 ;;  lo              1   33[COMRAM] unsigned char 
 11594 ;;  hi              1   32[COMRAM] unsigned char 
 11595 ;; Return value:  Size  Location     Type
 11596 ;;		None               void
 11597 ;; Registers used:
 11598 ;;		wreg, status,2, status,0, cstack
 11599 ;; Tracked objects:
 11600 ;;		On entry : 0/0
 11601 ;;		On exit  : 0/0
 11602 ;;		Unchanged: 0/0
 11603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11604 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11605 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11606 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11607 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11608 ;;Total ram usage:       12 bytes
 11609 ;; Hardware stack levels used:    1
 11610 ;; Hardware stack levels required when called:    6
 11611 ;; This function calls:
 11612 ;;		_setAddrWindow
 11613 ;;		_spiwrite
 11614 ;; This function is called by:
 11615 ;;		_fillScreen
 11616 ;; This function uses a non-reentrant model
 11617 ;;
 11618                           
 11619                           	psect	text52
 11620  003CF2                     __ptext52:
 11621                           	opt stack 0
 11622  003CF2                     _fillRectangle:
 11623                           	opt stack 21
 11624                           
 11625                           ;incstack = 0
 11626                           ;fillRectangle@x stored from wreg
 11627  003CF2  6E23               	movwf	fillRectangle@x,c
 11628                           
 11629                           ;ST7735_TFT.c: 506: unsigned char hi, lo;
 11630                           ;ST7735_TFT.c: 507: if((x >= 128) || (y >= 160))
 11631  003CF4  0E80               	movlw	128
 11632  003CF6  6023               	cpfslt	fillRectangle@x,c
 11633  003CF8  D069               	goto	l1395
 11634  003CFA  0E9F               	movlw	159
 11635  003CFC  6418               	cpfsgt	fillRectangle@y,c
 11636  003CFE  D001               	goto	l6372
 11637                           
 11638                           ;ST7735_TFT.c: 508: return;
 11639  003D00  D065               	goto	l1395
 11640  003D02                     l6372:
 11641                           
 11642                           ;ST7735_TFT.c: 509: if((x + w - 1) >= 128)
 11643  003D02  0EFF               	movlw	255
 11644  003D04  6E1D               	movwf	??_fillRectangle& (0+255),c
 11645  003D06  0EFF               	movlw	255
 11646  003D08  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
 11647  003D0A  5019               	movf	fillRectangle@w,w,c
 11648  003D0C  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
 11649  003D10  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
 11650  003D12  261F               	addwf	??_fillRectangle+2,f,c
 11651  003D14  0E00               	movlw	0
 11652  003D16  2220               	addwfc	??_fillRectangle+3,f,c
 11653  003D18  501D               	movf	??_fillRectangle,w,c
 11654  003D1A  261F               	addwf	??_fillRectangle+2,f,c
 11655  003D1C  501E               	movf	??_fillRectangle+1,w,c
 11656  003D1E  2220               	addwfc	??_fillRectangle+3,f,c
 11657  003D20  BE20               	btfsc	??_fillRectangle+3,7,c
 11658  003D22  D00A               	goto	l1396
 11659  003D24  5020               	movf	??_fillRectangle+3,w,c
 11660  003D26  E104               	bnz	u4700
 11661  003D28  0E80               	movlw	128
 11662  003D2A  5C1F               	subwf	??_fillRectangle+2,w,c
 11663  003D2C  A0D8               	btfss	status,0,c
 11664  003D2E  D004               	goto	l1396
 11665  003D30                     u4700:
 11666                           
 11667                           ;ST7735_TFT.c: 510: w = 128 - x;
 11668  003D30  5023               	movf	fillRectangle@x,w,c
 11669  003D32  0800               	sublw	0
 11670  003D34  0F80               	addlw	128
 11671  003D36  6E19               	movwf	fillRectangle@w,c
 11672  003D38                     l1396:
 11673                           
 11674                           ;ST7735_TFT.c: 511: if((y + h - 1) >= 160)
 11675  003D38  0EFF               	movlw	255
 11676  003D3A  6E1D               	movwf	??_fillRectangle& (0+255),c
 11677  003D3C  0EFF               	movlw	255
 11678  003D3E  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
 11679  003D40  501A               	movf	fillRectangle@h,w,c
 11680  003D42  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
 11681  003D46  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
 11682  003D48  261F               	addwf	??_fillRectangle+2,f,c
 11683  003D4A  0E00               	movlw	0
 11684  003D4C  2220               	addwfc	??_fillRectangle+3,f,c
 11685  003D4E  501D               	movf	??_fillRectangle,w,c
 11686  003D50  261F               	addwf	??_fillRectangle+2,f,c
 11687  003D52  501E               	movf	??_fillRectangle+1,w,c
 11688  003D54  2220               	addwfc	??_fillRectangle+3,f,c
 11689  003D56  BE20               	btfsc	??_fillRectangle+3,7,c
 11690  003D58  D00B               	goto	l6378
 11691  003D5A  5020               	movf	??_fillRectangle+3,w,c
 11692  003D5C  E104               	bnz	u4710
 11693  003D5E  0EA0               	movlw	160
 11694  003D60  5C1F               	subwf	??_fillRectangle+2,w,c
 11695  003D62  A0D8               	btfss	status,0,c
 11696  003D64  D005               	goto	l6378
 11697  003D66                     u4710:
 11698                           
 11699                           ;ST7735_TFT.c: 512: h = 160 - y;
 11700  003D66  5018               	movf	fillRectangle@y,w,c
 11701  003D68  0800               	sublw	0
 11702  003D6A  0FA0               	addlw	160
 11703  003D6C  6E1A               	movwf	fillRectangle@h,c
 11704  003D6E  D000               	goto	l6378
 11705  003D70                     l6378:
 11706                           
 11707                           ;ST7735_TFT.c: 513: setAddrWindow(x, y, x+w-1, y+h-1);
 11708  003D70  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
 11709  003D74  5023               	movf	fillRectangle@x,w,c
 11710  003D76  2419               	addwf	fillRectangle@w,w,c
 11711  003D78  6E1D               	movwf	??_fillRectangle& (0+255),c
 11712  003D7A  041D               	decf	??_fillRectangle,w,c
 11713  003D7C  6E15               	movwf	setAddrWindow@x1,c
 11714  003D7E  5018               	movf	fillRectangle@y,w,c
 11715  003D80  241A               	addwf	fillRectangle@h,w,c
 11716  003D82  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
 11717  003D84  041E               	decf	??_fillRectangle+1,w,c
 11718  003D86  6E16               	movwf	setAddrWindow@y1,c
 11719  003D88  5023               	movf	fillRectangle@x,w,c
 11720  003D8A  EC07  F026         	call	_setAddrWindow
 11721                           
 11722                           ;ST7735_TFT.c: 514: hi = color >> 8; lo = color;
 11723  003D8E  501C               	movf	fillRectangle@color+1,w,c
 11724  003D90  6E21               	movwf	fillRectangle@hi,c
 11725  003D92  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
 11726                           
 11727                           ;ST7735_TFT.c: 515: PORTDbits.RD4 = 1;
 11728  003D96  8883               	bsf	3971,4,c	;volatile
 11729                           
 11730                           ;ST7735_TFT.c: 516: PORTDbits.RD5 = 0;
 11731  003D98  9A83               	bcf	3971,5,c	;volatile
 11732                           
 11733                           ;ST7735_TFT.c: 518: for(y=h; y>0; y--) {
 11734  003D9A  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
 11735  003D9E                     l6390:
 11736  003D9E  5018               	movf	fillRectangle@y,w,c
 11737  003DA0  B4D8               	btfsc	status,2,c
 11738  003DA2  D013               	goto	l1399
 11739  003DA4  D001               	goto	l1398
 11740  003DA6  D011               	goto	l1399
 11741  003DA8                     l1398:
 11742                           
 11743                           ;ST7735_TFT.c: 519: for(x = w; x > 0; x--) {
 11744  003DA8  C019  F023         	movff	fillRectangle@w,fillRectangle@x
 11745  003DAC                     l6394:
 11746  003DAC  5023               	movf	fillRectangle@x,w,c
 11747  003DAE  B4D8               	btfsc	status,2,c
 11748  003DB0  D00A               	goto	l6404
 11749  003DB2  D001               	goto	l6398
 11750  003DB4  D008               	goto	l6404
 11751  003DB6                     l6398:
 11752                           
 11753                           ;ST7735_TFT.c: 520: spiwrite(hi);
 11754  003DB6  5021               	movf	fillRectangle@hi,w,c
 11755  003DB8  EC2A  F02A         	call	_spiwrite
 11756                           
 11757                           ;ST7735_TFT.c: 521: spiwrite(lo);
 11758  003DBC  5022               	movf	fillRectangle@lo,w,c
 11759  003DBE  EC2A  F02A         	call	_spiwrite
 11760  003DC2  0623               	decf	fillRectangle@x,f,c
 11761  003DC4  D7F3               	goto	l6394
 11762  003DC6                     l6404:
 11763  003DC6  0618               	decf	fillRectangle@y,f,c
 11764  003DC8  D7EA               	goto	l6390
 11765  003DCA                     l1399:
 11766                           
 11767                           ;ST7735_TFT.c: 522: }
 11768                           ;ST7735_TFT.c: 523: }
 11769                           ;ST7735_TFT.c: 524: PORTDbits.RD5 = 1;
 11770  003DCA  8A83               	bsf	3971,5,c	;volatile
 11771  003DCC                     l1395:
 11772  003DCC  0012               	return		;funcret
 11773  003DCE                     __end_of_fillRectangle:
 11774                           	opt stack 0
 11775                           tblptru	equ	0xFF8
 11776                           tblptrh	equ	0xFF7
 11777                           tblptrl	equ	0xFF6
 11778                           tablat	equ	0xFF5
 11779                           prodh	equ	0xFF4
 11780                           prodl	equ	0xFF3
 11781                           intcon	equ	0xFF2
 11782                           intcon2	equ	0xFF1
 11783                           postinc0	equ	0xFEE
 11784                           wreg	equ	0xFE8
 11785                           postdec1	equ	0xFE5
 11786                           fsr1l	equ	0xFE1
 11787                           indf2	equ	0xFDF
 11788                           postinc2	equ	0xFDE
 11789                           fsr2h	equ	0xFDA
 11790                           fsr2l	equ	0xFD9
 11791                           status	equ	0xFD8
 11792                           
 11793 ;; *************** function _drawCircle *****************
 11794 ;; Defined at:
 11795 ;;		line 529 in file "ST7735_TFT.c"
 11796 ;; Parameters:    Size  Location     Type
 11797 ;;  x0              2   27[COMRAM] int 
 11798 ;;  y0              2   29[COMRAM] int 
 11799 ;;  r               2   31[COMRAM] int 
 11800 ;;  color           2   33[COMRAM] unsigned int 
 11801 ;; Auto vars:     Size  Location     Type
 11802 ;;  y               2   45[COMRAM] int 
 11803 ;;  x               2   43[COMRAM] int 
 11804 ;;  f               2   41[COMRAM] int 
 11805 ;;  ddF_y           2   39[COMRAM] int 
 11806 ;;  ddF_x           2   37[COMRAM] int 
 11807 ;; Return value:  Size  Location     Type
 11808 ;;		None               void
 11809 ;; Registers used:
 11810 ;;		wreg, status,2, status,0, cstack
 11811 ;; Tracked objects:
 11812 ;;		On entry : 0/0
 11813 ;;		On exit  : 0/0
 11814 ;;		Unchanged: 0/0
 11815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11816 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11817 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11818 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11819 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11820 ;;Total ram usage:       20 bytes
 11821 ;; Hardware stack levels used:    1
 11822 ;; Hardware stack levels required when called:    7
 11823 ;; This function calls:
 11824 ;;		_drawPixel
 11825 ;; This function is called by:
 11826 ;;		_Initialize_Screen
 11827 ;; This function uses a non-reentrant model
 11828 ;;
 11829                           
 11830                           	psect	text53
 11831  0026C8                     __ptext53:
 11832                           	opt stack 0
 11833  0026C8                     _drawCircle:
 11834                           	opt stack 20
 11835                           
 11836                           ;ST7735_TFT.c: 531: signed int f, ddF_x, ddF_y, x, y;
 11837                           ;ST7735_TFT.c: 532: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
 11838                           
 11839                           ;incstack = 0
 11840  0026C8  C020  F024         	movff	drawCircle@r,??_drawCircle
 11841  0026CC  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
 11842  0026D0  1E24               	comf	??_drawCircle,f,c
 11843  0026D2  1E25               	comf	??_drawCircle+1,f,c
 11844  0026D4  4A24               	infsnz	??_drawCircle,f,c
 11845  0026D6  2A25               	incf	??_drawCircle+1,f,c
 11846  0026D8  0E01               	movlw	1
 11847  0026DA  2424               	addwf	??_drawCircle,w,c
 11848  0026DC  6E2A               	movwf	drawCircle@f,c
 11849  0026DE  0E00               	movlw	0
 11850  0026E0  2025               	addwfc	??_drawCircle+1,w,c
 11851  0026E2  6E2B               	movwf	drawCircle@f+1,c
 11852  0026E4  0E00               	movlw	0
 11853  0026E6  6E27               	movwf	drawCircle@ddF_x+1,c
 11854  0026E8  0E01               	movlw	1
 11855  0026EA  6E26               	movwf	drawCircle@ddF_x,c
 11856  0026EC  C020  F024         	movff	drawCircle@r,??_drawCircle
 11857  0026F0  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
 11858  0026F4  90D8               	bcf	status,0,c
 11859  0026F6  3624               	rlcf	??_drawCircle,f,c
 11860  0026F8  3625               	rlcf	??_drawCircle+1,f,c
 11861  0026FA  1E24               	comf	??_drawCircle,f,c
 11862  0026FC  1E25               	comf	??_drawCircle+1,f,c
 11863  0026FE  4A24               	infsnz	??_drawCircle,f,c
 11864  002700  2A25               	incf	??_drawCircle+1,f,c
 11865  002702  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
 11866  002706  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
 11867  00270A  0E00               	movlw	0
 11868  00270C  6E2D               	movwf	drawCircle@x+1,c
 11869  00270E  0E00               	movlw	0
 11870  002710  6E2C               	movwf	drawCircle@x,c
 11871  002712  C020  F02E         	movff	drawCircle@r,drawCircle@y
 11872  002716  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
 11873                           
 11874                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 + r, color);
 11875  00271A  501E               	movf	drawCircle@y0,w,c
 11876  00271C  2420               	addwf	drawCircle@r,w,c
 11877  00271E  6E18               	movwf	drawPixel@y,c
 11878  002720  C022  F019         	movff	drawCircle@color,drawPixel@color
 11879  002724  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11880  002728  501C               	movf	drawCircle@x0,w,c
 11881  00272A  EC4D  F028         	call	_drawPixel
 11882                           
 11883                           ;ST7735_TFT.c: 534: drawPixel(x0 , y0 - r, color);
 11884  00272E  5020               	movf	drawCircle@r,w,c
 11885  002730  0800               	sublw	0
 11886  002732  241E               	addwf	drawCircle@y0,w,c
 11887  002734  6E18               	movwf	drawPixel@y,c
 11888  002736  C022  F019         	movff	drawCircle@color,drawPixel@color
 11889  00273A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11890  00273E  501C               	movf	drawCircle@x0,w,c
 11891  002740  EC4D  F028         	call	_drawPixel
 11892                           
 11893                           ;ST7735_TFT.c: 535: drawPixel(x0+r, y0 , color);
 11894  002744  C01E  F018         	movff	drawCircle@y0,drawPixel@y
 11895  002748  C022  F019         	movff	drawCircle@color,drawPixel@color
 11896  00274C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11897  002750  501C               	movf	drawCircle@x0,w,c
 11898  002752  2420               	addwf	drawCircle@r,w,c
 11899  002754  EC4D  F028         	call	_drawPixel
 11900                           
 11901                           ;ST7735_TFT.c: 536: drawPixel(x0-r, y0 , color);
 11902  002758  C01E  F018         	movff	drawCircle@y0,drawPixel@y
 11903  00275C  C022  F019         	movff	drawCircle@color,drawPixel@color
 11904  002760  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11905  002764  5020               	movf	drawCircle@r,w,c
 11906  002766  0800               	sublw	0
 11907  002768  241C               	addwf	drawCircle@x0,w,c
 11908  00276A  EC4D  F028         	call	_drawPixel
 11909                           
 11910                           ;ST7735_TFT.c: 537: while (x < y) {
 11911  00276E  D078               	goto	l7180
 11912  002770                     l7152:
 11913                           
 11914                           ;ST7735_TFT.c: 538: if (f >= 0) {
 11915  002770  BE2B               	btfsc	drawCircle@f+1,7,c
 11916  002772  D00B               	goto	l1406
 11917                           
 11918                           ;ST7735_TFT.c: 539: y--;
 11919  002774  062E               	decf	drawCircle@y,f,c
 11920  002776  A0D8               	btfss	status,0,c
 11921  002778  062F               	decf	drawCircle@y+1,f,c
 11922                           
 11923                           ;ST7735_TFT.c: 540: ddF_y += 2;
 11924  00277A  0E02               	movlw	2
 11925  00277C  2628               	addwf	drawCircle@ddF_y,f,c
 11926  00277E  0E00               	movlw	0
 11927  002780  2229               	addwfc	drawCircle@ddF_y+1,f,c
 11928                           
 11929                           ;ST7735_TFT.c: 541: f += ddF_y;
 11930  002782  5028               	movf	drawCircle@ddF_y,w,c
 11931  002784  262A               	addwf	drawCircle@f,f,c
 11932  002786  5029               	movf	drawCircle@ddF_y+1,w,c
 11933  002788  222B               	addwfc	drawCircle@f+1,f,c
 11934  00278A                     l1406:
 11935                           
 11936                           ;ST7735_TFT.c: 542: }
 11937                           ;ST7735_TFT.c: 543: x++;
 11938  00278A  4A2C               	infsnz	drawCircle@x,f,c
 11939  00278C  2A2D               	incf	drawCircle@x+1,f,c
 11940                           
 11941                           ;ST7735_TFT.c: 544: ddF_x += 2;
 11942  00278E  0E02               	movlw	2
 11943  002790  2626               	addwf	drawCircle@ddF_x,f,c
 11944  002792  0E00               	movlw	0
 11945  002794  2227               	addwfc	drawCircle@ddF_x+1,f,c
 11946                           
 11947                           ;ST7735_TFT.c: 545: f += ddF_x;
 11948  002796  5026               	movf	drawCircle@ddF_x,w,c
 11949  002798  262A               	addwf	drawCircle@f,f,c
 11950  00279A  5027               	movf	drawCircle@ddF_x+1,w,c
 11951  00279C  222B               	addwfc	drawCircle@f+1,f,c
 11952                           
 11953                           ;ST7735_TFT.c: 546: drawPixel(x0 + x, y0 + y, color);
 11954  00279E  501E               	movf	drawCircle@y0,w,c
 11955  0027A0  242E               	addwf	drawCircle@y,w,c
 11956  0027A2  6E18               	movwf	drawPixel@y,c
 11957  0027A4  C022  F019         	movff	drawCircle@color,drawPixel@color
 11958  0027A8  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11959  0027AC  501C               	movf	drawCircle@x0,w,c
 11960  0027AE  242C               	addwf	drawCircle@x,w,c
 11961  0027B0  EC4D  F028         	call	_drawPixel
 11962                           
 11963                           ;ST7735_TFT.c: 547: drawPixel(x0 - x, y0 + y, color);
 11964  0027B4  501E               	movf	drawCircle@y0,w,c
 11965  0027B6  242E               	addwf	drawCircle@y,w,c
 11966  0027B8  6E18               	movwf	drawPixel@y,c
 11967  0027BA  C022  F019         	movff	drawCircle@color,drawPixel@color
 11968  0027BE  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11969  0027C2  502C               	movf	drawCircle@x,w,c
 11970  0027C4  0800               	sublw	0
 11971  0027C6  241C               	addwf	drawCircle@x0,w,c
 11972  0027C8  EC4D  F028         	call	_drawPixel
 11973                           
 11974                           ;ST7735_TFT.c: 548: drawPixel(x0 + x, y0 - y, color);
 11975  0027CC  502E               	movf	drawCircle@y,w,c
 11976  0027CE  0800               	sublw	0
 11977  0027D0  241E               	addwf	drawCircle@y0,w,c
 11978  0027D2  6E18               	movwf	drawPixel@y,c
 11979  0027D4  C022  F019         	movff	drawCircle@color,drawPixel@color
 11980  0027D8  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11981  0027DC  501C               	movf	drawCircle@x0,w,c
 11982  0027DE  242C               	addwf	drawCircle@x,w,c
 11983  0027E0  EC4D  F028         	call	_drawPixel
 11984                           
 11985                           ;ST7735_TFT.c: 549: drawPixel(x0 - x, y0 - y, color);
 11986  0027E4  502E               	movf	drawCircle@y,w,c
 11987  0027E6  0800               	sublw	0
 11988  0027E8  241E               	addwf	drawCircle@y0,w,c
 11989  0027EA  6E18               	movwf	drawPixel@y,c
 11990  0027EC  C022  F019         	movff	drawCircle@color,drawPixel@color
 11991  0027F0  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11992  0027F4  502C               	movf	drawCircle@x,w,c
 11993  0027F6  0800               	sublw	0
 11994  0027F8  241C               	addwf	drawCircle@x0,w,c
 11995  0027FA  EC4D  F028         	call	_drawPixel
 11996                           
 11997                           ;ST7735_TFT.c: 550: drawPixel(x0 + y, y0 + x, color);
 11998  0027FE  501E               	movf	drawCircle@y0,w,c
 11999  002800  242C               	addwf	drawCircle@x,w,c
 12000  002802  6E18               	movwf	drawPixel@y,c
 12001  002804  C022  F019         	movff	drawCircle@color,drawPixel@color
 12002  002808  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 12003  00280C  501C               	movf	drawCircle@x0,w,c
 12004  00280E  242E               	addwf	drawCircle@y,w,c
 12005  002810  EC4D  F028         	call	_drawPixel
 12006                           
 12007                           ;ST7735_TFT.c: 551: drawPixel(x0 - y, y0 + x, color);
 12008  002814  501E               	movf	drawCircle@y0,w,c
 12009  002816  242C               	addwf	drawCircle@x,w,c
 12010  002818  6E18               	movwf	drawPixel@y,c
 12011  00281A  C022  F019         	movff	drawCircle@color,drawPixel@color
 12012  00281E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 12013  002822  502E               	movf	drawCircle@y,w,c
 12014  002824  0800               	sublw	0
 12015  002826  241C               	addwf	drawCircle@x0,w,c
 12016  002828  EC4D  F028         	call	_drawPixel
 12017                           
 12018                           ;ST7735_TFT.c: 552: drawPixel(x0 + y, y0 - x, color);
 12019  00282C  502C               	movf	drawCircle@x,w,c
 12020  00282E  0800               	sublw	0
 12021  002830  241E               	addwf	drawCircle@y0,w,c
 12022  002832  6E18               	movwf	drawPixel@y,c
 12023  002834  C022  F019         	movff	drawCircle@color,drawPixel@color
 12024  002838  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 12025  00283C  501C               	movf	drawCircle@x0,w,c
 12026  00283E  242E               	addwf	drawCircle@y,w,c
 12027  002840  EC4D  F028         	call	_drawPixel
 12028                           
 12029                           ;ST7735_TFT.c: 553: drawPixel(x0 - y, y0 - x, color);
 12030  002844  502C               	movf	drawCircle@x,w,c
 12031  002846  0800               	sublw	0
 12032  002848  241E               	addwf	drawCircle@y0,w,c
 12033  00284A  6E18               	movwf	drawPixel@y,c
 12034  00284C  C022  F019         	movff	drawCircle@color,drawPixel@color
 12035  002850  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 12036  002854  502E               	movf	drawCircle@y,w,c
 12037  002856  0800               	sublw	0
 12038  002858  241C               	addwf	drawCircle@x0,w,c
 12039  00285A  EC4D  F028         	call	_drawPixel
 12040  00285E  D000               	goto	l7180
 12041  002860                     l7180:
 12042  002860  502E               	movf	drawCircle@y,w,c
 12043  002862  5C2C               	subwf	drawCircle@x,w,c
 12044  002864  502D               	movf	drawCircle@x+1,w,c
 12045  002866  0A80               	xorlw	128
 12046  002868  6E24               	movwf	??_drawCircle& (0+255),c
 12047  00286A  502F               	movf	drawCircle@y+1,w,c
 12048  00286C  0A80               	xorlw	128
 12049  00286E  5824               	subwfb	??_drawCircle& (0+255),w,c
 12050  002870  A0D8               	btfss	status,0,c
 12051  002872  D77E               	goto	l7152
 12052  002874  0012               	return		;funcret
 12053  002876                     __end_of_drawCircle:
 12054                           	opt stack 0
 12055                           tblptru	equ	0xFF8
 12056                           tblptrh	equ	0xFF7
 12057                           tblptrl	equ	0xFF6
 12058                           tablat	equ	0xFF5
 12059                           prodh	equ	0xFF4
 12060                           prodl	equ	0xFF3
 12061                           intcon	equ	0xFF2
 12062                           intcon2	equ	0xFF1
 12063                           postinc0	equ	0xFEE
 12064                           wreg	equ	0xFE8
 12065                           postdec1	equ	0xFE5
 12066                           fsr1l	equ	0xFE1
 12067                           indf2	equ	0xFDF
 12068                           postinc2	equ	0xFDE
 12069                           fsr2h	equ	0xFDA
 12070                           fsr2l	equ	0xFD9
 12071                           status	equ	0xFD8
 12072                           
 12073 ;; *************** function _TFT_GreenTab_Initialize *****************
 12074 ;; Defined at:
 12075 ;;		line 645 in file "ST7735_TFT.c"
 12076 ;; Parameters:    Size  Location     Type
 12077 ;;		None
 12078 ;; Auto vars:     Size  Location     Type
 12079 ;;		None
 12080 ;; Return value:  Size  Location     Type
 12081 ;;		None               void
 12082 ;; Registers used:
 12083 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 12084 ;; Tracked objects:
 12085 ;;		On entry : 0/0
 12086 ;;		On exit  : 0/0
 12087 ;;		Unchanged: 0/0
 12088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12092 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12093 ;;Total ram usage:        0 bytes
 12094 ;; Hardware stack levels used:    1
 12095 ;; Hardware stack levels required when called:    6
 12096 ;; This function calls:
 12097 ;;		_Rcmd1
 12098 ;;		_Rcmd2red
 12099 ;;		_Rcmd3
 12100 ;;		_write_command
 12101 ;;		_write_data
 12102 ;; This function is called by:
 12103 ;;		_Initialize_Screen
 12104 ;; This function uses a non-reentrant model
 12105 ;;
 12106                           
 12107                           	psect	text54
 12108  0050CA                     __ptext54:
 12109                           	opt stack 0
 12110  0050CA                     _TFT_GreenTab_Initialize:
 12111                           	opt stack 21
 12112                           
 12113                           ;ST7735_TFT.c: 647: PORTDbits.RD5 = 1;
 12114                           
 12115                           ;incstack = 0
 12116  0050CA  8A83               	bsf	3971,5,c	;volatile
 12117                           
 12118                           ;ST7735_TFT.c: 648: PORTDbits.RD4 = 0;
 12119  0050CC  9883               	bcf	3971,4,c	;volatile
 12120                           
 12121                           ;ST7735_TFT.c: 650: SSPSTAT=0x80;
 12122  0050CE  0E80               	movlw	128
 12123  0050D0  6EC7               	movwf	4039,c	;volatile
 12124                           
 12125                           ;ST7735_TFT.c: 651: SSPCON1=0x30;
 12126  0050D2  0E30               	movlw	48
 12127  0050D4  6EC6               	movwf	4038,c	;volatile
 12128                           
 12129                           ;ST7735_TFT.c: 654: Rcmd1();
 12130  0050D6  EC22  F018         	call	_Rcmd1	;wreg free
 12131                           
 12132                           ;ST7735_TFT.c: 655: Rcmd2red();
 12133  0050DA  EC82  F027         	call	_Rcmd2red	;wreg free
 12134                           
 12135                           ;ST7735_TFT.c: 656: Rcmd3();
 12136  0050DE  EC36  F01C         	call	_Rcmd3	;wreg free
 12137                           
 12138                           ;ST7735_TFT.c: 657: write_command(0x36);
 12139  0050E2  0E36               	movlw	54
 12140  0050E4  EC9D  F02A         	call	_write_command
 12141                           
 12142                           ;ST7735_TFT.c: 658: write_data(0xC0);
 12143  0050E8  0EC0               	movlw	192
 12144  0050EA  EC95  F02A         	call	_write_data
 12145                           
 12146                           ;ST7735_TFT.c: 659: _tft_type = 1;
 12147  0050EE  0E01               	movlw	1
 12148  0050F0  0100               	movlb	0	; () banked
 12149  0050F2  6FA7               	movwf	__tft_type& (0+255),b
 12150                           
 12151                           ; BSR set to: 0
 12152  0050F4  0012               	return		;funcret
 12153  0050F6                     __end_of_TFT_GreenTab_Initialize:
 12154                           	opt stack 0
 12155                           tblptru	equ	0xFF8
 12156                           tblptrh	equ	0xFF7
 12157                           tblptrl	equ	0xFF6
 12158                           tablat	equ	0xFF5
 12159                           prodh	equ	0xFF4
 12160                           prodl	equ	0xFF3
 12161                           intcon	equ	0xFF2
 12162                           intcon2	equ	0xFF1
 12163                           postinc0	equ	0xFEE
 12164                           wreg	equ	0xFE8
 12165                           postdec1	equ	0xFE5
 12166                           fsr1l	equ	0xFE1
 12167                           indf2	equ	0xFDF
 12168                           postinc2	equ	0xFDE
 12169                           fsr2h	equ	0xFDA
 12170                           fsr2l	equ	0xFD9
 12171                           status	equ	0xFD8
 12172                           
 12173 ;; *************** function _Rcmd3 *****************
 12174 ;; Defined at:
 12175 ;;		line 339 in file "ST7735_TFT.c"
 12176 ;; Parameters:    Size  Location     Type
 12177 ;;		None
 12178 ;; Auto vars:     Size  Location     Type
 12179 ;;		None
 12180 ;; Return value:  Size  Location     Type
 12181 ;;		None               void
 12182 ;; Registers used:
 12183 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 12184 ;; Tracked objects:
 12185 ;;		On entry : 0/0
 12186 ;;		On exit  : 0/0
 12187 ;;		Unchanged: 0/0
 12188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12192 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12193 ;;Total ram usage:        0 bytes
 12194 ;; Hardware stack levels used:    1
 12195 ;; Hardware stack levels required when called:    5
 12196 ;; This function calls:
 12197 ;;		_delay_ms
 12198 ;;		_write_command
 12199 ;;		_write_data
 12200 ;; This function is called by:
 12201 ;;		_TFT_GreenTab_Initialize
 12202 ;;		_TFT_BlackTab_Initialize
 12203 ;; This function uses a non-reentrant model
 12204 ;;
 12205                           
 12206                           	psect	text55
 12207  00386C                     __ptext55:
 12208                           	opt stack 0
 12209  00386C                     _Rcmd3:
 12210                           	opt stack 21
 12211                           
 12212                           ;ST7735_TFT.c: 341: write_command(0xE0);
 12213                           
 12214                           ; BSR set to: 0
 12215                           ;incstack = 0
 12216  00386C  0EE0               	movlw	224
 12217  00386E  EC9D  F02A         	call	_write_command
 12218                           
 12219                           ;ST7735_TFT.c: 342: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
 12220  003872  0E02               	movlw	2
 12221  003874  EC95  F02A         	call	_write_data
 12222  003878  0E1C               	movlw	28
 12223  00387A  EC95  F02A         	call	_write_data
 12224  00387E  0E07               	movlw	7
 12225  003880  EC95  F02A         	call	_write_data
 12226  003884  0E12               	movlw	18
 12227  003886  EC95  F02A         	call	_write_data
 12228                           
 12229                           ;ST7735_TFT.c: 343: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
 12230  00388A  0E37               	movlw	55
 12231  00388C  EC95  F02A         	call	_write_data
 12232  003890  0E32               	movlw	50
 12233  003892  EC95  F02A         	call	_write_data
 12234  003896  0E29               	movlw	41
 12235  003898  EC95  F02A         	call	_write_data
 12236  00389C  0E2D               	movlw	45
 12237  00389E  EC95  F02A         	call	_write_data
 12238                           
 12239                           ;ST7735_TFT.c: 344: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
 12240  0038A2  0E29               	movlw	41
 12241  0038A4  EC95  F02A         	call	_write_data
 12242  0038A8  0E25               	movlw	37
 12243  0038AA  EC95  F02A         	call	_write_data
 12244  0038AE  0E2B               	movlw	43
 12245  0038B0  EC95  F02A         	call	_write_data
 12246  0038B4  0E39               	movlw	57
 12247  0038B6  EC95  F02A         	call	_write_data
 12248                           
 12249                           ;ST7735_TFT.c: 345: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
 12250  0038BA  0E00               	movlw	0
 12251  0038BC  EC95  F02A         	call	_write_data
 12252  0038C0  0E01               	movlw	1
 12253  0038C2  EC95  F02A         	call	_write_data
 12254  0038C6  0E03               	movlw	3
 12255  0038C8  EC95  F02A         	call	_write_data
 12256  0038CC  0E10               	movlw	16
 12257  0038CE  EC95  F02A         	call	_write_data
 12258                           
 12259                           ;ST7735_TFT.c: 346: write_command(0xE1);
 12260  0038D2  0EE1               	movlw	225
 12261  0038D4  EC9D  F02A         	call	_write_command
 12262                           
 12263                           ;ST7735_TFT.c: 347: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
 12264  0038D8  0E03               	movlw	3
 12265  0038DA  EC95  F02A         	call	_write_data
 12266  0038DE  0E1D               	movlw	29
 12267  0038E0  EC95  F02A         	call	_write_data
 12268  0038E4  0E07               	movlw	7
 12269  0038E6  EC95  F02A         	call	_write_data
 12270  0038EA  0E06               	movlw	6
 12271  0038EC  EC95  F02A         	call	_write_data
 12272                           
 12273                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
 12274  0038F0  0E2E               	movlw	46
 12275  0038F2  EC95  F02A         	call	_write_data
 12276  0038F6  0E2C               	movlw	44
 12277  0038F8  EC95  F02A         	call	_write_data
 12278  0038FC  0E29               	movlw	41
 12279  0038FE  EC95  F02A         	call	_write_data
 12280  003902  0E2D               	movlw	45
 12281  003904  EC95  F02A         	call	_write_data
 12282                           
 12283                           ;ST7735_TFT.c: 349: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
 12284  003908  0E2E               	movlw	46
 12285  00390A  EC95  F02A         	call	_write_data
 12286  00390E  0E2E               	movlw	46
 12287  003910  EC95  F02A         	call	_write_data
 12288  003914  0E37               	movlw	55
 12289  003916  EC95  F02A         	call	_write_data
 12290  00391A  0E3F               	movlw	63
 12291  00391C  EC95  F02A         	call	_write_data
 12292                           
 12293                           ;ST7735_TFT.c: 350: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
 12294  003920  0E00               	movlw	0
 12295  003922  EC95  F02A         	call	_write_data
 12296  003926  0E00               	movlw	0
 12297  003928  EC95  F02A         	call	_write_data
 12298  00392C  0E02               	movlw	2
 12299  00392E  EC95  F02A         	call	_write_data
 12300  003932  0E10               	movlw	16
 12301  003934  EC95  F02A         	call	_write_data
 12302                           
 12303                           ;ST7735_TFT.c: 351: write_command(0x13);
 12304  003938  0E13               	movlw	19
 12305  00393A  EC9D  F02A         	call	_write_command
 12306                           
 12307                           ;ST7735_TFT.c: 352: delay_ms(10);
 12308  00393E  0E00               	movlw	0
 12309  003940  6E18               	movwf	delay_ms@ms+1,c
 12310  003942  0E0A               	movlw	10
 12311  003944  6E17               	movwf	delay_ms@ms,c
 12312  003946  EC84  F026         	call	_delay_ms	;wreg free
 12313                           
 12314                           ;ST7735_TFT.c: 353: write_command(0x29);
 12315  00394A  0E29               	movlw	41
 12316  00394C  EC9D  F02A         	call	_write_command
 12317                           
 12318                           ;ST7735_TFT.c: 354: delay_ms(100);
 12319  003950  0E00               	movlw	0
 12320  003952  6E18               	movwf	delay_ms@ms+1,c
 12321  003954  0E64               	movlw	100
 12322  003956  6E17               	movwf	delay_ms@ms,c
 12323  003958  EC84  F026         	call	_delay_ms	;wreg free
 12324  00395C  0012               	return		;funcret
 12325  00395E                     __end_of_Rcmd3:
 12326                           	opt stack 0
 12327                           tblptru	equ	0xFF8
 12328                           tblptrh	equ	0xFF7
 12329                           tblptrl	equ	0xFF6
 12330                           tablat	equ	0xFF5
 12331                           prodh	equ	0xFF4
 12332                           prodl	equ	0xFF3
 12333                           intcon	equ	0xFF2
 12334                           intcon2	equ	0xFF1
 12335                           postinc0	equ	0xFEE
 12336                           wreg	equ	0xFE8
 12337                           postdec1	equ	0xFE5
 12338                           fsr1l	equ	0xFE1
 12339                           indf2	equ	0xFDF
 12340                           postinc2	equ	0xFDE
 12341                           fsr2h	equ	0xFDA
 12342                           fsr2l	equ	0xFD9
 12343                           status	equ	0xFD8
 12344                           
 12345 ;; *************** function _Rcmd2red *****************
 12346 ;; Defined at:
 12347 ;;		line 329 in file "ST7735_TFT.c"
 12348 ;; Parameters:    Size  Location     Type
 12349 ;;		None
 12350 ;; Auto vars:     Size  Location     Type
 12351 ;;		None
 12352 ;; Return value:  Size  Location     Type
 12353 ;;		None               void
 12354 ;; Registers used:
 12355 ;;		wreg, status,2, cstack
 12356 ;; Tracked objects:
 12357 ;;		On entry : 0/0
 12358 ;;		On exit  : 0/0
 12359 ;;		Unchanged: 0/0
 12360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12364 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12365 ;;Total ram usage:        0 bytes
 12366 ;; Hardware stack levels used:    1
 12367 ;; Hardware stack levels required when called:    5
 12368 ;; This function calls:
 12369 ;;		_write_command
 12370 ;;		_write_data
 12371 ;; This function is called by:
 12372 ;;		_TFT_GreenTab_Initialize
 12373 ;; This function uses a non-reentrant model
 12374 ;;
 12375                           
 12376                           	psect	text56
 12377  004F04                     __ptext56:
 12378                           	opt stack 0
 12379  004F04                     _Rcmd2red:
 12380                           	opt stack 21
 12381                           
 12382                           ;ST7735_TFT.c: 331: write_command(0x2A);
 12383                           
 12384                           ;incstack = 0
 12385  004F04  0E2A               	movlw	42
 12386  004F06  EC9D  F02A         	call	_write_command
 12387                           
 12388                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x00);
 12389  004F0A  0E00               	movlw	0
 12390  004F0C  EC95  F02A         	call	_write_data
 12391  004F10  0E00               	movlw	0
 12392  004F12  EC95  F02A         	call	_write_data
 12393                           
 12394                           ;ST7735_TFT.c: 333: write_data(0x00); write_data(0x7F);
 12395  004F16  0E00               	movlw	0
 12396  004F18  EC95  F02A         	call	_write_data
 12397  004F1C  0E7F               	movlw	127
 12398  004F1E  EC95  F02A         	call	_write_data
 12399                           
 12400                           ;ST7735_TFT.c: 334: write_command(0x2B);
 12401  004F22  0E2B               	movlw	43
 12402  004F24  EC9D  F02A         	call	_write_command
 12403                           
 12404                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x00);
 12405  004F28  0E00               	movlw	0
 12406  004F2A  EC95  F02A         	call	_write_data
 12407  004F2E  0E00               	movlw	0
 12408  004F30  EC95  F02A         	call	_write_data
 12409                           
 12410                           ;ST7735_TFT.c: 336: write_data(0x00); write_data(0x9F);
 12411  004F34  0E00               	movlw	0
 12412  004F36  EC95  F02A         	call	_write_data
 12413  004F3A  0E9F               	movlw	159
 12414  004F3C  EC95  F02A         	call	_write_data
 12415  004F40  0012               	return		;funcret
 12416  004F42                     __end_of_Rcmd2red:
 12417                           	opt stack 0
 12418                           tblptru	equ	0xFF8
 12419                           tblptrh	equ	0xFF7
 12420                           tblptrl	equ	0xFF6
 12421                           tablat	equ	0xFF5
 12422                           prodh	equ	0xFF4
 12423                           prodl	equ	0xFF3
 12424                           intcon	equ	0xFF2
 12425                           intcon2	equ	0xFF1
 12426                           postinc0	equ	0xFEE
 12427                           wreg	equ	0xFE8
 12428                           postdec1	equ	0xFE5
 12429                           fsr1l	equ	0xFE1
 12430                           indf2	equ	0xFDF
 12431                           postinc2	equ	0xFDE
 12432                           fsr2h	equ	0xFDA
 12433                           fsr2l	equ	0xFD9
 12434                           status	equ	0xFD8
 12435                           
 12436 ;; *************** function _Rcmd1 *****************
 12437 ;; Defined at:
 12438 ;;		line 282 in file "ST7735_TFT.c"
 12439 ;; Parameters:    Size  Location     Type
 12440 ;;		None
 12441 ;; Auto vars:     Size  Location     Type
 12442 ;;		None
 12443 ;; Return value:  Size  Location     Type
 12444 ;;		None               void
 12445 ;; Registers used:
 12446 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 12447 ;; Tracked objects:
 12448 ;;		On entry : 0/0
 12449 ;;		On exit  : 0/0
 12450 ;;		Unchanged: 0/0
 12451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12455 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12456 ;;Total ram usage:        0 bytes
 12457 ;; Hardware stack levels used:    1
 12458 ;; Hardware stack levels required when called:    5
 12459 ;; This function calls:
 12460 ;;		_delay_ms
 12461 ;;		_write_command
 12462 ;;		_write_data
 12463 ;; This function is called by:
 12464 ;;		_TFT_GreenTab_Initialize
 12465 ;;		_TFT_BlackTab_Initialize
 12466 ;; This function uses a non-reentrant model
 12467 ;;
 12468                           
 12469                           	psect	text57
 12470  003044                     __ptext57:
 12471                           	opt stack 0
 12472  003044                     _Rcmd1:
 12473                           	opt stack 21
 12474                           
 12475                           ;ST7735_TFT.c: 284: write_command(0x01);
 12476                           
 12477                           ;incstack = 0
 12478  003044  0E01               	movlw	1
 12479  003046  EC9D  F02A         	call	_write_command
 12480                           
 12481                           ;ST7735_TFT.c: 285: delay_ms(150);
 12482  00304A  0E00               	movlw	0
 12483  00304C  6E18               	movwf	delay_ms@ms+1,c
 12484  00304E  0E96               	movlw	150
 12485  003050  6E17               	movwf	delay_ms@ms,c
 12486  003052  EC84  F026         	call	_delay_ms	;wreg free
 12487                           
 12488                           ;ST7735_TFT.c: 286: write_command(0x11);
 12489  003056  0E11               	movlw	17
 12490  003058  EC9D  F02A         	call	_write_command
 12491                           
 12492                           ;ST7735_TFT.c: 287: delay_ms(500);
 12493  00305C  0E01               	movlw	1
 12494  00305E  6E18               	movwf	delay_ms@ms+1,c
 12495  003060  0EF4               	movlw	244
 12496  003062  6E17               	movwf	delay_ms@ms,c
 12497  003064  EC84  F026         	call	_delay_ms	;wreg free
 12498                           
 12499                           ;ST7735_TFT.c: 288: write_command(0xB1);
 12500  003068  0EB1               	movlw	177
 12501  00306A  EC9D  F02A         	call	_write_command
 12502                           
 12503                           ;ST7735_TFT.c: 289: write_data(0x01);
 12504  00306E  0E01               	movlw	1
 12505  003070  EC95  F02A         	call	_write_data
 12506                           
 12507                           ;ST7735_TFT.c: 290: write_data(0x2C);
 12508  003074  0E2C               	movlw	44
 12509  003076  EC95  F02A         	call	_write_data
 12510                           
 12511                           ;ST7735_TFT.c: 291: write_data(0x2D);
 12512  00307A  0E2D               	movlw	45
 12513  00307C  EC95  F02A         	call	_write_data
 12514                           
 12515                           ;ST7735_TFT.c: 292: write_command(0xB2);
 12516  003080  0EB2               	movlw	178
 12517  003082  EC9D  F02A         	call	_write_command
 12518                           
 12519                           ;ST7735_TFT.c: 293: write_data(0x01);
 12520  003086  0E01               	movlw	1
 12521  003088  EC95  F02A         	call	_write_data
 12522                           
 12523                           ;ST7735_TFT.c: 294: write_data(0x2C);
 12524  00308C  0E2C               	movlw	44
 12525  00308E  EC95  F02A         	call	_write_data
 12526                           
 12527                           ;ST7735_TFT.c: 295: write_data(0x2D);
 12528  003092  0E2D               	movlw	45
 12529  003094  EC95  F02A         	call	_write_data
 12530                           
 12531                           ;ST7735_TFT.c: 296: write_command(0xB3);
 12532  003098  0EB3               	movlw	179
 12533  00309A  EC9D  F02A         	call	_write_command
 12534                           
 12535                           ;ST7735_TFT.c: 297: write_data(0x01);
 12536  00309E  0E01               	movlw	1
 12537  0030A0  EC95  F02A         	call	_write_data
 12538                           
 12539                           ;ST7735_TFT.c: 298: write_data(0x2C);
 12540  0030A4  0E2C               	movlw	44
 12541  0030A6  EC95  F02A         	call	_write_data
 12542                           
 12543                           ;ST7735_TFT.c: 299: write_data(0x2D);
 12544  0030AA  0E2D               	movlw	45
 12545  0030AC  EC95  F02A         	call	_write_data
 12546                           
 12547                           ;ST7735_TFT.c: 300: write_data(0x01);
 12548  0030B0  0E01               	movlw	1
 12549  0030B2  EC95  F02A         	call	_write_data
 12550                           
 12551                           ;ST7735_TFT.c: 301: write_data(0x2C);
 12552  0030B6  0E2C               	movlw	44
 12553  0030B8  EC95  F02A         	call	_write_data
 12554                           
 12555                           ;ST7735_TFT.c: 302: write_data(0x2D);
 12556  0030BC  0E2D               	movlw	45
 12557  0030BE  EC95  F02A         	call	_write_data
 12558                           
 12559                           ;ST7735_TFT.c: 303: write_command(0xB4);
 12560  0030C2  0EB4               	movlw	180
 12561  0030C4  EC9D  F02A         	call	_write_command
 12562                           
 12563                           ;ST7735_TFT.c: 304: write_data(0x07);
 12564  0030C8  0E07               	movlw	7
 12565  0030CA  EC95  F02A         	call	_write_data
 12566                           
 12567                           ;ST7735_TFT.c: 305: write_command(0xC0);
 12568  0030CE  0EC0               	movlw	192
 12569  0030D0  EC9D  F02A         	call	_write_command
 12570                           
 12571                           ;ST7735_TFT.c: 306: write_data(0xA2);
 12572  0030D4  0EA2               	movlw	162
 12573  0030D6  EC95  F02A         	call	_write_data
 12574                           
 12575                           ;ST7735_TFT.c: 307: write_data(0x02);
 12576  0030DA  0E02               	movlw	2
 12577  0030DC  EC95  F02A         	call	_write_data
 12578                           
 12579                           ;ST7735_TFT.c: 308: write_data(0x84);
 12580  0030E0  0E84               	movlw	132
 12581  0030E2  EC95  F02A         	call	_write_data
 12582                           
 12583                           ;ST7735_TFT.c: 309: write_command(0xC1);
 12584  0030E6  0EC1               	movlw	193
 12585  0030E8  EC9D  F02A         	call	_write_command
 12586                           
 12587                           ;ST7735_TFT.c: 310: write_data(0xC5);
 12588  0030EC  0EC5               	movlw	197
 12589  0030EE  EC95  F02A         	call	_write_data
 12590                           
 12591                           ;ST7735_TFT.c: 311: write_command(0xC2);
 12592  0030F2  0EC2               	movlw	194
 12593  0030F4  EC9D  F02A         	call	_write_command
 12594                           
 12595                           ;ST7735_TFT.c: 312: write_data(0x0A);
 12596  0030F8  0E0A               	movlw	10
 12597  0030FA  EC95  F02A         	call	_write_data
 12598                           
 12599                           ;ST7735_TFT.c: 313: write_data(0x00);
 12600  0030FE  0E00               	movlw	0
 12601  003100  EC95  F02A         	call	_write_data
 12602                           
 12603                           ;ST7735_TFT.c: 314: write_command(0xC3);
 12604  003104  0EC3               	movlw	195
 12605  003106  EC9D  F02A         	call	_write_command
 12606                           
 12607                           ;ST7735_TFT.c: 315: write_data(0x8A);
 12608  00310A  0E8A               	movlw	138
 12609  00310C  EC95  F02A         	call	_write_data
 12610                           
 12611                           ;ST7735_TFT.c: 316: write_data(0x2A);
 12612  003110  0E2A               	movlw	42
 12613  003112  EC95  F02A         	call	_write_data
 12614                           
 12615                           ;ST7735_TFT.c: 317: write_command(0xC4);
 12616  003116  0EC4               	movlw	196
 12617  003118  EC9D  F02A         	call	_write_command
 12618                           
 12619                           ;ST7735_TFT.c: 318: write_data(0x8A);
 12620  00311C  0E8A               	movlw	138
 12621  00311E  EC95  F02A         	call	_write_data
 12622                           
 12623                           ;ST7735_TFT.c: 319: write_data(0xEE);
 12624  003122  0EEE               	movlw	238
 12625  003124  EC95  F02A         	call	_write_data
 12626                           
 12627                           ;ST7735_TFT.c: 320: write_command(0xC5);
 12628  003128  0EC5               	movlw	197
 12629  00312A  EC9D  F02A         	call	_write_command
 12630                           
 12631                           ;ST7735_TFT.c: 321: write_data(0x0E);
 12632  00312E  0E0E               	movlw	14
 12633  003130  EC95  F02A         	call	_write_data
 12634                           
 12635                           ;ST7735_TFT.c: 322: write_command(0x20);
 12636  003134  0E20               	movlw	32
 12637  003136  EC9D  F02A         	call	_write_command
 12638                           
 12639                           ;ST7735_TFT.c: 323: write_command(0x36);
 12640  00313A  0E36               	movlw	54
 12641  00313C  EC9D  F02A         	call	_write_command
 12642                           
 12643                           ;ST7735_TFT.c: 324: write_data(0xC8);
 12644  003140  0EC8               	movlw	200
 12645  003142  EC95  F02A         	call	_write_data
 12646                           
 12647                           ;ST7735_TFT.c: 325: write_command(0x3A);
 12648  003146  0E3A               	movlw	58
 12649  003148  EC9D  F02A         	call	_write_command
 12650                           
 12651                           ;ST7735_TFT.c: 326: write_data(0x05);
 12652  00314C  0E05               	movlw	5
 12653  00314E  EC95  F02A         	call	_write_data
 12654  003152  0012               	return		;funcret
 12655  003154                     __end_of_Rcmd1:
 12656                           	opt stack 0
 12657                           tblptru	equ	0xFF8
 12658                           tblptrh	equ	0xFF7
 12659                           tblptrl	equ	0xFF6
 12660                           tablat	equ	0xFF5
 12661                           prodh	equ	0xFF4
 12662                           prodl	equ	0xFF3
 12663                           intcon	equ	0xFF2
 12664                           intcon2	equ	0xFF1
 12665                           postinc0	equ	0xFEE
 12666                           wreg	equ	0xFE8
 12667                           postdec1	equ	0xFE5
 12668                           fsr1l	equ	0xFE1
 12669                           indf2	equ	0xFDF
 12670                           postinc2	equ	0xFDE
 12671                           fsr2h	equ	0xFDA
 12672                           fsr2l	equ	0xFD9
 12673                           status	equ	0xFD8
 12674                           
 12675 ;; *************** function _LCD_Reset *****************
 12676 ;; Defined at:
 12677 ;;		line 218 in file "ST7735_TFT.c"
 12678 ;; Parameters:    Size  Location     Type
 12679 ;;		None
 12680 ;; Auto vars:     Size  Location     Type
 12681 ;;		None
 12682 ;; Return value:  Size  Location     Type
 12683 ;;		None               void
 12684 ;; Registers used:
 12685 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 12686 ;; Tracked objects:
 12687 ;;		On entry : 0/0
 12688 ;;		On exit  : 0/0
 12689 ;;		Unchanged: 0/0
 12690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12694 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12695 ;;Total ram usage:        0 bytes
 12696 ;; Hardware stack levels used:    1
 12697 ;; Hardware stack levels required when called:    5
 12698 ;; This function calls:
 12699 ;;		_delay_ms
 12700 ;; This function is called by:
 12701 ;;		_Initialize_Screen
 12702 ;; This function uses a non-reentrant model
 12703 ;;
 12704                           
 12705                           	psect	text58
 12706  00548E                     __ptext58:
 12707                           	opt stack 0
 12708  00548E                     _LCD_Reset:
 12709                           	opt stack 22
 12710                           
 12711                           ;ST7735_TFT.c: 220: PORTDbits.RD6 = 0;
 12712                           
 12713                           ;incstack = 0
 12714  00548E  9C83               	bcf	3971,6,c	;volatile
 12715                           
 12716                           ;ST7735_TFT.c: 221: delay_ms(100);
 12717  005490  0E00               	movlw	0
 12718  005492  6E18               	movwf	delay_ms@ms+1,c
 12719  005494  0E64               	movlw	100
 12720  005496  6E17               	movwf	delay_ms@ms,c
 12721  005498  EC84  F026         	call	_delay_ms	;wreg free
 12722                           
 12723                           ;ST7735_TFT.c: 222: PORTDbits.RD6 = 1;
 12724  00549C  8C83               	bsf	3971,6,c	;volatile
 12725  00549E  0012               	return		;funcret
 12726  0054A0                     __end_of_LCD_Reset:
 12727                           	opt stack 0
 12728                           tblptru	equ	0xFF8
 12729                           tblptrh	equ	0xFF7
 12730                           tblptrl	equ	0xFF6
 12731                           tablat	equ	0xFF5
 12732                           prodh	equ	0xFF4
 12733                           prodl	equ	0xFF3
 12734                           intcon	equ	0xFF2
 12735                           intcon2	equ	0xFF1
 12736                           postinc0	equ	0xFEE
 12737                           wreg	equ	0xFE8
 12738                           postdec1	equ	0xFE5
 12739                           fsr1l	equ	0xFE1
 12740                           indf2	equ	0xFDF
 12741                           postinc2	equ	0xFDE
 12742                           fsr2h	equ	0xFDA
 12743                           fsr2l	equ	0xFD9
 12744                           status	equ	0xFD8
 12745                           
 12746 ;; *************** function _delay_ms *****************
 12747 ;; Defined at:
 12748 ;;		line 65 in file "ST7735_TFT.c"
 12749 ;; Parameters:    Size  Location     Type
 12750 ;;  ms              2   22[COMRAM] int 
 12751 ;; Auto vars:     Size  Location     Type
 12752 ;;  count           2   26[COMRAM] int 
 12753 ;; Return value:  Size  Location     Type
 12754 ;;		None               void
 12755 ;; Registers used:
 12756 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 12757 ;; Tracked objects:
 12758 ;;		On entry : 0/0
 12759 ;;		On exit  : 0/0
 12760 ;;		Unchanged: 0/0
 12761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12762 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12763 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12764 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12765 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12766 ;;Total ram usage:        6 bytes
 12767 ;; Hardware stack levels used:    1
 12768 ;; Hardware stack levels required when called:    4
 12769 ;; This function calls:
 12770 ;;		___wmul
 12771 ;; This function is called by:
 12772 ;;		_LCD_Reset
 12773 ;;		_Rcmd1
 12774 ;;		_Rcmd3
 12775 ;;		_Bcmd
 12776 ;; This function uses a non-reentrant model
 12777 ;;
 12778                           
 12779                           	psect	text59
 12780  004D08                     __ptext59:
 12781                           	opt stack 0
 12782  004D08                     _delay_ms:
 12783                           	opt stack 21
 12784                           
 12785                           ;ST7735_TFT.c: 71: int count;
 12786                           ;ST7735_TFT.c: 72: count = 8000000/4000/16 * ms;
 12787                           
 12788                           ;incstack = 0
 12789  004D08  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
 12790  004D0C  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
 12791  004D10  0E00               	movlw	0
 12792  004D12  6E14               	movwf	___wmul@multiplicand+1,c
 12793  004D14  0E7D               	movlw	125
 12794  004D16  6E13               	movwf	___wmul@multiplicand,c
 12795  004D18  EC90  F028         	call	___wmul	;wreg free
 12796  004D1C  C011  F01B         	movff	?___wmul,delay_ms@count
 12797  004D20  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
 12798                           
 12799                           ;ST7735_TFT.c: 73: count = (0xffff - count);
 12800  004D24  C01B  F019         	movff	delay_ms@count,??_delay_ms
 12801  004D28  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
 12802  004D2C  1E19               	comf	??_delay_ms,f,c
 12803  004D2E  1E1A               	comf	??_delay_ms+1,f,c
 12804  004D30  4A19               	infsnz	??_delay_ms,f,c
 12805  004D32  2A1A               	incf	??_delay_ms+1,f,c
 12806  004D34  0EFF               	movlw	255
 12807  004D36  2419               	addwf	??_delay_ms,w,c
 12808  004D38  6E1B               	movwf	delay_ms@count,c
 12809  004D3A  0EFF               	movlw	255
 12810  004D3C  201A               	addwfc	??_delay_ms+1,w,c
 12811  004D3E  6E1C               	movwf	delay_ms@count+1,c
 12812                           
 12813                           ;ST7735_TFT.c: 75: T0CON = 0x03;
 12814  004D40  0E03               	movlw	3
 12815  004D42  6ED5               	movwf	4053,c	;volatile
 12816                           
 12817                           ;ST7735_TFT.c: 77: TMR0L = count & 0x00ff;
 12818  004D44  C01B  FFD6         	movff	delay_ms@count,4054	;volatile
 12819                           
 12820                           ;ST7735_TFT.c: 78: TMR0H = count >> 8;
 12821  004D48  501C               	movf	delay_ms@count+1,w,c
 12822  004D4A  6ED7               	movwf	4055,c	;volatile
 12823                           
 12824                           ;ST7735_TFT.c: 80: INTCONbits.TMR0IF = 0;
 12825  004D4C  94F2               	bcf	intcon,2,c	;volatile
 12826                           
 12827                           ;ST7735_TFT.c: 81: T0CONbits.TMR0ON = 1;
 12828  004D4E  8ED5               	bsf	4053,7,c	;volatile
 12829                           
 12830                           ;ST7735_TFT.c: 83: while (INTCONbits.TMR0IF == 0);
 12831  004D50  D000               	goto	l1282
 12832  004D52                     l1282:
 12833  004D52  A4F2               	btfss	intcon,2,c	;volatile
 12834  004D54  D7FE               	goto	l1282
 12835                           
 12836                           ;ST7735_TFT.c: 84: T0CONbits.TMR0ON = 0;
 12837  004D56  9ED5               	bcf	4053,7,c	;volatile
 12838  004D58  0012               	return		;funcret
 12839  004D5A                     __end_of_delay_ms:
 12840                           	opt stack 0
 12841                           tblptru	equ	0xFF8
 12842                           tblptrh	equ	0xFF7
 12843                           tblptrl	equ	0xFF6
 12844                           tablat	equ	0xFF5
 12845                           prodh	equ	0xFF4
 12846                           prodl	equ	0xFF3
 12847                           intcon	equ	0xFF2
 12848                           intcon2	equ	0xFF1
 12849                           postinc0	equ	0xFEE
 12850                           wreg	equ	0xFE8
 12851                           postdec1	equ	0xFE5
 12852                           fsr1l	equ	0xFE1
 12853                           indf2	equ	0xFDF
 12854                           postinc2	equ	0xFDE
 12855                           fsr2h	equ	0xFDA
 12856                           fsr2l	equ	0xFD9
 12857                           status	equ	0xFD8
 12858                           
 12859 ;; *************** function _DS3231_Write_Alarm_Time *****************
 12860 ;; Defined at:
 12861 ;;		line 192 in file "I2C_Support.c"
 12862 ;; Parameters:    Size  Location     Type
 12863 ;;		None
 12864 ;; Auto vars:     Size  Location     Type
 12865 ;;  Address         1   74[COMRAM] unsigned char 
 12866 ;;  Device          1   73[COMRAM] unsigned char 
 12867 ;; Return value:  Size  Location     Type
 12868 ;;		None               void
 12869 ;; Registers used:
 12870 ;;		wreg, status,2, status,0, cstack
 12871 ;; Tracked objects:
 12872 ;;		On entry : 0/0
 12873 ;;		On exit  : 0/0
 12874 ;;		Unchanged: 0/0
 12875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12877 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12879 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12880 ;;Total ram usage:        2 bytes
 12881 ;; Hardware stack levels used:    1
 12882 ;; Hardware stack levels required when called:    7
 12883 ;; This function calls:
 12884 ;;		_DS3231_Read_Time
 12885 ;;		_I2C_Start
 12886 ;;		_I2C_Stop
 12887 ;;		_I2C_Write
 12888 ;;		_dec_2_bcd
 12889 ;; This function is called by:
 12890 ;;		_Do_Save_New_Alarm_Time
 12891 ;; This function uses a non-reentrant model
 12892 ;;
 12893                           
 12894                           	psect	text60
 12895  00473A                     __ptext60:
 12896                           	opt stack 0
 12897  00473A                     _DS3231_Write_Alarm_Time:
 12898                           	opt stack 21
 12899                           
 12900                           ;I2C_Support.c: 194: DS3231_Read_Time();
 12901                           
 12902                           ;incstack = 0
 12903  00473A  EC80  F024         	call	_DS3231_Read_Time	;wreg free
 12904                           
 12905                           ;I2C_Support.c: 195: alarm_date = day;
 12906  00473E  C068  F064         	movff	_day,_alarm_date
 12907                           
 12908                           ;I2C_Support.c: 196: char Device = 0x68;
 12909  004742  0E68               	movlw	104
 12910  004744  6E4A               	movwf	DS3231_Write_Alarm_Time@Device,c
 12911                           
 12912                           ;I2C_Support.c: 197: char Address = 0x07;
 12913  004746  0E07               	movlw	7
 12914  004748  6E4B               	movwf	DS3231_Write_Alarm_Time@Address,c
 12915                           
 12916                           ;I2C_Support.c: 198: alarm_hour = dec_2_bcd(setup_alarm_hour);
 12917  00474A  0100               	movlb	0	; () banked
 12918  00474C  51AE               	movf	_setup_alarm_hour& (0+255),w,b
 12919  00474E  ECDB  F025         	call	_dec_2_bcd
 12920  004752  5043               	movf	?_dec_2_bcd,w,c
 12921  004754  6E65               	movwf	_alarm_hour,c
 12922                           
 12923                           ;I2C_Support.c: 199: alarm_minute = dec_2_bcd(setup_alarm_minute);
 12924  004756  0100               	movlb	0	; () banked
 12925  004758  51AF               	movf	_setup_alarm_minute& (0+255),w,b
 12926  00475A  ECDB  F025         	call	_dec_2_bcd
 12927  00475E  5043               	movf	?_dec_2_bcd,w,c
 12928  004760  6E66               	movwf	_alarm_minute,c
 12929                           
 12930                           ;I2C_Support.c: 200: alarm_second = dec_2_bcd(setup_alarm_second);
 12931  004762  0100               	movlb	0	; () banked
 12932  004764  51B0               	movf	_setup_alarm_second& (0+255),w,b
 12933  004766  ECDB  F025         	call	_dec_2_bcd
 12934  00476A  5043               	movf	?_dec_2_bcd,w,c
 12935  00476C  6E67               	movwf	_alarm_second,c
 12936                           
 12937                           ;I2C_Support.c: 201: alarm_second = alarm_second & 0x7f;
 12938  00476E  5067               	movf	_alarm_second,w,c
 12939  004770  0B7F               	andlw	127
 12940  004772  6E67               	movwf	_alarm_second,c
 12941                           
 12942                           ;I2C_Support.c: 202: alarm_minute = alarm_minute & 0x7f;
 12943  004774  5066               	movf	_alarm_minute,w,c
 12944  004776  0B7F               	andlw	127
 12945  004778  6E66               	movwf	_alarm_minute,c
 12946                           
 12947                           ;I2C_Support.c: 203: alarm_hour = alarm_hour & 0x7f;
 12948  00477A  5065               	movf	_alarm_hour,w,c
 12949  00477C  0B7F               	andlw	127
 12950  00477E  6E65               	movwf	_alarm_hour,c
 12951                           
 12952                           ;I2C_Support.c: 204: alarm_date = alarm_date | 0x80;
 12953  004780  5064               	movf	_alarm_date,w,c
 12954  004782  0980               	iorlw	128
 12955  004784  6E64               	movwf	_alarm_date,c
 12956                           
 12957                           ;I2C_Support.c: 205: I2C_Start();
 12958  004786  EC6B  F02A         	call	_I2C_Start	;wreg free
 12959                           
 12960                           ;I2C_Support.c: 206: I2C_Write((Device << 1) | 0);
 12961  00478A  504A               	movf	DS3231_Write_Alarm_Time@Device,w,c
 12962  00478C  244A               	addwf	DS3231_Write_Alarm_Time@Device,w,c
 12963  00478E  ECC0  F027         	call	_I2C_Write
 12964                           
 12965                           ;I2C_Support.c: 207: I2C_Write(Address);
 12966  004792  504B               	movf	DS3231_Write_Alarm_Time@Address,w,c
 12967  004794  ECC0  F027         	call	_I2C_Write
 12968                           
 12969                           ;I2C_Support.c: 209: I2C_Write(alarm_second);
 12970  004798  5067               	movf	_alarm_second,w,c
 12971  00479A  ECC0  F027         	call	_I2C_Write
 12972                           
 12973                           ;I2C_Support.c: 210: I2C_Write(alarm_minute);
 12974  00479E  5066               	movf	_alarm_minute,w,c
 12975  0047A0  ECC0  F027         	call	_I2C_Write
 12976                           
 12977                           ;I2C_Support.c: 211: I2C_Write(alarm_hour);
 12978  0047A4  5065               	movf	_alarm_hour,w,c
 12979  0047A6  ECC0  F027         	call	_I2C_Write
 12980                           
 12981                           ;I2C_Support.c: 212: I2C_Write(alarm_date);
 12982  0047AA  5064               	movf	_alarm_date,w,c
 12983  0047AC  ECC0  F027         	call	_I2C_Write
 12984                           
 12985                           ;I2C_Support.c: 213: I2C_Stop();
 12986  0047B0  EC62  F02A         	call	_I2C_Stop	;wreg free
 12987  0047B4  0012               	return		;funcret
 12988  0047B6                     __end_of_DS3231_Write_Alarm_Time:
 12989                           	opt stack 0
 12990                           tblptru	equ	0xFF8
 12991                           tblptrh	equ	0xFF7
 12992                           tblptrl	equ	0xFF6
 12993                           tablat	equ	0xFF5
 12994                           prodh	equ	0xFF4
 12995                           prodl	equ	0xFF3
 12996                           intcon	equ	0xFF2
 12997                           intcon2	equ	0xFF1
 12998                           postinc0	equ	0xFEE
 12999                           wreg	equ	0xFE8
 13000                           postdec1	equ	0xFE5
 13001                           fsr1l	equ	0xFE1
 13002                           indf2	equ	0xFDF
 13003                           postinc2	equ	0xFDE
 13004                           fsr2h	equ	0xFDA
 13005                           fsr2l	equ	0xFD9
 13006                           status	equ	0xFD8
 13007                           
 13008 ;; *************** function _dec_2_bcd *****************
 13009 ;; Defined at:
 13010 ;;		line 22 in file "utils.c"
 13011 ;; Parameters:    Size  Location     Type
 13012 ;;  dec             1    wreg     unsigned char 
 13013 ;; Auto vars:     Size  Location     Type
 13014 ;;  dec             1   72[COMRAM] unsigned char 
 13015 ;;  bcd             2   70[COMRAM] int 
 13016 ;; Return value:  Size  Location     Type
 13017 ;;                  2   66[COMRAM] int 
 13018 ;; Registers used:
 13019 ;;		wreg, status,2, status,0, cstack
 13020 ;; Tracked objects:
 13021 ;;		On entry : 0/0
 13022 ;;		On exit  : 0/0
 13023 ;;		Unchanged: 0/0
 13024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13025 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13026 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13027 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13028 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13029 ;;Total ram usage:        7 bytes
 13030 ;; Hardware stack levels used:    1
 13031 ;; Hardware stack levels required when called:    4
 13032 ;; This function calls:
 13033 ;;		___awdiv
 13034 ;;		___awmod
 13035 ;; This function is called by:
 13036 ;;		_DS3231_Write_Time
 13037 ;;		_DS3231_Write_Alarm_Time
 13038 ;;		_DS3231_Write_Initial_Alarm_Time
 13039 ;; This function uses a non-reentrant model
 13040 ;;
 13041                           
 13042                           	psect	text61
 13043  004BB6                     __ptext61:
 13044                           	opt stack 0
 13045  004BB6                     _dec_2_bcd:
 13046                           	opt stack 23
 13047                           
 13048                           ;incstack = 0
 13049                           ;dec_2_bcd@dec stored from wreg
 13050  004BB6  6E49               	movwf	dec_2_bcd@dec,c
 13051                           
 13052                           ;utils.c: 24: int bcd;
 13053                           ;utils.c: 25: bcd = ((dec / 10) << 4) + (dec % 10);
 13054  004BB8  C049  F017         	movff	dec_2_bcd@dec,___awdiv@dividend
 13055  004BBC  6A18               	clrf	___awdiv@dividend+1,c
 13056  004BBE  0E00               	movlw	0
 13057  004BC0  6E1A               	movwf	___awdiv@divisor+1,c
 13058  004BC2  0E0A               	movlw	10
 13059  004BC4  6E19               	movwf	___awdiv@divisor,c
 13060  004BC6  ECB6  F021         	call	___awdiv	;wreg free
 13061  004BCA  C017  F045         	movff	?___awdiv,??_dec_2_bcd
 13062  004BCE  C018  F046         	movff	?___awdiv+1,??_dec_2_bcd+1
 13063  004BD2  3A45               	swapf	??_dec_2_bcd,f,c
 13064  004BD4  3A46               	swapf	??_dec_2_bcd+1,f,c
 13065  004BD6  0EF0               	movlw	240
 13066  004BD8  1646               	andwf	??_dec_2_bcd+1,f,c
 13067  004BDA  5045               	movf	??_dec_2_bcd,w,c
 13068  004BDC  0B0F               	andlw	15
 13069  004BDE  1246               	iorwf	??_dec_2_bcd+1,f,c
 13070  004BE0  0EF0               	movlw	240
 13071  004BE2  1645               	andwf	??_dec_2_bcd,f,c
 13072  004BE4  C049  F03D         	movff	dec_2_bcd@dec,___awmod@dividend
 13073  004BE8  6A3E               	clrf	___awmod@dividend+1,c
 13074  004BEA  0E00               	movlw	0
 13075  004BEC  6E40               	movwf	___awmod@divisor+1,c
 13076  004BEE  0E0A               	movlw	10
 13077  004BF0  6E3F               	movwf	___awmod@divisor,c
 13078  004BF2  EC1E  F023         	call	___awmod	;wreg free
 13079  004BF6  503D               	movf	?___awmod,w,c
 13080  004BF8  2445               	addwf	??_dec_2_bcd,w,c
 13081  004BFA  6E47               	movwf	dec_2_bcd@bcd,c
 13082  004BFC  503E               	movf	?___awmod+1,w,c
 13083  004BFE  2046               	addwfc	??_dec_2_bcd+1,w,c
 13084  004C00  6E48               	movwf	dec_2_bcd@bcd+1,c
 13085                           
 13086                           ;utils.c: 26: return bcd;
 13087  004C02  C047  F043         	movff	dec_2_bcd@bcd,?_dec_2_bcd
 13088  004C06  C048  F044         	movff	dec_2_bcd@bcd+1,?_dec_2_bcd+1
 13089  004C0A  D000               	goto	l956
 13090  004C0C                     l956:
 13091  004C0C  0012               	return		;funcret
 13092  004C0E                     __end_of_dec_2_bcd:
 13093                           	opt stack 0
 13094                           tblptru	equ	0xFF8
 13095                           tblptrh	equ	0xFF7
 13096                           tblptrl	equ	0xFF6
 13097                           tablat	equ	0xFF5
 13098                           prodh	equ	0xFF4
 13099                           prodl	equ	0xFF3
 13100                           intcon	equ	0xFF2
 13101                           intcon2	equ	0xFF1
 13102                           postinc0	equ	0xFEE
 13103                           wreg	equ	0xFE8
 13104                           postdec1	equ	0xFE5
 13105                           fsr1l	equ	0xFE1
 13106                           indf2	equ	0xFDF
 13107                           postinc2	equ	0xFDE
 13108                           fsr2h	equ	0xFDA
 13109                           fsr2l	equ	0xFD9
 13110                           status	equ	0xFD8
 13111                           
 13112 ;; *************** function _DS3231_Read_Time *****************
 13113 ;; Defined at:
 13114 ;;		line 44 in file "I2C_Support.c"
 13115 ;; Parameters:    Size  Location     Type
 13116 ;;		None
 13117 ;; Auto vars:     Size  Location     Type
 13118 ;;  Device          1   20[COMRAM] unsigned char 
 13119 ;;  Address         1   19[COMRAM] unsigned char 
 13120 ;; Return value:  Size  Location     Type
 13121 ;;		None               void
 13122 ;; Registers used:
 13123 ;;		wreg, status,2, status,0, cstack
 13124 ;; Tracked objects:
 13125 ;;		On entry : 0/0
 13126 ;;		On exit  : 0/0
 13127 ;;		Unchanged: 0/0
 13128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13130 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13132 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13133 ;;Total ram usage:        2 bytes
 13134 ;; Hardware stack levels used:    1
 13135 ;; Hardware stack levels required when called:    6
 13136 ;; This function calls:
 13137 ;;		_I2C_ReStart
 13138 ;;		_I2C_Read
 13139 ;;		_I2C_Start
 13140 ;;		_I2C_Stop
 13141 ;;		_I2C_Write
 13142 ;; This function is called by:
 13143 ;;		_DS3231_Write_Alarm_Time
 13144 ;;		_main
 13145 ;;		_Exit_Setup_Alarm_Time
 13146 ;;		_Do_Save_New_Alarm_Time
 13147 ;;		_Exit_Setup_Fan_Temp
 13148 ;;		_Do_Save_New_Fan_Temp
 13149 ;;		_Do_Setup_Time
 13150 ;;		_Do_Save_New_Time
 13151 ;;		_Exit_Time_Setup
 13152 ;;		_DS3231_Write_Initial_Alarm_Time
 13153 ;;		_Set_Alarm
 13154 ;; This function uses a non-reentrant model
 13155 ;;
 13156                           
 13157                           	psect	text62
 13158  004900                     __ptext62:
 13159                           	opt stack 0
 13160  004900                     _DS3231_Read_Time:
 13161                           	opt stack 22
 13162                           
 13163                           ;I2C_Support.c: 46: char Device = 0x68;
 13164                           
 13165                           ;incstack = 0
 13166  004900  0E68               	movlw	104
 13167  004902  6E15               	movwf	DS3231_Read_Time@Device,c
 13168                           
 13169                           ;I2C_Support.c: 47: char Address = 0x00;
 13170  004904  0E00               	movlw	0
 13171  004906  6E14               	movwf	DS3231_Read_Time@Address,c
 13172                           
 13173                           ;I2C_Support.c: 49: I2C_Start();
 13174  004908  EC6B  F02A         	call	_I2C_Start	;wreg free
 13175                           
 13176                           ;I2C_Support.c: 50: I2C_Write((Device << 1) | 0);
 13177  00490C  5015               	movf	DS3231_Read_Time@Device,w,c
 13178  00490E  2415               	addwf	DS3231_Read_Time@Device,w,c
 13179  004910  ECC0  F027         	call	_I2C_Write
 13180                           
 13181                           ;I2C_Support.c: 51: I2C_Write(Address);
 13182  004914  5014               	movf	DS3231_Read_Time@Address,w,c
 13183  004916  ECC0  F027         	call	_I2C_Write
 13184                           
 13185                           ;I2C_Support.c: 52: I2C_ReStart();
 13186  00491A  EC0B  F02A         	call	_I2C_ReStart	;wreg free
 13187                           
 13188                           ;I2C_Support.c: 53: I2C_Write((Device << 1) | 1);
 13189  00491E  80D8               	bsf	status,0,c
 13190  004920  3415               	rlcf	DS3231_Read_Time@Device,w,c
 13191  004922  ECC0  F027         	call	_I2C_Write
 13192                           
 13193                           ;I2C_Support.c: 54: second = I2C_Read(1);
 13194  004926  0E01               	movlw	1
 13195  004928  EC1D  F027         	call	_I2C_Read
 13196  00492C  6E6C               	movwf	_second,c
 13197                           
 13198                           ;I2C_Support.c: 55: minute = I2C_Read(1);
 13199  00492E  0E01               	movlw	1
 13200  004930  EC1D  F027         	call	_I2C_Read
 13201  004934  6E6A               	movwf	_minute,c
 13202                           
 13203                           ;I2C_Support.c: 56: hour = I2C_Read(1);
 13204  004936  0E01               	movlw	1
 13205  004938  EC1D  F027         	call	_I2C_Read
 13206  00493C  6E69               	movwf	_hour,c
 13207                           
 13208                           ;I2C_Support.c: 57: dow = I2C_Read(1);
 13209  00493E  0E01               	movlw	1
 13210  004940  EC1D  F027         	call	_I2C_Read
 13211  004944  0100               	movlb	0	; () banked
 13212  004946  6FAA               	movwf	_dow& (0+255),b
 13213                           
 13214                           ; BSR set to: 0
 13215                           ;I2C_Support.c: 58: day = I2C_Read(1);
 13216  004948  0E01               	movlw	1
 13217  00494A  EC1D  F027         	call	_I2C_Read
 13218  00494E  6E68               	movwf	_day,c
 13219                           
 13220                           ;I2C_Support.c: 59: month = I2C_Read(1);
 13221  004950  0E01               	movlw	1
 13222  004952  EC1D  F027         	call	_I2C_Read
 13223  004956  6E6B               	movwf	_month,c
 13224                           
 13225                           ;I2C_Support.c: 60: year = I2C_Read(0);
 13226  004958  0E00               	movlw	0
 13227  00495A  EC1D  F027         	call	_I2C_Read
 13228  00495E  6E6F               	movwf	_year,c
 13229                           
 13230                           ;I2C_Support.c: 61: I2C_Stop();
 13231  004960  EC62  F02A         	call	_I2C_Stop	;wreg free
 13232  004964  0012               	return		;funcret
 13233  004966                     __end_of_DS3231_Read_Time:
 13234                           	opt stack 0
 13235                           tblptru	equ	0xFF8
 13236                           tblptrh	equ	0xFF7
 13237                           tblptrl	equ	0xFF6
 13238                           tablat	equ	0xFF5
 13239                           prodh	equ	0xFF4
 13240                           prodl	equ	0xFF3
 13241                           intcon	equ	0xFF2
 13242                           intcon2	equ	0xFF1
 13243                           postinc0	equ	0xFEE
 13244                           wreg	equ	0xFE8
 13245                           postdec1	equ	0xFE5
 13246                           fsr1l	equ	0xFE1
 13247                           indf2	equ	0xFDF
 13248                           postinc2	equ	0xFDE
 13249                           fsr2h	equ	0xFDA
 13250                           fsr2l	equ	0xFD9
 13251                           status	equ	0xFD8
 13252                           
 13253 ;; *************** function _DS3231_Read_Alarm_Time *****************
 13254 ;; Defined at:
 13255 ;;		line 138 in file "I2C_Support.c"
 13256 ;; Parameters:    Size  Location     Type
 13257 ;;		None
 13258 ;; Auto vars:     Size  Location     Type
 13259 ;;  Device          1   20[COMRAM] unsigned char 
 13260 ;;  Address         1   19[COMRAM] unsigned char 
 13261 ;; Return value:  Size  Location     Type
 13262 ;;		None               void
 13263 ;; Registers used:
 13264 ;;		wreg, status,2, status,0, cstack
 13265 ;; Tracked objects:
 13266 ;;		On entry : 0/0
 13267 ;;		On exit  : 0/0
 13268 ;;		Unchanged: 0/0
 13269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13271 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13273 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13274 ;;Total ram usage:        2 bytes
 13275 ;; Hardware stack levels used:    1
 13276 ;; Hardware stack levels required when called:    6
 13277 ;; This function calls:
 13278 ;;		_I2C_ReStart
 13279 ;;		_I2C_Read
 13280 ;;		_I2C_Start
 13281 ;;		_I2C_Stop
 13282 ;;		_I2C_Write
 13283 ;; This function is called by:
 13284 ;;		_main
 13285 ;;		_Do_Setup_Alarm_Time
 13286 ;;		_Do_Save_New_Alarm_Time
 13287 ;; This function uses a non-reentrant model
 13288 ;;
 13289                           
 13290                           	psect	text63
 13291  004D5A                     __ptext63:
 13292                           	opt stack 0
 13293  004D5A                     _DS3231_Read_Alarm_Time:
 13294                           	opt stack 22
 13295                           
 13296                           ;I2C_Support.c: 140: char Device = 0x68;
 13297                           
 13298                           ;incstack = 0
 13299  004D5A  0E68               	movlw	104
 13300  004D5C  6E15               	movwf	DS3231_Read_Alarm_Time@Device,c
 13301                           
 13302                           ;I2C_Support.c: 141: char Address = 0x07;
 13303  004D5E  0E07               	movlw	7
 13304  004D60  6E14               	movwf	DS3231_Read_Alarm_Time@Address,c
 13305                           
 13306                           ;I2C_Support.c: 142: I2C_Start();
 13307  004D62  EC6B  F02A         	call	_I2C_Start	;wreg free
 13308                           
 13309                           ;I2C_Support.c: 143: I2C_Write((Device << 1) | 0);
 13310  004D66  5015               	movf	DS3231_Read_Alarm_Time@Device,w,c
 13311  004D68  2415               	addwf	DS3231_Read_Alarm_Time@Device,w,c
 13312  004D6A  ECC0  F027         	call	_I2C_Write
 13313                           
 13314                           ;I2C_Support.c: 144: I2C_Write(Address);
 13315  004D6E  5014               	movf	DS3231_Read_Alarm_Time@Address,w,c
 13316  004D70  ECC0  F027         	call	_I2C_Write
 13317                           
 13318                           ;I2C_Support.c: 145: I2C_ReStart();
 13319  004D74  EC0B  F02A         	call	_I2C_ReStart	;wreg free
 13320                           
 13321                           ;I2C_Support.c: 146: I2C_Write((Device << 1) | 1);
 13322  004D78  80D8               	bsf	status,0,c
 13323  004D7A  3415               	rlcf	DS3231_Read_Alarm_Time@Device,w,c
 13324  004D7C  ECC0  F027         	call	_I2C_Write
 13325                           
 13326                           ;I2C_Support.c: 147: alarm_second = I2C_Read(1);
 13327  004D80  0E01               	movlw	1
 13328  004D82  EC1D  F027         	call	_I2C_Read
 13329  004D86  6E67               	movwf	_alarm_second,c
 13330                           
 13331                           ;I2C_Support.c: 148: alarm_minute = I2C_Read(1);
 13332  004D88  0E01               	movlw	1
 13333  004D8A  EC1D  F027         	call	_I2C_Read
 13334  004D8E  6E66               	movwf	_alarm_minute,c
 13335                           
 13336                           ;I2C_Support.c: 149: alarm_hour = I2C_Read(1);
 13337  004D90  0E01               	movlw	1
 13338  004D92  EC1D  F027         	call	_I2C_Read
 13339  004D96  6E65               	movwf	_alarm_hour,c
 13340                           
 13341                           ;I2C_Support.c: 150: alarm_date = I2C_Read(0);
 13342  004D98  0E00               	movlw	0
 13343  004D9A  EC1D  F027         	call	_I2C_Read
 13344  004D9E  6E64               	movwf	_alarm_date,c
 13345                           
 13346                           ;I2C_Support.c: 151: I2C_Stop();
 13347  004DA0  EC62  F02A         	call	_I2C_Stop	;wreg free
 13348  004DA4  0012               	return		;funcret
 13349  004DA6                     __end_of_DS3231_Read_Alarm_Time:
 13350                           	opt stack 0
 13351                           tblptru	equ	0xFF8
 13352                           tblptrh	equ	0xFF7
 13353                           tblptrl	equ	0xFF6
 13354                           tablat	equ	0xFF5
 13355                           prodh	equ	0xFF4
 13356                           prodl	equ	0xFF3
 13357                           intcon	equ	0xFF2
 13358                           intcon2	equ	0xFF1
 13359                           postinc0	equ	0xFEE
 13360                           wreg	equ	0xFE8
 13361                           postdec1	equ	0xFE5
 13362                           fsr1l	equ	0xFE1
 13363                           indf2	equ	0xFDF
 13364                           postinc2	equ	0xFDE
 13365                           fsr2h	equ	0xFDA
 13366                           fsr2l	equ	0xFD9
 13367                           status	equ	0xFD8
 13368                           
 13369 ;; *************** function _Do_Beep_Good *****************
 13370 ;; Defined at:
 13371 ;;		line 38 in file "utils.c"
 13372 ;; Parameters:    Size  Location     Type
 13373 ;;		None
 13374 ;; Auto vars:     Size  Location     Type
 13375 ;;		None
 13376 ;; Return value:  Size  Location     Type
 13377 ;;		None               void
 13378 ;; Registers used:
 13379 ;;		wreg, status,2, status,0, cstack
 13380 ;; Tracked objects:
 13381 ;;		On entry : 0/0
 13382 ;;		On exit  : 0/0
 13383 ;;		Unchanged: 0/0
 13384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13388 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13389 ;;Total ram usage:        0 bytes
 13390 ;; Hardware stack levels used:    1
 13391 ;; Hardware stack levels required when called:    6
 13392 ;; This function calls:
 13393 ;;		_Activate_Buzzer_2KHz
 13394 ;;		_Deactivate_Buzzer
 13395 ;;		_Wait_One_Sec
 13396 ;;		_do_update_pwm
 13397 ;; This function is called by:
 13398 ;;		_main
 13399 ;;		_Do_Setup_Alarm_Time
 13400 ;;		_Setup_Temp_Fan
 13401 ;;		_Do_Setup_Time
 13402 ;; This function uses a non-reentrant model
 13403 ;;
 13404                           
 13405                           	psect	text64
 13406  0053B0                     __ptext64:
 13407                           	opt stack 0
 13408  0053B0                     _Do_Beep_Good:
 13409                           	opt stack 23
 13410                           
 13411                           ;utils.c: 41: Activate_Buzzer_2KHz();
 13412                           
 13413                           ;incstack = 0
 13414  0053B0  EC50  F02A         	call	_Activate_Buzzer_2KHz	;wreg free
 13415                           
 13416                           ;utils.c: 42: Wait_One_Sec();
 13417  0053B4  EC73  F029         	call	_Wait_One_Sec	;wreg free
 13418                           
 13419                           ;utils.c: 43: Deactivate_Buzzer();
 13420  0053B8  ECF6  F02A         	call	_Deactivate_Buzzer	;wreg free
 13421                           
 13422                           ;utils.c: 44: Wait_One_Sec();
 13423  0053BC  EC73  F029         	call	_Wait_One_Sec	;wreg free
 13424                           
 13425                           ;utils.c: 45: do_update_pwm(duty_cycle);
 13426  0053C0  0100               	movlb	0	; () banked
 13427  0053C2  51AB               	movf	_duty_cycle& (0+255),w,b
 13428  0053C4  EC6F  F020         	call	_do_update_pwm
 13429  0053C8  0012               	return		;funcret
 13430  0053CA                     __end_of_Do_Beep_Good:
 13431                           	opt stack 0
 13432                           tblptru	equ	0xFF8
 13433                           tblptrh	equ	0xFF7
 13434                           tblptrl	equ	0xFF6
 13435                           tablat	equ	0xFF5
 13436                           prodh	equ	0xFF4
 13437                           prodl	equ	0xFF3
 13438                           intcon	equ	0xFF2
 13439                           intcon2	equ	0xFF1
 13440                           postinc0	equ	0xFEE
 13441                           wreg	equ	0xFE8
 13442                           postdec1	equ	0xFE5
 13443                           fsr1l	equ	0xFE1
 13444                           indf2	equ	0xFDF
 13445                           postinc2	equ	0xFDE
 13446                           fsr2h	equ	0xFDA
 13447                           fsr2l	equ	0xFD9
 13448                           status	equ	0xFD8
 13449                           
 13450 ;; *************** function _Activate_Buzzer_2KHz *****************
 13451 ;; Defined at:
 13452 ;;		line 81 in file "utils.c"
 13453 ;; Parameters:    Size  Location     Type
 13454 ;;		None
 13455 ;; Auto vars:     Size  Location     Type
 13456 ;;		None
 13457 ;; Return value:  Size  Location     Type
 13458 ;;		None               void
 13459 ;; Registers used:
 13460 ;;		wreg, status,2
 13461 ;; Tracked objects:
 13462 ;;		On entry : 0/0
 13463 ;;		On exit  : 0/0
 13464 ;;		Unchanged: 0/0
 13465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13469 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13470 ;;Total ram usage:        0 bytes
 13471 ;; Hardware stack levels used:    1
 13472 ;; Hardware stack levels required when called:    3
 13473 ;; This function calls:
 13474 ;;		Nothing
 13475 ;; This function is called by:
 13476 ;;		_Do_Beep_Good
 13477 ;; This function uses a non-reentrant model
 13478 ;;
 13479                           
 13480                           	psect	text65
 13481  0054A0                     __ptext65:
 13482                           	opt stack 0
 13483  0054A0                     _Activate_Buzzer_2KHz:
 13484                           	opt stack 25
 13485                           
 13486                           ;utils.c: 84: PR2 = 0b11111001 ;
 13487                           
 13488                           ;incstack = 0
 13489  0054A0  0EF9               	movlw	249
 13490  0054A2  6ECB               	movwf	4043,c	;volatile
 13491                           
 13492                           ;utils.c: 85: T2CON = 0b00000101 ;
 13493  0054A4  0E05               	movlw	5
 13494  0054A6  6ECA               	movwf	4042,c	;volatile
 13495                           
 13496                           ;utils.c: 86: CCPR2L = 0b01111100 ;
 13497  0054A8  0E7C               	movlw	124
 13498  0054AA  6EBB               	movwf	4027,c	;volatile
 13499                           
 13500                           ;utils.c: 87: CCP2CON = 0b00111100 ;
 13501  0054AC  0E3C               	movlw	60
 13502  0054AE  6EBA               	movwf	4026,c	;volatile
 13503  0054B0  0012               	return		;funcret
 13504  0054B2                     __end_of_Activate_Buzzer_2KHz:
 13505                           	opt stack 0
 13506                           tblptru	equ	0xFF8
 13507                           tblptrh	equ	0xFF7
 13508                           tblptrl	equ	0xFF6
 13509                           tablat	equ	0xFF5
 13510                           prodh	equ	0xFF4
 13511                           prodl	equ	0xFF3
 13512                           intcon	equ	0xFF2
 13513                           intcon2	equ	0xFF1
 13514                           postinc0	equ	0xFEE
 13515                           wreg	equ	0xFE8
 13516                           postdec1	equ	0xFE5
 13517                           fsr1l	equ	0xFE1
 13518                           indf2	equ	0xFDF
 13519                           postinc2	equ	0xFDE
 13520                           fsr2h	equ	0xFDA
 13521                           fsr2l	equ	0xFD9
 13522                           status	equ	0xFD8
 13523                           
 13524 ;; *************** function _Do_Beep_Bad *****************
 13525 ;; Defined at:
 13526 ;;		line 48 in file "utils.c"
 13527 ;; Parameters:    Size  Location     Type
 13528 ;;		None
 13529 ;; Auto vars:     Size  Location     Type
 13530 ;;		None
 13531 ;; Return value:  Size  Location     Type
 13532 ;;		None               void
 13533 ;; Registers used:
 13534 ;;		wreg, status,2, status,0, cstack
 13535 ;; Tracked objects:
 13536 ;;		On entry : 0/0
 13537 ;;		On exit  : 0/0
 13538 ;;		Unchanged: 0/0
 13539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13543 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13544 ;;Total ram usage:        0 bytes
 13545 ;; Hardware stack levels used:    1
 13546 ;; Hardware stack levels required when called:    6
 13547 ;; This function calls:
 13548 ;;		_Activate_Buzzer_500Hz
 13549 ;;		_Deactivate_Buzzer
 13550 ;;		_Wait_One_Sec
 13551 ;;		_do_update_pwm
 13552 ;; This function is called by:
 13553 ;;		_main
 13554 ;;		_Do_Setup_Alarm_Time
 13555 ;;		_Setup_Temp_Fan
 13556 ;;		_Do_Setup_Time
 13557 ;; This function uses a non-reentrant model
 13558 ;;
 13559                           
 13560                           	psect	text66
 13561  0053CA                     __ptext66:
 13562                           	opt stack 0
 13563  0053CA                     _Do_Beep_Bad:
 13564                           	opt stack 23
 13565                           
 13566                           ;utils.c: 51: Activate_Buzzer_500Hz();
 13567                           
 13568                           ;incstack = 0
 13569  0053CA  EC59  F02A         	call	_Activate_Buzzer_500Hz	;wreg free
 13570                           
 13571                           ;utils.c: 52: Wait_One_Sec();
 13572  0053CE  EC73  F029         	call	_Wait_One_Sec	;wreg free
 13573                           
 13574                           ;utils.c: 53: Deactivate_Buzzer();
 13575  0053D2  ECF6  F02A         	call	_Deactivate_Buzzer	;wreg free
 13576                           
 13577                           ;utils.c: 54: Wait_One_Sec();
 13578  0053D6  EC73  F029         	call	_Wait_One_Sec	;wreg free
 13579                           
 13580                           ;utils.c: 55: do_update_pwm(duty_cycle);
 13581  0053DA  0100               	movlb	0	; () banked
 13582  0053DC  51AB               	movf	_duty_cycle& (0+255),w,b
 13583  0053DE  EC6F  F020         	call	_do_update_pwm
 13584  0053E2  0012               	return		;funcret
 13585  0053E4                     __end_of_Do_Beep_Bad:
 13586                           	opt stack 0
 13587                           tblptru	equ	0xFF8
 13588                           tblptrh	equ	0xFF7
 13589                           tblptrl	equ	0xFF6
 13590                           tablat	equ	0xFF5
 13591                           prodh	equ	0xFF4
 13592                           prodl	equ	0xFF3
 13593                           intcon	equ	0xFF2
 13594                           intcon2	equ	0xFF1
 13595                           postinc0	equ	0xFEE
 13596                           wreg	equ	0xFE8
 13597                           postdec1	equ	0xFE5
 13598                           fsr1l	equ	0xFE1
 13599                           indf2	equ	0xFDF
 13600                           postinc2	equ	0xFDE
 13601                           fsr2h	equ	0xFDA
 13602                           fsr2l	equ	0xFD9
 13603                           status	equ	0xFD8
 13604                           
 13605 ;; *************** function _do_update_pwm *****************
 13606 ;; Defined at:
 13607 ;;		line 105 in file "utils.c"
 13608 ;; Parameters:    Size  Location     Type
 13609 ;;  duty_cycle      1    wreg     unsigned char 
 13610 ;; Auto vars:     Size  Location     Type
 13611 ;;  duty_cycle      1   66[COMRAM] unsigned char 
 13612 ;;  dc_f            3   63[COMRAM] float 
 13613 ;;  dc_I            2   67[COMRAM] int 
 13614 ;; Return value:  Size  Location     Type
 13615 ;;		None               void
 13616 ;; Registers used:
 13617 ;;		wreg, status,2, status,0, cstack
 13618 ;; Tracked objects:
 13619 ;;		On entry : 0/0
 13620 ;;		On exit  : 0/0
 13621 ;;		Unchanged: 0/0
 13622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13624 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13625 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13626 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13627 ;;Total ram usage:        9 bytes
 13628 ;; Hardware stack levels used:    1
 13629 ;; Hardware stack levels required when called:    5
 13630 ;; This function calls:
 13631 ;;		___ftdiv
 13632 ;;		___ftmul
 13633 ;;		___fttol
 13634 ;;		___lbtoft
 13635 ;; This function is called by:
 13636 ;;		_test_alarm
 13637 ;;		_Do_Beep_Good
 13638 ;;		_Do_Beep_Bad
 13639 ;;		_Monitor_Fan
 13640 ;;		_Do_Beep
 13641 ;;		_Increase_Speed
 13642 ;;		_Decrease_Speed
 13643 ;; This function uses a non-reentrant model
 13644 ;;
 13645                           
 13646                           	psect	text67
 13647  0040DE                     __ptext67:
 13648                           	opt stack 0
 13649  0040DE                     _do_update_pwm:
 13650                           	opt stack 24
 13651                           
 13652                           ;incstack = 0
 13653                           ;do_update_pwm@duty_cycle stored from wreg
 13654  0040DE  6E43               	movwf	do_update_pwm@duty_cycle,c
 13655                           
 13656                           ;utils.c: 107: float dc_f;
 13657                           ;utils.c: 108: int dc_I;
 13658                           ;utils.c: 109: PR2 = 0b00000100 ;
 13659  0040E0  0E04               	movlw	4
 13660  0040E2  6ECB               	movwf	4043,c	;volatile
 13661                           
 13662                           ;utils.c: 110: T2CON = 0b00000111 ;
 13663  0040E4  0E07               	movlw	7
 13664  0040E6  6ECA               	movwf	4042,c	;volatile
 13665                           
 13666                           ;utils.c: 111: dc_f = ( 4.0 * duty_cycle / 20.0) ;
 13667  0040E8  0E00               	movlw	0
 13668  0040EA  6E22               	movwf	___ftmul@f2,c
 13669  0040EC  0E80               	movlw	128
 13670  0040EE  6E23               	movwf	___ftmul@f2+1,c
 13671  0040F0  0E40               	movlw	64
 13672  0040F2  6E24               	movwf	___ftmul@f2+2,c
 13673  0040F4  5043               	movf	do_update_pwm@duty_cycle,w,c
 13674  0040F6  ECB7  F028         	call	___lbtoft
 13675  0040FA  C019  F01F         	movff	?___lbtoft,___ftmul@f1
 13676  0040FE  C01A  F020         	movff	?___lbtoft+1,___ftmul@f1+1
 13677  004102  C01B  F021         	movff	?___lbtoft+2,___ftmul@f1+2
 13678  004106  EC41  F01B         	call	___ftmul	;wreg free
 13679  00410A  C01F  F02E         	movff	?___ftmul,___ftdiv@f1
 13680  00410E  C020  F02F         	movff	?___ftmul+1,___ftdiv@f1+1
 13681  004112  C021  F030         	movff	?___ftmul+2,___ftdiv@f1+2
 13682  004116  0E00               	movlw	0
 13683  004118  6E31               	movwf	___ftdiv@f2,c
 13684  00411A  0EA0               	movlw	160
 13685  00411C  6E32               	movwf	___ftdiv@f2+1,c
 13686  00411E  0E41               	movlw	65
 13687  004120  6E33               	movwf	___ftdiv@f2+2,c
 13688  004122  EC97  F01D         	call	___ftdiv	;wreg free
 13689  004126  C02E  F040         	movff	?___ftdiv,do_update_pwm@dc_f
 13690  00412A  C02F  F041         	movff	?___ftdiv+1,do_update_pwm@dc_f+1
 13691  00412E  C030  F042         	movff	?___ftdiv+2,do_update_pwm@dc_f+2
 13692                           
 13693                           ;utils.c: 112: dc_I = (int) dc_f;
 13694  004132  C040  F02E         	movff	do_update_pwm@dc_f,___fttol@f1
 13695  004136  C041  F02F         	movff	do_update_pwm@dc_f+1,___fttol@f1+1
 13696  00413A  C042  F030         	movff	do_update_pwm@dc_f+2,___fttol@f1+2
 13697  00413E  EC24  F01D         	call	___fttol	;wreg free
 13698  004142  C02E  F044         	movff	?___fttol,do_update_pwm@dc_I
 13699  004146  C02F  F045         	movff	?___fttol+1,do_update_pwm@dc_I+1
 13700                           
 13701                           ;utils.c: 113: if (dc_I > duty_cycle) dc_I++;
 13702  00414A  5043               	movf	do_update_pwm@duty_cycle,w,c
 13703  00414C  6E3D               	movwf	??_do_update_pwm& (0+255),c
 13704  00414E  6A3E               	clrf	(??_do_update_pwm+1)& (0+255),c
 13705  004150  5044               	movf	do_update_pwm@dc_I,w,c
 13706  004152  5C3D               	subwf	??_do_update_pwm,w,c
 13707  004154  503E               	movf	??_do_update_pwm+1,w,c
 13708  004156  0A80               	xorlw	128
 13709  004158  6E3F               	movwf	(??_do_update_pwm+2)& (0+255),c
 13710  00415A  5045               	movf	do_update_pwm@dc_I+1,w,c
 13711  00415C  0A80               	xorlw	128
 13712  00415E  583F               	subwfb	(??_do_update_pwm+2)& (0+255),w,c
 13713  004160  B0D8               	btfsc	status,0,c
 13714  004162  D003               	goto	l10526
 13715  004164  4A44               	infsnz	do_update_pwm@dc_I,f,c
 13716  004166  2A45               	incf	do_update_pwm@dc_I+1,f,c
 13717  004168  D000               	goto	l10526
 13718  00416A                     l10526:
 13719                           
 13720                           ;utils.c: 114: CCP1CON = ((dc_I & 0x03) << 4) | 0b00001100;
 13721  00416A  C044  F03D         	movff	do_update_pwm@dc_I,??_do_update_pwm
 13722  00416E  0E03               	movlw	3
 13723  004170  163D               	andwf	??_do_update_pwm,f,c
 13724  004172  383D               	swapf	??_do_update_pwm,w,c
 13725  004174  0BF0               	andlw	240
 13726  004176  090C               	iorlw	12
 13727  004178  6EBD               	movwf	4029,c	;volatile
 13728                           
 13729                           ;utils.c: 115: CCPR1L = (dc_I) >> 2;
 13730  00417A  C044  F03D         	movff	do_update_pwm@dc_I,??_do_update_pwm
 13731  00417E  C045  F03E         	movff	do_update_pwm@dc_I+1,??_do_update_pwm+1
 13732  004182  343E               	rlcf	??_do_update_pwm+1,w,c
 13733  004184  323E               	rrcf	??_do_update_pwm+1,f,c
 13734  004186  323D               	rrcf	??_do_update_pwm,f,c
 13735  004188  343E               	rlcf	??_do_update_pwm+1,w,c
 13736  00418A  323E               	rrcf	??_do_update_pwm+1,f,c
 13737  00418C  323D               	rrcf	??_do_update_pwm,f,c
 13738  00418E  503D               	movf	??_do_update_pwm,w,c
 13739  004190  6EBE               	movwf	4030,c	;volatile
 13740  004192  0012               	return		;funcret
 13741  004194                     __end_of_do_update_pwm:
 13742                           	opt stack 0
 13743                           tblptru	equ	0xFF8
 13744                           tblptrh	equ	0xFF7
 13745                           tblptrl	equ	0xFF6
 13746                           tablat	equ	0xFF5
 13747                           prodh	equ	0xFF4
 13748                           prodl	equ	0xFF3
 13749                           intcon	equ	0xFF2
 13750                           intcon2	equ	0xFF1
 13751                           postinc0	equ	0xFEE
 13752                           wreg	equ	0xFE8
 13753                           postdec1	equ	0xFE5
 13754                           fsr1l	equ	0xFE1
 13755                           indf2	equ	0xFDF
 13756                           postinc2	equ	0xFDE
 13757                           fsr2h	equ	0xFDA
 13758                           fsr2l	equ	0xFD9
 13759                           status	equ	0xFD8
 13760                           
 13761 ;; *************** function ___lbtoft *****************
 13762 ;; Defined at:
 13763 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
 13764 ;; Parameters:    Size  Location     Type
 13765 ;;  c               1    wreg     unsigned char 
 13766 ;; Auto vars:     Size  Location     Type
 13767 ;;  c               1   27[COMRAM] unsigned char 
 13768 ;; Return value:  Size  Location     Type
 13769 ;;                  3   24[COMRAM] float 
 13770 ;; Registers used:
 13771 ;;		wreg, status,2, status,0, cstack
 13772 ;; Tracked objects:
 13773 ;;		On entry : 0/0
 13774 ;;		On exit  : 0/0
 13775 ;;		Unchanged: 0/0
 13776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13777 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13778 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13780 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13781 ;;Total ram usage:        4 bytes
 13782 ;; Hardware stack levels used:    1
 13783 ;; Hardware stack levels required when called:    4
 13784 ;; This function calls:
 13785 ;;		___ftpack
 13786 ;; This function is called by:
 13787 ;;		_main
 13788 ;;		_do_update_pwm
 13789 ;; This function uses a non-reentrant model
 13790 ;;
 13791                           
 13792                           	psect	text68
 13793  00516E                     __ptext68:
 13794                           	opt stack 0
 13795  00516E                     ___lbtoft:
 13796                           	opt stack 24
 13797                           
 13798                           ;incstack = 0
 13799                           ;___lbtoft@c stored from wreg
 13800  00516E  6E1C               	movwf	___lbtoft@c,c
 13801  005170  501C               	movf	___lbtoft@c,w,c
 13802  005172  6E11               	movwf	___ftpack@arg,c
 13803  005174  6A12               	clrf	___ftpack@arg+1,c
 13804  005176  6A13               	clrf	___ftpack@arg+2,c
 13805  005178  0E8E               	movlw	142
 13806  00517A  6E14               	movwf	___ftpack@exp,c
 13807  00517C  0E00               	movlw	0
 13808  00517E  6E15               	movwf	___ftpack@sign,c
 13809  005180  EC50  F01F         	call	___ftpack	;wreg free
 13810  005184  C011  F019         	movff	?___ftpack,?___lbtoft
 13811  005188  C012  F01A         	movff	?___ftpack+1,?___lbtoft+1
 13812  00518C  C013  F01B         	movff	?___ftpack+2,?___lbtoft+2
 13813  005190  D000               	goto	l2125
 13814  005192                     l2125:
 13815  005192  0012               	return		;funcret
 13816  005194                     __end_of___lbtoft:
 13817                           	opt stack 0
 13818                           tblptru	equ	0xFF8
 13819                           tblptrh	equ	0xFF7
 13820                           tblptrl	equ	0xFF6
 13821                           tablat	equ	0xFF5
 13822                           prodh	equ	0xFF4
 13823                           prodl	equ	0xFF3
 13824                           intcon	equ	0xFF2
 13825                           intcon2	equ	0xFF1
 13826                           postinc0	equ	0xFEE
 13827                           wreg	equ	0xFE8
 13828                           postdec1	equ	0xFE5
 13829                           fsr1l	equ	0xFE1
 13830                           indf2	equ	0xFDF
 13831                           postinc2	equ	0xFDE
 13832                           fsr2h	equ	0xFDA
 13833                           fsr2l	equ	0xFD9
 13834                           status	equ	0xFD8
 13835                           
 13836 ;; *************** function ___ftdiv *****************
 13837 ;; Defined at:
 13838 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
 13839 ;; Parameters:    Size  Location     Type
 13840 ;;  f1              3   45[COMRAM] float 
 13841 ;;  f2              3   48[COMRAM] float 
 13842 ;; Auto vars:     Size  Location     Type
 13843 ;;  f3              3   55[COMRAM] float 
 13844 ;;  sign            1   59[COMRAM] unsigned char 
 13845 ;;  exp             1   58[COMRAM] unsigned char 
 13846 ;;  cntr            1   54[COMRAM] unsigned char 
 13847 ;; Return value:  Size  Location     Type
 13848 ;;                  3   45[COMRAM] float 
 13849 ;; Registers used:
 13850 ;;		wreg, status,2, status,0, cstack
 13851 ;; Tracked objects:
 13852 ;;		On entry : 0/0
 13853 ;;		On exit  : 0/0
 13854 ;;		Unchanged: 0/0
 13855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13856 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13857 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13858 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13859 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13860 ;;Total ram usage:       15 bytes
 13861 ;; Hardware stack levels used:    1
 13862 ;; Hardware stack levels required when called:    4
 13863 ;; This function calls:
 13864 ;;		___ftpack
 13865 ;; This function is called by:
 13866 ;;		_do_update_pwm
 13867 ;;		_read_volt
 13868 ;; This function uses a non-reentrant model
 13869 ;;
 13870                           
 13871                           	psect	text69
 13872  003B2E                     __ptext69:
 13873                           	opt stack 0
 13874  003B2E                     ___ftdiv:
 13875                           	opt stack 24
 13876                           
 13877                           ;incstack = 0
 13878  003B2E  C030  F034         	movff	___ftdiv@f1+2,??___ftdiv
 13879  003B32  6A35               	clrf	(??___ftdiv+1)& (0+255),c
 13880  003B34  6A36               	clrf	(??___ftdiv+2)& (0+255),c
 13881  003B36  342F               	rlcf	___ftdiv@f1+1,w,c
 13882  003B38  3634               	rlcf	??___ftdiv& (0+255),f,c
 13883  003B3A  E301               	bnc	u9431
 13884  003B3C  8035               	bsf	(??___ftdiv+1)& (0+255),0,c
 13885  003B3E                     u9431:
 13886  003B3E  5034               	movf	??___ftdiv,w,c
 13887  003B40  6E3B               	movwf	___ftdiv@exp,c
 13888  003B42  503B               	movf	___ftdiv@exp,w,c
 13889  003B44  A4D8               	btfss	status,2,c
 13890  003B46  D002               	goto	l10346
 13891  003B48  D00E               	goto	l10348
 13892  003B4A  D061               	goto	l2031
 13893  003B4C                     l10346:
 13894  003B4C  C033  F034         	movff	___ftdiv@f2+2,??___ftdiv
 13895  003B50  6A35               	clrf	(??___ftdiv+1)& (0+255),c
 13896  003B52  6A36               	clrf	(??___ftdiv+2)& (0+255),c
 13897  003B54  3432               	rlcf	___ftdiv@f2+1,w,c
 13898  003B56  3634               	rlcf	??___ftdiv& (0+255),f,c
 13899  003B58  E301               	bnc	u9451
 13900  003B5A  8035               	bsf	(??___ftdiv+1)& (0+255),0,c
 13901  003B5C                     u9451:
 13902  003B5C  5034               	movf	??___ftdiv,w,c
 13903  003B5E  6E3C               	movwf	___ftdiv@sign,c
 13904  003B60  503C               	movf	___ftdiv@sign,w,c
 13905  003B62  A4D8               	btfss	status,2,c
 13906  003B64  D007               	goto	l10352
 13907  003B66                     l10348:
 13908  003B66  0E00               	movlw	0
 13909  003B68  6E2E               	movwf	?___ftdiv,c
 13910  003B6A  0E00               	movlw	0
 13911  003B6C  6E2F               	movwf	?___ftdiv+1,c
 13912  003B6E  0E00               	movlw	0
 13913  003B70  6E30               	movwf	?___ftdiv+2,c
 13914  003B72  D04D               	goto	l2031
 13915  003B74                     l10352:
 13916  003B74  0E00               	movlw	0
 13917  003B76  6E38               	movwf	___ftdiv@f3,c
 13918  003B78  0E00               	movlw	0
 13919  003B7A  6E39               	movwf	___ftdiv@f3+1,c
 13920  003B7C  0E00               	movlw	0
 13921  003B7E  6E3A               	movwf	___ftdiv@f3+2,c
 13922  003B80  503C               	movf	___ftdiv@sign,w,c
 13923  003B82  0F89               	addlw	137
 13924  003B84  5E3B               	subwf	___ftdiv@exp,f,c
 13925  003B86  C030  F03C         	movff	___ftdiv@f1+2,___ftdiv@sign
 13926  003B8A  5033               	movf	___ftdiv@f2+2,w,c
 13927  003B8C  1A3C               	xorwf	___ftdiv@sign,f,c
 13928  003B8E  0E80               	movlw	128
 13929  003B90  163C               	andwf	___ftdiv@sign,f,c
 13930  003B92  8E2F               	bsf	___ftdiv@f1+1,7,c
 13931  003B94  0EFF               	movlw	255
 13932  003B96  162E               	andwf	___ftdiv@f1,f,c
 13933  003B98  0EFF               	movlw	255
 13934  003B9A  162F               	andwf	___ftdiv@f1+1,f,c
 13935  003B9C  0E00               	movlw	0
 13936  003B9E  1630               	andwf	___ftdiv@f1+2,f,c
 13937  003BA0  8E32               	bsf	___ftdiv@f2+1,7,c
 13938  003BA2  0EFF               	movlw	255
 13939  003BA4  1631               	andwf	___ftdiv@f2,f,c
 13940  003BA6  0EFF               	movlw	255
 13941  003BA8  1632               	andwf	___ftdiv@f2+1,f,c
 13942  003BAA  0E00               	movlw	0
 13943  003BAC  1633               	andwf	___ftdiv@f2+2,f,c
 13944  003BAE  0E18               	movlw	24
 13945  003BB0  6E37               	movwf	___ftdiv@cntr,c
 13946  003BB2  D000               	goto	l10372
 13947  003BB4                     l10372:
 13948  003BB4  90D8               	bcf	status,0,c
 13949  003BB6  3638               	rlcf	___ftdiv@f3,f,c
 13950  003BB8  3639               	rlcf	___ftdiv@f3+1,f,c
 13951  003BBA  363A               	rlcf	___ftdiv@f3+2,f,c
 13952  003BBC  5031               	movf	___ftdiv@f2,w,c
 13953  003BBE  5C2E               	subwf	___ftdiv@f1,w,c
 13954  003BC0  5032               	movf	___ftdiv@f2+1,w,c
 13955  003BC2  582F               	subwfb	___ftdiv@f1+1,w,c
 13956  003BC4  5033               	movf	___ftdiv@f2+2,w,c
 13957  003BC6  5830               	subwfb	___ftdiv@f1+2,w,c
 13958  003BC8  A0D8               	btfss	status,0,c
 13959  003BCA  D007               	goto	l2034
 13960  003BCC  5031               	movf	___ftdiv@f2,w,c
 13961  003BCE  5E2E               	subwf	___ftdiv@f1,f,c
 13962  003BD0  5032               	movf	___ftdiv@f2+1,w,c
 13963  003BD2  5A2F               	subwfb	___ftdiv@f1+1,f,c
 13964  003BD4  5033               	movf	___ftdiv@f2+2,w,c
 13965  003BD6  5A30               	subwfb	___ftdiv@f1+2,f,c
 13966  003BD8  8038               	bsf	___ftdiv@f3,0,c
 13967  003BDA                     l2034:
 13968  003BDA  90D8               	bcf	status,0,c
 13969  003BDC  362E               	rlcf	___ftdiv@f1,f,c
 13970  003BDE  362F               	rlcf	___ftdiv@f1+1,f,c
 13971  003BE0  3630               	rlcf	___ftdiv@f1+2,f,c
 13972  003BE2  2E37               	decfsz	___ftdiv@cntr,f,c
 13973  003BE4  D7E7               	goto	l10372
 13974  003BE6  D000               	goto	l10382
 13975  003BE8                     l10382:
 13976  003BE8  C038  F011         	movff	___ftdiv@f3,___ftpack@arg
 13977  003BEC  C039  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
 13978  003BF0  C03A  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
 13979  003BF4  C03B  F014         	movff	___ftdiv@exp,___ftpack@exp
 13980  003BF8  C03C  F015         	movff	___ftdiv@sign,___ftpack@sign
 13981  003BFC  EC50  F01F         	call	___ftpack	;wreg free
 13982  003C00  C011  F02E         	movff	?___ftpack,?___ftdiv
 13983  003C04  C012  F02F         	movff	?___ftpack+1,?___ftdiv+1
 13984  003C08  C013  F030         	movff	?___ftpack+2,?___ftdiv+2
 13985  003C0C  D000               	goto	l2031
 13986  003C0E                     l2031:
 13987  003C0E  0012               	return		;funcret
 13988  003C10                     __end_of___ftdiv:
 13989                           	opt stack 0
 13990                           tblptru	equ	0xFF8
 13991                           tblptrh	equ	0xFF7
 13992                           tblptrl	equ	0xFF6
 13993                           tablat	equ	0xFF5
 13994                           prodh	equ	0xFF4
 13995                           prodl	equ	0xFF3
 13996                           intcon	equ	0xFF2
 13997                           intcon2	equ	0xFF1
 13998                           postinc0	equ	0xFEE
 13999                           wreg	equ	0xFE8
 14000                           postdec1	equ	0xFE5
 14001                           fsr1l	equ	0xFE1
 14002                           indf2	equ	0xFDF
 14003                           postinc2	equ	0xFDE
 14004                           fsr2h	equ	0xFDA
 14005                           fsr2l	equ	0xFD9
 14006                           status	equ	0xFD8
 14007                           
 14008 ;; *************** function _Wait_One_Sec *****************
 14009 ;; Defined at:
 14010 ;;		line 59 in file "utils.c"
 14011 ;; Parameters:    Size  Location     Type
 14012 ;;		None
 14013 ;; Auto vars:     Size  Location     Type
 14014 ;;  k               2   16[COMRAM] int 
 14015 ;; Return value:  Size  Location     Type
 14016 ;;		None               void
 14017 ;; Registers used:
 14018 ;;		wreg, status,2, status,0
 14019 ;; Tracked objects:
 14020 ;;		On entry : 0/0
 14021 ;;		On exit  : 0/0
 14022 ;;		Unchanged: 0/0
 14023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14025 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14027 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14028 ;;Total ram usage:        2 bytes
 14029 ;; Hardware stack levels used:    1
 14030 ;; Hardware stack levels required when called:    3
 14031 ;; This function calls:
 14032 ;;		Nothing
 14033 ;; This function is called by:
 14034 ;;		_main
 14035 ;;		_Do_Beep_Good
 14036 ;;		_Do_Beep_Bad
 14037 ;;		_check_for_button_input
 14038 ;;		_Set_Alarm
 14039 ;;		_Do_Beep
 14040 ;; This function uses a non-reentrant model
 14041 ;;
 14042                           
 14043                           	psect	text70
 14044  0052E6                     __ptext70:
 14045                           	opt stack 0
 14046  0052E6                     _Wait_One_Sec:
 14047                           	opt stack 27
 14048                           
 14049                           ;utils.c: 61: for (int k=0;k<0xffff;k++);
 14050                           
 14051                           ;incstack = 0
 14052  0052E6  0E00               	movlw	0
 14053  0052E8  6E12               	movwf	Wait_One_Sec@k+1,c
 14054  0052EA  0E00               	movlw	0
 14055  0052EC  6E11               	movwf	Wait_One_Sec@k,c
 14056  0052EE                     l10504:
 14057  0052EE  2811               	incf	Wait_One_Sec@k,w,c
 14058  0052F0  E105               	bnz	l10508
 14059  0052F2  2812               	incf	Wait_One_Sec@k+1,w,c
 14060  0052F4  B4D8               	btfsc	status,2,c
 14061  0052F6  D006               	goto	l970
 14062  0052F8  D001               	goto	l10508
 14063  0052FA  D004               	goto	l970
 14064  0052FC                     l10508:
 14065  0052FC  4A11               	infsnz	Wait_One_Sec@k,f,c
 14066  0052FE  2A12               	incf	Wait_One_Sec@k+1,f,c
 14067  005300  D7F6               	goto	l10504
 14068  005302  D7FC               	goto	l10508
 14069  005304                     l970:
 14070  005304  0012               	return		;funcret
 14071  005306                     __end_of_Wait_One_Sec:
 14072                           	opt stack 0
 14073                           tblptru	equ	0xFF8
 14074                           tblptrh	equ	0xFF7
 14075                           tblptrl	equ	0xFF6
 14076                           tablat	equ	0xFF5
 14077                           prodh	equ	0xFF4
 14078                           prodl	equ	0xFF3
 14079                           intcon	equ	0xFF2
 14080                           intcon2	equ	0xFF1
 14081                           postinc0	equ	0xFEE
 14082                           wreg	equ	0xFE8
 14083                           postdec1	equ	0xFE5
 14084                           fsr1l	equ	0xFE1
 14085                           indf2	equ	0xFDF
 14086                           postinc2	equ	0xFDE
 14087                           fsr2h	equ	0xFDA
 14088                           fsr2l	equ	0xFD9
 14089                           status	equ	0xFD8
 14090                           
 14091 ;; *************** function _Deactivate_Buzzer *****************
 14092 ;; Defined at:
 14093 ;;		line 99 in file "utils.c"
 14094 ;; Parameters:    Size  Location     Type
 14095 ;;		None
 14096 ;; Auto vars:     Size  Location     Type
 14097 ;;		None
 14098 ;; Return value:  Size  Location     Type
 14099 ;;		None               void
 14100 ;; Registers used:
 14101 ;;		wreg, status,2
 14102 ;; Tracked objects:
 14103 ;;		On entry : 0/0
 14104 ;;		On exit  : 0/0
 14105 ;;		Unchanged: 0/0
 14106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14110 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14111 ;;Total ram usage:        0 bytes
 14112 ;; Hardware stack levels used:    1
 14113 ;; Hardware stack levels required when called:    3
 14114 ;; This function calls:
 14115 ;;		Nothing
 14116 ;; This function is called by:
 14117 ;;		_main
 14118 ;;		_test_alarm
 14119 ;;		_Do_Beep_Good
 14120 ;;		_Do_Beep_Bad
 14121 ;;		_check_for_button_input
 14122 ;;		_Do_Beep
 14123 ;; This function uses a non-reentrant model
 14124 ;;
 14125                           
 14126                           	psect	text71
 14127  0055EC                     __ptext71:
 14128                           	opt stack 0
 14129  0055EC                     _Deactivate_Buzzer:
 14130                           	opt stack 26
 14131                           
 14132                           ;utils.c: 101: CCP2CON = 0x0;
 14133                           
 14134                           ;incstack = 0
 14135  0055EC  0E00               	movlw	0
 14136  0055EE  6EBA               	movwf	4026,c	;volatile
 14137                           
 14138                           ;utils.c: 102: PORTCbits.RC1 = 0;
 14139  0055F0  9282               	bcf	3970,1,c	;volatile
 14140  0055F2  0012               	return		;funcret
 14141  0055F4                     __end_of_Deactivate_Buzzer:
 14142                           	opt stack 0
 14143                           tblptru	equ	0xFF8
 14144                           tblptrh	equ	0xFF7
 14145                           tblptrl	equ	0xFF6
 14146                           tablat	equ	0xFF5
 14147                           prodh	equ	0xFF4
 14148                           prodl	equ	0xFF3
 14149                           intcon	equ	0xFF2
 14150                           intcon2	equ	0xFF1
 14151                           postinc0	equ	0xFEE
 14152                           wreg	equ	0xFE8
 14153                           postdec1	equ	0xFE5
 14154                           fsr1l	equ	0xFE1
 14155                           indf2	equ	0xFDF
 14156                           postinc2	equ	0xFDE
 14157                           fsr2h	equ	0xFDA
 14158                           fsr2l	equ	0xFD9
 14159                           status	equ	0xFD8
 14160                           
 14161 ;; *************** function _Activate_Buzzer_500Hz *****************
 14162 ;; Defined at:
 14163 ;;		line 72 in file "utils.c"
 14164 ;; Parameters:    Size  Location     Type
 14165 ;;		None
 14166 ;; Auto vars:     Size  Location     Type
 14167 ;;		None
 14168 ;; Return value:  Size  Location     Type
 14169 ;;		None               void
 14170 ;; Registers used:
 14171 ;;		wreg, status,2
 14172 ;; Tracked objects:
 14173 ;;		On entry : 0/0
 14174 ;;		On exit  : 0/0
 14175 ;;		Unchanged: 0/0
 14176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14180 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14181 ;;Total ram usage:        0 bytes
 14182 ;; Hardware stack levels used:    1
 14183 ;; Hardware stack levels required when called:    3
 14184 ;; This function calls:
 14185 ;;		Nothing
 14186 ;; This function is called by:
 14187 ;;		_test_alarm
 14188 ;;		_Do_Beep_Bad
 14189 ;; This function uses a non-reentrant model
 14190 ;;
 14191                           
 14192                           	psect	text72
 14193  0054B2                     __ptext72:
 14194                           	opt stack 0
 14195  0054B2                     _Activate_Buzzer_500Hz:
 14196                           	opt stack 26
 14197                           
 14198                           ;utils.c: 75: PR2 = 0b11111001 ;
 14199                           
 14200                           ;incstack = 0
 14201  0054B2  0EF9               	movlw	249
 14202  0054B4  6ECB               	movwf	4043,c	;volatile
 14203                           
 14204                           ;utils.c: 76: T2CON = 0b00000111 ;
 14205  0054B6  0E07               	movlw	7
 14206  0054B8  6ECA               	movwf	4042,c	;volatile
 14207                           
 14208                           ;utils.c: 77: CCPR2L = 0b01111100 ;
 14209  0054BA  0E7C               	movlw	124
 14210  0054BC  6EBB               	movwf	4027,c	;volatile
 14211                           
 14212                           ;utils.c: 78: CCP2CON = 0b00111100 ;
 14213  0054BE  0E3C               	movlw	60
 14214  0054C0  6EBA               	movwf	4026,c	;volatile
 14215  0054C2  0012               	return		;funcret
 14216  0054C4                     __end_of_Activate_Buzzer_500Hz:
 14217                           	opt stack 0
 14218                           tblptru	equ	0xFF8
 14219                           tblptrh	equ	0xFF7
 14220                           tblptrl	equ	0xFF6
 14221                           tablat	equ	0xFF5
 14222                           prodh	equ	0xFF4
 14223                           prodl	equ	0xFF3
 14224                           intcon	equ	0xFF2
 14225                           intcon2	equ	0xFF1
 14226                           postinc0	equ	0xFEE
 14227                           wreg	equ	0xFE8
 14228                           postdec1	equ	0xFE5
 14229                           fsr1l	equ	0xFE1
 14230                           indf2	equ	0xFDF
 14231                           postinc2	equ	0xFDE
 14232                           fsr2h	equ	0xFDA
 14233                           fsr2l	equ	0xFD9
 14234                           status	equ	0xFD8
 14235                           
 14236 ;; *************** function _Decrease_Alarm_Time *****************
 14237 ;; Defined at:
 14238 ;;		line 88 in file "Setup_Alarm_Time.c"
 14239 ;; Parameters:    Size  Location     Type
 14240 ;;		None
 14241 ;; Auto vars:     Size  Location     Type
 14242 ;;		None
 14243 ;; Return value:  Size  Location     Type
 14244 ;;		None               void
 14245 ;; Registers used:
 14246 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14247 ;; Tracked objects:
 14248 ;;		On entry : 0/0
 14249 ;;		On exit  : 0/0
 14250 ;;		Unchanged: 0/0
 14251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14255 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14256 ;;Total ram usage:        0 bytes
 14257 ;; Hardware stack levels used:    1
 14258 ;; Hardware stack levels required when called:   11
 14259 ;; This function calls:
 14260 ;;		_Update_Setup_Alarm_Time_Screen
 14261 ;; This function is called by:
 14262 ;;		_Do_Setup_Alarm_Time
 14263 ;; This function uses a non-reentrant model
 14264 ;;
 14265                           
 14266                           	psect	text73
 14267  004AF4                     __ptext73:
 14268                           	opt stack 0
 14269  004AF4                     _Decrease_Alarm_Time:
 14270                           	opt stack 18
 14271                           
 14272                           ;Setup_Alarm_Time.c: 90: switch (Select_Alarm_Field)
 14273                           
 14274                           ;incstack = 0
 14275  004AF4  D021               	goto	l10692
 14276  004AF6                     l10672:
 14277                           
 14278                           ;Setup_Alarm_Time.c: 93: if (setup_alarm_hour == 0) setup_alarm_hour = 23;
 14279  004AF6  0100               	movlb	0	; () banked
 14280  004AF8  51AE               	movf	_setup_alarm_hour& (0+255),w,b
 14281  004AFA  A4D8               	btfss	status,2,c
 14282  004AFC  D004               	goto	l10676
 14283                           
 14284                           ; BSR set to: 0
 14285  004AFE  0E17               	movlw	23
 14286  004B00  0100               	movlb	0	; () banked
 14287  004B02  6FAE               	movwf	_setup_alarm_hour& (0+255),b
 14288  004B04  D025               	goto	l10694
 14289  004B06                     l10676:
 14290                           
 14291                           ; BSR set to: 0
 14292                           ;Setup_Alarm_Time.c: 94: else --setup_alarm_hour;
 14293  004B06  0100               	movlb	0	; () banked
 14294  004B08  07AE               	decf	_setup_alarm_hour& (0+255),f,b
 14295                           
 14296                           ; BSR set to: 0
 14297                           ;Setup_Alarm_Time.c: 95: break;
 14298  004B0A  D022               	goto	l10694
 14299  004B0C                     l10678:
 14300                           
 14301                           ; BSR set to: 0
 14302                           ;Setup_Alarm_Time.c: 99: if (setup_alarm_minute == 0) setup_alarm_minute = 59;
 14303  004B0C  0100               	movlb	0	; () banked
 14304  004B0E  51AF               	movf	_setup_alarm_minute& (0+255),w,b
 14305  004B10  A4D8               	btfss	status,2,c
 14306  004B12  D004               	goto	l10682
 14307                           
 14308                           ; BSR set to: 0
 14309  004B14  0E3B               	movlw	59
 14310  004B16  0100               	movlb	0	; () banked
 14311  004B18  6FAF               	movwf	_setup_alarm_minute& (0+255),b
 14312  004B1A  D01A               	goto	l10694
 14313  004B1C                     l10682:
 14314                           
 14315                           ; BSR set to: 0
 14316                           ;Setup_Alarm_Time.c: 100: else --setup_alarm_minute;
 14317  004B1C  0100               	movlb	0	; () banked
 14318  004B1E  07AF               	decf	_setup_alarm_minute& (0+255),f,b
 14319                           
 14320                           ; BSR set to: 0
 14321                           ;Setup_Alarm_Time.c: 101: break;
 14322  004B20  D017               	goto	l10694
 14323  004B22                     l10684:
 14324                           
 14325                           ; BSR set to: 0
 14326                           ;Setup_Alarm_Time.c: 106: if (setup_alarm_second == 0) setup_alarm_second = 59;
 14327  004B22  0100               	movlb	0	; () banked
 14328  004B24  51B0               	movf	_setup_alarm_second& (0+255),w,b
 14329  004B26  A4D8               	btfss	status,2,c
 14330  004B28  D004               	goto	l10688
 14331                           
 14332                           ; BSR set to: 0
 14333  004B2A  0E3B               	movlw	59
 14334  004B2C  0100               	movlb	0	; () banked
 14335  004B2E  6FB0               	movwf	_setup_alarm_second& (0+255),b
 14336  004B30  D00F               	goto	l10694
 14337  004B32                     l10688:
 14338                           
 14339                           ; BSR set to: 0
 14340                           ;Setup_Alarm_Time.c: 107: else --setup_alarm_second;
 14341  004B32  0100               	movlb	0	; () banked
 14342  004B34  07B0               	decf	_setup_alarm_second& (0+255),f,b
 14343                           
 14344                           ; BSR set to: 0
 14345                           ;Setup_Alarm_Time.c: 112: }
 14346                           
 14347                           ; BSR set to: 0
 14348                           ;Setup_Alarm_Time.c: 111: break;
 14349                           
 14350                           ;Setup_Alarm_Time.c: 110: default:
 14351                           
 14352                           ; BSR set to: 0
 14353                           ;Setup_Alarm_Time.c: 108: break;
 14354  004B36  D00C               	goto	l10694
 14355  004B38                     l10692:
 14356  004B38  0100               	movlb	0	; () banked
 14357  004B3A  51A4               	movf	_Select_Alarm_Field& (0+255),w,b
 14358                           
 14359                           ; Switch size 1, requested type "space"
 14360                           ; Number of cases is 3, Range of values is 0 to 2
 14361                           ; switch strategies available:
 14362                           ; Name         Instructions Cycles
 14363                           ; simple_byte           10     6 (average)
 14364                           ;	Chosen strategy is simple_byte
 14365  004B3C  0A00               	xorlw	0	; case 0
 14366  004B3E  B4D8               	btfsc	status,2,c
 14367  004B40  D7DA               	goto	l10672
 14368  004B42  0A01               	xorlw	1	; case 1
 14369  004B44  B4D8               	btfsc	status,2,c
 14370  004B46  D7E2               	goto	l10678
 14371  004B48  0A03               	xorlw	3	; case 2
 14372  004B4A  B4D8               	btfsc	status,2,c
 14373  004B4C  D7EA               	goto	l10684
 14374  004B4E  D000               	goto	l10694
 14375  004B50                     l10694:
 14376                           
 14377                           ; BSR set to: 0
 14378                           ;Setup_Alarm_Time.c: 113: Update_Setup_Alarm_Time_Screen();
 14379  004B50  ECAF  F01C         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
 14380  004B54  0012               	return		;funcret
 14381  004B56                     __end_of_Decrease_Alarm_Time:
 14382                           	opt stack 0
 14383                           tblptru	equ	0xFF8
 14384                           tblptrh	equ	0xFF7
 14385                           tblptrl	equ	0xFF6
 14386                           tablat	equ	0xFF5
 14387                           prodh	equ	0xFF4
 14388                           prodl	equ	0xFF3
 14389                           intcon	equ	0xFF2
 14390                           intcon2	equ	0xFF1
 14391                           postinc0	equ	0xFEE
 14392                           wreg	equ	0xFE8
 14393                           postdec1	equ	0xFE5
 14394                           fsr1l	equ	0xFE1
 14395                           indf2	equ	0xFDF
 14396                           postinc2	equ	0xFDE
 14397                           fsr2h	equ	0xFDA
 14398                           fsr2l	equ	0xFD9
 14399                           status	equ	0xFD8
 14400                           
 14401 ;; *************** function _Update_Setup_Alarm_Time_Screen *****************
 14402 ;; Defined at:
 14403 ;;		line 165 in file "Setup_Alarm_Time.c"
 14404 ;; Parameters:    Size  Location     Type
 14405 ;;		None
 14406 ;; Auto vars:     Size  Location     Type
 14407 ;;		None
 14408 ;; Return value:  Size  Location     Type
 14409 ;;		None               void
 14410 ;; Registers used:
 14411 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14412 ;; Tracked objects:
 14413 ;;		On entry : 0/0
 14414 ;;		On exit  : 0/0
 14415 ;;		Unchanged: 0/0
 14416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14420 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14421 ;;Total ram usage:        0 bytes
 14422 ;; Hardware stack levels used:    1
 14423 ;; Hardware stack levels required when called:   10
 14424 ;; This function calls:
 14425 ;;		___awdiv
 14426 ;;		___awmod
 14427 ;;		_drawtext
 14428 ;;		_printf
 14429 ;; This function is called by:
 14430 ;;		_Do_Setup_Alarm_Time
 14431 ;;		_Increase_Alarm_Time
 14432 ;;		_Decrease_Alarm_Time
 14433 ;; This function uses a non-reentrant model
 14434 ;;
 14435                           
 14436                           	psect	text74
 14437  00395E                     __ptext74:
 14438                           	opt stack 0
 14439  00395E                     _Update_Setup_Alarm_Time_Screen:
 14440                           	opt stack 19
 14441                           
 14442                           ;Setup_Alarm_Time.c: 167: printf ("%x:%x:%x\r\n", setup_alarm_hour,setup_alarm_minute,se
      +                          tup_alarm_second);
 14443                           
 14444                           ;incstack = 0
 14445  00395E  0E9B               	movlw	low STR_28
 14446  003960  0100               	movlb	0	; () banked
 14447  003962  6FD9               	movwf	printf@f& (0+255),b
 14448  003964  0EFF               	movlw	high STR_28
 14449  003966  0100               	movlb	0	; () banked
 14450  003968  6FDA               	movwf	(printf@f+1)& (0+255),b
 14451  00396A  C0AE  F0DB         	movff	_setup_alarm_hour,?_printf+2
 14452  00396E  0100               	movlb	0	; () banked
 14453  003970  6BDC               	clrf	(?_printf+3)& (0+255),b
 14454  003972  C0AF  F0DD         	movff	_setup_alarm_minute,?_printf+4
 14455  003976  0100               	movlb	0	; () banked
 14456  003978  6BDE               	clrf	(?_printf+5)& (0+255),b
 14457  00397A  C0B0  F0DF         	movff	_setup_alarm_second,?_printf+6
 14458  00397E  0100               	movlb	0	; () banked
 14459  003980  6BE0               	clrf	(?_printf+7)& (0+255),b
 14460  003982  EC0E  F000         	call	_printf	;wreg free
 14461                           
 14462                           ;Setup_Alarm_Time.c: 168: setup_alarm_time[0] = (setup_alarm_hour / 10) + '0';
 14463  003986  C0AE  F017         	movff	_setup_alarm_hour,___awdiv@dividend
 14464  00398A  6A18               	clrf	___awdiv@dividend+1,c
 14465  00398C  0E00               	movlw	0
 14466  00398E  6E1A               	movwf	___awdiv@divisor+1,c
 14467  003990  0E0A               	movlw	10
 14468  003992  6E19               	movwf	___awdiv@divisor,c
 14469  003994  ECB6  F021         	call	___awdiv	;wreg free
 14470  003998  5017               	movf	?___awdiv,w,c
 14471  00399A  0F30               	addlw	48
 14472  00399C  0101               	movlb	1	; () banked
 14473  00399E  6F4D               	movwf	_setup_alarm_time& (0+255),b
 14474                           
 14475                           ; BSR set to: 1
 14476                           ;Setup_Alarm_Time.c: 169: setup_alarm_time[1] = (setup_alarm_hour % 10) + '0';
 14477  0039A0  C0AE  F03D         	movff	_setup_alarm_hour,___awmod@dividend
 14478  0039A4  6A3E               	clrf	___awmod@dividend+1,c
 14479  0039A6  0E00               	movlw	0
 14480  0039A8  6E40               	movwf	___awmod@divisor+1,c
 14481  0039AA  0E0A               	movlw	10
 14482  0039AC  6E3F               	movwf	___awmod@divisor,c
 14483  0039AE  EC1E  F023         	call	___awmod	;wreg free
 14484  0039B2  503D               	movf	?___awmod,w,c
 14485  0039B4  0F30               	addlw	48
 14486  0039B6  0101               	movlb	1	; () banked
 14487  0039B8  6F4E               	movwf	(_setup_alarm_time+1)& (0+255),b
 14488                           
 14489                           ; BSR set to: 1
 14490                           ;Setup_Alarm_Time.c: 170: setup_alarm_time[3] = (setup_alarm_minute / 10) + '0';
 14491  0039BA  C0AF  F017         	movff	_setup_alarm_minute,___awdiv@dividend
 14492  0039BE  6A18               	clrf	___awdiv@dividend+1,c
 14493  0039C0  0E00               	movlw	0
 14494  0039C2  6E1A               	movwf	___awdiv@divisor+1,c
 14495  0039C4  0E0A               	movlw	10
 14496  0039C6  6E19               	movwf	___awdiv@divisor,c
 14497  0039C8  ECB6  F021         	call	___awdiv	;wreg free
 14498  0039CC  5017               	movf	?___awdiv,w,c
 14499  0039CE  0F30               	addlw	48
 14500  0039D0  0101               	movlb	1	; () banked
 14501  0039D2  6F50               	movwf	(_setup_alarm_time+3)& (0+255),b
 14502                           
 14503                           ; BSR set to: 1
 14504                           ;Setup_Alarm_Time.c: 171: setup_alarm_time[4] = (setup_alarm_minute % 10) + '0';
 14505  0039D4  C0AF  F03D         	movff	_setup_alarm_minute,___awmod@dividend
 14506  0039D8  6A3E               	clrf	___awmod@dividend+1,c
 14507  0039DA  0E00               	movlw	0
 14508  0039DC  6E40               	movwf	___awmod@divisor+1,c
 14509  0039DE  0E0A               	movlw	10
 14510  0039E0  6E3F               	movwf	___awmod@divisor,c
 14511  0039E2  EC1E  F023         	call	___awmod	;wreg free
 14512  0039E6  503D               	movf	?___awmod,w,c
 14513  0039E8  0F30               	addlw	48
 14514  0039EA  0101               	movlb	1	; () banked
 14515  0039EC  6F51               	movwf	(_setup_alarm_time+4)& (0+255),b
 14516                           
 14517                           ; BSR set to: 1
 14518                           ;Setup_Alarm_Time.c: 172: setup_alarm_time[6] = (setup_alarm_second / 10) + '0';
 14519  0039EE  C0B0  F017         	movff	_setup_alarm_second,___awdiv@dividend
 14520  0039F2  6A18               	clrf	___awdiv@dividend+1,c
 14521  0039F4  0E00               	movlw	0
 14522  0039F6  6E1A               	movwf	___awdiv@divisor+1,c
 14523  0039F8  0E0A               	movlw	10
 14524  0039FA  6E19               	movwf	___awdiv@divisor,c
 14525  0039FC  ECB6  F021         	call	___awdiv	;wreg free
 14526  003A00  5017               	movf	?___awdiv,w,c
 14527  003A02  0F30               	addlw	48
 14528  003A04  0101               	movlb	1	; () banked
 14529  003A06  6F53               	movwf	(_setup_alarm_time+6)& (0+255),b
 14530                           
 14531                           ; BSR set to: 1
 14532                           ;Setup_Alarm_Time.c: 173: setup_alarm_time[7] = (setup_alarm_second % 10) + '0';
 14533  003A08  C0B0  F03D         	movff	_setup_alarm_second,___awmod@dividend
 14534  003A0C  6A3E               	clrf	___awmod@dividend+1,c
 14535  003A0E  0E00               	movlw	0
 14536  003A10  6E40               	movwf	___awmod@divisor+1,c
 14537  003A12  0E0A               	movlw	10
 14538  003A14  6E3F               	movwf	___awmod@divisor,c
 14539  003A16  EC1E  F023         	call	___awmod	;wreg free
 14540  003A1A  503D               	movf	?___awmod,w,c
 14541  003A1C  0F30               	addlw	48
 14542  003A1E  0101               	movlb	1	; () banked
 14543  003A20  6F54               	movwf	(_setup_alarm_time+7)& (0+255),b
 14544                           
 14545                           ;Setup_Alarm_Time.c: 174: drawtext(15, 52, setup_alarm_time, 0x07FF, 0x0000, 2);
 14546  003A22  0E34               	movlw	52
 14547  003A24  6E39               	movwf	drawtext@y,c
 14548  003A26  0E4D               	movlw	low _setup_alarm_time
 14549  003A28  6E3A               	movwf	drawtext@_text,c
 14550  003A2A  0E01               	movlw	high _setup_alarm_time
 14551  003A2C  6E3B               	movwf	drawtext@_text+1,c
 14552  003A2E  0E07               	movlw	7
 14553  003A30  6E3D               	movwf	drawtext@color+1,c
 14554  003A32  683C               	setf	drawtext@color,c
 14555  003A34  0E00               	movlw	0
 14556  003A36  6E3F               	movwf	drawtext@bg+1,c
 14557  003A38  0E00               	movlw	0
 14558  003A3A  6E3E               	movwf	drawtext@bg,c
 14559  003A3C  0E02               	movlw	2
 14560  003A3E  6E40               	movwf	drawtext@size,c
 14561  003A40  0E0F               	movlw	15
 14562  003A42  EC08  F01E         	call	_drawtext
 14563  003A46  0012               	return		;funcret
 14564  003A48                     __end_of_Update_Setup_Alarm_Time_Screen:
 14565                           	opt stack 0
 14566                           tblptru	equ	0xFF8
 14567                           tblptrh	equ	0xFF7
 14568                           tblptrl	equ	0xFF6
 14569                           tablat	equ	0xFF5
 14570                           prodh	equ	0xFF4
 14571                           prodl	equ	0xFF3
 14572                           intcon	equ	0xFF2
 14573                           intcon2	equ	0xFF1
 14574                           postinc0	equ	0xFEE
 14575                           wreg	equ	0xFE8
 14576                           postdec1	equ	0xFE5
 14577                           fsr1l	equ	0xFE1
 14578                           indf2	equ	0xFDF
 14579                           postinc2	equ	0xFDE
 14580                           fsr2h	equ	0xFDA
 14581                           fsr2l	equ	0xFD9
 14582                           status	equ	0xFD8
 14583                           
 14584 ;; *************** function _printf *****************
 14585 ;; Defined at:
 14586 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 14587 ;; Parameters:    Size  Location     Type
 14588 ;;  f               2    0[BANK0 ] PTR const unsigned char 
 14589 ;;		 -> STR_38(22), STR_37(16), STR_28(11), STR_6(22), 
 14590 ;;		 -> STR_5(13), STR_4(19), STR_3(22), STR_2(21), 
 14591 ;;		 -> STR_1(30), 
 14592 ;; Auto vars:     Size  Location     Type
 14593 ;;  idx             1    3[BANK1 ] unsigned char 
 14594 ;;  val             4   16[BANK1 ] unsigned long 
 14595 ;;  tmpval          4    8[BANK1 ] struct .
 14596 ;;  fval            3   22[BANK1 ] struct .
 14597 ;;  cp              3    0        PTR const unsigned char 
 14598 ;;  flag            2   20[BANK1 ] unsigned short 
 14599 ;;  exp             2   14[BANK1 ] int 
 14600 ;;  width           2   12[BANK1 ] int 
 14601 ;;  prec            2    6[BANK1 ] int 
 14602 ;;  ap              2    4[BANK1 ] PTR void [1]
 14603 ;;		 -> ?_printf(2), 
 14604 ;;  len             2    0        unsigned int 
 14605 ;;  c               1   25[BANK1 ] char 
 14606 ;;  d               1    0        unsigned char 
 14607 ;; Return value:  Size  Location     Type
 14608 ;;                  2    0[BANK0 ] int 
 14609 ;; Registers used:
 14610 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14611 ;; Tracked objects:
 14612 ;;		On entry : 0/0
 14613 ;;		On exit  : 0/0
 14614 ;;		Unchanged: 0/0
 14615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14616 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14617 ;;      Locals:         0       0      26       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14618 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14619 ;;      Totals:         0      20      26       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14620 ;;Total ram usage:       46 bytes
 14621 ;; Hardware stack levels used:    1
 14622 ;; Hardware stack levels required when called:    6
 14623 ;; This function calls:
 14624 ;;		___awdiv
 14625 ;;		___ftadd
 14626 ;;		___ftge
 14627 ;;		___ftmul
 14628 ;;		___ftneg
 14629 ;;		___ftsub
 14630 ;;		___fttol
 14631 ;;		___lldiv
 14632 ;;		___llmod
 14633 ;;		___lltoft
 14634 ;;		___wmul
 14635 ;;		__div_to_l_
 14636 ;;		__tdiv_to_l_
 14637 ;;		_fround
 14638 ;;		_isdigit
 14639 ;;		_putch
 14640 ;;		_scale
 14641 ;; This function is called by:
 14642 ;;		_main
 14643 ;;		_Update_Setup_Alarm_Time_Screen
 14644 ;;		_check_for_button_input
 14645 ;; This function uses a non-reentrant model
 14646 ;;
 14647                           
 14648                           	psect	text75
 14649  00001C                     __ptext75:
 14650                           	opt stack 0
 14651  00001C                     _printf:
 14652                           	opt stack 24
 14653                           
 14654                           ;doprnt.c: 466: va_list ap;
 14655                           ;doprnt.c: 499: signed char c;
 14656                           ;doprnt.c: 501: int width;
 14657                           ;doprnt.c: 504: int prec;
 14658                           ;doprnt.c: 508: unsigned short flag;
 14659                           ;doprnt.c: 515: char d;
 14660                           ;doprnt.c: 516: double fval;
 14661                           ;doprnt.c: 517: int exp;
 14662                           ;doprnt.c: 523: union {
 14663                           ;doprnt.c: 524: unsigned long vd;
 14664                           ;doprnt.c: 525: double integ;
 14665                           ;doprnt.c: 526: } tmpval;
 14666                           ;doprnt.c: 528: unsigned long val;
 14667                           ;doprnt.c: 529: unsigned len;
 14668                           ;doprnt.c: 530: const char * cp;
 14669                           ;doprnt.c: 533: *ap = __va_start();
 14670                           
 14671                           ;incstack = 0
 14672  00001C  0EDB               	movlw	low (?_printf+2)
 14673  00001E  0101               	movlb	1	; () banked
 14674  000020  6F80               	movwf	printf@ap& (0+255),b
 14675  000022  0E00               	movlw	high (?_printf+2)
 14676  000024  0101               	movlb	1	; () banked
 14677  000026  6F81               	movwf	(printf@ap+1)& (0+255),b
 14678                           
 14679                           ;doprnt.c: 536: while(c = *f++) {
 14680  000028  EF1E  F006         	goto	l10280
 14681  00002C                     l9994:
 14682                           
 14683                           ; BSR set to: 1
 14684                           ;doprnt.c: 538: if(c != '%')
 14685  00002C  0E25               	movlw	37
 14686  00002E  0101               	movlb	1	; () banked
 14687  000030  1995               	xorwf	printf@c& (0+255),w,b
 14688  000032  B4D8               	btfsc	status,2,c
 14689  000034  D006               	goto	l9998
 14690                           
 14691                           ; BSR set to: 1
 14692                           ;doprnt.c: 540: {
 14693                           ;doprnt.c: 541: (putch(c) );
 14694  000036  0101               	movlb	1	; () banked
 14695  000038  5195               	movf	printf@c& (0+255),w,b
 14696  00003A  ECA5  F02A         	call	_putch
 14697                           
 14698                           ;doprnt.c: 542: continue;
 14699  00003E  EF1E  F006         	goto	l10280
 14700  000042                     l9998:
 14701                           
 14702                           ;doprnt.c: 543: }
 14703                           ;doprnt.c: 546: width = 0;
 14704  000042  0E00               	movlw	0
 14705  000044  0101               	movlb	1	; () banked
 14706  000046  6F89               	movwf	(printf@width+1)& (0+255),b
 14707  000048  0E00               	movlw	0
 14708  00004A  6F88               	movwf	printf@width& (0+255),b
 14709                           
 14710                           ;doprnt.c: 548: flag = 0;
 14711  00004C  0E00               	movlw	0
 14712  00004E  0101               	movlb	1	; () banked
 14713  000050  6F91               	movwf	(printf@flag+1)& (0+255),b
 14714  000052  0E00               	movlw	0
 14715  000054  6F90               	movwf	printf@flag& (0+255),b
 14716                           
 14717                           ; BSR set to: 1
 14718                           ;doprnt.c: 551: switch(*f) {
 14719                           
 14720                           ;doprnt.c: 550: for(;;) {
 14721  000056  D007               	goto	l10004
 14722  000058                     l10000:
 14723                           
 14724                           ;doprnt.c: 580: flag |= 0x04;
 14725  000058  0101               	movlb	1	; () banked
 14726  00005A  8590               	bsf	printf@flag& (0+255),2,b
 14727                           
 14728                           ;doprnt.c: 581: f++;
 14729  00005C  0100               	movlb	0	; () banked
 14730  00005E  4BD9               	infsnz	printf@f& (0+255),f,b
 14731  000060  2BDA               	incf	(printf@f+1)& (0+255),f,b
 14732                           
 14733                           ;doprnt.c: 582: continue;
 14734  000062  D001               	goto	l10004
 14735                           
 14736                           ; BSR set to: 0
 14737                           ;doprnt.c: 584: }
 14738  000064  D00B               	goto	l10006
 14739  000066                     l10004:
 14740  000066  C0D9  FFF6         	movff	printf@f,tblptrl
 14741  00006A  C0DA  FFF7         	movff	printf@f+1,tblptrh
 14742  00006E                     	if	0	;tblptru may be non-zero
 14743  00006E                     	endif
 14744  00006E                     	if	0	;tblptru may be non-zero
 14745  00006E                     	endif
 14746  00006E  0008               	tblrd		*
 14747  000070  50F5               	movf	tablat,w,c
 14748                           
 14749                           ; Switch size 1, requested type "space"
 14750                           ; Number of cases is 1, Range of values is 48 to 48
 14751                           ; switch strategies available:
 14752                           ; Name         Instructions Cycles
 14753                           ; simple_byte            4     3 (average)
 14754                           ;	Chosen strategy is simple_byte
 14755  000072  0A30               	xorlw	48	; case 48
 14756  000074  B4D8               	btfsc	status,2,c
 14757  000076  D7F0               	goto	l10000
 14758                           
 14759                           ;doprnt.c: 585: break;
 14760  000078  D001               	goto	l10006
 14761                           
 14762                           ;doprnt.c: 586: }
 14763  00007A  D7F5               	goto	l10004
 14764  00007C                     l10006:
 14765                           
 14766                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 14767  00007C  C0D9  FFF6         	movff	printf@f,tblptrl
 14768  000080  C0DA  FFF7         	movff	printf@f+1,tblptrh
 14769  000084                     	if	0	;tblptru may be non-zero
 14770  000084                     	endif
 14771  000084                     	if	0	;tblptru may be non-zero
 14772  000084                     	endif
 14773  000084  0008               	tblrd		*
 14774  000086  50F5               	movf	tablat,w,c
 14775  000088  EC12  F029         	call	_isdigit
 14776  00008C  A0D8               	btfss	status,0,c
 14777  00008E  D04D               	goto	l10024
 14778                           
 14779                           ;doprnt.c: 598: width = 0;
 14780  000090  0E00               	movlw	0
 14781  000092  0101               	movlb	1	; () banked
 14782  000094  6F89               	movwf	(printf@width+1)& (0+255),b
 14783  000096  0E00               	movlw	0
 14784  000098  6F88               	movwf	printf@width& (0+255),b
 14785  00009A  D000               	goto	l10010
 14786  00009C                     l10010:
 14787                           
 14788                           ;doprnt.c: 600: width *= 10;
 14789  00009C  C188  F011         	movff	printf@width,___wmul@multiplier
 14790  0000A0  C189  F012         	movff	printf@width+1,___wmul@multiplier+1
 14791  0000A4  0E00               	movlw	0
 14792  0000A6  6E14               	movwf	___wmul@multiplicand+1,c
 14793  0000A8  0E0A               	movlw	10
 14794  0000AA  6E13               	movwf	___wmul@multiplicand,c
 14795  0000AC  EC90  F028         	call	___wmul	;wreg free
 14796  0000B0  C011  F188         	movff	?___wmul,printf@width
 14797  0000B4  C012  F189         	movff	?___wmul+1,printf@width+1
 14798                           
 14799                           ;doprnt.c: 601: width += *f++ - '0';
 14800  0000B8  0ED0               	movlw	208
 14801  0000BA  0100               	movlb	0	; () banked
 14802  0000BC  6FE7               	movwf	??_printf& (0+255),b
 14803  0000BE  0EFF               	movlw	255
 14804  0000C0  0100               	movlb	0	; () banked
 14805  0000C2  6FE8               	movwf	(??_printf+1)& (0+255),b
 14806  0000C4  C0D9  FFF6         	movff	printf@f,tblptrl
 14807  0000C8  C0DA  FFF7         	movff	printf@f+1,tblptrh
 14808  0000CC                     	if	0	;tblptru may be non-zero
 14809  0000CC                     	endif
 14810  0000CC                     	if	0	;tblptru may be non-zero
 14811  0000CC                     	endif
 14812  0000CC  0008               	tblrd		*
 14813  0000CE  50F5               	movf	tablat,w,c
 14814  0000D0  0100               	movlb	0	; () banked
 14815  0000D2  6FE9               	movwf	(??_printf+2)& (0+255),b
 14816  0000D4  6BEA               	clrf	(??_printf+3)& (0+255),b
 14817  0000D6  0100               	movlb	0	; () banked
 14818  0000D8  51E7               	movf	??_printf& (0+255),w,b
 14819  0000DA  0100               	movlb	0	; () banked
 14820  0000DC  27E9               	addwf	(??_printf+2)& (0+255),f,b
 14821  0000DE  0100               	movlb	0	; () banked
 14822  0000E0  51E8               	movf	(??_printf+1)& (0+255),w,b
 14823  0000E2  0100               	movlb	0	; () banked
 14824  0000E4  23EA               	addwfc	(??_printf+3)& (0+255),f,b
 14825  0000E6  0100               	movlb	0	; () banked
 14826  0000E8  51E9               	movf	(??_printf+2)& (0+255),w,b
 14827  0000EA  0101               	movlb	1	; () banked
 14828  0000EC  2788               	addwf	printf@width& (0+255),f,b
 14829  0000EE  0100               	movlb	0	; () banked
 14830  0000F0  51EA               	movf	(??_printf+3)& (0+255),w,b
 14831  0000F2  0101               	movlb	1	; () banked
 14832  0000F4  2389               	addwfc	(printf@width+1)& (0+255),f,b
 14833                           
 14834                           ; BSR set to: 1
 14835  0000F6  0100               	movlb	0	; () banked
 14836  0000F8  4BD9               	infsnz	printf@f& (0+255),f,b
 14837  0000FA  2BDA               	incf	(printf@f+1)& (0+255),f,b
 14838                           
 14839                           ; BSR set to: 0
 14840                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 14841  0000FC  C0D9  FFF6         	movff	printf@f,tblptrl
 14842  000100  C0DA  FFF7         	movff	printf@f+1,tblptrh
 14843  000104                     	if	0	;tblptru may be non-zero
 14844  000104                     	endif
 14845  000104                     	if	0	;tblptru may be non-zero
 14846  000104                     	endif
 14847  000104  0008               	tblrd		*
 14848  000106  50F5               	movf	tablat,w,c
 14849  000108  EC12  F029         	call	_isdigit
 14850  00010C  A0D8               	btfss	status,0,c
 14851  00010E  D00D               	goto	l10024
 14852  000110  D7C5               	goto	l10010
 14853                           
 14854                           ;doprnt.c: 608: }
 14855                           ;doprnt.c: 635: switch(c = *f++) {
 14856  000112  D00B               	goto	l10024
 14857                           
 14858                           ;doprnt.c: 638: goto alldone;
 14859                           
 14860                           ;doprnt.c: 637: case 0:
 14861  000114  EF2F  F006         	goto	l1598
 14862  000118                     l10018:
 14863                           
 14864                           ;doprnt.c: 663: flag |= 0x400;
 14865  000118  0101               	movlb	1	; () banked
 14866  00011A  8591               	bsf	(printf@flag+1)& (0+255),2,b
 14867                           
 14868                           ; BSR set to: 1
 14869                           ;doprnt.c: 698: case 'i':
 14870                           ;doprnt.c: 699: break;
 14871                           
 14872                           ; BSR set to: 1
 14873                           
 14874                           ;doprnt.c: 697: case 'd':
 14875                           
 14876                           ;doprnt.c: 664: break;
 14877  00011C  D024               	goto	l10026
 14878  00011E                     l10020:
 14879                           
 14880                           ; BSR set to: 1
 14881                           ;doprnt.c: 721: flag |= 0x80;
 14882  00011E  0101               	movlb	1	; () banked
 14883  000120  8F90               	bsf	printf@flag& (0+255),7,b
 14884                           
 14885                           ;doprnt.c: 723: break;
 14886  000122  D021               	goto	l10026
 14887                           
 14888                           ; BSR set to: 1
 14889                           ;doprnt.c: 813: continue;
 14890                           
 14891                           ;doprnt.c: 802: default:
 14892  000124  EF1E  F006         	goto	l10280
 14893                           
 14894                           ; BSR set to: 1
 14895                           ;doprnt.c: 822: }
 14896  000128  D01E               	goto	l10026
 14897  00012A                     l10024:
 14898  00012A  C0D9  FFF6         	movff	printf@f,tblptrl
 14899  00012E  C0DA  FFF7         	movff	printf@f+1,tblptrh
 14900  000132  0100               	movlb	0	; () banked
 14901  000134  4BD9               	infsnz	printf@f& (0+255),f,b
 14902  000136  2BDA               	incf	(printf@f+1)& (0+255),f,b
 14903  000138                     	if	0	;tblptru may be non-zero
 14904  000138                     	endif
 14905  000138                     	if	0	;tblptru may be non-zero
 14906  000138                     	endif
 14907  000138  0008               	tblrd		*
 14908  00013A  CFF5 F195          	movff	tablat,printf@c
 14909  00013E  0101               	movlb	1	; () banked
 14910  000140  5195               	movf	printf@c& (0+255),w,b
 14911                           
 14912                           ; Switch size 1, requested type "space"
 14913                           ; Number of cases is 5, Range of values is 0 to 120
 14914                           ; switch strategies available:
 14915                           ; Name         Instructions Cycles
 14916                           ; simple_byte           16     9 (average)
 14917                           ;	Chosen strategy is simple_byte
 14918  000142  0A00               	xorlw	0	; case 0
 14919  000144  B4D8               	btfsc	status,2,c
 14920  000146  EF2F  F006         	goto	l1598
 14921  00014A  0A64               	xorlw	100	; case 100
 14922  00014C  B4D8               	btfsc	status,2,c
 14923  00014E  D00B               	goto	l10026
 14924  000150  0A02               	xorlw	2	; case 102
 14925  000152  B4D8               	btfsc	status,2,c
 14926  000154  D7E1               	goto	l10018
 14927  000156  0A0F               	xorlw	15	; case 105
 14928  000158  B4D8               	btfsc	status,2,c
 14929  00015A  D005               	goto	l10026
 14930  00015C  0A11               	xorlw	17	; case 120
 14931  00015E  B4D8               	btfsc	status,2,c
 14932  000160  D7DE               	goto	l10020
 14933  000162  EF1E  F006         	goto	l10280
 14934  000166                     l10026:
 14935                           
 14936                           ; BSR set to: 1
 14937                           ;doprnt.c: 825: if(flag & (0x700)) {
 14938  000166  0E07               	movlw	7
 14939  000168  0101               	movlb	1	; () banked
 14940  00016A  1591               	andwf	(printf@flag+1)& (0+255),w,b
 14941  00016C  B4D8               	btfsc	status,2,c
 14942  00016E  D39A               	goto	l1516
 14943                           
 14944                           ; BSR set to: 1
 14945                           ;doprnt.c: 829: prec = 6;
 14946  000170  0E00               	movlw	0
 14947  000172  0101               	movlb	1	; () banked
 14948  000174  6F83               	movwf	(printf@prec+1)& (0+255),b
 14949  000176  0E06               	movlw	6
 14950  000178  6F82               	movwf	printf@prec& (0+255),b
 14951                           
 14952                           ; BSR set to: 1
 14953                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
 14954  00017A  C180  FFD9         	movff	printf@ap,fsr2l
 14955  00017E  C181  FFDA         	movff	printf@ap+1,fsr2h
 14956  000182  CFDE F192          	movff	postinc2,printf@fval
 14957  000186  CFDE F193          	movff	postinc2,printf@fval+1
 14958  00018A  CFDD F194          	movff	postdec2,printf@fval+2
 14959                           
 14960                           ; BSR set to: 1
 14961  00018E  0E03               	movlw	3
 14962  000190  0101               	movlb	1	; () banked
 14963  000192  2780               	addwf	printf@ap& (0+255),f,b
 14964  000194  0E00               	movlw	0
 14965  000196  2381               	addwfc	(printf@ap+1)& (0+255),f,b
 14966                           
 14967                           ; BSR set to: 1
 14968                           ;doprnt.c: 831: if(fval < 0.0) {
 14969  000198  0101               	movlb	1	; () banked
 14970  00019A  AF94               	btfss	(printf@fval+2)& (0+255),7,b
 14971  00019C  D012               	goto	l10040
 14972                           
 14973                           ; BSR set to: 1
 14974                           ;doprnt.c: 832: fval = -fval;
 14975  00019E  C192  F011         	movff	printf@fval,___ftneg@f1
 14976  0001A2  C193  F012         	movff	printf@fval+1,___ftneg@f1+1
 14977  0001A6  C194  F013         	movff	printf@fval+2,___ftneg@f1+2
 14978  0001AA  ECDC  F028         	call	___ftneg	;wreg free
 14979  0001AE  C011  F192         	movff	?___ftneg,printf@fval
 14980  0001B2  C012  F193         	movff	?___ftneg+1,printf@fval+1
 14981  0001B6  C013  F194         	movff	?___ftneg+2,printf@fval+2
 14982                           
 14983                           ;doprnt.c: 833: flag |= 0x03;
 14984  0001BA  0E03               	movlw	3
 14985  0001BC  0101               	movlb	1	; () banked
 14986  0001BE  1390               	iorwf	printf@flag& (0+255),f,b
 14987  0001C0  D000               	goto	l10040
 14988  0001C2                     l10040:
 14989                           
 14990                           ; BSR set to: 1
 14991                           ;doprnt.c: 834: }
 14992                           ;doprnt.c: 835: exp = 0;
 14993  0001C2  0E00               	movlw	0
 14994  0001C4  0101               	movlb	1	; () banked
 14995  0001C6  6F8B               	movwf	(printf@exp+1)& (0+255),b
 14996  0001C8  0E00               	movlw	0
 14997  0001CA  6F8A               	movwf	printf@exp& (0+255),b
 14998                           
 14999                           ; BSR set to: 1
 15000                           ;doprnt.c: 836: if( fval!=0) {
 15001  0001CC  0101               	movlb	1	; () banked
 15002  0001CE  5192               	movf	printf@fval& (0+255),w,b
 15003  0001D0  0101               	movlb	1	; () banked
 15004  0001D2  1193               	iorwf	(printf@fval+1)& (0+255),w,b
 15005  0001D4  0101               	movlb	1	; () banked
 15006  0001D6  1194               	iorwf	(printf@fval+2)& (0+255),w,b
 15007  0001D8  B4D8               	btfsc	status,2,c
 15008  0001DA  D093               	goto	l10068
 15009                           
 15010                           ; BSR set to: 1
 15011                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
 15012  0001DC  0E82               	movlw	130
 15013  0001DE  0100               	movlb	0	; () banked
 15014  0001E0  6FE7               	movwf	??_printf& (0+255),b
 15015  0001E2  0EFF               	movlw	255
 15016  0001E4  0100               	movlb	0	; () banked
 15017  0001E6  6FE8               	movwf	(??_printf+1)& (0+255),b
 15018  0001E8  C192  F0E9         	movff	printf@fval,??_printf+2
 15019  0001EC  C193  F0EA         	movff	printf@fval+1,??_printf+3
 15020  0001F0  C194  F0EB         	movff	printf@fval+2,??_printf+4
 15021  0001F4  C195  F0EC         	movff	printf@fval+3,??_printf+5
 15022  0001F8  0E10               	movlw	16
 15023  0001FA  D006               	goto	u8910
 15024  0001FC                     u8915:
 15025  0001FC  0100               	movlb	0	; () banked
 15026  0001FE  90D8               	bcf	status,0,c
 15027  000200  33EC               	rrcf	(??_printf+5)& (0+255),f,b
 15028  000202  33EB               	rrcf	(??_printf+4)& (0+255),f,b
 15029  000204  33EA               	rrcf	(??_printf+3)& (0+255),f,b
 15030  000206  33E9               	rrcf	(??_printf+2)& (0+255),f,b
 15031  000208                     u8910:
 15032  000208  2EE8               	decfsz	wreg,f,c
 15033  00020A  D7F8               	goto	u8915
 15034  00020C  0100               	movlb	0	; () banked
 15035  00020E  51E9               	movf	(??_printf+2)& (0+255),w,b
 15036  000210  0100               	movlb	0	; () banked
 15037  000212  25E7               	addwf	??_printf& (0+255),w,b
 15038  000214  0101               	movlb	1	; () banked
 15039  000216  6F8A               	movwf	printf@exp& (0+255),b
 15040  000218  0E00               	movlw	0
 15041  00021A  0100               	movlb	0	; () banked
 15042  00021C  21E8               	addwfc	(??_printf+1)& (0+255),w,b
 15043  00021E  0101               	movlb	1	; () banked
 15044  000220  6F8B               	movwf	(printf@exp+1)& (0+255),b
 15045                           
 15046                           ; BSR set to: 1
 15047                           ;doprnt.c: 838: exp--;
 15048  000222  0101               	movlb	1	; () banked
 15049  000224  078A               	decf	printf@exp& (0+255),f,b
 15050  000226  A0D8               	btfss	status,0,c
 15051  000228  078B               	decf	(printf@exp+1)& (0+255),f,b
 15052                           
 15053                           ; BSR set to: 1
 15054                           ;doprnt.c: 839: exp *= 3;
 15055  00022A  C18A  F011         	movff	printf@exp,___wmul@multiplier
 15056  00022E  C18B  F012         	movff	printf@exp+1,___wmul@multiplier+1
 15057  000232  0E00               	movlw	0
 15058  000234  6E14               	movwf	___wmul@multiplicand+1,c
 15059  000236  0E03               	movlw	3
 15060  000238  6E13               	movwf	___wmul@multiplicand,c
 15061  00023A  EC90  F028         	call	___wmul	;wreg free
 15062  00023E  C011  F18A         	movff	?___wmul,printf@exp
 15063  000242  C012  F18B         	movff	?___wmul+1,printf@exp+1
 15064                           
 15065                           ;doprnt.c: 840: exp /= 10;
 15066  000246  C18A  F017         	movff	printf@exp,___awdiv@dividend
 15067  00024A  C18B  F018         	movff	printf@exp+1,___awdiv@dividend+1
 15068  00024E  0E00               	movlw	0
 15069  000250  6E1A               	movwf	___awdiv@divisor+1,c
 15070  000252  0E0A               	movlw	10
 15071  000254  6E19               	movwf	___awdiv@divisor,c
 15072  000256  ECB6  F021         	call	___awdiv	;wreg free
 15073  00025A  C017  F18A         	movff	?___awdiv,printf@exp
 15074  00025E  C018  F18B         	movff	?___awdiv+1,printf@exp+1
 15075                           
 15076                           ;doprnt.c: 841: if(exp < 0)
 15077  000262  0101               	movlb	1	; () banked
 15078  000264  AF8B               	btfss	(printf@exp+1)& (0+255),7,b
 15079  000266  D005               	goto	l10056
 15080                           
 15081                           ; BSR set to: 1
 15082                           ;doprnt.c: 842: exp--;
 15083  000268  0101               	movlb	1	; () banked
 15084  00026A  078A               	decf	printf@exp& (0+255),f,b
 15085  00026C  A0D8               	btfss	status,0,c
 15086  00026E  078B               	decf	(printf@exp+1)& (0+255),f,b
 15087  000270  D000               	goto	l10056
 15088  000272                     l10056:
 15089                           
 15090                           ; BSR set to: 1
 15091                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
 15092  000272  0101               	movlb	1	; () banked
 15093  000274  518A               	movf	printf@exp& (0+255),w,b
 15094  000276  0800               	sublw	0
 15095  000278  EC42  F009         	call	_scale
 15096  00027C  C043  F184         	movff	?_scale,printf@tmpval
 15097  000280  C044  F185         	movff	?_scale+1,printf@tmpval+1
 15098  000284  C045  F186         	movff	?_scale+2,printf@tmpval+2
 15099                           
 15100                           ;doprnt.c: 847: tmpval.integ *= fval;
 15101  000288  C184  F01F         	movff	printf@tmpval,___ftmul@f1
 15102  00028C  C185  F020         	movff	printf@tmpval+1,___ftmul@f1+1
 15103  000290  C186  F021         	movff	printf@tmpval+2,___ftmul@f1+2
 15104  000294  C192  F022         	movff	printf@fval,___ftmul@f2
 15105  000298  C193  F023         	movff	printf@fval+1,___ftmul@f2+1
 15106  00029C  C194  F024         	movff	printf@fval+2,___ftmul@f2+2
 15107  0002A0  EC41  F01B         	call	___ftmul	;wreg free
 15108  0002A4  C01F  F184         	movff	?___ftmul,printf@tmpval
 15109  0002A8  C020  F185         	movff	?___ftmul+1,printf@tmpval+1
 15110  0002AC  C021  F186         	movff	?___ftmul+2,printf@tmpval+2
 15111                           
 15112                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
 15113  0002B0  C184  F011         	movff	printf@tmpval,___ftge@ff1
 15114  0002B4  C185  F012         	movff	printf@tmpval+1,___ftge@ff1+1
 15115  0002B8  C186  F013         	movff	printf@tmpval+2,___ftge@ff1+2
 15116  0002BC  0E00               	movlw	0
 15117  0002BE  6E14               	movwf	___ftge@ff2,c
 15118  0002C0  0E80               	movlw	128
 15119  0002C2  6E15               	movwf	___ftge@ff2+1,c
 15120  0002C4  0E3F               	movlw	63
 15121  0002C6  6E16               	movwf	___ftge@ff2+2,c
 15122  0002C8  EC01  F022         	call	___ftge	;wreg free
 15123  0002CC  B0D8               	btfsc	status,0,c
 15124  0002CE  D005               	goto	l10064
 15125                           
 15126                           ;doprnt.c: 849: exp--;
 15127  0002D0  0101               	movlb	1	; () banked
 15128  0002D2  078A               	decf	printf@exp& (0+255),f,b
 15129  0002D4  A0D8               	btfss	status,0,c
 15130  0002D6  078B               	decf	(printf@exp+1)& (0+255),f,b
 15131  0002D8  D014               	goto	l10068
 15132  0002DA                     l10064:
 15133                           
 15134                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
 15135  0002DA  C184  F011         	movff	printf@tmpval,___ftge@ff1
 15136  0002DE  C185  F012         	movff	printf@tmpval+1,___ftge@ff1+1
 15137  0002E2  C186  F013         	movff	printf@tmpval+2,___ftge@ff1+2
 15138  0002E6  0E00               	movlw	0
 15139  0002E8  6E14               	movwf	___ftge@ff2,c
 15140  0002EA  0E20               	movlw	32
 15141  0002EC  6E15               	movwf	___ftge@ff2+1,c
 15142  0002EE  0E41               	movlw	65
 15143  0002F0  6E16               	movwf	___ftge@ff2+2,c
 15144  0002F2  EC01  F022         	call	___ftge	;wreg free
 15145  0002F6  A0D8               	btfss	status,0,c
 15146  0002F8  D004               	goto	l10068
 15147                           
 15148                           ;doprnt.c: 851: exp++;
 15149  0002FA  0101               	movlb	1	; () banked
 15150  0002FC  4B8A               	infsnz	printf@exp& (0+255),f,b
 15151  0002FE  2B8B               	incf	(printf@exp+1)& (0+255),f,b
 15152                           
 15153                           ; BSR set to: 1
 15154                           
 15155                           ; BSR set to: 1
 15156  000300  D000               	goto	l10068
 15157  000302                     l10068:
 15158                           
 15159                           ;doprnt.c: 852: }
 15160                           ;doprnt.c: 1112: if(prec <= 12)
 15161  000302  0101               	movlb	1	; () banked
 15162  000304  BF83               	btfsc	(printf@prec+1)& (0+255),7,b
 15163  000306  D008               	goto	l10070
 15164  000308  0101               	movlb	1	; () banked
 15165  00030A  5183               	movf	(printf@prec+1)& (0+255),w,b
 15166  00030C  E11E               	bnz	l10072
 15167  00030E  0E0D               	movlw	13
 15168  000310  0101               	movlb	1	; () banked
 15169  000312  5D82               	subwf	printf@prec& (0+255),w,b
 15170  000314  B0D8               	btfsc	status,0,c
 15171  000316  D019               	goto	l10072
 15172  000318                     l10070:
 15173                           
 15174                           ; BSR set to: 1
 15175                           ;doprnt.c: 1113: fval += fround(prec);
 15176  000318  C192  F04D         	movff	printf@fval,___ftadd@f1
 15177  00031C  C193  F04E         	movff	printf@fval+1,___ftadd@f1+1
 15178  000320  C194  F04F         	movff	printf@fval+2,___ftadd@f1+2
 15179  000324  0101               	movlb	1	; () banked
 15180  000326  5182               	movf	printf@prec& (0+255),w,b
 15181  000328  ECA9  F00F         	call	_fround
 15182  00032C  C043  F050         	movff	?_fround,___ftadd@f2
 15183  000330  C044  F051         	movff	?_fround+1,___ftadd@f2+1
 15184  000334  C045  F052         	movff	?_fround+2,___ftadd@f2+2
 15185  000338  ECCB  F010         	call	___ftadd	;wreg free
 15186  00033C  C04D  F192         	movff	?___ftadd,printf@fval
 15187  000340  C04E  F193         	movff	?___ftadd+1,printf@fval+1
 15188  000344  C04F  F194         	movff	?___ftadd+2,printf@fval+2
 15189  000348  D000               	goto	l10072
 15190  00034A                     l10072:
 15191                           
 15192                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
 15193  00034A  0101               	movlb	1	; () banked
 15194  00034C  BF8B               	btfsc	(printf@exp+1)& (0+255),7,b
 15195  00034E  D008               	goto	l10074
 15196  000350  0101               	movlb	1	; () banked
 15197  000352  518B               	movf	(printf@exp+1)& (0+255),w,b
 15198  000354  E128               	bnz	l10080
 15199  000356  0E0A               	movlw	10
 15200  000358  0101               	movlb	1	; () banked
 15201  00035A  5D8A               	subwf	printf@exp& (0+255),w,b
 15202  00035C  B0D8               	btfsc	status,0,c
 15203  00035E  D023               	goto	l10080
 15204  000360                     l10074:
 15205                           
 15206                           ; BSR set to: 1
 15207  000360  0101               	movlb	1	; () banked
 15208  000362  5192               	movf	printf@fval& (0+255),w,b
 15209  000364  0101               	movlb	1	; () banked
 15210  000366  1193               	iorwf	(printf@fval+1)& (0+255),w,b
 15211  000368  0101               	movlb	1	; () banked
 15212  00036A  1194               	iorwf	(printf@fval+2)& (0+255),w,b
 15213  00036C  B4D8               	btfsc	status,2,c
 15214  00036E  D077               	goto	l10094
 15215                           
 15216                           ; BSR set to: 1
 15217  000370  C192  F02E         	movff	printf@fval,___fttol@f1
 15218  000374  C193  F02F         	movff	printf@fval+1,___fttol@f1+1
 15219  000378  C194  F030         	movff	printf@fval+2,___fttol@f1+2
 15220  00037C  EC24  F01D         	call	___fttol	;wreg free
 15221  000380  502E               	movf	?___fttol,w,c
 15222  000382  102F               	iorwf	?___fttol+1,w,c
 15223  000384  1030               	iorwf	?___fttol+2,w,c
 15224  000386  1031               	iorwf	?___fttol+3,w,c
 15225  000388  A4D8               	btfss	status,2,c
 15226  00038A  D069               	goto	l10094
 15227  00038C  0101               	movlb	1	; () banked
 15228  00038E  BF8B               	btfsc	(printf@exp+1)& (0+255),7,b
 15229  000390  D066               	goto	l10094
 15230  000392  0101               	movlb	1	; () banked
 15231  000394  518B               	movf	(printf@exp+1)& (0+255),w,b
 15232  000396  E107               	bnz	l10080
 15233  000398  0E02               	movlw	2
 15234  00039A  0101               	movlb	1	; () banked
 15235  00039C  5D8A               	subwf	printf@exp& (0+255),w,b
 15236  00039E  B0D8               	btfsc	status,0,c
 15237  0003A0  D002               	goto	l10080
 15238  0003A2  D05D               	goto	l10094
 15239  0003A4  D000               	goto	l10080
 15240  0003A6                     l10080:
 15241                           
 15242                           ; BSR set to: 1
 15243                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
 15244  0003A6  C184  F011         	movff	printf@tmpval,___ftge@ff1
 15245  0003AA  C185  F012         	movff	printf@tmpval+1,___ftge@ff1+1
 15246  0003AE  C186  F013         	movff	printf@tmpval+2,___ftge@ff1+2
 15247  0003B2  0E70               	movlw	112
 15248  0003B4  6E14               	movwf	___ftge@ff2,c
 15249  0003B6  0E89               	movlw	137
 15250  0003B8  6E15               	movwf	___ftge@ff2+1,c
 15251  0003BA  0E40               	movlw	64
 15252  0003BC  6E16               	movwf	___ftge@ff2+2,c
 15253  0003BE  EC01  F022         	call	___ftge	;wreg free
 15254  0003C2  B0D8               	btfsc	status,0,c
 15255  0003C4  D003               	goto	l10084
 15256                           
 15257                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
 15258  0003C6  0101               	movlb	1	; () banked
 15259  0003C8  0EF7               	movlw	247
 15260  0003CA  D002               	goto	L10
 15261  0003CC                     l10084:
 15262                           
 15263                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
 15264  0003CC  0101               	movlb	1	; () banked
 15265  0003CE  0EF8               	movlw	248
 15266  0003D0                     L10:
 15267  0003D0  278A               	addwf	printf@exp& (0+255),f,b
 15268  0003D2  0EFF               	movlw	255
 15269  0003D4  238B               	addwfc	(printf@exp+1)& (0+255),f,b
 15270  0003D6  D000               	goto	l10086
 15271  0003D8                     l10086:
 15272                           
 15273                           ; BSR set to: 1
 15274                           ;doprnt.c: 1124: }
 15275                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
 15276  0003D8  0101               	movlb	1	; () banked
 15277  0003DA  518A               	movf	printf@exp& (0+255),w,b
 15278  0003DC  EC42  F009         	call	_scale
 15279  0003E0  C043  F184         	movff	?_scale,printf@tmpval
 15280  0003E4  C044  F185         	movff	?_scale+1,printf@tmpval+1
 15281  0003E8  C045  F186         	movff	?_scale+2,printf@tmpval+2
 15282                           
 15283                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
 15284  0003EC  D017               	goto	l10090
 15285  0003EE  C192  F011         	movff	printf@fval,__div_to_l_@f1
 15286  0003F2  C193  F012         	movff	printf@fval+1,__div_to_l_@f1+1
 15287  0003F6  C194  F013         	movff	printf@fval+2,__div_to_l_@f1+2
 15288  0003FA  C184  F014         	movff	printf@tmpval,__div_to_l_@f2
 15289  0003FE  C185  F015         	movff	printf@tmpval+1,__div_to_l_@f2+1
 15290  000402  C186  F016         	movff	printf@tmpval+2,__div_to_l_@f2+2
 15291  000406  EC3F  F01A         	call	__div_to_l_	;wreg free
 15292  00040A  C011  F18C         	movff	?__div_to_l_,printf@val
 15293  00040E  C012  F18D         	movff	?__div_to_l_+1,printf@val+1
 15294  000412  C013  F18E         	movff	?__div_to_l_+2,printf@val+2
 15295  000416  C014  F18F         	movff	?__div_to_l_+3,printf@val+3
 15296  00041A  D017               	goto	l10092
 15297  00041C                     l10090:
 15298  00041C  C192  F011         	movff	printf@fval,__tdiv_to_l_@f1
 15299  000420  C193  F012         	movff	printf@fval+1,__tdiv_to_l_@f1+1
 15300  000424  C194  F013         	movff	printf@fval+2,__tdiv_to_l_@f1+2
 15301  000428  C184  F014         	movff	printf@tmpval,__tdiv_to_l_@f2
 15302  00042C  C185  F015         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
 15303  000430  C186  F016         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
 15304  000434  ECAA  F018         	call	__tdiv_to_l_	;wreg free
 15305  000438  C011  F18C         	movff	?__tdiv_to_l_,printf@val
 15306  00043C  C012  F18D         	movff	?__tdiv_to_l_+1,printf@val+1
 15307  000440  C013  F18E         	movff	?__tdiv_to_l_+2,printf@val+2
 15308  000444  C014  F18F         	movff	?__tdiv_to_l_+3,printf@val+3
 15309  000448  D000               	goto	l10092
 15310  00044A                     l10092:
 15311                           
 15312                           ;doprnt.c: 1129: fval = 0.0;
 15313  00044A  0E00               	movlw	0
 15314  00044C  0101               	movlb	1	; () banked
 15315  00044E  6F92               	movwf	printf@fval& (0+255),b
 15316  000450  0E00               	movlw	0
 15317  000452  0101               	movlb	1	; () banked
 15318  000454  6F93               	movwf	(printf@fval+1)& (0+255),b
 15319  000456  0E00               	movlw	0
 15320  000458  0101               	movlb	1	; () banked
 15321  00045A  6F94               	movwf	(printf@fval+2)& (0+255),b
 15322                           
 15323                           ;doprnt.c: 1130: } else {
 15324  00045C  D034               	goto	l10098
 15325  00045E                     l10094:
 15326                           
 15327                           ;doprnt.c: 1131: val = (unsigned long)fval;
 15328  00045E  C192  F02E         	movff	printf@fval,___fttol@f1
 15329  000462  C193  F02F         	movff	printf@fval+1,___fttol@f1+1
 15330  000466  C194  F030         	movff	printf@fval+2,___fttol@f1+2
 15331  00046A  EC24  F01D         	call	___fttol	;wreg free
 15332  00046E  C02E  F18C         	movff	?___fttol,printf@val
 15333  000472  C02F  F18D         	movff	?___fttol+1,printf@val+1
 15334  000476  C030  F18E         	movff	?___fttol+2,printf@val+2
 15335  00047A  C031  F18F         	movff	?___fttol+3,printf@val+3
 15336                           
 15337                           ;doprnt.c: 1132: fval -= (double)val;
 15338  00047E  C192  F059         	movff	printf@fval,___ftsub@f1
 15339  000482  C193  F05A         	movff	printf@fval+1,___ftsub@f1+1
 15340  000486  C194  F05B         	movff	printf@fval+2,___ftsub@f1+2
 15341  00048A  C18C  F019         	movff	printf@val,___lltoft@c
 15342  00048E  C18D  F01A         	movff	printf@val+1,___lltoft@c+1
 15343  000492  C18E  F01B         	movff	printf@val+2,___lltoft@c+2
 15344  000496  C18F  F01C         	movff	printf@val+3,___lltoft@c+3
 15345  00049A  ECAB  F025         	call	___lltoft	;wreg free
 15346  00049E  C019  F05C         	movff	?___lltoft,___ftsub@f2
 15347  0004A2  C01A  F05D         	movff	?___lltoft+1,___ftsub@f2+1
 15348  0004A6  C01B  F05E         	movff	?___lltoft+2,___ftsub@f2+2
 15349  0004AA  EC41  F027         	call	___ftsub	;wreg free
 15350  0004AE  C059  F192         	movff	?___ftsub,printf@fval
 15351  0004B2  C05A  F193         	movff	?___ftsub+1,printf@fval+1
 15352  0004B6  C05B  F194         	movff	?___ftsub+2,printf@fval+2
 15353                           
 15354                           ;doprnt.c: 1133: exp = 0;
 15355  0004BA  0E00               	movlw	0
 15356  0004BC  0101               	movlb	1	; () banked
 15357  0004BE  6F8B               	movwf	(printf@exp+1)& (0+255),b
 15358  0004C0  0E00               	movlw	0
 15359  0004C2  6F8A               	movwf	printf@exp& (0+255),b
 15360  0004C4  D000               	goto	l10098
 15361  0004C6                     l10098:
 15362                           
 15363                           ; BSR set to: 1
 15364                           ;doprnt.c: 1134: }
 15365                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
 15366  0004C6  0E01               	movlw	1
 15367  0004C8  0101               	movlb	1	; () banked
 15368  0004CA  6F95               	movwf	printf@c& (0+255),b
 15369  0004CC                     l10100:
 15370                           
 15371                           ; BSR set to: 1
 15372  0004CC  0E0A               	movlw	10
 15373  0004CE  0101               	movlb	1	; () banked
 15374  0004D0  1995               	xorwf	printf@c& (0+255),w,b
 15375  0004D2  B4D8               	btfsc	status,2,c
 15376  0004D4  D022               	goto	l10112
 15377  0004D6  D001               	goto	l10104
 15378                           
 15379                           ; BSR set to: 1
 15380  0004D8  D020               	goto	l10112
 15381  0004DA                     l10104:
 15382                           
 15383                           ; BSR set to: 1
 15384                           ;doprnt.c: 1137: if(val < dpowers[c])
 15385  0004DA  0101               	movlb	1	; () banked
 15386  0004DC  5195               	movf	printf@c& (0+255),w,b
 15387  0004DE  0D04               	mullw	4
 15388  0004E0  0E0E               	movlw	low _dpowers
 15389  0004E2  24F3               	addwf	prodl,w,c
 15390  0004E4  6EF6               	movwf	tblptrl,c
 15391  0004E6  0EFE               	movlw	high _dpowers
 15392  0004E8  20F4               	addwfc	prodh,w,c
 15393  0004EA  6EF7               	movwf	tblptrh,c
 15394  0004EC                     	if	0	;There are less than 3 active tblptr bytes
 15395  0004EC                     	endif
 15396  0004EC  0009               	tblrd		*+
 15397  0004EE  50F5               	movf	tablat,w,c
 15398  0004F0  0101               	movlb	1	; () banked
 15399  0004F2  5D8C               	subwf	printf@val& (0+255),w,b
 15400  0004F4  0009               	tblrd		*+
 15401  0004F6  50F5               	movf	tablat,w,c
 15402  0004F8  0101               	movlb	1	; () banked
 15403  0004FA  598D               	subwfb	(printf@val+1)& (0+255),w,b
 15404  0004FC  0009               	tblrd		*+
 15405  0004FE  50F5               	movf	tablat,w,c
 15406  000500  0101               	movlb	1	; () banked
 15407  000502  598E               	subwfb	(printf@val+2)& (0+255),w,b
 15408  000504  0009               	tblrd		*+
 15409  000506  50F5               	movf	tablat,w,c
 15410  000508  0101               	movlb	1	; () banked
 15411  00050A  598F               	subwfb	(printf@val+3)& (0+255),w,b
 15412  00050C  A0D8               	btfss	status,0,c
 15413  00050E  D005               	goto	l10112
 15414  000510  D001               	goto	l10108
 15415                           
 15416                           ; BSR set to: 1
 15417                           ;doprnt.c: 1138: break;
 15418  000512  D003               	goto	l10112
 15419  000514                     l10108:
 15420                           
 15421                           ; BSR set to: 1
 15422  000514  0101               	movlb	1	; () banked
 15423  000516  2B95               	incf	printf@c& (0+255),f,b
 15424  000518  D7D9               	goto	l10100
 15425  00051A                     l10112:
 15426                           
 15427                           ; BSR set to: 1
 15428                           ;doprnt.c: 1142: width -= prec + c + exp;
 15429  00051A  C195  F0E7         	movff	printf@c,??_printf
 15430  00051E  0100               	movlb	0	; () banked
 15431  000520  6BE8               	clrf	(??_printf+1)& (0+255),b
 15432  000522  BFE7               	btfsc	??_printf& (0+255),7,b
 15433  000524  07E8               	decf	(??_printf+1)& (0+255),f,b
 15434  000526  0101               	movlb	1	; () banked
 15435  000528  5182               	movf	printf@prec& (0+255),w,b
 15436  00052A  0100               	movlb	0	; () banked
 15437  00052C  27E7               	addwf	??_printf& (0+255),f,b
 15438  00052E  0101               	movlb	1	; () banked
 15439  000530  5183               	movf	(printf@prec+1)& (0+255),w,b
 15440  000532  0100               	movlb	0	; () banked
 15441  000534  23E8               	addwfc	(??_printf+1)& (0+255),f,b
 15442  000536  0101               	movlb	1	; () banked
 15443  000538  518A               	movf	printf@exp& (0+255),w,b
 15444  00053A  0100               	movlb	0	; () banked
 15445  00053C  27E7               	addwf	??_printf& (0+255),f,b
 15446  00053E  0101               	movlb	1	; () banked
 15447  000540  518B               	movf	(printf@exp+1)& (0+255),w,b
 15448  000542  0100               	movlb	0	; () banked
 15449  000544  23E8               	addwfc	(??_printf+1)& (0+255),f,b
 15450  000546  0100               	movlb	0	; () banked
 15451  000548  51E7               	movf	??_printf& (0+255),w,b
 15452  00054A  0101               	movlb	1	; () banked
 15453  00054C  5F88               	subwf	printf@width& (0+255),f,b
 15454  00054E  0100               	movlb	0	; () banked
 15455  000550  51E8               	movf	(??_printf+1)& (0+255),w,b
 15456  000552  0101               	movlb	1	; () banked
 15457  000554  5B89               	subwfb	(printf@width+1)& (0+255),f,b
 15458                           
 15459                           ;doprnt.c: 1143: if(
 15460                           ;doprnt.c: 1147: prec)
 15461  000556  0101               	movlb	1	; () banked
 15462  000558  5182               	movf	printf@prec& (0+255),w,b
 15463  00055A  0101               	movlb	1	; () banked
 15464  00055C  1183               	iorwf	(printf@prec+1)& (0+255),w,b
 15465  00055E  B4D8               	btfsc	status,2,c
 15466  000560  D005               	goto	l10116
 15467                           
 15468                           ; BSR set to: 1
 15469                           ;doprnt.c: 1148: width--;
 15470  000562  0101               	movlb	1	; () banked
 15471  000564  0788               	decf	printf@width& (0+255),f,b
 15472  000566  A0D8               	btfss	status,0,c
 15473  000568  0789               	decf	(printf@width+1)& (0+255),f,b
 15474  00056A  D000               	goto	l10116
 15475  00056C                     l10116:
 15476                           
 15477                           ; BSR set to: 1
 15478                           ;doprnt.c: 1149: if(flag & 0x03)
 15479  00056C  0E03               	movlw	3
 15480  00056E  0101               	movlb	1	; () banked
 15481  000570  1590               	andwf	printf@flag& (0+255),w,b
 15482  000572  0100               	movlb	0	; () banked
 15483  000574  6FE7               	movwf	??_printf& (0+255),b
 15484  000576  0E00               	movlw	0
 15485  000578  0101               	movlb	1	; () banked
 15486  00057A  1591               	andwf	(printf@flag+1)& (0+255),w,b
 15487  00057C  0100               	movlb	0	; () banked
 15488  00057E  6FE8               	movwf	(??_printf+1)& (0+255),b
 15489  000580  0100               	movlb	0	; () banked
 15490  000582  51E7               	movf	??_printf& (0+255),w,b
 15491  000584  0100               	movlb	0	; () banked
 15492  000586  11E8               	iorwf	(??_printf+1)& (0+255),w,b
 15493  000588  B4D8               	btfsc	status,2,c
 15494  00058A  D005               	goto	l10120
 15495                           
 15496                           ; BSR set to: 0
 15497                           ;doprnt.c: 1150: width--;
 15498  00058C  0101               	movlb	1	; () banked
 15499  00058E  0788               	decf	printf@width& (0+255),f,b
 15500  000590  A0D8               	btfss	status,0,c
 15501  000592  0789               	decf	(printf@width+1)& (0+255),f,b
 15502  000594  D000               	goto	l10120
 15503  000596                     l10120:
 15504                           
 15505                           ;doprnt.c: 1153: if(flag & 0x04) {
 15506  000596  0101               	movlb	1	; () banked
 15507  000598  A590               	btfss	printf@flag& (0+255),2,b
 15508  00059A  D031               	goto	l10136
 15509                           
 15510                           ; BSR set to: 1
 15511                           ;doprnt.c: 1157: if(flag & 0x03)
 15512  00059C  0E03               	movlw	3
 15513  00059E  0101               	movlb	1	; () banked
 15514  0005A0  1590               	andwf	printf@flag& (0+255),w,b
 15515  0005A2  0100               	movlb	0	; () banked
 15516  0005A4  6FE7               	movwf	??_printf& (0+255),b
 15517  0005A6  0E00               	movlw	0
 15518  0005A8  0101               	movlb	1	; () banked
 15519  0005AA  1591               	andwf	(printf@flag+1)& (0+255),w,b
 15520  0005AC  0100               	movlb	0	; () banked
 15521  0005AE  6FE8               	movwf	(??_printf+1)& (0+255),b
 15522  0005B0  0100               	movlb	0	; () banked
 15523  0005B2  51E7               	movf	??_printf& (0+255),w,b
 15524  0005B4  0100               	movlb	0	; () banked
 15525  0005B6  11E8               	iorwf	(??_printf+1)& (0+255),w,b
 15526  0005B8  B4D8               	btfsc	status,2,c
 15527  0005BA  D00C               	goto	l10130
 15528                           
 15529                           ; BSR set to: 0
 15530                           ;doprnt.c: 1159: (putch('-') );
 15531  0005BC  0E2D               	movlw	45
 15532  0005BE  ECA5  F02A         	call	_putch
 15533                           
 15534                           ;doprnt.c: 1168: while(width > 0) {
 15535  0005C2  D008               	goto	l10130
 15536  0005C4                     l10126:
 15537                           
 15538                           ;doprnt.c: 1169: (putch('0') );
 15539  0005C4  0E30               	movlw	48
 15540  0005C6  ECA5  F02A         	call	_putch
 15541                           
 15542                           ;doprnt.c: 1170: width--;
 15543  0005CA  0101               	movlb	1	; () banked
 15544  0005CC  0788               	decf	printf@width& (0+255),f,b
 15545  0005CE  A0D8               	btfss	status,0,c
 15546  0005D0  0789               	decf	(printf@width+1)& (0+255),f,b
 15547  0005D2  D000               	goto	l10130
 15548  0005D4                     l10130:
 15549  0005D4  0101               	movlb	1	; () banked
 15550  0005D6  BF89               	btfsc	(printf@width+1)& (0+255),7,b
 15551  0005D8  D077               	goto	l10148
 15552  0005DA  0101               	movlb	1	; () banked
 15553  0005DC  5189               	movf	(printf@width+1)& (0+255),w,b
 15554  0005DE  E1F2               	bnz	l10126
 15555  0005E0  0101               	movlb	1	; () banked
 15556  0005E2  0588               	decf	printf@width& (0+255),w,b
 15557  0005E4  A0D8               	btfss	status,0,c
 15558  0005E6  D070               	goto	l10148
 15559  0005E8  D7ED               	goto	l10126
 15560                           
 15561                           ; BSR set to: 1
 15562                           ;doprnt.c: 1171: }
 15563                           ;doprnt.c: 1173: } else
 15564  0005EA  D06E               	goto	l10148
 15565                           
 15566                           ; BSR set to: 1
 15567                           ;doprnt.c: 1175: {
 15568                           ;doprnt.c: 1180: while(width > 0) {
 15569  0005EC  D008               	goto	l10136
 15570  0005EE                     l10132:
 15571                           
 15572                           ; BSR set to: 1
 15573                           ;doprnt.c: 1181: (putch(' ') );
 15574  0005EE  0E20               	movlw	32
 15575  0005F0  ECA5  F02A         	call	_putch
 15576                           
 15577                           ;doprnt.c: 1182: width--;
 15578  0005F4  0101               	movlb	1	; () banked
 15579  0005F6  0788               	decf	printf@width& (0+255),f,b
 15580  0005F8  A0D8               	btfss	status,0,c
 15581  0005FA  0789               	decf	(printf@width+1)& (0+255),f,b
 15582  0005FC  D000               	goto	l10136
 15583  0005FE                     l10136:
 15584                           
 15585                           ; BSR set to: 1
 15586  0005FE  0101               	movlb	1	; () banked
 15587  000600  BF89               	btfsc	(printf@width+1)& (0+255),7,b
 15588  000602  D007               	goto	l10138
 15589  000604  0101               	movlb	1	; () banked
 15590  000606  5189               	movf	(printf@width+1)& (0+255),w,b
 15591  000608  E1F2               	bnz	l10132
 15592  00060A  0101               	movlb	1	; () banked
 15593  00060C  0588               	decf	printf@width& (0+255),w,b
 15594  00060E  B0D8               	btfsc	status,0,c
 15595  000610  D7EE               	goto	l10132
 15596  000612                     l10138:
 15597                           
 15598                           ; BSR set to: 1
 15599                           ;doprnt.c: 1183: }
 15600                           ;doprnt.c: 1188: if(flag & 0x03)
 15601  000612  0E03               	movlw	3
 15602  000614  0101               	movlb	1	; () banked
 15603  000616  1590               	andwf	printf@flag& (0+255),w,b
 15604  000618  0100               	movlb	0	; () banked
 15605  00061A  6FE7               	movwf	??_printf& (0+255),b
 15606  00061C  0E00               	movlw	0
 15607  00061E  0101               	movlb	1	; () banked
 15608  000620  1591               	andwf	(printf@flag+1)& (0+255),w,b
 15609  000622  0100               	movlb	0	; () banked
 15610  000624  6FE8               	movwf	(??_printf+1)& (0+255),b
 15611  000626  0100               	movlb	0	; () banked
 15612  000628  51E7               	movf	??_printf& (0+255),w,b
 15613  00062A  0100               	movlb	0	; () banked
 15614  00062C  11E8               	iorwf	(??_printf+1)& (0+255),w,b
 15615  00062E  B4D8               	btfsc	status,2,c
 15616  000630  D04B               	goto	l10148
 15617                           
 15618                           ; BSR set to: 0
 15619                           ;doprnt.c: 1190: (putch('-') );
 15620  000632  0E2D               	movlw	45
 15621  000634  ECA5  F02A         	call	_putch
 15622                           
 15623                           ;doprnt.c: 1195: }
 15624                           ;doprnt.c: 1196: while(c--) {
 15625  000638  D047               	goto	l10148
 15626  00063A                     l10142:
 15627                           
 15628                           ;doprnt.c: 1200: {
 15629                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
 15630  00063A  C18C  F011         	movff	printf@val,___lldiv@dividend
 15631  00063E  C18D  F012         	movff	printf@val+1,___lldiv@dividend+1
 15632  000642  C18E  F013         	movff	printf@val+2,___lldiv@dividend+2
 15633  000646  C18F  F014         	movff	printf@val+3,___lldiv@dividend+3
 15634  00064A  0101               	movlb	1	; () banked
 15635  00064C  5195               	movf	printf@c& (0+255),w,b
 15636  00064E  0D04               	mullw	4
 15637  000650  0E0E               	movlw	low _dpowers
 15638  000652  24F3               	addwf	prodl,w,c
 15639  000654  6EF6               	movwf	tblptrl,c
 15640  000656  0EFE               	movlw	high _dpowers
 15641  000658  20F4               	addwfc	prodh,w,c
 15642  00065A  6EF7               	movwf	tblptrh,c
 15643  00065C                     	if	0	;There are less than 3 active tblptr bytes
 15644  00065C                     	endif
 15645  00065C  0009               	tblrd		*+
 15646  00065E  CFF5 F015          	movff	tablat,___lldiv@divisor
 15647  000662  0009               	tblrd		*+
 15648  000664  CFF5 F016          	movff	tablat,___lldiv@divisor+1
 15649  000668  0009               	tblrd		*+
 15650  00066A  CFF5 F017          	movff	tablat,___lldiv@divisor+2
 15651  00066E  000A               	tblrd		*-
 15652  000670  CFF5 F018          	movff	tablat,___lldiv@divisor+3
 15653  000674  EC94  F022         	call	___lldiv	;wreg free
 15654  000678  C011  F184         	movff	?___lldiv,printf@tmpval
 15655  00067C  C012  F185         	movff	?___lldiv+1,printf@tmpval+1
 15656  000680  C013  F186         	movff	?___lldiv+2,printf@tmpval+2
 15657  000684  C014  F187         	movff	?___lldiv+3,printf@tmpval+3
 15658                           
 15659                           ;doprnt.c: 1202: tmpval.vd %= 10;
 15660  000688  C184  F01E         	movff	printf@tmpval,___llmod@dividend
 15661  00068C  C185  F01F         	movff	printf@tmpval+1,___llmod@dividend+1
 15662  000690  C186  F020         	movff	printf@tmpval+2,___llmod@dividend+2
 15663  000694  C187  F021         	movff	printf@tmpval+3,___llmod@dividend+3
 15664  000698  0E0A               	movlw	10
 15665  00069A  6E22               	movwf	___llmod@divisor,c
 15666  00069C  0E00               	movlw	0
 15667  00069E  6E23               	movwf	___llmod@divisor+1,c
 15668  0006A0  0E00               	movlw	0
 15669  0006A2  6E24               	movwf	___llmod@divisor+2,c
 15670  0006A4  0E00               	movlw	0
 15671  0006A6  6E25               	movwf	___llmod@divisor+3,c
 15672  0006A8  ECDB  F023         	call	___llmod	;wreg free
 15673  0006AC  C01E  F184         	movff	?___llmod,printf@tmpval
 15674  0006B0  C01F  F185         	movff	?___llmod+1,printf@tmpval+1
 15675  0006B4  C020  F186         	movff	?___llmod+2,printf@tmpval+2
 15676  0006B8  C021  F187         	movff	?___llmod+3,printf@tmpval+3
 15677                           
 15678                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
 15679  0006BC  0101               	movlb	1	; () banked
 15680  0006BE  5184               	movf	printf@tmpval& (0+255),w,b
 15681  0006C0  0F30               	addlw	48
 15682  0006C2  ECA5  F02A         	call	_putch
 15683  0006C6  D000               	goto	l10148
 15684  0006C8                     l10148:
 15685  0006C8  0101               	movlb	1	; () banked
 15686  0006CA  0795               	decf	printf@c& (0+255),f,b
 15687  0006CC  0101               	movlb	1	; () banked
 15688  0006CE  2995               	incf	printf@c& (0+255),w,b
 15689  0006D0  B4D8               	btfsc	status,2,c
 15690  0006D2  D00A               	goto	l10154
 15691  0006D4  D7B2               	goto	l10142
 15692                           
 15693                           ; BSR set to: 1
 15694                           ;doprnt.c: 1204: }
 15695                           ;doprnt.c: 1206: }
 15696                           ;doprnt.c: 1207: while(exp > 0) {
 15697  0006D6  D008               	goto	l10154
 15698  0006D8                     l10150:
 15699                           
 15700                           ; BSR set to: 1
 15701                           ;doprnt.c: 1208: (putch('0') );
 15702  0006D8  0E30               	movlw	48
 15703  0006DA  ECA5  F02A         	call	_putch
 15704                           
 15705                           ;doprnt.c: 1209: exp--;
 15706  0006DE  0101               	movlb	1	; () banked
 15707  0006E0  078A               	decf	printf@exp& (0+255),f,b
 15708  0006E2  A0D8               	btfss	status,0,c
 15709  0006E4  078B               	decf	(printf@exp+1)& (0+255),f,b
 15710  0006E6  D000               	goto	l10154
 15711  0006E8                     l10154:
 15712                           
 15713                           ; BSR set to: 1
 15714  0006E8  0101               	movlb	1	; () banked
 15715  0006EA  BF8B               	btfsc	(printf@exp+1)& (0+255),7,b
 15716  0006EC  D007               	goto	l10156
 15717  0006EE  0101               	movlb	1	; () banked
 15718  0006F0  518B               	movf	(printf@exp+1)& (0+255),w,b
 15719  0006F2  E1F2               	bnz	l10150
 15720  0006F4  0101               	movlb	1	; () banked
 15721  0006F6  058A               	decf	printf@exp& (0+255),w,b
 15722  0006F8  B0D8               	btfsc	status,0,c
 15723  0006FA  D7EE               	goto	l10150
 15724  0006FC                     l10156:
 15725                           
 15726                           ; BSR set to: 1
 15727                           ;doprnt.c: 1210: }
 15728                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 15729  0006FC  0101               	movlb	1	; () banked
 15730  0006FE  BF83               	btfsc	(printf@prec+1)& (0+255),7,b
 15731  000700  D00C               	goto	l1555
 15732  000702  0101               	movlb	1	; () banked
 15733  000704  5183               	movf	(printf@prec+1)& (0+255),w,b
 15734  000706  E105               	bnz	u9130
 15735  000708  0E09               	movlw	9
 15736  00070A  0101               	movlb	1	; () banked
 15737  00070C  5D82               	subwf	printf@prec& (0+255),w,b
 15738  00070E  A0D8               	btfss	status,0,c
 15739  000710  D004               	goto	l1555
 15740  000712                     u9130:
 15741                           
 15742                           ; BSR set to: 1
 15743                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
 15744  000712  0E08               	movlw	8
 15745  000714  0101               	movlb	1	; () banked
 15746  000716  6F95               	movwf	printf@c& (0+255),b
 15747  000718  D003               	goto	l10160
 15748  00071A                     l1555:
 15749                           
 15750                           ; BSR set to: 1
 15751                           ;doprnt.c: 1213: else
 15752                           ;doprnt.c: 1214: c = prec;
 15753  00071A  C182  F195         	movff	printf@prec,printf@c
 15754  00071E  D000               	goto	l10160
 15755  000720                     l10160:
 15756                           
 15757                           ; BSR set to: 1
 15758                           ;doprnt.c: 1215: prec -= c;
 15759  000720  0101               	movlb	1	; () banked
 15760  000722  5195               	movf	printf@c& (0+255),w,b
 15761  000724  0101               	movlb	1	; () banked
 15762  000726  5F82               	subwf	printf@prec& (0+255),f,b
 15763  000728  0E00               	movlw	0
 15764  00072A  0101               	movlb	1	; () banked
 15765  00072C  BF95               	btfsc	printf@c& (0+255),7,b
 15766  00072E  0EFF               	movlw	255
 15767  000730  0101               	movlb	1	; () banked
 15768  000732  5B83               	subwfb	(printf@prec+1)& (0+255),f,b
 15769                           
 15770                           ; BSR set to: 1
 15771                           ;doprnt.c: 1219: if(c)
 15772  000734  0101               	movlb	1	; () banked
 15773  000736  5195               	movf	printf@c& (0+255),w,b
 15774  000738  0101               	movlb	1	; () banked
 15775  00073A  B4D8               	btfsc	status,2,c
 15776  00073C  D004               	goto	l10166
 15777                           
 15778                           ; BSR set to: 1
 15779                           ;doprnt.c: 1221: (putch('.') );
 15780  00073E  0E2E               	movlw	46
 15781  000740  ECA5  F02A         	call	_putch
 15782  000744  D000               	goto	l10166
 15783  000746                     l10166:
 15784                           
 15785                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 15786  000746  0101               	movlb	1	; () banked
 15787  000748  5195               	movf	printf@c& (0+255),w,b
 15788  00074A  EC42  F009         	call	_scale
 15789  00074E  C043  F17C         	movff	?_scale,_printf$3328
 15790  000752  C044  F17D         	movff	?_scale+1,_printf$3328+1
 15791  000756  C045  F17E         	movff	?_scale+2,_printf$3328+2
 15792                           
 15793                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 15794  00075A  C192  F022         	movff	printf@fval,___ftmul@f2
 15795  00075E  C193  F023         	movff	printf@fval+1,___ftmul@f2+1
 15796  000762  C194  F024         	movff	printf@fval+2,___ftmul@f2+2
 15797  000766  C17C  F01F         	movff	_printf$3328,___ftmul@f1
 15798  00076A  C17D  F020         	movff	_printf$3328+1,___ftmul@f1+1
 15799  00076E  C17E  F021         	movff	_printf$3328+2,___ftmul@f1+2
 15800  000772  EC41  F01B         	call	___ftmul	;wreg free
 15801  000776  C01F  F02E         	movff	?___ftmul,___fttol@f1
 15802  00077A  C020  F02F         	movff	?___ftmul+1,___fttol@f1+1
 15803  00077E  C021  F030         	movff	?___ftmul+2,___fttol@f1+2
 15804  000782  EC24  F01D         	call	___fttol	;wreg free
 15805  000786  C02E  F18C         	movff	?___fttol,printf@val
 15806  00078A  C02F  F18D         	movff	?___fttol+1,printf@val+1
 15807  00078E  C030  F18E         	movff	?___fttol+2,printf@val+2
 15808  000792  C031  F18F         	movff	?___fttol+3,printf@val+3
 15809                           
 15810                           ;doprnt.c: 1228: while(c--) {
 15811  000796  D06E               	goto	l10176
 15812  000798                     l10170:
 15813                           
 15814                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
 15815  000798  C18C  F011         	movff	printf@val,___lldiv@dividend
 15816  00079C  C18D  F012         	movff	printf@val+1,___lldiv@dividend+1
 15817  0007A0  C18E  F013         	movff	printf@val+2,___lldiv@dividend+2
 15818  0007A4  C18F  F014         	movff	printf@val+3,___lldiv@dividend+3
 15819  0007A8  0101               	movlb	1	; () banked
 15820  0007AA  5195               	movf	printf@c& (0+255),w,b
 15821  0007AC  0D04               	mullw	4
 15822  0007AE  0E0E               	movlw	low _dpowers
 15823  0007B0  24F3               	addwf	prodl,w,c
 15824  0007B2  6EF6               	movwf	tblptrl,c
 15825  0007B4  0EFE               	movlw	high _dpowers
 15826  0007B6  20F4               	addwfc	prodh,w,c
 15827  0007B8  6EF7               	movwf	tblptrh,c
 15828  0007BA                     	if	0	;There are less than 3 active tblptr bytes
 15829  0007BA                     	endif
 15830  0007BA  0009               	tblrd		*+
 15831  0007BC  CFF5 F015          	movff	tablat,___lldiv@divisor
 15832  0007C0  0009               	tblrd		*+
 15833  0007C2  CFF5 F016          	movff	tablat,___lldiv@divisor+1
 15834  0007C6  0009               	tblrd		*+
 15835  0007C8  CFF5 F017          	movff	tablat,___lldiv@divisor+2
 15836  0007CC  000A               	tblrd		*-
 15837  0007CE  CFF5 F018          	movff	tablat,___lldiv@divisor+3
 15838  0007D2  EC94  F022         	call	___lldiv	;wreg free
 15839  0007D6  C011  F184         	movff	?___lldiv,printf@tmpval
 15840  0007DA  C012  F185         	movff	?___lldiv+1,printf@tmpval+1
 15841  0007DE  C013  F186         	movff	?___lldiv+2,printf@tmpval+2
 15842  0007E2  C014  F187         	movff	?___lldiv+3,printf@tmpval+3
 15843                           
 15844                           ;doprnt.c: 1230: tmpval.vd %= 10;
 15845  0007E6  C184  F01E         	movff	printf@tmpval,___llmod@dividend
 15846  0007EA  C185  F01F         	movff	printf@tmpval+1,___llmod@dividend+1
 15847  0007EE  C186  F020         	movff	printf@tmpval+2,___llmod@dividend+2
 15848  0007F2  C187  F021         	movff	printf@tmpval+3,___llmod@dividend+3
 15849  0007F6  0E0A               	movlw	10
 15850  0007F8  6E22               	movwf	___llmod@divisor,c
 15851  0007FA  0E00               	movlw	0
 15852  0007FC  6E23               	movwf	___llmod@divisor+1,c
 15853  0007FE  0E00               	movlw	0
 15854  000800  6E24               	movwf	___llmod@divisor+2,c
 15855  000802  0E00               	movlw	0
 15856  000804  6E25               	movwf	___llmod@divisor+3,c
 15857  000806  ECDB  F023         	call	___llmod	;wreg free
 15858  00080A  C01E  F184         	movff	?___llmod,printf@tmpval
 15859  00080E  C01F  F185         	movff	?___llmod+1,printf@tmpval+1
 15860  000812  C020  F186         	movff	?___llmod+2,printf@tmpval+2
 15861  000816  C021  F187         	movff	?___llmod+3,printf@tmpval+3
 15862                           
 15863                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
 15864  00081A  0101               	movlb	1	; () banked
 15865  00081C  5184               	movf	printf@tmpval& (0+255),w,b
 15866  00081E  0F30               	addlw	48
 15867  000820  ECA5  F02A         	call	_putch
 15868                           
 15869                           ;doprnt.c: 1232: val %= dpowers[c];
 15870  000824  C18C  F01E         	movff	printf@val,___llmod@dividend
 15871  000828  C18D  F01F         	movff	printf@val+1,___llmod@dividend+1
 15872  00082C  C18E  F020         	movff	printf@val+2,___llmod@dividend+2
 15873  000830  C18F  F021         	movff	printf@val+3,___llmod@dividend+3
 15874  000834  0101               	movlb	1	; () banked
 15875  000836  5195               	movf	printf@c& (0+255),w,b
 15876  000838  0D04               	mullw	4
 15877  00083A  0E0E               	movlw	low _dpowers
 15878  00083C  24F3               	addwf	prodl,w,c
 15879  00083E  6EF6               	movwf	tblptrl,c
 15880  000840  0EFE               	movlw	high _dpowers
 15881  000842  20F4               	addwfc	prodh,w,c
 15882  000844  6EF7               	movwf	tblptrh,c
 15883  000846                     	if	0	;There are less than 3 active tblptr bytes
 15884  000846                     	endif
 15885  000846  0009               	tblrd		*+
 15886  000848  CFF5 F022          	movff	tablat,___llmod@divisor
 15887  00084C  0009               	tblrd		*+
 15888  00084E  CFF5 F023          	movff	tablat,___llmod@divisor+1
 15889  000852  0009               	tblrd		*+
 15890  000854  CFF5 F024          	movff	tablat,___llmod@divisor+2
 15891  000858  000A               	tblrd		*-
 15892  00085A  CFF5 F025          	movff	tablat,___llmod@divisor+3
 15893  00085E  ECDB  F023         	call	___llmod	;wreg free
 15894  000862  C01E  F18C         	movff	?___llmod,printf@val
 15895  000866  C01F  F18D         	movff	?___llmod+1,printf@val+1
 15896  00086A  C020  F18E         	movff	?___llmod+2,printf@val+2
 15897  00086E  C021  F18F         	movff	?___llmod+3,printf@val+3
 15898  000872  D000               	goto	l10176
 15899  000874                     l10176:
 15900  000874  0101               	movlb	1	; () banked
 15901  000876  0795               	decf	printf@c& (0+255),f,b
 15902  000878  0101               	movlb	1	; () banked
 15903  00087A  2995               	incf	printf@c& (0+255),w,b
 15904  00087C  B4D8               	btfsc	status,2,c
 15905  00087E  D00A               	goto	l10182
 15906  000880  D78B               	goto	l10170
 15907                           
 15908                           ; BSR set to: 1
 15909                           ;doprnt.c: 1233: }
 15910                           ;doprnt.c: 1235: while(prec) {
 15911  000882  D008               	goto	l10182
 15912  000884                     l10178:
 15913                           
 15914                           ; BSR set to: 1
 15915                           ;doprnt.c: 1236: (putch('0') );
 15916  000884  0E30               	movlw	48
 15917  000886  ECA5  F02A         	call	_putch
 15918                           
 15919                           ;doprnt.c: 1237: prec--;
 15920  00088A  0101               	movlb	1	; () banked
 15921  00088C  0782               	decf	printf@prec& (0+255),f,b
 15922  00088E  A0D8               	btfss	status,0,c
 15923  000890  0783               	decf	(printf@prec+1)& (0+255),f,b
 15924  000892  D000               	goto	l10182
 15925  000894                     l10182:
 15926                           
 15927                           ; BSR set to: 1
 15928  000894  0101               	movlb	1	; () banked
 15929  000896  5182               	movf	printf@prec& (0+255),w,b
 15930  000898  0101               	movlb	1	; () banked
 15931  00089A  1183               	iorwf	(printf@prec+1)& (0+255),w,b
 15932  00089C  B4D8               	btfsc	status,2,c
 15933  00089E  D1CE               	goto	l10280
 15934  0008A0  D7F1               	goto	l10178
 15935                           
 15936                           ; BSR set to: 1
 15937                           ;doprnt.c: 1238: }
 15938                           ;doprnt.c: 1245: continue;
 15939  0008A2  D1CC               	goto	l10280
 15940  0008A4                     l1516:
 15941                           
 15942                           ; BSR set to: 1
 15943                           ;doprnt.c: 1246: }
 15944                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 15945  0008A4  0101               	movlb	1	; () banked
 15946  0008A6  BF90               	btfsc	printf@flag& (0+255),7,b
 15947  0008A8  D023               	goto	l10194
 15948                           
 15949                           ; BSR set to: 1
 15950                           ;doprnt.c: 1253: {
 15951                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 15952  0008AA  C180  FFD9         	movff	printf@ap,fsr2l
 15953  0008AE  C181  FFDA         	movff	printf@ap+1,fsr2h
 15954  0008B2  CFDE F18C          	movff	postinc2,printf@val
 15955  0008B6  CFDD F18D          	movff	postdec2,printf@val+1
 15956  0008BA  0101               	movlb	1	; () banked
 15957  0008BC  0E00               	movlw	0
 15958  0008BE  BF8D               	btfsc	(printf@val+1)& (0+255),7,b
 15959  0008C0  0EFF               	movlw	-1
 15960  0008C2  6F8E               	movwf	(printf@val+2)& (0+255),b
 15961  0008C4  6F8F               	movwf	(printf@val+3)& (0+255),b
 15962                           
 15963                           ; BSR set to: 1
 15964  0008C6  0E02               	movlw	2
 15965  0008C8  0101               	movlb	1	; () banked
 15966  0008CA  2780               	addwf	printf@ap& (0+255),f,b
 15967  0008CC  0E00               	movlw	0
 15968  0008CE  2381               	addwfc	(printf@ap+1)& (0+255),f,b
 15969                           
 15970                           ; BSR set to: 1
 15971                           ;doprnt.c: 1261: if((long)val < 0) {
 15972  0008D0  0101               	movlb	1	; () banked
 15973  0008D2  AF8F               	btfss	(printf@val+3)& (0+255),7,b
 15974  0008D4  D078               	goto	l10228
 15975                           
 15976                           ; BSR set to: 1
 15977                           ;doprnt.c: 1262: flag |= 0x03;
 15978  0008D6  0E03               	movlw	3
 15979  0008D8  0101               	movlb	1	; () banked
 15980  0008DA  1390               	iorwf	printf@flag& (0+255),f,b
 15981                           
 15982                           ; BSR set to: 1
 15983                           ;doprnt.c: 1263: val = -val;
 15984  0008DC  0101               	movlb	1	; () banked
 15985  0008DE  1F8F               	comf	(printf@val+3)& (0+255),f,b
 15986  0008E0  1F8E               	comf	(printf@val+2)& (0+255),f,b
 15987  0008E2  1F8D               	comf	(printf@val+1)& (0+255),f,b
 15988  0008E4  6D8C               	negf	printf@val& (0+255),b
 15989  0008E6  0E00               	movlw	0
 15990  0008E8  238D               	addwfc	(printf@val+1)& (0+255),f,b
 15991  0008EA  238E               	addwfc	(printf@val+2)& (0+255),f,b
 15992  0008EC  238F               	addwfc	(printf@val+3)& (0+255),f,b
 15993                           
 15994                           ; BSR set to: 1
 15995                           ;doprnt.c: 1264: }
 15996                           ;doprnt.c: 1266: }
 15997  0008EE  D06B               	goto	l10228
 15998  0008F0                     l10194:
 15999                           
 16000                           ; BSR set to: 1
 16001                           ;doprnt.c: 1268: else
 16002                           ;doprnt.c: 1273: {
 16003                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 16004  0008F0  C180  FFD9         	movff	printf@ap,fsr2l
 16005  0008F4  C181  FFDA         	movff	printf@ap+1,fsr2h
 16006  0008F8  CFDE F0E7          	movff	postinc2,??_printf
 16007  0008FC  CFDD F0E8          	movff	postdec2,??_printf+1
 16008  000900  C0E7  F18C         	movff	??_printf,printf@val
 16009  000904  C0E8  F18D         	movff	??_printf+1,printf@val+1
 16010  000908  0101               	movlb	1	; () banked
 16011  00090A  6B8E               	clrf	(printf@val+2)& (0+255),b
 16012  00090C  6B8F               	clrf	(printf@val+3)& (0+255),b
 16013                           
 16014                           ; BSR set to: 1
 16015  00090E  0E02               	movlw	2
 16016  000910  0101               	movlb	1	; () banked
 16017  000912  2780               	addwf	printf@ap& (0+255),f,b
 16018  000914  0E00               	movlw	0
 16019  000916  2381               	addwfc	(printf@ap+1)& (0+255),f,b
 16020                           
 16021                           ; BSR set to: 1
 16022                           ;doprnt.c: 1287: }
 16023                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 16024  000918  D056               	goto	l10228
 16025  00091A                     l10198:
 16026                           
 16027                           ; BSR set to: 1
 16028                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 16029  00091A  0E01               	movlw	1
 16030  00091C  0101               	movlb	1	; () banked
 16031  00091E  6F95               	movwf	printf@c& (0+255),b
 16032  000920                     l10200:
 16033                           
 16034                           ; BSR set to: 1
 16035  000920  0E0A               	movlw	10
 16036  000922  0101               	movlb	1	; () banked
 16037  000924  1995               	xorwf	printf@c& (0+255),w,b
 16038  000926  B4D8               	btfsc	status,2,c
 16039  000928  D058               	goto	l10230
 16040  00092A  D001               	goto	l10204
 16041                           
 16042                           ; BSR set to: 1
 16043  00092C  D056               	goto	l10230
 16044  00092E                     l10204:
 16045                           
 16046                           ; BSR set to: 1
 16047                           ;doprnt.c: 1306: if(val < dpowers[c])
 16048  00092E  0101               	movlb	1	; () banked
 16049  000930  5195               	movf	printf@c& (0+255),w,b
 16050  000932  0D04               	mullw	4
 16051  000934  0E0E               	movlw	low _dpowers
 16052  000936  24F3               	addwf	prodl,w,c
 16053  000938  6EF6               	movwf	tblptrl,c
 16054  00093A  0EFE               	movlw	high _dpowers
 16055  00093C  20F4               	addwfc	prodh,w,c
 16056  00093E  6EF7               	movwf	tblptrh,c
 16057  000940                     	if	0	;There are less than 3 active tblptr bytes
 16058  000940                     	endif
 16059  000940  0009               	tblrd		*+
 16060  000942  50F5               	movf	tablat,w,c
 16061  000944  0101               	movlb	1	; () banked
 16062  000946  5D8C               	subwf	printf@val& (0+255),w,b
 16063  000948  0009               	tblrd		*+
 16064  00094A  50F5               	movf	tablat,w,c
 16065  00094C  0101               	movlb	1	; () banked
 16066  00094E  598D               	subwfb	(printf@val+1)& (0+255),w,b
 16067  000950  0009               	tblrd		*+
 16068  000952  50F5               	movf	tablat,w,c
 16069  000954  0101               	movlb	1	; () banked
 16070  000956  598E               	subwfb	(printf@val+2)& (0+255),w,b
 16071  000958  0009               	tblrd		*+
 16072  00095A  50F5               	movf	tablat,w,c
 16073  00095C  0101               	movlb	1	; () banked
 16074  00095E  598F               	subwfb	(printf@val+3)& (0+255),w,b
 16075  000960  A0D8               	btfss	status,0,c
 16076  000962  D03B               	goto	l10230
 16077  000964  D001               	goto	l10208
 16078                           
 16079                           ; BSR set to: 1
 16080                           ;doprnt.c: 1307: break;
 16081  000966  D039               	goto	l10230
 16082  000968                     l10208:
 16083                           
 16084                           ; BSR set to: 1
 16085  000968  0101               	movlb	1	; () banked
 16086  00096A  2B95               	incf	printf@c& (0+255),f,b
 16087  00096C  D7D9               	goto	l10200
 16088                           
 16089                           ; BSR set to: 1
 16090                           ;doprnt.c: 1309: break;
 16091                           
 16092                           ; BSR set to: 1
 16093  00096E  D035               	goto	l10230
 16094  000970                     l10212:
 16095                           
 16096                           ; BSR set to: 1
 16097                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 16098  000970  0E01               	movlw	1
 16099  000972  0101               	movlb	1	; () banked
 16100  000974  6F95               	movwf	printf@c& (0+255),b
 16101  000976                     l10214:
 16102                           
 16103                           ; BSR set to: 1
 16104  000976  0E08               	movlw	8
 16105  000978  0101               	movlb	1	; () banked
 16106  00097A  1995               	xorwf	printf@c& (0+255),w,b
 16107  00097C  B4D8               	btfsc	status,2,c
 16108  00097E  D02D               	goto	l10230
 16109  000980  D001               	goto	l10218
 16110                           
 16111                           ; BSR set to: 1
 16112  000982  D02B               	goto	l10230
 16113  000984                     l10218:
 16114                           
 16115                           ; BSR set to: 1
 16116                           ;doprnt.c: 1317: if(val < hexpowers[c])
 16117  000984  0101               	movlb	1	; () banked
 16118  000986  5195               	movf	printf@c& (0+255),w,b
 16119  000988  0D04               	mullw	4
 16120  00098A  0E84               	movlw	low _hexpowers
 16121  00098C  24F3               	addwf	prodl,w,c
 16122  00098E  6EF6               	movwf	tblptrl,c
 16123  000990  0EFE               	movlw	high _hexpowers
 16124  000992  20F4               	addwfc	prodh,w,c
 16125  000994  6EF7               	movwf	tblptrh,c
 16126  000996                     	if	0	;There are less than 3 active tblptr bytes
 16127  000996                     	endif
 16128  000996  0009               	tblrd		*+
 16129  000998  50F5               	movf	tablat,w,c
 16130  00099A  0101               	movlb	1	; () banked
 16131  00099C  5D8C               	subwf	printf@val& (0+255),w,b
 16132  00099E  0009               	tblrd		*+
 16133  0009A0  50F5               	movf	tablat,w,c
 16134  0009A2  0101               	movlb	1	; () banked
 16135  0009A4  598D               	subwfb	(printf@val+1)& (0+255),w,b
 16136  0009A6  0009               	tblrd		*+
 16137  0009A8  50F5               	movf	tablat,w,c
 16138  0009AA  0101               	movlb	1	; () banked
 16139  0009AC  598E               	subwfb	(printf@val+2)& (0+255),w,b
 16140  0009AE  0009               	tblrd		*+
 16141  0009B0  50F5               	movf	tablat,w,c
 16142  0009B2  0101               	movlb	1	; () banked
 16143  0009B4  598F               	subwfb	(printf@val+3)& (0+255),w,b
 16144  0009B6  A0D8               	btfss	status,0,c
 16145  0009B8  D010               	goto	l10230
 16146  0009BA  D001               	goto	l10222
 16147                           
 16148                           ; BSR set to: 1
 16149                           ;doprnt.c: 1318: break;
 16150  0009BC  D00E               	goto	l10230
 16151  0009BE                     l10222:
 16152                           
 16153                           ; BSR set to: 1
 16154  0009BE  0101               	movlb	1	; () banked
 16155  0009C0  2B95               	incf	printf@c& (0+255),f,b
 16156  0009C2  D7D9               	goto	l10214
 16157                           
 16158                           ; BSR set to: 1
 16159                           ;doprnt.c: 1336: }
 16160                           
 16161                           ; BSR set to: 1
 16162                           ;doprnt.c: 1320: break;
 16163                           
 16164                           ; BSR set to: 1
 16165  0009C4  D00A               	goto	l10230
 16166  0009C6                     l10228:
 16167                           
 16168                           ; BSR set to: 1
 16169  0009C6  0101               	movlb	1	; () banked
 16170  0009C8  5190               	movf	printf@flag& (0+255),w,b
 16171  0009CA  0B80               	andlw	128
 16172                           
 16173                           ; Switch size 1, requested type "space"
 16174                           ; Number of cases is 2, Range of values is 0 to 128
 16175                           ; switch strategies available:
 16176                           ; Name         Instructions Cycles
 16177                           ; simple_byte            7     4 (average)
 16178                           ;	Chosen strategy is simple_byte
 16179  0009CC  0A00               	xorlw	0	; case 0
 16180  0009CE  B4D8               	btfsc	status,2,c
 16181  0009D0  D7A4               	goto	l10198
 16182  0009D2  0A80               	xorlw	128	; case 128
 16183  0009D4  B4D8               	btfsc	status,2,c
 16184  0009D6  D7CC               	goto	l10212
 16185  0009D8  D000               	goto	l10230
 16186  0009DA                     l10230:
 16187                           
 16188                           ; BSR set to: 1
 16189                           ;doprnt.c: 1345: if(width && flag & 0x03)
 16190  0009DA  0101               	movlb	1	; () banked
 16191  0009DC  5188               	movf	printf@width& (0+255),w,b
 16192  0009DE  0101               	movlb	1	; () banked
 16193  0009E0  1189               	iorwf	(printf@width+1)& (0+255),w,b
 16194  0009E2  B4D8               	btfsc	status,2,c
 16195  0009E4  D015               	goto	l10236
 16196                           
 16197                           ; BSR set to: 1
 16198  0009E6  0E03               	movlw	3
 16199  0009E8  0101               	movlb	1	; () banked
 16200  0009EA  1590               	andwf	printf@flag& (0+255),w,b
 16201  0009EC  0100               	movlb	0	; () banked
 16202  0009EE  6FE7               	movwf	??_printf& (0+255),b
 16203  0009F0  0E00               	movlw	0
 16204  0009F2  0101               	movlb	1	; () banked
 16205  0009F4  1591               	andwf	(printf@flag+1)& (0+255),w,b
 16206  0009F6  0100               	movlb	0	; () banked
 16207  0009F8  6FE8               	movwf	(??_printf+1)& (0+255),b
 16208  0009FA  0100               	movlb	0	; () banked
 16209  0009FC  51E7               	movf	??_printf& (0+255),w,b
 16210  0009FE  0100               	movlb	0	; () banked
 16211  000A00  11E8               	iorwf	(??_printf+1)& (0+255),w,b
 16212  000A02  B4D8               	btfsc	status,2,c
 16213  000A04  D005               	goto	l10236
 16214                           
 16215                           ; BSR set to: 0
 16216                           ;doprnt.c: 1346: width--;
 16217  000A06  0101               	movlb	1	; () banked
 16218  000A08  0788               	decf	printf@width& (0+255),f,b
 16219  000A0A  A0D8               	btfss	status,0,c
 16220  000A0C  0789               	decf	(printf@width+1)& (0+255),f,b
 16221  000A0E  D000               	goto	l10236
 16222  000A10                     l10236:
 16223                           
 16224                           ;doprnt.c: 1381: if(width > c)
 16225  000A10  0E80               	movlw	128
 16226  000A12  0101               	movlb	1	; () banked
 16227  000A14  BF95               	btfsc	printf@c& (0+255),7,b
 16228  000A16  0E7F               	movlw	127
 16229  000A18  0100               	movlb	0	; () banked
 16230  000A1A  6FE7               	movwf	??_printf& (0+255),b
 16231  000A1C  0101               	movlb	1	; () banked
 16232  000A1E  5188               	movf	printf@width& (0+255),w,b
 16233  000A20  0101               	movlb	1	; () banked
 16234  000A22  5D95               	subwf	printf@c& (0+255),w,b
 16235  000A24  0101               	movlb	1	; () banked
 16236  000A26  5189               	movf	(printf@width+1)& (0+255),w,b
 16237  000A28  0A80               	xorlw	128
 16238  000A2A  0100               	movlb	0	; () banked
 16239  000A2C  59E7               	subwfb	??_printf& (0+255),w,b
 16240  000A2E  B0D8               	btfsc	status,0,c
 16241  000A30  D00B               	goto	l10240
 16242                           
 16243                           ; BSR set to: 0
 16244                           ;doprnt.c: 1382: width -= c;
 16245  000A32  0101               	movlb	1	; () banked
 16246  000A34  5195               	movf	printf@c& (0+255),w,b
 16247  000A36  0101               	movlb	1	; () banked
 16248  000A38  5F88               	subwf	printf@width& (0+255),f,b
 16249  000A3A  0E00               	movlw	0
 16250  000A3C  0101               	movlb	1	; () banked
 16251  000A3E  BF95               	btfsc	printf@c& (0+255),7,b
 16252  000A40  0EFF               	movlw	255
 16253  000A42  0101               	movlb	1	; () banked
 16254  000A44  5B89               	subwfb	(printf@width+1)& (0+255),f,b
 16255  000A46  D006               	goto	l10242
 16256  000A48                     l10240:
 16257                           
 16258                           ;doprnt.c: 1383: else
 16259                           ;doprnt.c: 1384: width = 0;
 16260  000A48  0E00               	movlw	0
 16261  000A4A  0101               	movlb	1	; () banked
 16262  000A4C  6F89               	movwf	(printf@width+1)& (0+255),b
 16263  000A4E  0E00               	movlw	0
 16264  000A50  6F88               	movwf	printf@width& (0+255),b
 16265  000A52  D000               	goto	l10242
 16266  000A54                     l10242:
 16267                           
 16268                           ; BSR set to: 1
 16269                           ;doprnt.c: 1387: if(flag & 0x04) {
 16270  000A54  0101               	movlb	1	; () banked
 16271  000A56  A590               	btfss	printf@flag& (0+255),2,b
 16272  000A58  D029               	goto	l10254
 16273                           
 16274                           ; BSR set to: 1
 16275                           ;doprnt.c: 1392: if(flag & 0x03)
 16276  000A5A  0E03               	movlw	3
 16277  000A5C  0101               	movlb	1	; () banked
 16278  000A5E  1590               	andwf	printf@flag& (0+255),w,b
 16279  000A60  0100               	movlb	0	; () banked
 16280  000A62  6FE7               	movwf	??_printf& (0+255),b
 16281  000A64  0E00               	movlw	0
 16282  000A66  0101               	movlb	1	; () banked
 16283  000A68  1591               	andwf	(printf@flag+1)& (0+255),w,b
 16284  000A6A  0100               	movlb	0	; () banked
 16285  000A6C  6FE8               	movwf	(??_printf+1)& (0+255),b
 16286  000A6E  0100               	movlb	0	; () banked
 16287  000A70  51E7               	movf	??_printf& (0+255),w,b
 16288  000A72  0100               	movlb	0	; () banked
 16289  000A74  11E8               	iorwf	(??_printf+1)& (0+255),w,b
 16290  000A76  B4D8               	btfsc	status,2,c
 16291  000A78  D004               	goto	l10248
 16292                           
 16293                           ; BSR set to: 0
 16294                           ;doprnt.c: 1393: (putch('-') );
 16295  000A7A  0E2D               	movlw	45
 16296  000A7C  ECA5  F02A         	call	_putch
 16297  000A80  D000               	goto	l10248
 16298  000A82                     l10248:
 16299                           
 16300                           ;doprnt.c: 1415: if(width)
 16301  000A82  0101               	movlb	1	; () banked
 16302  000A84  5188               	movf	printf@width& (0+255),w,b
 16303  000A86  0101               	movlb	1	; () banked
 16304  000A88  1189               	iorwf	(printf@width+1)& (0+255),w,b
 16305  000A8A  B4D8               	btfsc	status,2,c
 16306  000A8C  D038               	goto	l10264
 16307  000A8E                     l10250:
 16308                           
 16309                           ; BSR set to: 1
 16310                           ;doprnt.c: 1417: (putch('0') );
 16311  000A8E  0E30               	movlw	48
 16312  000A90  ECA5  F02A         	call	_putch
 16313                           
 16314                           ;doprnt.c: 1418: while(--width);
 16315  000A94  0101               	movlb	1	; () banked
 16316  000A96  0788               	decf	printf@width& (0+255),f,b
 16317  000A98  A0D8               	btfss	status,0,c
 16318  000A9A  0789               	decf	(printf@width+1)& (0+255),f,b
 16319  000A9C  0101               	movlb	1	; () banked
 16320  000A9E  5188               	movf	printf@width& (0+255),w,b
 16321  000AA0  0101               	movlb	1	; () banked
 16322  000AA2  1189               	iorwf	(printf@width+1)& (0+255),w,b
 16323  000AA4  B4D8               	btfsc	status,2,c
 16324  000AA6  D02B               	goto	l10264
 16325  000AA8  D7F2               	goto	l10250
 16326                           
 16327                           ; BSR set to: 1
 16328                           ;doprnt.c: 1420: } else
 16329                           
 16330                           ; BSR set to: 1
 16331  000AAA  D029               	goto	l10264
 16332  000AAC                     l10254:
 16333                           
 16334                           ; BSR set to: 1
 16335                           ;doprnt.c: 1422: {
 16336                           ;doprnt.c: 1424: if(width
 16337                           ;doprnt.c: 1428: )
 16338  000AAC  0101               	movlb	1	; () banked
 16339  000AAE  5188               	movf	printf@width& (0+255),w,b
 16340  000AB0  0101               	movlb	1	; () banked
 16341  000AB2  1189               	iorwf	(printf@width+1)& (0+255),w,b
 16342  000AB4  B4D8               	btfsc	status,2,c
 16343  000AB6  D00F               	goto	l10260
 16344  000AB8                     l10256:
 16345                           
 16346                           ; BSR set to: 1
 16347                           ;doprnt.c: 1430: (putch(' ') );
 16348  000AB8  0E20               	movlw	32
 16349  000ABA  ECA5  F02A         	call	_putch
 16350                           
 16351                           ;doprnt.c: 1431: while(--width);
 16352  000ABE  0101               	movlb	1	; () banked
 16353  000AC0  0788               	decf	printf@width& (0+255),f,b
 16354  000AC2  A0D8               	btfss	status,0,c
 16355  000AC4  0789               	decf	(printf@width+1)& (0+255),f,b
 16356  000AC6  0101               	movlb	1	; () banked
 16357  000AC8  5188               	movf	printf@width& (0+255),w,b
 16358  000ACA  0101               	movlb	1	; () banked
 16359  000ACC  1189               	iorwf	(printf@width+1)& (0+255),w,b
 16360  000ACE  B4D8               	btfsc	status,2,c
 16361  000AD0  D002               	goto	l10260
 16362  000AD2  D7F2               	goto	l10256
 16363                           
 16364                           ; BSR set to: 1
 16365  000AD4  D000               	goto	l10260
 16366  000AD6                     l10260:
 16367                           
 16368                           ; BSR set to: 1
 16369                           ;doprnt.c: 1438: if(flag & 0x03)
 16370  000AD6  0E03               	movlw	3
 16371  000AD8  0101               	movlb	1	; () banked
 16372  000ADA  1590               	andwf	printf@flag& (0+255),w,b
 16373  000ADC  0100               	movlb	0	; () banked
 16374  000ADE  6FE7               	movwf	??_printf& (0+255),b
 16375  000AE0  0E00               	movlw	0
 16376  000AE2  0101               	movlb	1	; () banked
 16377  000AE4  1591               	andwf	(printf@flag+1)& (0+255),w,b
 16378  000AE6  0100               	movlb	0	; () banked
 16379  000AE8  6FE8               	movwf	(??_printf+1)& (0+255),b
 16380  000AEA  0100               	movlb	0	; () banked
 16381  000AEC  51E7               	movf	??_printf& (0+255),w,b
 16382  000AEE  0100               	movlb	0	; () banked
 16383  000AF0  11E8               	iorwf	(??_printf+1)& (0+255),w,b
 16384  000AF2  B4D8               	btfsc	status,2,c
 16385  000AF4  D004               	goto	l10264
 16386                           
 16387                           ; BSR set to: 0
 16388                           ;doprnt.c: 1439: (putch('-') );
 16389  000AF6  0E2D               	movlw	45
 16390  000AF8  ECA5  F02A         	call	_putch
 16391  000AFC  D000               	goto	l10264
 16392  000AFE                     l10264:
 16393                           
 16394                           ;doprnt.c: 1469: }
 16395                           ;doprnt.c: 1472: prec = c;
 16396  000AFE  0101               	movlb	1	; () banked
 16397  000B00  5195               	movf	printf@c& (0+255),w,b
 16398  000B02  0101               	movlb	1	; () banked
 16399  000B04  6F82               	movwf	printf@prec& (0+255),b
 16400  000B06  6B83               	clrf	(printf@prec+1)& (0+255),b
 16401  000B08  BF82               	btfsc	printf@prec& (0+255),7,b
 16402  000B0A  0783               	decf	(printf@prec+1)& (0+255),f,b
 16403                           
 16404                           ;doprnt.c: 1474: while(prec--) {
 16405  000B0C  D08A               	goto	l10278
 16406                           
 16407                           ; BSR set to: 1
 16408                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
 16409  000B0E  D07A               	goto	l10274
 16410  000B10                     l10266:
 16411                           
 16412                           ; BSR set to: 1
 16413                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 16414  000B10  C182  F0E7         	movff	printf@prec,??_printf
 16415  000B14  C183  F0E8         	movff	printf@prec+1,??_printf+1
 16416  000B18  0100               	movlb	0	; () banked
 16417  000B1A  90D8               	bcf	status,0,c
 16418  000B1C  37E7               	rlcf	??_printf& (0+255),f,b
 16419  000B1E  37E8               	rlcf	(??_printf+1)& (0+255),f,b
 16420  000B20  0100               	movlb	0	; () banked
 16421  000B22  90D8               	bcf	status,0,c
 16422  000B24  37E7               	rlcf	??_printf& (0+255),f,b
 16423  000B26  37E8               	rlcf	(??_printf+1)& (0+255),f,b
 16424  000B28  0E0E               	movlw	low _dpowers
 16425  000B2A  0100               	movlb	0	; () banked
 16426  000B2C  25E7               	addwf	??_printf& (0+255),w,b
 16427  000B2E  6EF6               	movwf	tblptrl,c
 16428  000B30  0EFE               	movlw	high _dpowers
 16429  000B32  21E8               	addwfc	(??_printf+1)& (0+255),w,b
 16430  000B34  6EF7               	movwf	tblptrh,c
 16431  000B36                     	if	0	;There are less than 3 active tblptr bytes
 16432  000B36                     	endif
 16433  000B36  0009               	tblrd		*+
 16434  000B38  CFF5 F015          	movff	tablat,___lldiv@divisor
 16435  000B3C  0009               	tblrd		*+
 16436  000B3E  CFF5 F016          	movff	tablat,___lldiv@divisor+1
 16437  000B42  0009               	tblrd		*+
 16438  000B44  CFF5 F017          	movff	tablat,___lldiv@divisor+2
 16439  000B48  000A               	tblrd		*-
 16440  000B4A  CFF5 F018          	movff	tablat,___lldiv@divisor+3
 16441  000B4E  C18C  F011         	movff	printf@val,___lldiv@dividend
 16442  000B52  C18D  F012         	movff	printf@val+1,___lldiv@dividend+1
 16443  000B56  C18E  F013         	movff	printf@val+2,___lldiv@dividend+2
 16444  000B5A  C18F  F014         	movff	printf@val+3,___lldiv@dividend+3
 16445  000B5E  EC94  F022         	call	___lldiv	;wreg free
 16446  000B62  C011  F01E         	movff	?___lldiv,___llmod@dividend
 16447  000B66  C012  F01F         	movff	?___lldiv+1,___llmod@dividend+1
 16448  000B6A  C013  F020         	movff	?___lldiv+2,___llmod@dividend+2
 16449  000B6E  C014  F021         	movff	?___lldiv+3,___llmod@dividend+3
 16450  000B72  0E0A               	movlw	10
 16451  000B74  6E22               	movwf	___llmod@divisor,c
 16452  000B76  0E00               	movlw	0
 16453  000B78  6E23               	movwf	___llmod@divisor+1,c
 16454  000B7A  0E00               	movlw	0
 16455  000B7C  6E24               	movwf	___llmod@divisor+2,c
 16456  000B7E  0E00               	movlw	0
 16457  000B80  6E25               	movwf	___llmod@divisor+3,c
 16458  000B82  ECDB  F023         	call	___llmod	;wreg free
 16459  000B86  501E               	movf	?___llmod,w,c
 16460  000B88  0F30               	addlw	48
 16461  000B8A  0101               	movlb	1	; () banked
 16462  000B8C  6F95               	movwf	printf@c& (0+255),b
 16463                           
 16464                           ;doprnt.c: 1491: break;
 16465  000B8E  D044               	goto	l10276
 16466  000B90                     l10268:
 16467                           
 16468                           ; BSR set to: 1
 16469                           ;doprnt.c: 1499: {
 16470                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 16471  000B90  C18C  F011         	movff	printf@val,___lldiv@dividend
 16472  000B94  C18D  F012         	movff	printf@val+1,___lldiv@dividend+1
 16473  000B98  C18E  F013         	movff	printf@val+2,___lldiv@dividend+2
 16474  000B9C  C18F  F014         	movff	printf@val+3,___lldiv@dividend+3
 16475  000BA0  C182  F0E7         	movff	printf@prec,??_printf
 16476  000BA4  C183  F0E8         	movff	printf@prec+1,??_printf+1
 16477  000BA8  0100               	movlb	0	; () banked
 16478  000BAA  90D8               	bcf	status,0,c
 16479  000BAC  37E7               	rlcf	??_printf& (0+255),f,b
 16480  000BAE  37E8               	rlcf	(??_printf+1)& (0+255),f,b
 16481  000BB0  0100               	movlb	0	; () banked
 16482  000BB2  90D8               	bcf	status,0,c
 16483  000BB4  37E7               	rlcf	??_printf& (0+255),f,b
 16484  000BB6  37E8               	rlcf	(??_printf+1)& (0+255),f,b
 16485  000BB8  0E84               	movlw	low _hexpowers
 16486  000BBA  0100               	movlb	0	; () banked
 16487  000BBC  25E7               	addwf	??_printf& (0+255),w,b
 16488  000BBE  6EF6               	movwf	tblptrl,c
 16489  000BC0  0EFE               	movlw	high _hexpowers
 16490  000BC2  21E8               	addwfc	(??_printf+1)& (0+255),w,b
 16491  000BC4  6EF7               	movwf	tblptrh,c
 16492  000BC6                     	if	0	;There are less than 3 active tblptr bytes
 16493  000BC6                     	endif
 16494  000BC6  0009               	tblrd		*+
 16495  000BC8  CFF5 F015          	movff	tablat,___lldiv@divisor
 16496  000BCC  0009               	tblrd		*+
 16497  000BCE  CFF5 F016          	movff	tablat,___lldiv@divisor+1
 16498  000BD2  0009               	tblrd		*+
 16499  000BD4  CFF5 F017          	movff	tablat,___lldiv@divisor+2
 16500  000BD8  000A               	tblrd		*-
 16501  000BDA  CFF5 F018          	movff	tablat,___lldiv@divisor+3
 16502  000BDE  EC94  F022         	call	___lldiv	;wreg free
 16503  000BE2  5011               	movf	?___lldiv,w,c
 16504  000BE4  0B0F               	andlw	15
 16505  000BE6  0101               	movlb	1	; () banked
 16506  000BE8  6F7F               	movwf	printf@idx& (0+255),b
 16507                           
 16508                           ; BSR set to: 1
 16509                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 16510  000BEA  0101               	movlb	1	; () banked
 16511  000BEC  517F               	movf	printf@idx& (0+255),w,b
 16512  000BEE  0D01               	mullw	1
 16513  000BF0  0E16               	movlw	low STR_39
 16514  000BF2  24F3               	addwf	prodl,w,c
 16515  000BF4  6EF6               	movwf	tblptrl,c
 16516  000BF6  0EFF               	movlw	high STR_39
 16517  000BF8  20F4               	addwfc	prodh,w,c
 16518  000BFA  6EF7               	movwf	tblptrh,c
 16519  000BFC                     	if	0	;There are less than 3 active tblptr bytes
 16520  000BFC                     	endif
 16521  000BFC  0008               	tblrd		*
 16522  000BFE  CFF5 F195          	movff	tablat,printf@c
 16523                           
 16524                           ; BSR set to: 1
 16525                           ;doprnt.c: 1523: }
 16526                           
 16527                           ;doprnt.c: 1508: }
 16528                           ;doprnt.c: 1510: break;
 16529  000C02  D00A               	goto	l10276
 16530  000C04                     l10274:
 16531                           
 16532                           ; BSR set to: 1
 16533  000C04  0101               	movlb	1	; () banked
 16534  000C06  5190               	movf	printf@flag& (0+255),w,b
 16535  000C08  0B80               	andlw	128
 16536                           
 16537                           ; Switch size 1, requested type "space"
 16538                           ; Number of cases is 2, Range of values is 0 to 128
 16539                           ; switch strategies available:
 16540                           ; Name         Instructions Cycles
 16541                           ; simple_byte            7     4 (average)
 16542                           ;	Chosen strategy is simple_byte
 16543  000C0A  0A00               	xorlw	0	; case 0
 16544  000C0C  B4D8               	btfsc	status,2,c
 16545  000C0E  D780               	goto	l10266
 16546  000C10  0A80               	xorlw	128	; case 128
 16547  000C12  B4D8               	btfsc	status,2,c
 16548  000C14  D7BD               	goto	l10268
 16549  000C16  D000               	goto	l10276
 16550  000C18                     l10276:
 16551                           
 16552                           ; BSR set to: 1
 16553                           ;doprnt.c: 1524: (putch(c) );
 16554  000C18  0101               	movlb	1	; () banked
 16555  000C1A  5195               	movf	printf@c& (0+255),w,b
 16556  000C1C  ECA5  F02A         	call	_putch
 16557  000C20  D000               	goto	l10278
 16558  000C22                     l10278:
 16559  000C22  0101               	movlb	1	; () banked
 16560  000C24  0782               	decf	printf@prec& (0+255),f,b
 16561  000C26  A0D8               	btfss	status,0,c
 16562  000C28  0783               	decf	(printf@prec+1)& (0+255),f,b
 16563  000C2A  0101               	movlb	1	; () banked
 16564  000C2C  2982               	incf	printf@prec& (0+255),w,b
 16565  000C2E  E1EA               	bnz	l10274
 16566  000C30  0101               	movlb	1	; () banked
 16567  000C32  2983               	incf	(printf@prec+1)& (0+255),w,b
 16568  000C34  B4D8               	btfsc	status,2,c
 16569  000C36  D002               	goto	l10280
 16570  000C38  D7E5               	goto	l10274
 16571                           
 16572                           ; BSR set to: 1
 16573  000C3A  D000               	goto	l10280
 16574  000C3C                     l10280:
 16575  000C3C  C0D9  FFF6         	movff	printf@f,tblptrl
 16576  000C40  C0DA  FFF7         	movff	printf@f+1,tblptrh
 16577  000C44  0100               	movlb	0	; () banked
 16578  000C46  4BD9               	infsnz	printf@f& (0+255),f,b
 16579  000C48  2BDA               	incf	(printf@f+1)& (0+255),f,b
 16580  000C4A                     	if	0	;tblptru may be non-zero
 16581  000C4A                     	endif
 16582  000C4A                     	if	0	;tblptru may be non-zero
 16583  000C4A                     	endif
 16584  000C4A  0008               	tblrd		*
 16585  000C4C  CFF5 F195          	movff	tablat,printf@c
 16586  000C50  0101               	movlb	1	; () banked
 16587  000C52  5195               	movf	printf@c& (0+255),w,b
 16588  000C54  B4D8               	btfsc	status,2,c
 16589  000C56  D003               	goto	l1598
 16590  000C58  EF16  F000         	goto	l9994
 16591                           
 16592                           ; BSR set to: 1
 16593  000C5C  D000               	goto	l1598
 16594  000C5E                     l1598:
 16595  000C5E  0012               	return		;funcret
 16596  000C60                     __end_of_printf:
 16597                           	opt stack 0
 16598                           tblptru	equ	0xFF8
 16599                           tblptrh	equ	0xFF7
 16600                           tblptrl	equ	0xFF6
 16601                           tablat	equ	0xFF5
 16602                           prodh	equ	0xFF4
 16603                           prodl	equ	0xFF3
 16604                           intcon	equ	0xFF2
 16605                           intcon2	equ	0xFF1
 16606                           postinc0	equ	0xFEE
 16607                           wreg	equ	0xFE8
 16608                           postdec1	equ	0xFE5
 16609                           fsr1l	equ	0xFE1
 16610                           indf2	equ	0xFDF
 16611                           postinc2	equ	0xFDE
 16612                           postdec2	equ	0xFDD
 16613                           fsr2h	equ	0xFDA
 16614                           fsr2l	equ	0xFD9
 16615                           status	equ	0xFD8
 16616                           
 16617 ;; *************** function _scale *****************
 16618 ;; Defined at:
 16619 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 16620 ;; Parameters:    Size  Location     Type
 16621 ;;  scl             1    wreg     char 
 16622 ;; Auto vars:     Size  Location     Type
 16623 ;;  scl             1   72[COMRAM] char 
 16624 ;; Return value:  Size  Location     Type
 16625 ;;                  3   66[COMRAM] char 
 16626 ;; Registers used:
 16627 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16628 ;; Tracked objects:
 16629 ;;		On entry : 0/0
 16630 ;;		On exit  : 0/0
 16631 ;;		Unchanged: 0/0
 16632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16633 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16634 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16636 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16637 ;;Total ram usage:        7 bytes
 16638 ;; Hardware stack levels used:    1
 16639 ;; Hardware stack levels required when called:    5
 16640 ;; This function calls:
 16641 ;;		___awdiv
 16642 ;;		___awmod
 16643 ;;		___ftmul
 16644 ;;		___wmul
 16645 ;; This function is called by:
 16646 ;;		_printf
 16647 ;; This function uses a non-reentrant model
 16648 ;;
 16649                           
 16650                           	psect	text76
 16651  001284                     __ptext76:
 16652                           	opt stack 0
 16653  001284                     _scale:
 16654                           	opt stack 24
 16655                           
 16656                           ;incstack = 0
 16657                           ;scale@scl stored from wreg
 16658  001284  6E49               	movwf	scale@scl,c
 16659                           
 16660                           ;doprnt.c: 428: if(scl < 0) {
 16661  001286  AE49               	btfss	scale@scl,7,c
 16662  001288  D0EF               	goto	l9716
 16663                           
 16664                           ;doprnt.c: 429: scl = -scl;
 16665  00128A  6C49               	negf	scale@scl,c
 16666                           
 16667                           ;doprnt.c: 430: if(scl>=110)
 16668  00128C  5049               	movf	scale@scl,w,c
 16669  00128E  0A80               	xorlw	128
 16670  001290  0F12               	addlw	-238
 16671  001292  A0D8               	btfss	status,0,c
 16672  001294  D08D               	goto	l9706
 16673                           
 16674                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 16675  001296  0E00               	movlw	0
 16676  001298  6E14               	movwf	___wmul@multiplicand+1,c
 16677  00129A  0E03               	movlw	3
 16678  00129C  6E13               	movwf	___wmul@multiplicand,c
 16679  00129E  0E00               	movlw	0
 16680  0012A0  6E1A               	movwf	___awdiv@divisor+1,c
 16681  0012A2  0E0A               	movlw	10
 16682  0012A4  6E19               	movwf	___awdiv@divisor,c
 16683  0012A6  0E00               	movlw	0
 16684  0012A8  6E40               	movwf	___awmod@divisor+1,c
 16685  0012AA  0E64               	movlw	100
 16686  0012AC  6E3F               	movwf	___awmod@divisor,c
 16687  0012AE  5049               	movf	scale@scl,w,c
 16688  0012B0  6E3D               	movwf	___awmod@dividend,c
 16689  0012B2  6A3E               	clrf	___awmod@dividend+1,c
 16690  0012B4  BE3D               	btfsc	___awmod@dividend,7,c
 16691  0012B6  063E               	decf	___awmod@dividend+1,f,c
 16692  0012B8  EC1E  F023         	call	___awmod	;wreg free
 16693  0012BC  C03D  F017         	movff	?___awmod,___awdiv@dividend
 16694  0012C0  C03E  F018         	movff	?___awmod+1,___awdiv@dividend+1
 16695  0012C4  ECB6  F021         	call	___awdiv	;wreg free
 16696  0012C8  0E09               	movlw	9
 16697  0012CA  2417               	addwf	?___awdiv,w,c
 16698  0012CC  6E11               	movwf	___wmul@multiplier,c
 16699  0012CE  0E00               	movlw	0
 16700  0012D0  2018               	addwfc	?___awdiv+1,w,c
 16701  0012D2  6E12               	movwf	___wmul@multiplier+1,c
 16702  0012D4  EC90  F028         	call	___wmul	;wreg free
 16703  0012D8  0E36               	movlw	low __npowers_
 16704  0012DA  2411               	addwf	?___wmul,w,c
 16705  0012DC  6EF6               	movwf	tblptrl,c
 16706  0012DE  0EFE               	movlw	high __npowers_
 16707  0012E0  2012               	addwfc	?___wmul+1,w,c
 16708  0012E2  6EF7               	movwf	tblptrh,c
 16709  0012E4                     	if	0	;There are less than 3 active tblptr bytes
 16710  0012E4                     	endif
 16711  0012E4  0009               	tblrd		*+
 16712  0012E6  CFF5 F022          	movff	tablat,___ftmul@f2
 16713  0012EA  0009               	tblrd		*+
 16714  0012EC  CFF5 F023          	movff	tablat,___ftmul@f2+1
 16715  0012F0  000A               	tblrd		*-
 16716  0012F2  CFF5 F024          	movff	tablat,___ftmul@f2+2
 16717  0012F6  0E00               	movlw	0
 16718  0012F8  6E1A               	movwf	___awdiv@divisor+1,c
 16719  0012FA  0E64               	movlw	100
 16720  0012FC  6E19               	movwf	___awdiv@divisor,c
 16721  0012FE  5049               	movf	scale@scl,w,c
 16722  001300  6E17               	movwf	___awdiv@dividend,c
 16723  001302  6A18               	clrf	___awdiv@dividend+1,c
 16724  001304  BE17               	btfsc	___awdiv@dividend,7,c
 16725  001306  0618               	decf	___awdiv@dividend+1,f,c
 16726  001308  ECB6  F021         	call	___awdiv	;wreg free
 16727  00130C  0E12               	movlw	18
 16728  00130E  2417               	addwf	?___awdiv,w,c
 16729  001310  6E11               	movwf	___wmul@multiplier,c
 16730  001312  0E00               	movlw	0
 16731  001314  2018               	addwfc	?___awdiv+1,w,c
 16732  001316  6E12               	movwf	___wmul@multiplier+1,c
 16733  001318  0E00               	movlw	0
 16734  00131A  6E14               	movwf	___wmul@multiplicand+1,c
 16735  00131C  0E03               	movlw	3
 16736  00131E  6E13               	movwf	___wmul@multiplicand,c
 16737  001320  EC90  F028         	call	___wmul	;wreg free
 16738  001324  0E36               	movlw	low __npowers_
 16739  001326  2411               	addwf	?___wmul,w,c
 16740  001328  6EF6               	movwf	tblptrl,c
 16741  00132A  0EFE               	movlw	high __npowers_
 16742  00132C  2012               	addwfc	?___wmul+1,w,c
 16743  00132E  6EF7               	movwf	tblptrh,c
 16744  001330                     	if	0	;There are less than 3 active tblptr bytes
 16745  001330                     	endif
 16746  001330  0009               	tblrd		*+
 16747  001332  CFF5 F01F          	movff	tablat,___ftmul@f1
 16748  001336  0009               	tblrd		*+
 16749  001338  CFF5 F020          	movff	tablat,___ftmul@f1+1
 16750  00133C  000A               	tblrd		*-
 16751  00133E  CFF5 F021          	movff	tablat,___ftmul@f1+2
 16752  001342  EC41  F01B         	call	___ftmul	;wreg free
 16753  001346  C01F  F046         	movff	?___ftmul,_scale$3327
 16754  00134A  C020  F047         	movff	?___ftmul+1,_scale$3327+1
 16755  00134E  C021  F048         	movff	?___ftmul+2,_scale$3327+2
 16756                           
 16757                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 16758  001352  C046  F01F         	movff	_scale$3327,___ftmul@f1
 16759  001356  C047  F020         	movff	_scale$3327+1,___ftmul@f1+1
 16760  00135A  C048  F021         	movff	_scale$3327+2,___ftmul@f1+2
 16761  00135E  0E00               	movlw	0
 16762  001360  6E14               	movwf	___wmul@multiplicand+1,c
 16763  001362  0E03               	movlw	3
 16764  001364  6E13               	movwf	___wmul@multiplicand,c
 16765  001366  0E00               	movlw	0
 16766  001368  6E40               	movwf	___awmod@divisor+1,c
 16767  00136A  0E0A               	movlw	10
 16768  00136C  6E3F               	movwf	___awmod@divisor,c
 16769  00136E  5049               	movf	scale@scl,w,c
 16770  001370  6E3D               	movwf	___awmod@dividend,c
 16771  001372  6A3E               	clrf	___awmod@dividend+1,c
 16772  001374  BE3D               	btfsc	___awmod@dividend,7,c
 16773  001376  063E               	decf	___awmod@dividend+1,f,c
 16774  001378  EC1E  F023         	call	___awmod	;wreg free
 16775  00137C  C03D  F011         	movff	?___awmod,___wmul@multiplier
 16776  001380  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 16777  001384  EC90  F028         	call	___wmul	;wreg free
 16778  001388  0E36               	movlw	low __npowers_
 16779  00138A  2411               	addwf	?___wmul,w,c
 16780  00138C  6EF6               	movwf	tblptrl,c
 16781  00138E  0EFE               	movlw	high __npowers_
 16782  001390  2012               	addwfc	?___wmul+1,w,c
 16783  001392  6EF7               	movwf	tblptrh,c
 16784  001394                     	if	0	;There are less than 3 active tblptr bytes
 16785  001394                     	endif
 16786  001394  0009               	tblrd		*+
 16787  001396  CFF5 F022          	movff	tablat,___ftmul@f2
 16788  00139A  0009               	tblrd		*+
 16789  00139C  CFF5 F023          	movff	tablat,___ftmul@f2+1
 16790  0013A0  000A               	tblrd		*-
 16791  0013A2  CFF5 F024          	movff	tablat,___ftmul@f2+2
 16792  0013A6  EC41  F01B         	call	___ftmul	;wreg free
 16793  0013AA  D141               	goto	L14
 16794  0013AC  D15A               	goto	l1487
 16795  0013AE  D054               	goto	l9712
 16796  0013B0                     l9706:
 16797                           
 16798                           ;doprnt.c: 432: else if(scl > 10)
 16799  0013B0  5049               	movf	scale@scl,w,c
 16800  0013B2  0A80               	xorlw	128
 16801  0013B4  0F75               	addlw	-139
 16802  0013B6  A0D8               	btfss	status,0,c
 16803  0013B8  D04F               	goto	l9712
 16804                           
 16805                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 16806  0013BA  0E00               	movlw	0
 16807  0013BC  6E1A               	movwf	___awdiv@divisor+1,c
 16808  0013BE  0E0A               	movlw	10
 16809  0013C0  6E19               	movwf	___awdiv@divisor,c
 16810  0013C2  5049               	movf	scale@scl,w,c
 16811  0013C4  6E17               	movwf	___awdiv@dividend,c
 16812  0013C6  6A18               	clrf	___awdiv@dividend+1,c
 16813  0013C8  BE17               	btfsc	___awdiv@dividend,7,c
 16814  0013CA  0618               	decf	___awdiv@dividend+1,f,c
 16815  0013CC  ECB6  F021         	call	___awdiv	;wreg free
 16816  0013D0  0E09               	movlw	9
 16817  0013D2  2417               	addwf	?___awdiv,w,c
 16818  0013D4  6E11               	movwf	___wmul@multiplier,c
 16819  0013D6  0E00               	movlw	0
 16820  0013D8  2018               	addwfc	?___awdiv+1,w,c
 16821  0013DA  6E12               	movwf	___wmul@multiplier+1,c
 16822  0013DC  0E00               	movlw	0
 16823  0013DE  6E14               	movwf	___wmul@multiplicand+1,c
 16824  0013E0  0E03               	movlw	3
 16825  0013E2  6E13               	movwf	___wmul@multiplicand,c
 16826  0013E4  EC90  F028         	call	___wmul	;wreg free
 16827  0013E8  0E36               	movlw	low __npowers_
 16828  0013EA  2411               	addwf	?___wmul,w,c
 16829  0013EC  6EF6               	movwf	tblptrl,c
 16830  0013EE  0EFE               	movlw	high __npowers_
 16831  0013F0  2012               	addwfc	?___wmul+1,w,c
 16832  0013F2  6EF7               	movwf	tblptrh,c
 16833  0013F4                     	if	0	;There are less than 3 active tblptr bytes
 16834  0013F4                     	endif
 16835  0013F4  0009               	tblrd		*+
 16836  0013F6  CFF5 F01F          	movff	tablat,___ftmul@f1
 16837  0013FA  0009               	tblrd		*+
 16838  0013FC  CFF5 F020          	movff	tablat,___ftmul@f1+1
 16839  001400  000A               	tblrd		*-
 16840  001402  CFF5 F021          	movff	tablat,___ftmul@f1+2
 16841  001406  0E00               	movlw	0
 16842  001408  6E14               	movwf	___wmul@multiplicand+1,c
 16843  00140A  0E03               	movlw	3
 16844  00140C  6E13               	movwf	___wmul@multiplicand,c
 16845  00140E  0E00               	movlw	0
 16846  001410  6E40               	movwf	___awmod@divisor+1,c
 16847  001412  0E0A               	movlw	10
 16848  001414  6E3F               	movwf	___awmod@divisor,c
 16849  001416  5049               	movf	scale@scl,w,c
 16850  001418  6E3D               	movwf	___awmod@dividend,c
 16851  00141A  6A3E               	clrf	___awmod@dividend+1,c
 16852  00141C  BE3D               	btfsc	___awmod@dividend,7,c
 16853  00141E  063E               	decf	___awmod@dividend+1,f,c
 16854  001420  EC1E  F023         	call	___awmod	;wreg free
 16855  001424  C03D  F011         	movff	?___awmod,___wmul@multiplier
 16856  001428  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 16857  00142C  EC90  F028         	call	___wmul	;wreg free
 16858  001430  0E36               	movlw	low __npowers_
 16859  001432  2411               	addwf	?___wmul,w,c
 16860  001434  6EF6               	movwf	tblptrl,c
 16861  001436  0EFE               	movlw	high __npowers_
 16862  001438  2012               	addwfc	?___wmul+1,w,c
 16863  00143A  6EF7               	movwf	tblptrh,c
 16864  00143C                     	if	0	;There are less than 3 active tblptr bytes
 16865  00143C                     	endif
 16866  00143C  0009               	tblrd		*+
 16867  00143E  CFF5 F022          	movff	tablat,___ftmul@f2
 16868  001442  0009               	tblrd		*+
 16869  001444  CFF5 F023          	movff	tablat,___ftmul@f2+1
 16870  001448  000A               	tblrd		*-
 16871  00144A  CFF5 F024          	movff	tablat,___ftmul@f2+2
 16872  00144E  EC41  F01B         	call	___ftmul	;wreg free
 16873  001452  D0ED               	goto	L14
 16874  001454  D106               	goto	l1487
 16875  001456  D000               	goto	l9712
 16876  001458                     l9712:
 16877                           
 16878                           ;doprnt.c: 434: return _npowers_[scl];
 16879  001458  5049               	movf	scale@scl,w,c
 16880  00145A  0D03               	mullw	3
 16881  00145C  0E36               	movlw	low __npowers_
 16882  00145E  24F3               	addwf	prodl,w,c
 16883  001460  6EF6               	movwf	tblptrl,c
 16884  001462  0EFE               	movlw	high __npowers_
 16885  001464  D0F2               	goto	L13
 16886  001466  D0FD               	goto	l1487
 16887  001468                     l9716:
 16888                           
 16889                           ;doprnt.c: 435: }
 16890                           ;doprnt.c: 436: if(scl>=110)
 16891  001468  5049               	movf	scale@scl,w,c
 16892  00146A  0A80               	xorlw	128
 16893  00146C  0F12               	addlw	-238
 16894  00146E  A0D8               	btfss	status,0,c
 16895  001470  D08D               	goto	l9724
 16896                           
 16897                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 16898  001472  0E00               	movlw	0
 16899  001474  6E14               	movwf	___wmul@multiplicand+1,c
 16900  001476  0E03               	movlw	3
 16901  001478  6E13               	movwf	___wmul@multiplicand,c
 16902  00147A  0E00               	movlw	0
 16903  00147C  6E1A               	movwf	___awdiv@divisor+1,c
 16904  00147E  0E0A               	movlw	10
 16905  001480  6E19               	movwf	___awdiv@divisor,c
 16906  001482  0E00               	movlw	0
 16907  001484  6E40               	movwf	___awmod@divisor+1,c
 16908  001486  0E64               	movlw	100
 16909  001488  6E3F               	movwf	___awmod@divisor,c
 16910  00148A  5049               	movf	scale@scl,w,c
 16911  00148C  6E3D               	movwf	___awmod@dividend,c
 16912  00148E  6A3E               	clrf	___awmod@dividend+1,c
 16913  001490  BE3D               	btfsc	___awmod@dividend,7,c
 16914  001492  063E               	decf	___awmod@dividend+1,f,c
 16915  001494  EC1E  F023         	call	___awmod	;wreg free
 16916  001498  C03D  F017         	movff	?___awmod,___awdiv@dividend
 16917  00149C  C03E  F018         	movff	?___awmod+1,___awdiv@dividend+1
 16918  0014A0  ECB6  F021         	call	___awdiv	;wreg free
 16919  0014A4  0E09               	movlw	9
 16920  0014A6  2417               	addwf	?___awdiv,w,c
 16921  0014A8  6E11               	movwf	___wmul@multiplier,c
 16922  0014AA  0E00               	movlw	0
 16923  0014AC  2018               	addwfc	?___awdiv+1,w,c
 16924  0014AE  6E12               	movwf	___wmul@multiplier+1,c
 16925  0014B0  EC90  F028         	call	___wmul	;wreg free
 16926  0014B4  0E5D               	movlw	low __powers_
 16927  0014B6  2411               	addwf	?___wmul,w,c
 16928  0014B8  6EF6               	movwf	tblptrl,c
 16929  0014BA  0EFE               	movlw	high __powers_
 16930  0014BC  2012               	addwfc	?___wmul+1,w,c
 16931  0014BE  6EF7               	movwf	tblptrh,c
 16932  0014C0                     	if	0	;There are less than 3 active tblptr bytes
 16933  0014C0                     	endif
 16934  0014C0  0009               	tblrd		*+
 16935  0014C2  CFF5 F022          	movff	tablat,___ftmul@f2
 16936  0014C6  0009               	tblrd		*+
 16937  0014C8  CFF5 F023          	movff	tablat,___ftmul@f2+1
 16938  0014CC  000A               	tblrd		*-
 16939  0014CE  CFF5 F024          	movff	tablat,___ftmul@f2+2
 16940  0014D2  0E00               	movlw	0
 16941  0014D4  6E1A               	movwf	___awdiv@divisor+1,c
 16942  0014D6  0E64               	movlw	100
 16943  0014D8  6E19               	movwf	___awdiv@divisor,c
 16944  0014DA  5049               	movf	scale@scl,w,c
 16945  0014DC  6E17               	movwf	___awdiv@dividend,c
 16946  0014DE  6A18               	clrf	___awdiv@dividend+1,c
 16947  0014E0  BE17               	btfsc	___awdiv@dividend,7,c
 16948  0014E2  0618               	decf	___awdiv@dividend+1,f,c
 16949  0014E4  ECB6  F021         	call	___awdiv	;wreg free
 16950  0014E8  0E12               	movlw	18
 16951  0014EA  2417               	addwf	?___awdiv,w,c
 16952  0014EC  6E11               	movwf	___wmul@multiplier,c
 16953  0014EE  0E00               	movlw	0
 16954  0014F0  2018               	addwfc	?___awdiv+1,w,c
 16955  0014F2  6E12               	movwf	___wmul@multiplier+1,c
 16956  0014F4  0E00               	movlw	0
 16957  0014F6  6E14               	movwf	___wmul@multiplicand+1,c
 16958  0014F8  0E03               	movlw	3
 16959  0014FA  6E13               	movwf	___wmul@multiplicand,c
 16960  0014FC  EC90  F028         	call	___wmul	;wreg free
 16961  001500  0E5D               	movlw	low __powers_
 16962  001502  2411               	addwf	?___wmul,w,c
 16963  001504  6EF6               	movwf	tblptrl,c
 16964  001506  0EFE               	movlw	high __powers_
 16965  001508  2012               	addwfc	?___wmul+1,w,c
 16966  00150A  6EF7               	movwf	tblptrh,c
 16967  00150C                     	if	0	;There are less than 3 active tblptr bytes
 16968  00150C                     	endif
 16969  00150C  0009               	tblrd		*+
 16970  00150E  CFF5 F01F          	movff	tablat,___ftmul@f1
 16971  001512  0009               	tblrd		*+
 16972  001514  CFF5 F020          	movff	tablat,___ftmul@f1+1
 16973  001518  000A               	tblrd		*-
 16974  00151A  CFF5 F021          	movff	tablat,___ftmul@f1+2
 16975  00151E  EC41  F01B         	call	___ftmul	;wreg free
 16976  001522  C01F  F046         	movff	?___ftmul,_scale$3327
 16977  001526  C020  F047         	movff	?___ftmul+1,_scale$3327+1
 16978  00152A  C021  F048         	movff	?___ftmul+2,_scale$3327+2
 16979                           
 16980                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 16981  00152E  C046  F01F         	movff	_scale$3327,___ftmul@f1
 16982  001532  C047  F020         	movff	_scale$3327+1,___ftmul@f1+1
 16983  001536  C048  F021         	movff	_scale$3327+2,___ftmul@f1+2
 16984  00153A  0E00               	movlw	0
 16985  00153C  6E14               	movwf	___wmul@multiplicand+1,c
 16986  00153E  0E03               	movlw	3
 16987  001540  6E13               	movwf	___wmul@multiplicand,c
 16988  001542  0E00               	movlw	0
 16989  001544  6E40               	movwf	___awmod@divisor+1,c
 16990  001546  0E0A               	movlw	10
 16991  001548  6E3F               	movwf	___awmod@divisor,c
 16992  00154A  5049               	movf	scale@scl,w,c
 16993  00154C  6E3D               	movwf	___awmod@dividend,c
 16994  00154E  6A3E               	clrf	___awmod@dividend+1,c
 16995  001550  BE3D               	btfsc	___awmod@dividend,7,c
 16996  001552  063E               	decf	___awmod@dividend+1,f,c
 16997  001554  EC1E  F023         	call	___awmod	;wreg free
 16998  001558  C03D  F011         	movff	?___awmod,___wmul@multiplier
 16999  00155C  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 17000  001560  EC90  F028         	call	___wmul	;wreg free
 17001  001564  0E5D               	movlw	low __powers_
 17002  001566  2411               	addwf	?___wmul,w,c
 17003  001568  6EF6               	movwf	tblptrl,c
 17004  00156A  0EFE               	movlw	high __powers_
 17005  00156C  2012               	addwfc	?___wmul+1,w,c
 17006  00156E  6EF7               	movwf	tblptrh,c
 17007  001570                     	if	0	;There are less than 3 active tblptr bytes
 17008  001570                     	endif
 17009  001570  0009               	tblrd		*+
 17010  001572  CFF5 F022          	movff	tablat,___ftmul@f2
 17011  001576  0009               	tblrd		*+
 17012  001578  CFF5 F023          	movff	tablat,___ftmul@f2+1
 17013  00157C  000A               	tblrd		*-
 17014  00157E  CFF5 F024          	movff	tablat,___ftmul@f2+2
 17015  001582  EC41  F01B         	call	___ftmul	;wreg free
 17016  001586  D053               	goto	L14
 17017  001588  D06C               	goto	l1487
 17018  00158A  D059               	goto	l9730
 17019  00158C                     l9724:
 17020                           
 17021                           ;doprnt.c: 438: else if(scl > 10)
 17022  00158C  5049               	movf	scale@scl,w,c
 17023  00158E  0A80               	xorlw	128
 17024  001590  0F75               	addlw	-139
 17025  001592  A0D8               	btfss	status,0,c
 17026  001594  D054               	goto	l9730
 17027                           
 17028                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 17029  001596  0E00               	movlw	0
 17030  001598  6E1A               	movwf	___awdiv@divisor+1,c
 17031  00159A  0E0A               	movlw	10
 17032  00159C  6E19               	movwf	___awdiv@divisor,c
 17033  00159E  5049               	movf	scale@scl,w,c
 17034  0015A0  6E17               	movwf	___awdiv@dividend,c
 17035  0015A2  6A18               	clrf	___awdiv@dividend+1,c
 17036  0015A4  BE17               	btfsc	___awdiv@dividend,7,c
 17037  0015A6  0618               	decf	___awdiv@dividend+1,f,c
 17038  0015A8  ECB6  F021         	call	___awdiv	;wreg free
 17039  0015AC  0E09               	movlw	9
 17040  0015AE  2417               	addwf	?___awdiv,w,c
 17041  0015B0  6E11               	movwf	___wmul@multiplier,c
 17042  0015B2  0E00               	movlw	0
 17043  0015B4  2018               	addwfc	?___awdiv+1,w,c
 17044  0015B6  6E12               	movwf	___wmul@multiplier+1,c
 17045  0015B8  0E00               	movlw	0
 17046  0015BA  6E14               	movwf	___wmul@multiplicand+1,c
 17047  0015BC  0E03               	movlw	3
 17048  0015BE  6E13               	movwf	___wmul@multiplicand,c
 17049  0015C0  EC90  F028         	call	___wmul	;wreg free
 17050  0015C4  0E5D               	movlw	low __powers_
 17051  0015C6  2411               	addwf	?___wmul,w,c
 17052  0015C8  6EF6               	movwf	tblptrl,c
 17053  0015CA  0EFE               	movlw	high __powers_
 17054  0015CC  2012               	addwfc	?___wmul+1,w,c
 17055  0015CE  6EF7               	movwf	tblptrh,c
 17056  0015D0                     	if	0	;There are less than 3 active tblptr bytes
 17057  0015D0                     	endif
 17058  0015D0  0009               	tblrd		*+
 17059  0015D2  CFF5 F01F          	movff	tablat,___ftmul@f1
 17060  0015D6  0009               	tblrd		*+
 17061  0015D8  CFF5 F020          	movff	tablat,___ftmul@f1+1
 17062  0015DC  000A               	tblrd		*-
 17063  0015DE  CFF5 F021          	movff	tablat,___ftmul@f1+2
 17064  0015E2  0E00               	movlw	0
 17065  0015E4  6E14               	movwf	___wmul@multiplicand+1,c
 17066  0015E6  0E03               	movlw	3
 17067  0015E8  6E13               	movwf	___wmul@multiplicand,c
 17068  0015EA  0E00               	movlw	0
 17069  0015EC  6E40               	movwf	___awmod@divisor+1,c
 17070  0015EE  0E0A               	movlw	10
 17071  0015F0  6E3F               	movwf	___awmod@divisor,c
 17072  0015F2  5049               	movf	scale@scl,w,c
 17073  0015F4  6E3D               	movwf	___awmod@dividend,c
 17074  0015F6  6A3E               	clrf	___awmod@dividend+1,c
 17075  0015F8  BE3D               	btfsc	___awmod@dividend,7,c
 17076  0015FA  063E               	decf	___awmod@dividend+1,f,c
 17077  0015FC  EC1E  F023         	call	___awmod	;wreg free
 17078  001600  C03D  F011         	movff	?___awmod,___wmul@multiplier
 17079  001604  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 17080  001608  EC90  F028         	call	___wmul	;wreg free
 17081  00160C  0E5D               	movlw	low __powers_
 17082  00160E  2411               	addwf	?___wmul,w,c
 17083  001610  6EF6               	movwf	tblptrl,c
 17084  001612  0EFE               	movlw	high __powers_
 17085  001614  2012               	addwfc	?___wmul+1,w,c
 17086  001616  6EF7               	movwf	tblptrh,c
 17087  001618                     	if	0	;There are less than 3 active tblptr bytes
 17088  001618                     	endif
 17089  001618  0009               	tblrd		*+
 17090  00161A  CFF5 F022          	movff	tablat,___ftmul@f2
 17091  00161E  0009               	tblrd		*+
 17092  001620  CFF5 F023          	movff	tablat,___ftmul@f2+1
 17093  001624  000A               	tblrd		*-
 17094  001626  CFF5 F024          	movff	tablat,___ftmul@f2+2
 17095  00162A  EC41  F01B         	call	___ftmul	;wreg free
 17096  00162E                     L14:
 17097  00162E  C01F  F043         	movff	?___ftmul,?_scale
 17098  001632  C020  F044         	movff	?___ftmul+1,?_scale+1
 17099  001636  C021  F045         	movff	?___ftmul+2,?_scale+2
 17100  00163A  D013               	goto	l1487
 17101  00163C  D000               	goto	l9730
 17102  00163E                     l9730:
 17103                           
 17104                           ;doprnt.c: 440: return _powers_[scl];
 17105  00163E  5049               	movf	scale@scl,w,c
 17106  001640  0D03               	mullw	3
 17107  001642  0E5D               	movlw	low __powers_
 17108  001644  24F3               	addwf	prodl,w,c
 17109  001646  6EF6               	movwf	tblptrl,c
 17110  001648  0EFE               	movlw	high __powers_
 17111  00164A                     L13:
 17112  00164A  20F4               	addwfc	prodh,w,c
 17113  00164C  6EF7               	movwf	tblptrh,c
 17114  00164E                     	if	0	;There are less than 3 active tblptr bytes
 17115  00164E                     	endif
 17116  00164E  0009               	tblrd		*+
 17117  001650  CFF5 F043          	movff	tablat,?_scale
 17118  001654  0009               	tblrd		*+
 17119  001656  CFF5 F044          	movff	tablat,?_scale+1
 17120  00165A  000A               	tblrd		*-
 17121  00165C  CFF5 F045          	movff	tablat,?_scale+2
 17122  001660  D000               	goto	l1487
 17123  001662                     l1487:
 17124  001662  0012               	return		;funcret
 17125  001664                     __end_of_scale:
 17126                           	opt stack 0
 17127                           tblptru	equ	0xFF8
 17128                           tblptrh	equ	0xFF7
 17129                           tblptrl	equ	0xFF6
 17130                           tablat	equ	0xFF5
 17131                           prodh	equ	0xFF4
 17132                           prodl	equ	0xFF3
 17133                           intcon	equ	0xFF2
 17134                           intcon2	equ	0xFF1
 17135                           postinc0	equ	0xFEE
 17136                           wreg	equ	0xFE8
 17137                           postdec1	equ	0xFE5
 17138                           fsr1l	equ	0xFE1
 17139                           indf2	equ	0xFDF
 17140                           postinc2	equ	0xFDE
 17141                           postdec2	equ	0xFDD
 17142                           fsr2h	equ	0xFDA
 17143                           fsr2l	equ	0xFD9
 17144                           status	equ	0xFD8
 17145                           
 17146 ;; *************** function _putch *****************
 17147 ;; Defined at:
 17148 ;;		line 85 in file "Main_S4.c"
 17149 ;; Parameters:    Size  Location     Type
 17150 ;;  c               1    wreg     unsigned char 
 17151 ;; Auto vars:     Size  Location     Type
 17152 ;;  c               1   16[COMRAM] unsigned char 
 17153 ;; Return value:  Size  Location     Type
 17154 ;;		None               void
 17155 ;; Registers used:
 17156 ;;		wreg
 17157 ;; Tracked objects:
 17158 ;;		On entry : 0/0
 17159 ;;		On exit  : 0/0
 17160 ;;		Unchanged: 0/0
 17161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17163 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17165 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17166 ;;Total ram usage:        1 bytes
 17167 ;; Hardware stack levels used:    1
 17168 ;; Hardware stack levels required when called:    3
 17169 ;; This function calls:
 17170 ;;		Nothing
 17171 ;; This function is called by:
 17172 ;;		_printf
 17173 ;; This function uses a non-reentrant model
 17174 ;;
 17175                           
 17176                           	psect	text77
 17177  00554A                     __ptext77:
 17178                           	opt stack 0
 17179  00554A                     _putch:
 17180                           	opt stack 26
 17181                           
 17182                           ;incstack = 0
 17183                           ;putch@c stored from wreg
 17184  00554A  6E11               	movwf	putch@c,c
 17185                           
 17186                           ;Main_S4.c: 87: while (!TRMT);
 17187  00554C  D000               	goto	l322
 17188  00554E                     l322:
 17189  00554E  A2AC               	btfss	4012,1,c	;volatile
 17190  005550  D7FE               	goto	l322
 17191                           
 17192                           ;Main_S4.c: 88: TXREG = c;
 17193  005552  C011  FFAD         	movff	putch@c,4013	;volatile
 17194  005556  0012               	return		;funcret
 17195  005558                     __end_of_putch:
 17196                           	opt stack 0
 17197                           tblptru	equ	0xFF8
 17198                           tblptrh	equ	0xFF7
 17199                           tblptrl	equ	0xFF6
 17200                           tablat	equ	0xFF5
 17201                           prodh	equ	0xFF4
 17202                           prodl	equ	0xFF3
 17203                           intcon	equ	0xFF2
 17204                           intcon2	equ	0xFF1
 17205                           postinc0	equ	0xFEE
 17206                           wreg	equ	0xFE8
 17207                           postdec1	equ	0xFE5
 17208                           fsr1l	equ	0xFE1
 17209                           indf2	equ	0xFDF
 17210                           postinc2	equ	0xFDE
 17211                           postdec2	equ	0xFDD
 17212                           fsr2h	equ	0xFDA
 17213                           fsr2l	equ	0xFD9
 17214                           status	equ	0xFD8
 17215                           
 17216 ;; *************** function _isdigit *****************
 17217 ;; Defined at:
 17218 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
 17219 ;; Parameters:    Size  Location     Type
 17220 ;;  c               1    wreg     unsigned char 
 17221 ;; Auto vars:     Size  Location     Type
 17222 ;;  c               1   18[COMRAM] unsigned char 
 17223 ;; Return value:  Size  Location     Type
 17224 ;;		None               void
 17225 ;; Registers used:
 17226 ;;		wreg, status,2, status,0
 17227 ;; Tracked objects:
 17228 ;;		On entry : 0/0
 17229 ;;		On exit  : 0/0
 17230 ;;		Unchanged: 0/0
 17231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17233 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17234 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17235 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17236 ;;Total ram usage:        3 bytes
 17237 ;; Hardware stack levels used:    1
 17238 ;; Hardware stack levels required when called:    3
 17239 ;; This function calls:
 17240 ;;		Nothing
 17241 ;; This function is called by:
 17242 ;;		_printf
 17243 ;; This function uses a non-reentrant model
 17244 ;;
 17245                           
 17246                           	psect	text78
 17247  005224                     __ptext78:
 17248                           	opt stack 0
 17249  005224                     _isdigit:
 17250                           	opt stack 26
 17251                           
 17252                           ;incstack = 0
 17253                           ;isdigit@c stored from wreg
 17254  005224  6E13               	movwf	isdigit@c,c
 17255  005226  0E00               	movlw	0
 17256  005228  6E12               	movwf	_isdigit$2983,c
 17257  00522A  0E3A               	movlw	58
 17258  00522C  6013               	cpfslt	isdigit@c,c
 17259  00522E  D006               	goto	l9742
 17260  005230  0E2F               	movlw	47
 17261  005232  6413               	cpfsgt	isdigit@c,c
 17262  005234  D003               	goto	l9742
 17263  005236  0E01               	movlw	1
 17264  005238  6E12               	movwf	_isdigit$2983,c
 17265  00523A  D000               	goto	l9742
 17266  00523C                     l9742:
 17267  00523C  C012  F011         	movff	_isdigit$2983,??_isdigit
 17268  005240  3011               	rrcf	??_isdigit,w,c
 17269  005242  D000               	goto	l2099
 17270  005244                     l2099:
 17271  005244  0012               	return		;funcret
 17272  005246                     __end_of_isdigit:
 17273                           	opt stack 0
 17274                           tblptru	equ	0xFF8
 17275                           tblptrh	equ	0xFF7
 17276                           tblptrl	equ	0xFF6
 17277                           tablat	equ	0xFF5
 17278                           prodh	equ	0xFF4
 17279                           prodl	equ	0xFF3
 17280                           intcon	equ	0xFF2
 17281                           intcon2	equ	0xFF1
 17282                           postinc0	equ	0xFEE
 17283                           wreg	equ	0xFE8
 17284                           postdec1	equ	0xFE5
 17285                           fsr1l	equ	0xFE1
 17286                           indf2	equ	0xFDF
 17287                           postinc2	equ	0xFDE
 17288                           postdec2	equ	0xFDD
 17289                           fsr2h	equ	0xFDA
 17290                           fsr2l	equ	0xFD9
 17291                           status	equ	0xFD8
 17292                           
 17293 ;; *************** function _fround *****************
 17294 ;; Defined at:
 17295 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 17296 ;; Parameters:    Size  Location     Type
 17297 ;;  prec            1    wreg     unsigned char 
 17298 ;; Auto vars:     Size  Location     Type
 17299 ;;  prec            1   75[COMRAM] unsigned char 
 17300 ;; Return value:  Size  Location     Type
 17301 ;;                  3   66[COMRAM] unsigned char 
 17302 ;; Registers used:
 17303 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17304 ;; Tracked objects:
 17305 ;;		On entry : 0/0
 17306 ;;		On exit  : 0/0
 17307 ;;		Unchanged: 0/0
 17308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17309 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17310 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17312 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17313 ;;Total ram usage:       10 bytes
 17314 ;; Hardware stack levels used:    1
 17315 ;; Hardware stack levels required when called:    5
 17316 ;; This function calls:
 17317 ;;		___awdiv
 17318 ;;		___awmod
 17319 ;;		___ftmul
 17320 ;;		___wmul
 17321 ;; This function is called by:
 17322 ;;		_printf
 17323 ;; This function uses a non-reentrant model
 17324 ;;
 17325                           
 17326                           	psect	text79
 17327  001F52                     __ptext79:
 17328                           	opt stack 0
 17329  001F52                     _fround:
 17330                           	opt stack 24
 17331                           
 17332                           ;incstack = 0
 17333                           ;fround@prec stored from wreg
 17334  001F52  6E4C               	movwf	fround@prec,c
 17335                           
 17336                           ;doprnt.c: 413: if(prec>=110)
 17337  001F54  0E6D               	movlw	109
 17338  001F56  644C               	cpfsgt	fround@prec,c
 17339  001F58  D09B               	goto	l9684
 17340                           
 17341                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 17342  001F5A  0E00               	movlw	0
 17343  001F5C  6E14               	movwf	___wmul@multiplicand+1,c
 17344  001F5E  0E03               	movlw	3
 17345  001F60  6E13               	movwf	___wmul@multiplicand,c
 17346  001F62  0E00               	movlw	0
 17347  001F64  6E1A               	movwf	___awdiv@divisor+1,c
 17348  001F66  0E0A               	movlw	10
 17349  001F68  6E19               	movwf	___awdiv@divisor,c
 17350  001F6A  0E00               	movlw	0
 17351  001F6C  6E40               	movwf	___awmod@divisor+1,c
 17352  001F6E  0E64               	movlw	100
 17353  001F70  6E3F               	movwf	___awmod@divisor,c
 17354  001F72  C04C  F03D         	movff	fround@prec,___awmod@dividend
 17355  001F76  6A3E               	clrf	___awmod@dividend+1,c
 17356  001F78  EC1E  F023         	call	___awmod	;wreg free
 17357  001F7C  C03D  F017         	movff	?___awmod,___awdiv@dividend
 17358  001F80  C03E  F018         	movff	?___awmod+1,___awdiv@dividend+1
 17359  001F84  ECB6  F021         	call	___awdiv	;wreg free
 17360  001F88  0E09               	movlw	9
 17361  001F8A  2417               	addwf	?___awdiv,w,c
 17362  001F8C  6E11               	movwf	___wmul@multiplier,c
 17363  001F8E  0E00               	movlw	0
 17364  001F90  2018               	addwfc	?___awdiv+1,w,c
 17365  001F92  6E12               	movwf	___wmul@multiplier+1,c
 17366  001F94  EC90  F028         	call	___wmul	;wreg free
 17367  001F98  0E36               	movlw	low __npowers_
 17368  001F9A  2411               	addwf	?___wmul,w,c
 17369  001F9C  6EF6               	movwf	tblptrl,c
 17370  001F9E  0EFE               	movlw	high __npowers_
 17371  001FA0  2012               	addwfc	?___wmul+1,w,c
 17372  001FA2  6EF7               	movwf	tblptrh,c
 17373  001FA4                     	if	0	;There are less than 3 active tblptr bytes
 17374  001FA4                     	endif
 17375  001FA4  0009               	tblrd		*+
 17376  001FA6  CFF5 F022          	movff	tablat,___ftmul@f2
 17377  001FAA  0009               	tblrd		*+
 17378  001FAC  CFF5 F023          	movff	tablat,___ftmul@f2+1
 17379  001FB0  000A               	tblrd		*-
 17380  001FB2  CFF5 F024          	movff	tablat,___ftmul@f2+2
 17381  001FB6  0E00               	movlw	0
 17382  001FB8  6E1A               	movwf	___awdiv@divisor+1,c
 17383  001FBA  0E64               	movlw	100
 17384  001FBC  6E19               	movwf	___awdiv@divisor,c
 17385  001FBE  C04C  F017         	movff	fround@prec,___awdiv@dividend
 17386  001FC2  6A18               	clrf	___awdiv@dividend+1,c
 17387  001FC4  ECB6  F021         	call	___awdiv	;wreg free
 17388  001FC8  0E12               	movlw	18
 17389  001FCA  2417               	addwf	?___awdiv,w,c
 17390  001FCC  6E11               	movwf	___wmul@multiplier,c
 17391  001FCE  0E00               	movlw	0
 17392  001FD0  2018               	addwfc	?___awdiv+1,w,c
 17393  001FD2  6E12               	movwf	___wmul@multiplier+1,c
 17394  001FD4  0E00               	movlw	0
 17395  001FD6  6E14               	movwf	___wmul@multiplicand+1,c
 17396  001FD8  0E03               	movlw	3
 17397  001FDA  6E13               	movwf	___wmul@multiplicand,c
 17398  001FDC  EC90  F028         	call	___wmul	;wreg free
 17399  001FE0  0E36               	movlw	low __npowers_
 17400  001FE2  2411               	addwf	?___wmul,w,c
 17401  001FE4  6EF6               	movwf	tblptrl,c
 17402  001FE6  0EFE               	movlw	high __npowers_
 17403  001FE8  2012               	addwfc	?___wmul+1,w,c
 17404  001FEA  6EF7               	movwf	tblptrh,c
 17405  001FEC                     	if	0	;There are less than 3 active tblptr bytes
 17406  001FEC                     	endif
 17407  001FEC  0009               	tblrd		*+
 17408  001FEE  CFF5 F01F          	movff	tablat,___ftmul@f1
 17409  001FF2  0009               	tblrd		*+
 17410  001FF4  CFF5 F020          	movff	tablat,___ftmul@f1+1
 17411  001FF8  000A               	tblrd		*-
 17412  001FFA  CFF5 F021          	movff	tablat,___ftmul@f1+2
 17413  001FFE  EC41  F01B         	call	___ftmul	;wreg free
 17414  002002  C01F  F049         	movff	?___ftmul,_fround$3325
 17415  002006  C020  F04A         	movff	?___ftmul+1,_fround$3325+1
 17416  00200A  C021  F04B         	movff	?___ftmul+2,_fround$3325+2
 17417                           
 17418                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 17419  00200E  0E00               	movlw	0
 17420  002010  6E14               	movwf	___wmul@multiplicand+1,c
 17421  002012  0E03               	movlw	3
 17422  002014  6E13               	movwf	___wmul@multiplicand,c
 17423  002016  0E00               	movlw	0
 17424  002018  6E40               	movwf	___awmod@divisor+1,c
 17425  00201A  0E0A               	movlw	10
 17426  00201C  6E3F               	movwf	___awmod@divisor,c
 17427  00201E  C04C  F03D         	movff	fround@prec,___awmod@dividend
 17428  002022  6A3E               	clrf	___awmod@dividend+1,c
 17429  002024  EC1E  F023         	call	___awmod	;wreg free
 17430  002028  C03D  F011         	movff	?___awmod,___wmul@multiplier
 17431  00202C  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 17432  002030  EC90  F028         	call	___wmul	;wreg free
 17433  002034  0E36               	movlw	low __npowers_
 17434  002036  2411               	addwf	?___wmul,w,c
 17435  002038  6EF6               	movwf	tblptrl,c
 17436  00203A  0EFE               	movlw	high __npowers_
 17437  00203C  2012               	addwfc	?___wmul+1,w,c
 17438  00203E  6EF7               	movwf	tblptrh,c
 17439  002040                     	if	0	;There are less than 3 active tblptr bytes
 17440  002040                     	endif
 17441  002040  0009               	tblrd		*+
 17442  002042  CFF5 F022          	movff	tablat,___ftmul@f2
 17443  002046  0009               	tblrd		*+
 17444  002048  CFF5 F023          	movff	tablat,___ftmul@f2+1
 17445  00204C  000A               	tblrd		*-
 17446  00204E  CFF5 F024          	movff	tablat,___ftmul@f2+2
 17447  002052  C049  F01F         	movff	_fround$3325,___ftmul@f1
 17448  002056  C04A  F020         	movff	_fround$3325+1,___ftmul@f1+1
 17449  00205A  C04B  F021         	movff	_fround$3325+2,___ftmul@f1+2
 17450  00205E  EC41  F01B         	call	___ftmul	;wreg free
 17451  002062  C01F  F046         	movff	?___ftmul,_fround$3326
 17452  002066  C020  F047         	movff	?___ftmul+1,_fround$3326+1
 17453  00206A  C021  F048         	movff	?___ftmul+2,_fround$3326+2
 17454                           
 17455                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 17456  00206E  C046  F01F         	movff	_fround$3326,___ftmul@f1
 17457  002072  C047  F020         	movff	_fround$3326+1,___ftmul@f1+1
 17458  002076  C048  F021         	movff	_fround$3326+2,___ftmul@f1+2
 17459  00207A  0E00               	movlw	0
 17460  00207C  6E22               	movwf	___ftmul@f2,c
 17461  00207E  0E00               	movlw	0
 17462  002080  6E23               	movwf	___ftmul@f2+1,c
 17463  002082  0E3F               	movlw	63
 17464  002084  6E24               	movwf	___ftmul@f2+2,c
 17465  002086  EC41  F01B         	call	___ftmul	;wreg free
 17466  00208A  D07D               	goto	L16
 17467  00208C  D083               	goto	l1480
 17468  00208E  D062               	goto	l9692
 17469  002090                     l9684:
 17470                           
 17471                           ;doprnt.c: 415: else if(prec > 10)
 17472  002090  0E0A               	movlw	10
 17473  002092  644C               	cpfsgt	fround@prec,c
 17474  002094  D05F               	goto	l9692
 17475                           
 17476                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 17477  002096  0E00               	movlw	0
 17478  002098  6E14               	movwf	___wmul@multiplicand+1,c
 17479  00209A  0E03               	movlw	3
 17480  00209C  6E13               	movwf	___wmul@multiplicand,c
 17481  00209E  0E00               	movlw	0
 17482  0020A0  6E40               	movwf	___awmod@divisor+1,c
 17483  0020A2  0E0A               	movlw	10
 17484  0020A4  6E3F               	movwf	___awmod@divisor,c
 17485  0020A6  C04C  F03D         	movff	fround@prec,___awmod@dividend
 17486  0020AA  6A3E               	clrf	___awmod@dividend+1,c
 17487  0020AC  EC1E  F023         	call	___awmod	;wreg free
 17488  0020B0  C03D  F011         	movff	?___awmod,___wmul@multiplier
 17489  0020B4  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 17490  0020B8  EC90  F028         	call	___wmul	;wreg free
 17491  0020BC  0E36               	movlw	low __npowers_
 17492  0020BE  2411               	addwf	?___wmul,w,c
 17493  0020C0  6EF6               	movwf	tblptrl,c
 17494  0020C2  0EFE               	movlw	high __npowers_
 17495  0020C4  2012               	addwfc	?___wmul+1,w,c
 17496  0020C6  6EF7               	movwf	tblptrh,c
 17497  0020C8                     	if	0	;There are less than 3 active tblptr bytes
 17498  0020C8                     	endif
 17499  0020C8  0009               	tblrd		*+
 17500  0020CA  CFF5 F022          	movff	tablat,___ftmul@f2
 17501  0020CE  0009               	tblrd		*+
 17502  0020D0  CFF5 F023          	movff	tablat,___ftmul@f2+1
 17503  0020D4  000A               	tblrd		*-
 17504  0020D6  CFF5 F024          	movff	tablat,___ftmul@f2+2
 17505  0020DA  0E00               	movlw	0
 17506  0020DC  6E1A               	movwf	___awdiv@divisor+1,c
 17507  0020DE  0E0A               	movlw	10
 17508  0020E0  6E19               	movwf	___awdiv@divisor,c
 17509  0020E2  C04C  F017         	movff	fround@prec,___awdiv@dividend
 17510  0020E6  6A18               	clrf	___awdiv@dividend+1,c
 17511  0020E8  ECB6  F021         	call	___awdiv	;wreg free
 17512  0020EC  0E09               	movlw	9
 17513  0020EE  2417               	addwf	?___awdiv,w,c
 17514  0020F0  6E11               	movwf	___wmul@multiplier,c
 17515  0020F2  0E00               	movlw	0
 17516  0020F4  2018               	addwfc	?___awdiv+1,w,c
 17517  0020F6  6E12               	movwf	___wmul@multiplier+1,c
 17518  0020F8  0E00               	movlw	0
 17519  0020FA  6E14               	movwf	___wmul@multiplicand+1,c
 17520  0020FC  0E03               	movlw	3
 17521  0020FE  6E13               	movwf	___wmul@multiplicand,c
 17522  002100  EC90  F028         	call	___wmul	;wreg free
 17523  002104  0E36               	movlw	low __npowers_
 17524  002106  2411               	addwf	?___wmul,w,c
 17525  002108  6EF6               	movwf	tblptrl,c
 17526  00210A  0EFE               	movlw	high __npowers_
 17527  00210C  2012               	addwfc	?___wmul+1,w,c
 17528  00210E  6EF7               	movwf	tblptrh,c
 17529  002110                     	if	0	;There are less than 3 active tblptr bytes
 17530  002110                     	endif
 17531  002110  0009               	tblrd		*+
 17532  002112  CFF5 F01F          	movff	tablat,___ftmul@f1
 17533  002116  0009               	tblrd		*+
 17534  002118  CFF5 F020          	movff	tablat,___ftmul@f1+1
 17535  00211C  000A               	tblrd		*-
 17536  00211E  CFF5 F021          	movff	tablat,___ftmul@f1+2
 17537  002122  EC41  F01B         	call	___ftmul	;wreg free
 17538  002126  C01F  F049         	movff	?___ftmul,_fround$3325
 17539  00212A  C020  F04A         	movff	?___ftmul+1,_fround$3325+1
 17540  00212E  C021  F04B         	movff	?___ftmul+2,_fround$3325+2
 17541                           
 17542                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 17543  002132  C049  F01F         	movff	_fround$3325,___ftmul@f1
 17544  002136  C04A  F020         	movff	_fround$3325+1,___ftmul@f1+1
 17545  00213A  C04B  F021         	movff	_fround$3325+2,___ftmul@f1+2
 17546  00213E  0E00               	movlw	0
 17547  002140  6E22               	movwf	___ftmul@f2,c
 17548  002142  0E00               	movlw	0
 17549  002144  6E23               	movwf	___ftmul@f2+1,c
 17550  002146  0E3F               	movlw	63
 17551  002148  6E24               	movwf	___ftmul@f2+2,c
 17552  00214A  EC41  F01B         	call	___ftmul	;wreg free
 17553  00214E  D01B               	goto	L16
 17554  002150  D021               	goto	l1480
 17555  002152  D000               	goto	l9692
 17556  002154                     l9692:
 17557                           
 17558                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 17559  002154  504C               	movf	fround@prec,w,c
 17560  002156  0D03               	mullw	3
 17561  002158  0E36               	movlw	low __npowers_
 17562  00215A  24F3               	addwf	prodl,w,c
 17563  00215C  6EF6               	movwf	tblptrl,c
 17564  00215E  0EFE               	movlw	high __npowers_
 17565  002160  20F4               	addwfc	prodh,w,c
 17566  002162  6EF7               	movwf	tblptrh,c
 17567  002164                     	if	0	;There are less than 3 active tblptr bytes
 17568  002164                     	endif
 17569  002164  0009               	tblrd		*+
 17570  002166  CFF5 F01F          	movff	tablat,___ftmul@f1
 17571  00216A  0009               	tblrd		*+
 17572  00216C  CFF5 F020          	movff	tablat,___ftmul@f1+1
 17573  002170  000A               	tblrd		*-
 17574  002172  CFF5 F021          	movff	tablat,___ftmul@f1+2
 17575  002176  0E00               	movlw	0
 17576  002178  6E22               	movwf	___ftmul@f2,c
 17577  00217A  0E00               	movlw	0
 17578  00217C  6E23               	movwf	___ftmul@f2+1,c
 17579  00217E  0E3F               	movlw	63
 17580  002180  6E24               	movwf	___ftmul@f2+2,c
 17581  002182  EC41  F01B         	call	___ftmul	;wreg free
 17582  002186                     L16:
 17583  002186  C01F  F043         	movff	?___ftmul,?_fround
 17584  00218A  C020  F044         	movff	?___ftmul+1,?_fround+1
 17585  00218E  C021  F045         	movff	?___ftmul+2,?_fround+2
 17586  002192  D000               	goto	l1480
 17587  002194                     l1480:
 17588  002194  0012               	return		;funcret
 17589  002196                     __end_of_fround:
 17590                           	opt stack 0
 17591                           tblptru	equ	0xFF8
 17592                           tblptrh	equ	0xFF7
 17593                           tblptrl	equ	0xFF6
 17594                           tablat	equ	0xFF5
 17595                           prodh	equ	0xFF4
 17596                           prodl	equ	0xFF3
 17597                           intcon	equ	0xFF2
 17598                           intcon2	equ	0xFF1
 17599                           postinc0	equ	0xFEE
 17600                           wreg	equ	0xFE8
 17601                           postdec1	equ	0xFE5
 17602                           fsr1l	equ	0xFE1
 17603                           indf2	equ	0xFDF
 17604                           postinc2	equ	0xFDE
 17605                           postdec2	equ	0xFDD
 17606                           fsr2h	equ	0xFDA
 17607                           fsr2l	equ	0xFD9
 17608                           status	equ	0xFD8
 17609                           
 17610 ;; *************** function ___ftmul *****************
 17611 ;; Defined at:
 17612 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
 17613 ;; Parameters:    Size  Location     Type
 17614 ;;  f1              3   30[COMRAM] float 
 17615 ;;  f2              3   33[COMRAM] float 
 17616 ;; Auto vars:     Size  Location     Type
 17617 ;;  f3_as_produc    3   40[COMRAM] unsigned um
 17618 ;;  sign            1   44[COMRAM] unsigned char 
 17619 ;;  cntr            1   43[COMRAM] unsigned char 
 17620 ;;  exp             1   39[COMRAM] unsigned char 
 17621 ;; Return value:  Size  Location     Type
 17622 ;;                  3   30[COMRAM] float 
 17623 ;; Registers used:
 17624 ;;		wreg, status,2, status,0, cstack
 17625 ;; Tracked objects:
 17626 ;;		On entry : 0/0
 17627 ;;		On exit  : 0/0
 17628 ;;		Unchanged: 0/0
 17629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17630 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17631 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17632 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17633 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17634 ;;Total ram usage:       15 bytes
 17635 ;; Hardware stack levels used:    1
 17636 ;; Hardware stack levels required when called:    4
 17637 ;; This function calls:
 17638 ;;		___ftpack
 17639 ;; This function is called by:
 17640 ;;		_Update_Screen
 17641 ;;		_get_duty_cycle
 17642 ;;		_do_update_pwm
 17643 ;;		_fround
 17644 ;;		_scale
 17645 ;;		_printf
 17646 ;; This function uses a non-reentrant model
 17647 ;;
 17648                           
 17649                           	psect	text80
 17650  003682                     __ptext80:
 17651                           	opt stack 0
 17652  003682                     ___ftmul:
 17653                           	opt stack 24
 17654                           
 17655                           ;incstack = 0
 17656  003682  C021  F025         	movff	___ftmul@f1+2,??___ftmul
 17657  003686  6A26               	clrf	(??___ftmul+1)& (0+255),c
 17658  003688  6A27               	clrf	(??___ftmul+2)& (0+255),c
 17659  00368A  3420               	rlcf	___ftmul@f1+1,w,c
 17660  00368C  3625               	rlcf	??___ftmul& (0+255),f,c
 17661  00368E  E301               	bnc	u8071
 17662  003690  8026               	bsf	(??___ftmul+1)& (0+255),0,c
 17663  003692                     u8071:
 17664  003692  5025               	movf	??___ftmul,w,c
 17665  003694  6E28               	movwf	___ftmul@exp,c
 17666  003696  5028               	movf	___ftmul@exp,w,c
 17667  003698  A4D8               	btfss	status,2,c
 17668  00369A  D002               	goto	l9404
 17669  00369C  D00E               	goto	l9406
 17670  00369E  D06C               	goto	l2063
 17671  0036A0                     l9404:
 17672  0036A0  C024  F025         	movff	___ftmul@f2+2,??___ftmul
 17673  0036A4  6A26               	clrf	(??___ftmul+1)& (0+255),c
 17674  0036A6  6A27               	clrf	(??___ftmul+2)& (0+255),c
 17675  0036A8  3423               	rlcf	___ftmul@f2+1,w,c
 17676  0036AA  3625               	rlcf	??___ftmul& (0+255),f,c
 17677  0036AC  E301               	bnc	u8091
 17678  0036AE  8026               	bsf	(??___ftmul+1)& (0+255),0,c
 17679  0036B0                     u8091:
 17680  0036B0  5025               	movf	??___ftmul,w,c
 17681  0036B2  6E2D               	movwf	___ftmul@sign,c
 17682  0036B4  502D               	movf	___ftmul@sign,w,c
 17683  0036B6  A4D8               	btfss	status,2,c
 17684  0036B8  D007               	goto	l9410
 17685  0036BA                     l9406:
 17686  0036BA  0E00               	movlw	0
 17687  0036BC  6E1F               	movwf	?___ftmul,c
 17688  0036BE  0E00               	movlw	0
 17689  0036C0  6E20               	movwf	?___ftmul+1,c
 17690  0036C2  0E00               	movlw	0
 17691  0036C4  6E21               	movwf	?___ftmul+2,c
 17692  0036C6  D058               	goto	l2063
 17693  0036C8                     l9410:
 17694  0036C8  502D               	movf	___ftmul@sign,w,c
 17695  0036CA  0F7B               	addlw	123
 17696  0036CC  2628               	addwf	___ftmul@exp,f,c
 17697  0036CE  C021  F02D         	movff	___ftmul@f1+2,___ftmul@sign
 17698  0036D2  5024               	movf	___ftmul@f2+2,w,c
 17699  0036D4  1A2D               	xorwf	___ftmul@sign,f,c
 17700  0036D6  0E80               	movlw	128
 17701  0036D8  162D               	andwf	___ftmul@sign,f,c
 17702  0036DA  8E20               	bsf	___ftmul@f1+1,7,c
 17703  0036DC  8E23               	bsf	___ftmul@f2+1,7,c
 17704  0036DE  0EFF               	movlw	255
 17705  0036E0  1622               	andwf	___ftmul@f2,f,c
 17706  0036E2  0EFF               	movlw	255
 17707  0036E4  1623               	andwf	___ftmul@f2+1,f,c
 17708  0036E6  0E00               	movlw	0
 17709  0036E8  1624               	andwf	___ftmul@f2+2,f,c
 17710  0036EA  0E00               	movlw	0
 17711  0036EC  6E29               	movwf	___ftmul@f3_as_product,c
 17712  0036EE  0E00               	movlw	0
 17713  0036F0  6E2A               	movwf	___ftmul@f3_as_product+1,c
 17714  0036F2  0E00               	movlw	0
 17715  0036F4  6E2B               	movwf	___ftmul@f3_as_product+2,c
 17716  0036F6  0E07               	movlw	7
 17717  0036F8  6E2C               	movwf	___ftmul@cntr,c
 17718  0036FA  D000               	goto	l9424
 17719  0036FC                     l9424:
 17720  0036FC  A01F               	btfss	___ftmul@f1,0,c
 17721  0036FE  D007               	goto	l9428
 17722  003700  5022               	movf	___ftmul@f2,w,c
 17723  003702  2629               	addwf	___ftmul@f3_as_product,f,c
 17724  003704  5023               	movf	___ftmul@f2+1,w,c
 17725  003706  222A               	addwfc	___ftmul@f3_as_product+1,f,c
 17726  003708  5024               	movf	___ftmul@f2+2,w,c
 17727  00370A  222B               	addwfc	___ftmul@f3_as_product+2,f,c
 17728  00370C  D000               	goto	l9428
 17729  00370E                     l9428:
 17730  00370E  90D8               	bcf	status,0,c
 17731  003710  3221               	rrcf	___ftmul@f1+2,f,c
 17732  003712  3220               	rrcf	___ftmul@f1+1,f,c
 17733  003714  321F               	rrcf	___ftmul@f1,f,c
 17734  003716  90D8               	bcf	status,0,c
 17735  003718  3622               	rlcf	___ftmul@f2,f,c
 17736  00371A  3623               	rlcf	___ftmul@f2+1,f,c
 17737  00371C  3624               	rlcf	___ftmul@f2+2,f,c
 17738  00371E  2E2C               	decfsz	___ftmul@cntr,f,c
 17739  003720  D7ED               	goto	l9424
 17740  003722  D000               	goto	l9432
 17741  003724                     l9432:
 17742  003724  0E09               	movlw	9
 17743  003726  6E2C               	movwf	___ftmul@cntr,c
 17744  003728  D000               	goto	l9434
 17745  00372A                     l9434:
 17746  00372A  A01F               	btfss	___ftmul@f1,0,c
 17747  00372C  D007               	goto	l9438
 17748  00372E  5022               	movf	___ftmul@f2,w,c
 17749  003730  2629               	addwf	___ftmul@f3_as_product,f,c
 17750  003732  5023               	movf	___ftmul@f2+1,w,c
 17751  003734  222A               	addwfc	___ftmul@f3_as_product+1,f,c
 17752  003736  5024               	movf	___ftmul@f2+2,w,c
 17753  003738  222B               	addwfc	___ftmul@f3_as_product+2,f,c
 17754  00373A  D000               	goto	l9438
 17755  00373C                     l9438:
 17756  00373C  90D8               	bcf	status,0,c
 17757  00373E  3221               	rrcf	___ftmul@f1+2,f,c
 17758  003740  3220               	rrcf	___ftmul@f1+1,f,c
 17759  003742  321F               	rrcf	___ftmul@f1,f,c
 17760  003744  90D8               	bcf	status,0,c
 17761  003746  322B               	rrcf	___ftmul@f3_as_product+2,f,c
 17762  003748  322A               	rrcf	___ftmul@f3_as_product+1,f,c
 17763  00374A  3229               	rrcf	___ftmul@f3_as_product,f,c
 17764  00374C  2E2C               	decfsz	___ftmul@cntr,f,c
 17765  00374E  D7ED               	goto	l9434
 17766  003750  D000               	goto	l9442
 17767  003752                     l9442:
 17768  003752  C029  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
 17769  003756  C02A  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 17770  00375A  C02B  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 17771  00375E  C028  F014         	movff	___ftmul@exp,___ftpack@exp
 17772  003762  C02D  F015         	movff	___ftmul@sign,___ftpack@sign
 17773  003766  EC50  F01F         	call	___ftpack	;wreg free
 17774  00376A  C011  F01F         	movff	?___ftpack,?___ftmul
 17775  00376E  C012  F020         	movff	?___ftpack+1,?___ftmul+1
 17776  003772  C013  F021         	movff	?___ftpack+2,?___ftmul+2
 17777  003776  D000               	goto	l2063
 17778  003778                     l2063:
 17779  003778  0012               	return		;funcret
 17780  00377A                     __end_of___ftmul:
 17781                           	opt stack 0
 17782                           tblptru	equ	0xFF8
 17783                           tblptrh	equ	0xFF7
 17784                           tblptrl	equ	0xFF6
 17785                           tablat	equ	0xFF5
 17786                           prodh	equ	0xFF4
 17787                           prodl	equ	0xFF3
 17788                           intcon	equ	0xFF2
 17789                           intcon2	equ	0xFF1
 17790                           postinc0	equ	0xFEE
 17791                           wreg	equ	0xFE8
 17792                           postdec1	equ	0xFE5
 17793                           fsr1l	equ	0xFE1
 17794                           indf2	equ	0xFDF
 17795                           postinc2	equ	0xFDE
 17796                           postdec2	equ	0xFDD
 17797                           fsr2h	equ	0xFDA
 17798                           fsr2l	equ	0xFD9
 17799                           status	equ	0xFD8
 17800                           
 17801 ;; *************** function ___awmod *****************
 17802 ;; Defined at:
 17803 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
 17804 ;; Parameters:    Size  Location     Type
 17805 ;;  dividend        2   60[COMRAM] int 
 17806 ;;  divisor         2   62[COMRAM] int 
 17807 ;; Auto vars:     Size  Location     Type
 17808 ;;  sign            1   65[COMRAM] unsigned char 
 17809 ;;  counter         1   64[COMRAM] unsigned char 
 17810 ;; Return value:  Size  Location     Type
 17811 ;;                  2   60[COMRAM] int 
 17812 ;; Registers used:
 17813 ;;		wreg, status,2, status,0
 17814 ;; Tracked objects:
 17815 ;;		On entry : 0/0
 17816 ;;		On exit  : 0/0
 17817 ;;		Unchanged: 0/0
 17818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17819 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17820 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17822 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17823 ;;Total ram usage:        6 bytes
 17824 ;; Hardware stack levels used:    1
 17825 ;; Hardware stack levels required when called:    3
 17826 ;; This function calls:
 17827 ;;		Nothing
 17828 ;; This function is called by:
 17829 ;;		_Update_Screen
 17830 ;;		_Update_Setup_Alarm_Time_Screen
 17831 ;;		_Update_Setup_Fan_Screen
 17832 ;;		_Update_Setup_Time_Screen
 17833 ;;		_dec_2_bcd
 17834 ;;		_fround
 17835 ;;		_scale
 17836 ;; This function uses a non-reentrant model
 17837 ;;
 17838                           
 17839                           	psect	text81
 17840  00463C                     __ptext81:
 17841                           	opt stack 0
 17842  00463C                     ___awmod:
 17843                           	opt stack 25
 17844                           
 17845                           ;incstack = 0
 17846  00463C  0E00               	movlw	0
 17847  00463E  6E42               	movwf	___awmod@sign,c
 17848  004640  AE3E               	btfss	___awmod@dividend+1,7,c
 17849  004642  D007               	goto	l9498
 17850  004644  6C3D               	negf	___awmod@dividend,c
 17851  004646  1E3E               	comf	___awmod@dividend+1,f,c
 17852  004648  B0D8               	btfsc	status,0,c
 17853  00464A  2A3E               	incf	___awmod@dividend+1,f,c
 17854  00464C  0E01               	movlw	1
 17855  00464E  6E42               	movwf	___awmod@sign,c
 17856  004650  D000               	goto	l9498
 17857  004652                     l9498:
 17858  004652  AE40               	btfss	___awmod@divisor+1,7,c
 17859  004654  D005               	goto	l9502
 17860  004656  6C3F               	negf	___awmod@divisor,c
 17861  004658  1E40               	comf	___awmod@divisor+1,f,c
 17862  00465A  B0D8               	btfsc	status,0,c
 17863  00465C  2A40               	incf	___awmod@divisor+1,f,c
 17864  00465E  D000               	goto	l9502
 17865  004660                     l9502:
 17866  004660  503F               	movf	___awmod@divisor,w,c
 17867  004662  1040               	iorwf	___awmod@divisor+1,w,c
 17868  004664  B4D8               	btfsc	status,2,c
 17869  004666  D01D               	goto	l9518
 17870  004668  0E01               	movlw	1
 17871  00466A  6E41               	movwf	___awmod@counter,c
 17872  00466C  D005               	goto	l9508
 17873  00466E                     l9506:
 17874  00466E  90D8               	bcf	status,0,c
 17875  004670  363F               	rlcf	___awmod@divisor,f,c
 17876  004672  3640               	rlcf	___awmod@divisor+1,f,c
 17877  004674  2A41               	incf	___awmod@counter,f,c
 17878  004676  D000               	goto	l9508
 17879  004678                     l9508:
 17880  004678  BE40               	btfsc	___awmod@divisor+1,7,c
 17881  00467A  D002               	goto	l9510
 17882  00467C  D7F8               	goto	l9506
 17883  00467E  D000               	goto	l9510
 17884  004680                     l9510:
 17885  004680  503F               	movf	___awmod@divisor,w,c
 17886  004682  5C3D               	subwf	___awmod@dividend,w,c
 17887  004684  5040               	movf	___awmod@divisor+1,w,c
 17888  004686  583E               	subwfb	___awmod@dividend+1,w,c
 17889  004688  A0D8               	btfss	status,0,c
 17890  00468A  D005               	goto	l9514
 17891  00468C  503F               	movf	___awmod@divisor,w,c
 17892  00468E  5E3D               	subwf	___awmod@dividend,f,c
 17893  004690  5040               	movf	___awmod@divisor+1,w,c
 17894  004692  5A3E               	subwfb	___awmod@dividend+1,f,c
 17895  004694  D000               	goto	l9514
 17896  004696                     l9514:
 17897  004696  90D8               	bcf	status,0,c
 17898  004698  3240               	rrcf	___awmod@divisor+1,f,c
 17899  00469A  323F               	rrcf	___awmod@divisor,f,c
 17900  00469C  2E41               	decfsz	___awmod@counter,f,c
 17901  00469E  D7F0               	goto	l9510
 17902  0046A0  D000               	goto	l9518
 17903  0046A2                     l9518:
 17904  0046A2  5042               	movf	___awmod@sign,w,c
 17905  0046A4  B4D8               	btfsc	status,2,c
 17906  0046A6  D005               	goto	l9522
 17907  0046A8  6C3D               	negf	___awmod@dividend,c
 17908  0046AA  1E3E               	comf	___awmod@dividend+1,f,c
 17909  0046AC  B0D8               	btfsc	status,0,c
 17910  0046AE  2A3E               	incf	___awmod@dividend+1,f,c
 17911  0046B0  D000               	goto	l9522
 17912  0046B2                     l9522:
 17913  0046B2  C03D  F03D         	movff	___awmod@dividend,?___awmod
 17914  0046B6  C03E  F03E         	movff	___awmod@dividend+1,?___awmod+1
 17915  0046BA  D000               	goto	l1840
 17916  0046BC                     l1840:
 17917  0046BC  0012               	return		;funcret
 17918  0046BE                     __end_of___awmod:
 17919                           	opt stack 0
 17920                           tblptru	equ	0xFF8
 17921                           tblptrh	equ	0xFF7
 17922                           tblptrl	equ	0xFF6
 17923                           tablat	equ	0xFF5
 17924                           prodh	equ	0xFF4
 17925                           prodl	equ	0xFF3
 17926                           intcon	equ	0xFF2
 17927                           intcon2	equ	0xFF1
 17928                           postinc0	equ	0xFEE
 17929                           wreg	equ	0xFE8
 17930                           postdec1	equ	0xFE5
 17931                           fsr1l	equ	0xFE1
 17932                           indf2	equ	0xFDF
 17933                           postinc2	equ	0xFDE
 17934                           postdec2	equ	0xFDD
 17935                           fsr2h	equ	0xFDA
 17936                           fsr2l	equ	0xFD9
 17937                           status	equ	0xFD8
 17938                           
 17939 ;; *************** function ___awdiv *****************
 17940 ;; Defined at:
 17941 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
 17942 ;; Parameters:    Size  Location     Type
 17943 ;;  dividend        2   22[COMRAM] int 
 17944 ;;  divisor         2   24[COMRAM] int 
 17945 ;; Auto vars:     Size  Location     Type
 17946 ;;  quotient        2   28[COMRAM] int 
 17947 ;;  sign            1   27[COMRAM] unsigned char 
 17948 ;;  counter         1   26[COMRAM] unsigned char 
 17949 ;; Return value:  Size  Location     Type
 17950 ;;                  2   22[COMRAM] int 
 17951 ;; Registers used:
 17952 ;;		wreg, status,2, status,0
 17953 ;; Tracked objects:
 17954 ;;		On entry : 0/0
 17955 ;;		On exit  : 0/0
 17956 ;;		Unchanged: 0/0
 17957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17958 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17959 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17961 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17962 ;;Total ram usage:        8 bytes
 17963 ;; Hardware stack levels used:    1
 17964 ;; Hardware stack levels required when called:    3
 17965 ;; This function calls:
 17966 ;;		Nothing
 17967 ;; This function is called by:
 17968 ;;		_main
 17969 ;;		_Update_Screen
 17970 ;;		_Update_Setup_Alarm_Time_Screen
 17971 ;;		_Update_Setup_Fan_Screen
 17972 ;;		_Update_Setup_Time_Screen
 17973 ;;		_dec_2_bcd
 17974 ;;		_get_RPM
 17975 ;;		_Set_RPM_RGB
 17976 ;;		_fround
 17977 ;;		_scale
 17978 ;;		_printf
 17979 ;;		_Set_DC_RGB
 17980 ;; This function uses a non-reentrant model
 17981 ;;
 17982                           
 17983                           	psect	text82
 17984  00436C                     __ptext82:
 17985                           	opt stack 0
 17986  00436C                     ___awdiv:
 17987                           	opt stack 25
 17988                           
 17989                           ;incstack = 0
 17990  00436C  0E00               	movlw	0
 17991  00436E  6E1C               	movwf	___awdiv@sign,c
 17992  004370  AE1A               	btfss	___awdiv@divisor+1,7,c
 17993  004372  D007               	goto	l9454
 17994  004374  6C19               	negf	___awdiv@divisor,c
 17995  004376  1E1A               	comf	___awdiv@divisor+1,f,c
 17996  004378  B0D8               	btfsc	status,0,c
 17997  00437A  2A1A               	incf	___awdiv@divisor+1,f,c
 17998  00437C  0E01               	movlw	1
 17999  00437E  6E1C               	movwf	___awdiv@sign,c
 18000  004380  D000               	goto	l9454
 18001  004382                     l9454:
 18002  004382  AE18               	btfss	___awdiv@dividend+1,7,c
 18003  004384  D007               	goto	l9460
 18004  004386  6C17               	negf	___awdiv@dividend,c
 18005  004388  1E18               	comf	___awdiv@dividend+1,f,c
 18006  00438A  B0D8               	btfsc	status,0,c
 18007  00438C  2A18               	incf	___awdiv@dividend+1,f,c
 18008  00438E  0E01               	movlw	1
 18009  004390  1A1C               	xorwf	___awdiv@sign,f,c
 18010  004392  D000               	goto	l9460
 18011  004394                     l9460:
 18012  004394  0E00               	movlw	0
 18013  004396  6E1E               	movwf	___awdiv@quotient+1,c
 18014  004398  0E00               	movlw	0
 18015  00439A  6E1D               	movwf	___awdiv@quotient,c
 18016  00439C  5019               	movf	___awdiv@divisor,w,c
 18017  00439E  101A               	iorwf	___awdiv@divisor+1,w,c
 18018  0043A0  B4D8               	btfsc	status,2,c
 18019  0043A2  D021               	goto	l9482
 18020  0043A4  0E01               	movlw	1
 18021  0043A6  6E1B               	movwf	___awdiv@counter,c
 18022  0043A8  D005               	goto	l9468
 18023  0043AA                     l9466:
 18024  0043AA  90D8               	bcf	status,0,c
 18025  0043AC  3619               	rlcf	___awdiv@divisor,f,c
 18026  0043AE  361A               	rlcf	___awdiv@divisor+1,f,c
 18027  0043B0  2A1B               	incf	___awdiv@counter,f,c
 18028  0043B2  D000               	goto	l9468
 18029  0043B4                     l9468:
 18030  0043B4  BE1A               	btfsc	___awdiv@divisor+1,7,c
 18031  0043B6  D002               	goto	l9470
 18032  0043B8  D7F8               	goto	l9466
 18033  0043BA  D000               	goto	l9470
 18034  0043BC                     l9470:
 18035  0043BC  90D8               	bcf	status,0,c
 18036  0043BE  361D               	rlcf	___awdiv@quotient,f,c
 18037  0043C0  361E               	rlcf	___awdiv@quotient+1,f,c
 18038  0043C2  5019               	movf	___awdiv@divisor,w,c
 18039  0043C4  5C17               	subwf	___awdiv@dividend,w,c
 18040  0043C6  501A               	movf	___awdiv@divisor+1,w,c
 18041  0043C8  5818               	subwfb	___awdiv@dividend+1,w,c
 18042  0043CA  A0D8               	btfss	status,0,c
 18043  0043CC  D006               	goto	l9478
 18044  0043CE  5019               	movf	___awdiv@divisor,w,c
 18045  0043D0  5E17               	subwf	___awdiv@dividend,f,c
 18046  0043D2  501A               	movf	___awdiv@divisor+1,w,c
 18047  0043D4  5A18               	subwfb	___awdiv@dividend+1,f,c
 18048  0043D6  801D               	bsf	___awdiv@quotient,0,c
 18049  0043D8  D000               	goto	l9478
 18050  0043DA                     l9478:
 18051  0043DA  90D8               	bcf	status,0,c
 18052  0043DC  321A               	rrcf	___awdiv@divisor+1,f,c
 18053  0043DE  3219               	rrcf	___awdiv@divisor,f,c
 18054  0043E0  2E1B               	decfsz	___awdiv@counter,f,c
 18055  0043E2  D7EC               	goto	l9470
 18056  0043E4  D000               	goto	l9482
 18057  0043E6                     l9482:
 18058  0043E6  501C               	movf	___awdiv@sign,w,c
 18059  0043E8  B4D8               	btfsc	status,2,c
 18060  0043EA  D005               	goto	l9486
 18061  0043EC  6C1D               	negf	___awdiv@quotient,c
 18062  0043EE  1E1E               	comf	___awdiv@quotient+1,f,c
 18063  0043F0  B0D8               	btfsc	status,0,c
 18064  0043F2  2A1E               	incf	___awdiv@quotient+1,f,c
 18065  0043F4  D000               	goto	l9486
 18066  0043F6                     l9486:
 18067  0043F6  C01D  F017         	movff	___awdiv@quotient,?___awdiv
 18068  0043FA  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
 18069  0043FE  D000               	goto	l1827
 18070  004400                     l1827:
 18071  004400  0012               	return		;funcret
 18072  004402                     __end_of___awdiv:
 18073                           	opt stack 0
 18074                           tblptru	equ	0xFF8
 18075                           tblptrh	equ	0xFF7
 18076                           tblptrl	equ	0xFF6
 18077                           tablat	equ	0xFF5
 18078                           prodh	equ	0xFF4
 18079                           prodl	equ	0xFF3
 18080                           intcon	equ	0xFF2
 18081                           intcon2	equ	0xFF1
 18082                           postinc0	equ	0xFEE
 18083                           wreg	equ	0xFE8
 18084                           postdec1	equ	0xFE5
 18085                           fsr1l	equ	0xFE1
 18086                           indf2	equ	0xFDF
 18087                           postinc2	equ	0xFDE
 18088                           postdec2	equ	0xFDD
 18089                           fsr2h	equ	0xFDA
 18090                           fsr2l	equ	0xFD9
 18091                           status	equ	0xFD8
 18092                           
 18093 ;; *************** function __tdiv_to_l_ *****************
 18094 ;; Defined at:
 18095 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdivl.c"
 18096 ;; Parameters:    Size  Location     Type
 18097 ;;  f1              3   16[COMRAM] float 
 18098 ;;  f2              3   19[COMRAM] float 
 18099 ;; Auto vars:     Size  Location     Type
 18100 ;;  quot            4   25[COMRAM] unsigned long 
 18101 ;;  exp1            1   30[COMRAM] unsigned char 
 18102 ;;  cntr            1   29[COMRAM] unsigned char 
 18103 ;; Return value:  Size  Location     Type
 18104 ;;                  4   16[COMRAM] unsigned long 
 18105 ;; Registers used:
 18106 ;;		wreg, status,2, status,0
 18107 ;; Tracked objects:
 18108 ;;		On entry : 0/0
 18109 ;;		On exit  : 0/0
 18110 ;;		Unchanged: 0/0
 18111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18112 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18113 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18114 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18115 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18116 ;;Total ram usage:       15 bytes
 18117 ;; Hardware stack levels used:    1
 18118 ;; Hardware stack levels required when called:    3
 18119 ;; This function calls:
 18120 ;;		Nothing
 18121 ;; This function is called by:
 18122 ;;		_printf
 18123 ;; This function uses a non-reentrant model
 18124 ;;
 18125                           
 18126                           	psect	text83
 18127  003154                     __ptext83:
 18128                           	opt stack 0
 18129  003154                     __tdiv_to_l_:
 18130                           	opt stack 26
 18131                           
 18132                           ;incstack = 0
 18133  003154  C013  F017         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 18134  003158  6A18               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 18135  00315A  6A19               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 18136  00315C  3412               	rlcf	__tdiv_to_l_@f1+1,w,c
 18137  00315E  3617               	rlcf	??__tdiv_to_l_& (0+255),f,c
 18138  003160  E301               	bnc	u8491
 18139  003162  8018               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 18140  003164                     u8491:
 18141  003164  5017               	movf	??__tdiv_to_l_,w,c
 18142  003166  6E1F               	movwf	__tdiv_to_l_@exp1,c
 18143  003168  501F               	movf	__tdiv_to_l_@exp1,w,c
 18144  00316A  A4D8               	btfss	status,2,c
 18145  00316C  D002               	goto	l9752
 18146  00316E  D05D               	goto	l9794
 18147  003170  D078               	goto	l2039
 18148  003172                     l9752:
 18149  003172  C016  F017         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 18150  003176  6A18               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 18151  003178  6A19               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 18152  00317A  3415               	rlcf	__tdiv_to_l_@f2+1,w,c
 18153  00317C  3617               	rlcf	??__tdiv_to_l_& (0+255),f,c
 18154  00317E  E301               	bnc	u8511
 18155  003180  8018               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 18156  003182                     u8511:
 18157  003182  5017               	movf	??__tdiv_to_l_,w,c
 18158  003184  6E1E               	movwf	__tdiv_to_l_@cntr,c
 18159  003186  501E               	movf	__tdiv_to_l_@cntr,w,c
 18160  003188  A4D8               	btfss	status,2,c
 18161  00318A  D002               	goto	l9758
 18162  00318C  D04E               	goto	l9794
 18163  00318E  D069               	goto	l2039
 18164  003190                     l9758:
 18165  003190  8E12               	bsf	__tdiv_to_l_@f1+1,7,c
 18166  003192  0EFF               	movlw	255
 18167  003194  1611               	andwf	__tdiv_to_l_@f1,f,c
 18168  003196  0EFF               	movlw	255
 18169  003198  1612               	andwf	__tdiv_to_l_@f1+1,f,c
 18170  00319A  0E00               	movlw	0
 18171  00319C  1613               	andwf	__tdiv_to_l_@f1+2,f,c
 18172  00319E  8E15               	bsf	__tdiv_to_l_@f2+1,7,c
 18173  0031A0  0EFF               	movlw	255
 18174  0031A2  1614               	andwf	__tdiv_to_l_@f2,f,c
 18175  0031A4  0EFF               	movlw	255
 18176  0031A6  1615               	andwf	__tdiv_to_l_@f2+1,f,c
 18177  0031A8  0E00               	movlw	0
 18178  0031AA  1616               	andwf	__tdiv_to_l_@f2+2,f,c
 18179  0031AC  0E00               	movlw	0
 18180  0031AE  6E1A               	movwf	__tdiv_to_l_@quot,c
 18181  0031B0  0E00               	movlw	0
 18182  0031B2  6E1B               	movwf	__tdiv_to_l_@quot+1,c
 18183  0031B4  0E00               	movlw	0
 18184  0031B6  6E1C               	movwf	__tdiv_to_l_@quot+2,c
 18185  0031B8  0E00               	movlw	0
 18186  0031BA  6E1D               	movwf	__tdiv_to_l_@quot+3,c
 18187  0031BC  0E7F               	movlw	127
 18188  0031BE  5E1F               	subwf	__tdiv_to_l_@exp1,f,c
 18189  0031C0  501E               	movf	__tdiv_to_l_@cntr,w,c
 18190  0031C2  0F98               	addlw	152
 18191  0031C4  5E1F               	subwf	__tdiv_to_l_@exp1,f,c
 18192  0031C6  0E18               	movlw	24
 18193  0031C8  6E1E               	movwf	__tdiv_to_l_@cntr,c
 18194  0031CA                     l2041:
 18195  0031CA  90D8               	bcf	status,0,c
 18196  0031CC  361A               	rlcf	__tdiv_to_l_@quot,f,c
 18197  0031CE  361B               	rlcf	__tdiv_to_l_@quot+1,f,c
 18198  0031D0  361C               	rlcf	__tdiv_to_l_@quot+2,f,c
 18199  0031D2  361D               	rlcf	__tdiv_to_l_@quot+3,f,c
 18200  0031D4  5014               	movf	__tdiv_to_l_@f2,w,c
 18201  0031D6  5C11               	subwf	__tdiv_to_l_@f1,w,c
 18202  0031D8  5015               	movf	__tdiv_to_l_@f2+1,w,c
 18203  0031DA  5812               	subwfb	__tdiv_to_l_@f1+1,w,c
 18204  0031DC  5016               	movf	__tdiv_to_l_@f2+2,w,c
 18205  0031DE  5813               	subwfb	__tdiv_to_l_@f1+2,w,c
 18206  0031E0  A0D8               	btfss	status,0,c
 18207  0031E2  D007               	goto	l2042
 18208  0031E4  5014               	movf	__tdiv_to_l_@f2,w,c
 18209  0031E6  5E11               	subwf	__tdiv_to_l_@f1,f,c
 18210  0031E8  5015               	movf	__tdiv_to_l_@f2+1,w,c
 18211  0031EA  5A12               	subwfb	__tdiv_to_l_@f1+1,f,c
 18212  0031EC  5016               	movf	__tdiv_to_l_@f2+2,w,c
 18213  0031EE  5A13               	subwfb	__tdiv_to_l_@f1+2,f,c
 18214  0031F0  801A               	bsf	__tdiv_to_l_@quot,0,c
 18215  0031F2                     l2042:
 18216  0031F2  90D8               	bcf	status,0,c
 18217  0031F4  3611               	rlcf	__tdiv_to_l_@f1,f,c
 18218  0031F6  3612               	rlcf	__tdiv_to_l_@f1+1,f,c
 18219  0031F8  3613               	rlcf	__tdiv_to_l_@f1+2,f,c
 18220  0031FA  2E1E               	decfsz	__tdiv_to_l_@cntr,f,c
 18221  0031FC  D7E6               	goto	l2041
 18222  0031FE  D000               	goto	l9780
 18223  003200                     l9780:
 18224  003200  AE1F               	btfss	__tdiv_to_l_@exp1,7,c
 18225  003202  D010               	goto	l9792
 18226  003204  501F               	movf	__tdiv_to_l_@exp1,w,c
 18227  003206  0A80               	xorlw	128
 18228  003208  0F97               	addlw	151
 18229  00320A  B0D8               	btfsc	status,0,c
 18230  00320C  D003               	goto	l9788
 18231  00320E  D00D               	goto	l9794
 18232  003210  D028               	goto	l2039
 18233  003212  D000               	goto	l9788
 18234  003214                     l9788:
 18235  003214  90D8               	bcf	status,0,c
 18236  003216  321D               	rrcf	__tdiv_to_l_@quot+3,f,c
 18237  003218  321C               	rrcf	__tdiv_to_l_@quot+2,f,c
 18238  00321A  321B               	rrcf	__tdiv_to_l_@quot+1,f,c
 18239  00321C  321A               	rrcf	__tdiv_to_l_@quot,f,c
 18240  00321E  3E1F               	incfsz	__tdiv_to_l_@exp1,f,c
 18241  003220  D7F9               	goto	l9788
 18242  003222  D017               	goto	l2048
 18243  003224                     l9792:
 18244  003224  0E17               	movlw	23
 18245  003226  641F               	cpfsgt	__tdiv_to_l_@exp1,c
 18246  003228  D011               	goto	l9800
 18247  00322A                     l9794:
 18248  00322A  0E00               	movlw	0
 18249  00322C  6E11               	movwf	?__tdiv_to_l_,c
 18250  00322E  0E00               	movlw	0
 18251  003230  6E12               	movwf	?__tdiv_to_l_+1,c
 18252  003232  0E00               	movlw	0
 18253  003234  6E13               	movwf	?__tdiv_to_l_+2,c
 18254  003236  0E00               	movlw	0
 18255  003238  6E14               	movwf	?__tdiv_to_l_+3,c
 18256  00323A  D013               	goto	l2039
 18257  00323C  D007               	goto	l9800
 18258  00323E                     l9798:
 18259  00323E  90D8               	bcf	status,0,c
 18260  003240  361A               	rlcf	__tdiv_to_l_@quot,f,c
 18261  003242  361B               	rlcf	__tdiv_to_l_@quot+1,f,c
 18262  003244  361C               	rlcf	__tdiv_to_l_@quot+2,f,c
 18263  003246  361D               	rlcf	__tdiv_to_l_@quot+3,f,c
 18264  003248  061F               	decf	__tdiv_to_l_@exp1,f,c
 18265  00324A  D000               	goto	l9800
 18266  00324C                     l9800:
 18267  00324C  501F               	movf	__tdiv_to_l_@exp1,w,c
 18268  00324E  A4D8               	btfss	status,2,c
 18269  003250  D7F6               	goto	l9798
 18270  003252                     l2048:
 18271  003252  C01A  F011         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 18272  003256  C01B  F012         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 18273  00325A  C01C  F013         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 18274  00325E  C01D  F014         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 18275  003262                     l2039:
 18276  003262  0012               	return		;funcret
 18277  003264                     __end_of__tdiv_to_l_:
 18278                           	opt stack 0
 18279                           tblptru	equ	0xFF8
 18280                           tblptrh	equ	0xFF7
 18281                           tblptrl	equ	0xFF6
 18282                           tablat	equ	0xFF5
 18283                           prodh	equ	0xFF4
 18284                           prodl	equ	0xFF3
 18285                           intcon	equ	0xFF2
 18286                           intcon2	equ	0xFF1
 18287                           postinc0	equ	0xFEE
 18288                           wreg	equ	0xFE8
 18289                           postdec1	equ	0xFE5
 18290                           fsr1l	equ	0xFE1
 18291                           indf2	equ	0xFDF
 18292                           postinc2	equ	0xFDE
 18293                           postdec2	equ	0xFDD
 18294                           fsr2h	equ	0xFDA
 18295                           fsr2l	equ	0xFD9
 18296                           status	equ	0xFD8
 18297                           
 18298 ;; *************** function __div_to_l_ *****************
 18299 ;; Defined at:
 18300 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldivl.c"
 18301 ;; Parameters:    Size  Location     Type
 18302 ;;  f1              3   16[COMRAM] unsigned long 
 18303 ;;  f2              3   19[COMRAM] unsigned long 
 18304 ;; Auto vars:     Size  Location     Type
 18305 ;;  quot            4   22[COMRAM] unsigned long 
 18306 ;;  exp1            1   27[COMRAM] unsigned char 
 18307 ;;  cntr            1   26[COMRAM] unsigned char 
 18308 ;; Return value:  Size  Location     Type
 18309 ;;                  4   16[COMRAM] unsigned long 
 18310 ;; Registers used:
 18311 ;;		wreg, status,2, status,0
 18312 ;; Tracked objects:
 18313 ;;		On entry : 0/0
 18314 ;;		On exit  : 0/0
 18315 ;;		Unchanged: 0/0
 18316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18317 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18318 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18320 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18321 ;;Total ram usage:       12 bytes
 18322 ;; Hardware stack levels used:    1
 18323 ;; Hardware stack levels required when called:    3
 18324 ;; This function calls:
 18325 ;;		Nothing
 18326 ;; This function is called by:
 18327 ;;		_printf
 18328 ;; This function uses a non-reentrant model
 18329 ;;
 18330                           
 18331                           	psect	text84
 18332  00347E                     __ptext84:
 18333                           	opt stack 0
 18334  00347E                     __div_to_l_:
 18335                           	opt stack 26
 18336                           
 18337                           ;incstack = 0
 18338  00347E  3413               	rlcf	__div_to_l_@f1+2,w,c
 18339  003480  3414               	rlcf	__div_to_l_@f1+3,w,c
 18340  003482  6E1C               	movwf	__div_to_l_@exp1,c
 18341  003484  501C               	movf	__div_to_l_@exp1,w,c
 18342  003486  A4D8               	btfss	status,2,c
 18343  003488  D002               	goto	l9808
 18344  00348A  D061               	goto	l9854
 18345  00348C  D07C               	goto	l1918
 18346  00348E                     l9808:
 18347  00348E  3416               	rlcf	__div_to_l_@f2+2,w,c
 18348  003490  3417               	rlcf	__div_to_l_@f2+3,w,c
 18349  003492  6E1B               	movwf	__div_to_l_@cntr,c
 18350  003494  501B               	movf	__div_to_l_@cntr,w,c
 18351  003496  A4D8               	btfss	status,2,c
 18352  003498  D002               	goto	l9814
 18353  00349A  D059               	goto	l9854
 18354  00349C  D074               	goto	l1918
 18355  00349E                     l9814:
 18356  00349E  8E13               	bsf	__div_to_l_@f1+2,7,c
 18357  0034A0  0EFF               	movlw	255
 18358  0034A2  1611               	andwf	__div_to_l_@f1,f,c
 18359  0034A4  0EFF               	movlw	255
 18360  0034A6  1612               	andwf	__div_to_l_@f1+1,f,c
 18361  0034A8  0EFF               	movlw	255
 18362  0034AA  1613               	andwf	__div_to_l_@f1+2,f,c
 18363  0034AC  0E00               	movlw	0
 18364  0034AE  1614               	andwf	__div_to_l_@f1+3,f,c
 18365  0034B0  8E16               	bsf	__div_to_l_@f2+2,7,c
 18366  0034B2  0EFF               	movlw	255
 18367  0034B4  1614               	andwf	__div_to_l_@f2,f,c
 18368  0034B6  0EFF               	movlw	255
 18369  0034B8  1615               	andwf	__div_to_l_@f2+1,f,c
 18370  0034BA  0EFF               	movlw	255
 18371  0034BC  1616               	andwf	__div_to_l_@f2+2,f,c
 18372  0034BE  0E00               	movlw	0
 18373  0034C0  1617               	andwf	__div_to_l_@f2+3,f,c
 18374  0034C2  0E00               	movlw	0
 18375  0034C4  6E17               	movwf	__div_to_l_@quot,c
 18376  0034C6  0E00               	movlw	0
 18377  0034C8  6E18               	movwf	__div_to_l_@quot+1,c
 18378  0034CA  0E00               	movlw	0
 18379  0034CC  6E19               	movwf	__div_to_l_@quot+2,c
 18380  0034CE  0E00               	movlw	0
 18381  0034D0  6E1A               	movwf	__div_to_l_@quot+3,c
 18382  0034D2  0E7F               	movlw	127
 18383  0034D4  5E1C               	subwf	__div_to_l_@exp1,f,c
 18384  0034D6  501B               	movf	__div_to_l_@cntr,w,c
 18385  0034D8  0FA0               	addlw	160
 18386  0034DA  5E1C               	subwf	__div_to_l_@exp1,f,c
 18387  0034DC  0E20               	movlw	32
 18388  0034DE  6E1B               	movwf	__div_to_l_@cntr,c
 18389  0034E0  D000               	goto	l9828
 18390  0034E2                     l9828:
 18391  0034E2  90D8               	bcf	status,0,c
 18392  0034E4  3617               	rlcf	__div_to_l_@quot,f,c
 18393  0034E6  3618               	rlcf	__div_to_l_@quot+1,f,c
 18394  0034E8  3619               	rlcf	__div_to_l_@quot+2,f,c
 18395  0034EA  361A               	rlcf	__div_to_l_@quot+3,f,c
 18396  0034EC  5014               	movf	__div_to_l_@f2,w,c
 18397  0034EE  5C11               	subwf	__div_to_l_@f1,w,c
 18398  0034F0  5015               	movf	__div_to_l_@f2+1,w,c
 18399  0034F2  5812               	subwfb	__div_to_l_@f1+1,w,c
 18400  0034F4  5016               	movf	__div_to_l_@f2+2,w,c
 18401  0034F6  5813               	subwfb	__div_to_l_@f1+2,w,c
 18402  0034F8  5017               	movf	__div_to_l_@f2+3,w,c
 18403  0034FA  5814               	subwfb	__div_to_l_@f1+3,w,c
 18404  0034FC  A0D8               	btfss	status,0,c
 18405  0034FE  D00A               	goto	l9836
 18406  003500  5014               	movf	__div_to_l_@f2,w,c
 18407  003502  5E11               	subwf	__div_to_l_@f1,f,c
 18408  003504  5015               	movf	__div_to_l_@f2+1,w,c
 18409  003506  5A12               	subwfb	__div_to_l_@f1+1,f,c
 18410  003508  5016               	movf	__div_to_l_@f2+2,w,c
 18411  00350A  5A13               	subwfb	__div_to_l_@f1+2,f,c
 18412  00350C  5017               	movf	__div_to_l_@f2+3,w,c
 18413  00350E  5A14               	subwfb	__div_to_l_@f1+3,f,c
 18414  003510  8017               	bsf	__div_to_l_@quot,0,c
 18415  003512  D000               	goto	l9836
 18416  003514                     l9836:
 18417  003514  90D8               	bcf	status,0,c
 18418  003516  3611               	rlcf	__div_to_l_@f1,f,c
 18419  003518  3612               	rlcf	__div_to_l_@f1+1,f,c
 18420  00351A  3613               	rlcf	__div_to_l_@f1+2,f,c
 18421  00351C  3614               	rlcf	__div_to_l_@f1+3,f,c
 18422  00351E  2E1B               	decfsz	__div_to_l_@cntr,f,c
 18423  003520  D7E0               	goto	l9828
 18424  003522  D000               	goto	l9840
 18425  003524                     l9840:
 18426  003524  AE1C               	btfss	__div_to_l_@exp1,7,c
 18427  003526  D010               	goto	l9852
 18428  003528  501C               	movf	__div_to_l_@exp1,w,c
 18429  00352A  0A80               	xorlw	128
 18430  00352C  0F9F               	addlw	159
 18431  00352E  B0D8               	btfsc	status,0,c
 18432  003530  D003               	goto	l9848
 18433  003532  D00D               	goto	l9854
 18434  003534  D028               	goto	l1918
 18435  003536  D000               	goto	l9848
 18436  003538                     l9848:
 18437  003538  90D8               	bcf	status,0,c
 18438  00353A  321A               	rrcf	__div_to_l_@quot+3,f,c
 18439  00353C  3219               	rrcf	__div_to_l_@quot+2,f,c
 18440  00353E  3218               	rrcf	__div_to_l_@quot+1,f,c
 18441  003540  3217               	rrcf	__div_to_l_@quot,f,c
 18442  003542  3E1C               	incfsz	__div_to_l_@exp1,f,c
 18443  003544  D7F9               	goto	l9848
 18444  003546  D017               	goto	l1927
 18445  003548                     l9852:
 18446  003548  0E1F               	movlw	31
 18447  00354A  641C               	cpfsgt	__div_to_l_@exp1,c
 18448  00354C  D011               	goto	l9860
 18449  00354E                     l9854:
 18450  00354E  0E00               	movlw	0
 18451  003550  6E11               	movwf	?__div_to_l_,c
 18452  003552  0E00               	movlw	0
 18453  003554  6E12               	movwf	?__div_to_l_+1,c
 18454  003556  0E00               	movlw	0
 18455  003558  6E13               	movwf	?__div_to_l_+2,c
 18456  00355A  0E00               	movlw	0
 18457  00355C  6E14               	movwf	?__div_to_l_+3,c
 18458  00355E  D013               	goto	l1918
 18459  003560  D007               	goto	l9860
 18460  003562                     l9858:
 18461  003562  90D8               	bcf	status,0,c
 18462  003564  3617               	rlcf	__div_to_l_@quot,f,c
 18463  003566  3618               	rlcf	__div_to_l_@quot+1,f,c
 18464  003568  3619               	rlcf	__div_to_l_@quot+2,f,c
 18465  00356A  361A               	rlcf	__div_to_l_@quot+3,f,c
 18466  00356C  061C               	decf	__div_to_l_@exp1,f,c
 18467  00356E  D000               	goto	l9860
 18468  003570                     l9860:
 18469  003570  501C               	movf	__div_to_l_@exp1,w,c
 18470  003572  A4D8               	btfss	status,2,c
 18471  003574  D7F6               	goto	l9858
 18472  003576                     l1927:
 18473  003576  C017  F011         	movff	__div_to_l_@quot,?__div_to_l_
 18474  00357A  C018  F012         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 18475  00357E  C019  F013         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 18476  003582  C01A  F014         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 18477  003586                     l1918:
 18478  003586  0012               	return		;funcret
 18479  003588                     __end_of__div_to_l_:
 18480                           	opt stack 0
 18481                           tblptru	equ	0xFF8
 18482                           tblptrh	equ	0xFF7
 18483                           tblptrl	equ	0xFF6
 18484                           tablat	equ	0xFF5
 18485                           prodh	equ	0xFF4
 18486                           prodl	equ	0xFF3
 18487                           intcon	equ	0xFF2
 18488                           intcon2	equ	0xFF1
 18489                           postinc0	equ	0xFEE
 18490                           wreg	equ	0xFE8
 18491                           postdec1	equ	0xFE5
 18492                           fsr1l	equ	0xFE1
 18493                           indf2	equ	0xFDF
 18494                           postinc2	equ	0xFDE
 18495                           postdec2	equ	0xFDD
 18496                           fsr2h	equ	0xFDA
 18497                           fsr2l	equ	0xFD9
 18498                           status	equ	0xFD8
 18499                           
 18500 ;; *************** function ___lltoft *****************
 18501 ;; Defined at:
 18502 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
 18503 ;; Parameters:    Size  Location     Type
 18504 ;;  c               4   24[COMRAM] unsigned long 
 18505 ;; Auto vars:     Size  Location     Type
 18506 ;;  exp             1   32[COMRAM] unsigned char 
 18507 ;; Return value:  Size  Location     Type
 18508 ;;                  3   24[COMRAM] float 
 18509 ;; Registers used:
 18510 ;;		wreg, status,2, status,0, cstack
 18511 ;; Tracked objects:
 18512 ;;		On entry : 0/0
 18513 ;;		On exit  : 0/0
 18514 ;;		Unchanged: 0/0
 18515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18516 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18517 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18518 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18519 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18520 ;;Total ram usage:        9 bytes
 18521 ;; Hardware stack levels used:    1
 18522 ;; Hardware stack levels required when called:    4
 18523 ;; This function calls:
 18524 ;;		___ftpack
 18525 ;; This function is called by:
 18526 ;;		_printf
 18527 ;; This function uses a non-reentrant model
 18528 ;;
 18529                           
 18530                           	psect	text85
 18531  004B56                     __ptext85:
 18532                           	opt stack 0
 18533  004B56                     ___lltoft:
 18534                           	opt stack 25
 18535                           
 18536                           ;incstack = 0
 18537  004B56  0E8E               	movlw	142
 18538  004B58  6E21               	movwf	___lltoft@exp,c
 18539  004B5A  D007               	goto	l9980
 18540  004B5C                     l9978:
 18541  004B5C  90D8               	bcf	status,0,c
 18542  004B5E  321C               	rrcf	___lltoft@c+3,f,c
 18543  004B60  321B               	rrcf	___lltoft@c+2,f,c
 18544  004B62  321A               	rrcf	___lltoft@c+1,f,c
 18545  004B64  3219               	rrcf	___lltoft@c,f,c
 18546  004B66  2A21               	incf	___lltoft@exp,f,c
 18547  004B68  D000               	goto	l9980
 18548  004B6A                     l9980:
 18549  004B6A  0E00               	movlw	0
 18550  004B6C  1419               	andwf	___lltoft@c,w,c
 18551  004B6E  6E1D               	movwf	??___lltoft& (0+255),c
 18552  004B70  0E00               	movlw	0
 18553  004B72  141A               	andwf	___lltoft@c+1,w,c
 18554  004B74  6E1E               	movwf	(??___lltoft+1)& (0+255),c
 18555  004B76  0E00               	movlw	0
 18556  004B78  141B               	andwf	___lltoft@c+2,w,c
 18557  004B7A  6E1F               	movwf	(??___lltoft+2)& (0+255),c
 18558  004B7C  0EFF               	movlw	255
 18559  004B7E  141C               	andwf	___lltoft@c+3,w,c
 18560  004B80  6E20               	movwf	(??___lltoft+3)& (0+255),c
 18561  004B82  501D               	movf	??___lltoft,w,c
 18562  004B84  101E               	iorwf	??___lltoft+1,w,c
 18563  004B86  101F               	iorwf	??___lltoft+2,w,c
 18564  004B88  1020               	iorwf	??___lltoft+3,w,c
 18565  004B8A  A4D8               	btfss	status,2,c
 18566  004B8C  D7E7               	goto	l9978
 18567  004B8E  C019  F011         	movff	___lltoft@c,___ftpack@arg
 18568  004B92  C01A  F012         	movff	___lltoft@c+1,___ftpack@arg+1
 18569  004B96  C01B  F013         	movff	___lltoft@c+2,___ftpack@arg+2
 18570  004B9A  C021  F014         	movff	___lltoft@exp,___ftpack@exp
 18571  004B9E  0E00               	movlw	0
 18572  004BA0  6E15               	movwf	___ftpack@sign,c
 18573  004BA2  EC50  F01F         	call	___ftpack	;wreg free
 18574  004BA6  C011  F019         	movff	?___ftpack,?___lltoft
 18575  004BAA  C012  F01A         	movff	?___ftpack+1,?___lltoft+1
 18576  004BAE  C013  F01B         	movff	?___ftpack+2,?___lltoft+2
 18577  004BB2  D000               	goto	l2158
 18578  004BB4                     l2158:
 18579  004BB4  0012               	return		;funcret
 18580  004BB6                     __end_of___lltoft:
 18581                           	opt stack 0
 18582                           tblptru	equ	0xFF8
 18583                           tblptrh	equ	0xFF7
 18584                           tblptrl	equ	0xFF6
 18585                           tablat	equ	0xFF5
 18586                           prodh	equ	0xFF4
 18587                           prodl	equ	0xFF3
 18588                           intcon	equ	0xFF2
 18589                           intcon2	equ	0xFF1
 18590                           postinc0	equ	0xFEE
 18591                           wreg	equ	0xFE8
 18592                           postdec1	equ	0xFE5
 18593                           fsr1l	equ	0xFE1
 18594                           indf2	equ	0xFDF
 18595                           postinc2	equ	0xFDE
 18596                           postdec2	equ	0xFDD
 18597                           fsr2h	equ	0xFDA
 18598                           fsr2l	equ	0xFD9
 18599                           status	equ	0xFD8
 18600                           
 18601 ;; *************** function ___llmod *****************
 18602 ;; Defined at:
 18603 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
 18604 ;; Parameters:    Size  Location     Type
 18605 ;;  dividend        4   29[COMRAM] unsigned long 
 18606 ;;  divisor         4   33[COMRAM] unsigned long 
 18607 ;; Auto vars:     Size  Location     Type
 18608 ;;  counter         1   37[COMRAM] unsigned char 
 18609 ;; Return value:  Size  Location     Type
 18610 ;;                  4   29[COMRAM] unsigned long 
 18611 ;; Registers used:
 18612 ;;		wreg, status,2, status,0
 18613 ;; Tracked objects:
 18614 ;;		On entry : 0/0
 18615 ;;		On exit  : 0/0
 18616 ;;		Unchanged: 0/0
 18617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18618 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18619 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18621 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18622 ;;Total ram usage:        9 bytes
 18623 ;; Hardware stack levels used:    1
 18624 ;; Hardware stack levels required when called:    3
 18625 ;; This function calls:
 18626 ;;		Nothing
 18627 ;; This function is called by:
 18628 ;;		_printf
 18629 ;; This function uses a non-reentrant model
 18630 ;;
 18631                           
 18632                           	psect	text86
 18633  0047B6                     __ptext86:
 18634                           	opt stack 0
 18635  0047B6                     ___llmod:
 18636                           	opt stack 26
 18637                           
 18638                           ;incstack = 0
 18639  0047B6  5022               	movf	___llmod@divisor,w,c
 18640  0047B8  1023               	iorwf	___llmod@divisor+1,w,c
 18641  0047BA  1024               	iorwf	___llmod@divisor+2,w,c
 18642  0047BC  1025               	iorwf	___llmod@divisor+3,w,c
 18643  0047BE  B4D8               	btfsc	status,2,c
 18644  0047C0  D029               	goto	l2138
 18645  0047C2  0E01               	movlw	1
 18646  0047C4  6E26               	movwf	___llmod@counter,c
 18647  0047C6  D007               	goto	l9966
 18648  0047C8                     l9964:
 18649  0047C8  90D8               	bcf	status,0,c
 18650  0047CA  3622               	rlcf	___llmod@divisor,f,c
 18651  0047CC  3623               	rlcf	___llmod@divisor+1,f,c
 18652  0047CE  3624               	rlcf	___llmod@divisor+2,f,c
 18653  0047D0  3625               	rlcf	___llmod@divisor+3,f,c
 18654  0047D2  2A26               	incf	___llmod@counter,f,c
 18655  0047D4  D000               	goto	l9966
 18656  0047D6                     l9966:
 18657  0047D6  BE25               	btfsc	___llmod@divisor+3,7,c
 18658  0047D8  D002               	goto	l9968
 18659  0047DA  D7F6               	goto	l9964
 18660  0047DC  D000               	goto	l9968
 18661  0047DE                     l9968:
 18662  0047DE  5022               	movf	___llmod@divisor,w,c
 18663  0047E0  5C1E               	subwf	___llmod@dividend,w,c
 18664  0047E2  5023               	movf	___llmod@divisor+1,w,c
 18665  0047E4  581F               	subwfb	___llmod@dividend+1,w,c
 18666  0047E6  5024               	movf	___llmod@divisor+2,w,c
 18667  0047E8  5820               	subwfb	___llmod@dividend+2,w,c
 18668  0047EA  5025               	movf	___llmod@divisor+3,w,c
 18669  0047EC  5821               	subwfb	___llmod@dividend+3,w,c
 18670  0047EE  A0D8               	btfss	status,0,c
 18671  0047F0  D009               	goto	l9972
 18672  0047F2  5022               	movf	___llmod@divisor,w,c
 18673  0047F4  5E1E               	subwf	___llmod@dividend,f,c
 18674  0047F6  5023               	movf	___llmod@divisor+1,w,c
 18675  0047F8  5A1F               	subwfb	___llmod@dividend+1,f,c
 18676  0047FA  5024               	movf	___llmod@divisor+2,w,c
 18677  0047FC  5A20               	subwfb	___llmod@dividend+2,f,c
 18678  0047FE  5025               	movf	___llmod@divisor+3,w,c
 18679  004800  5A21               	subwfb	___llmod@dividend+3,f,c
 18680  004802  D000               	goto	l9972
 18681  004804                     l9972:
 18682  004804  90D8               	bcf	status,0,c
 18683  004806  3225               	rrcf	___llmod@divisor+3,f,c
 18684  004808  3224               	rrcf	___llmod@divisor+2,f,c
 18685  00480A  3223               	rrcf	___llmod@divisor+1,f,c
 18686  00480C  3222               	rrcf	___llmod@divisor,f,c
 18687  00480E  2E26               	decfsz	___llmod@counter,f,c
 18688  004810  D7E6               	goto	l9968
 18689  004812  D000               	goto	l2138
 18690  004814                     l2138:
 18691  004814  C01E  F01E         	movff	___llmod@dividend,?___llmod
 18692  004818  C01F  F01F         	movff	___llmod@dividend+1,?___llmod+1
 18693  00481C  C020  F020         	movff	___llmod@dividend+2,?___llmod+2
 18694  004820  C021  F021         	movff	___llmod@dividend+3,?___llmod+3
 18695  004824  0012               	return		;funcret
 18696  004826                     __end_of___llmod:
 18697                           	opt stack 0
 18698                           tblptru	equ	0xFF8
 18699                           tblptrh	equ	0xFF7
 18700                           tblptrl	equ	0xFF6
 18701                           tablat	equ	0xFF5
 18702                           prodh	equ	0xFF4
 18703                           prodl	equ	0xFF3
 18704                           intcon	equ	0xFF2
 18705                           intcon2	equ	0xFF1
 18706                           postinc0	equ	0xFEE
 18707                           wreg	equ	0xFE8
 18708                           postdec1	equ	0xFE5
 18709                           fsr1l	equ	0xFE1
 18710                           indf2	equ	0xFDF
 18711                           postinc2	equ	0xFDE
 18712                           postdec2	equ	0xFDD
 18713                           fsr2h	equ	0xFDA
 18714                           fsr2l	equ	0xFD9
 18715                           status	equ	0xFD8
 18716                           
 18717 ;; *************** function ___lldiv *****************
 18718 ;; Defined at:
 18719 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
 18720 ;; Parameters:    Size  Location     Type
 18721 ;;  dividend        4   16[COMRAM] unsigned long 
 18722 ;;  divisor         4   20[COMRAM] unsigned long 
 18723 ;; Auto vars:     Size  Location     Type
 18724 ;;  quotient        4   24[COMRAM] unsigned long 
 18725 ;;  counter         1   28[COMRAM] unsigned char 
 18726 ;; Return value:  Size  Location     Type
 18727 ;;                  4   16[COMRAM] unsigned long 
 18728 ;; Registers used:
 18729 ;;		wreg, status,2, status,0
 18730 ;; Tracked objects:
 18731 ;;		On entry : 0/0
 18732 ;;		On exit  : 0/0
 18733 ;;		Unchanged: 0/0
 18734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18735 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18736 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18738 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18739 ;;Total ram usage:       13 bytes
 18740 ;; Hardware stack levels used:    1
 18741 ;; Hardware stack levels required when called:    3
 18742 ;; This function calls:
 18743 ;;		Nothing
 18744 ;; This function is called by:
 18745 ;;		_printf
 18746 ;; This function uses a non-reentrant model
 18747 ;;
 18748                           
 18749                           	psect	text87
 18750  004528                     __ptext87:
 18751                           	opt stack 0
 18752  004528                     ___lldiv:
 18753                           	opt stack 26
 18754                           
 18755                           ;incstack = 0
 18756  004528  0E00               	movlw	0
 18757  00452A  6E19               	movwf	___lldiv@quotient,c
 18758  00452C  0E00               	movlw	0
 18759  00452E  6E1A               	movwf	___lldiv@quotient+1,c
 18760  004530  0E00               	movlw	0
 18761  004532  6E1B               	movwf	___lldiv@quotient+2,c
 18762  004534  0E00               	movlw	0
 18763  004536  6E1C               	movwf	___lldiv@quotient+3,c
 18764  004538  5015               	movf	___lldiv@divisor,w,c
 18765  00453A  1016               	iorwf	___lldiv@divisor+1,w,c
 18766  00453C  1017               	iorwf	___lldiv@divisor+2,w,c
 18767  00453E  1018               	iorwf	___lldiv@divisor+3,w,c
 18768  004540  B4D8               	btfsc	status,2,c
 18769  004542  D02F               	goto	l2128
 18770  004544  0E01               	movlw	1
 18771  004546  6E1D               	movwf	___lldiv@counter,c
 18772  004548  D007               	goto	l9946
 18773  00454A                     l9944:
 18774  00454A  90D8               	bcf	status,0,c
 18775  00454C  3615               	rlcf	___lldiv@divisor,f,c
 18776  00454E  3616               	rlcf	___lldiv@divisor+1,f,c
 18777  004550  3617               	rlcf	___lldiv@divisor+2,f,c
 18778  004552  3618               	rlcf	___lldiv@divisor+3,f,c
 18779  004554  2A1D               	incf	___lldiv@counter,f,c
 18780  004556  D000               	goto	l9946
 18781  004558                     l9946:
 18782  004558  BE18               	btfsc	___lldiv@divisor+3,7,c
 18783  00455A  D002               	goto	l9948
 18784  00455C  D7F6               	goto	l9944
 18785  00455E  D000               	goto	l9948
 18786  004560                     l9948:
 18787  004560  90D8               	bcf	status,0,c
 18788  004562  3619               	rlcf	___lldiv@quotient,f,c
 18789  004564  361A               	rlcf	___lldiv@quotient+1,f,c
 18790  004566  361B               	rlcf	___lldiv@quotient+2,f,c
 18791  004568  361C               	rlcf	___lldiv@quotient+3,f,c
 18792  00456A  5015               	movf	___lldiv@divisor,w,c
 18793  00456C  5C11               	subwf	___lldiv@dividend,w,c
 18794  00456E  5016               	movf	___lldiv@divisor+1,w,c
 18795  004570  5812               	subwfb	___lldiv@dividend+1,w,c
 18796  004572  5017               	movf	___lldiv@divisor+2,w,c
 18797  004574  5813               	subwfb	___lldiv@dividend+2,w,c
 18798  004576  5018               	movf	___lldiv@divisor+3,w,c
 18799  004578  5814               	subwfb	___lldiv@dividend+3,w,c
 18800  00457A  A0D8               	btfss	status,0,c
 18801  00457C  D00A               	goto	l9956
 18802  00457E  5015               	movf	___lldiv@divisor,w,c
 18803  004580  5E11               	subwf	___lldiv@dividend,f,c
 18804  004582  5016               	movf	___lldiv@divisor+1,w,c
 18805  004584  5A12               	subwfb	___lldiv@dividend+1,f,c
 18806  004586  5017               	movf	___lldiv@divisor+2,w,c
 18807  004588  5A13               	subwfb	___lldiv@dividend+2,f,c
 18808  00458A  5018               	movf	___lldiv@divisor+3,w,c
 18809  00458C  5A14               	subwfb	___lldiv@dividend+3,f,c
 18810  00458E  8019               	bsf	___lldiv@quotient,0,c
 18811  004590  D000               	goto	l9956
 18812  004592                     l9956:
 18813  004592  90D8               	bcf	status,0,c
 18814  004594  3218               	rrcf	___lldiv@divisor+3,f,c
 18815  004596  3217               	rrcf	___lldiv@divisor+2,f,c
 18816  004598  3216               	rrcf	___lldiv@divisor+1,f,c
 18817  00459A  3215               	rrcf	___lldiv@divisor,f,c
 18818  00459C  2E1D               	decfsz	___lldiv@counter,f,c
 18819  00459E  D7E0               	goto	l9948
 18820  0045A0  D000               	goto	l2128
 18821  0045A2                     l2128:
 18822  0045A2  C019  F011         	movff	___lldiv@quotient,?___lldiv
 18823  0045A6  C01A  F012         	movff	___lldiv@quotient+1,?___lldiv+1
 18824  0045AA  C01B  F013         	movff	___lldiv@quotient+2,?___lldiv+2
 18825  0045AE  C01C  F014         	movff	___lldiv@quotient+3,?___lldiv+3
 18826  0045B2  0012               	return		;funcret
 18827  0045B4                     __end_of___lldiv:
 18828                           	opt stack 0
 18829                           tblptru	equ	0xFF8
 18830                           tblptrh	equ	0xFF7
 18831                           tblptrl	equ	0xFF6
 18832                           tablat	equ	0xFF5
 18833                           prodh	equ	0xFF4
 18834                           prodl	equ	0xFF3
 18835                           intcon	equ	0xFF2
 18836                           intcon2	equ	0xFF1
 18837                           postinc0	equ	0xFEE
 18838                           wreg	equ	0xFE8
 18839                           postdec1	equ	0xFE5
 18840                           fsr1l	equ	0xFE1
 18841                           indf2	equ	0xFDF
 18842                           postinc2	equ	0xFDE
 18843                           postdec2	equ	0xFDD
 18844                           fsr2h	equ	0xFDA
 18845                           fsr2l	equ	0xFD9
 18846                           status	equ	0xFD8
 18847                           
 18848 ;; *************** function ___fttol *****************
 18849 ;; Defined at:
 18850 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
 18851 ;; Parameters:    Size  Location     Type
 18852 ;;  f1              3   45[COMRAM] float 
 18853 ;; Auto vars:     Size  Location     Type
 18854 ;;  lval            4   55[COMRAM] unsigned long 
 18855 ;;  exp1            1   59[COMRAM] unsigned char 
 18856 ;;  sign1           1   54[COMRAM] unsigned char 
 18857 ;; Return value:  Size  Location     Type
 18858 ;;                  4   45[COMRAM] long 
 18859 ;; Registers used:
 18860 ;;		wreg, status,2, status,0
 18861 ;; Tracked objects:
 18862 ;;		On entry : 0/0
 18863 ;;		On exit  : 0/0
 18864 ;;		Unchanged: 0/0
 18865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18866 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18867 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18868 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18869 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18870 ;;Total ram usage:       15 bytes
 18871 ;; Hardware stack levels used:    1
 18872 ;; Hardware stack levels required when called:    3
 18873 ;; This function calls:
 18874 ;;		Nothing
 18875 ;; This function is called by:
 18876 ;;		_Update_Screen
 18877 ;;		_get_duty_cycle
 18878 ;;		_do_update_pwm
 18879 ;;		_printf
 18880 ;; This function uses a non-reentrant model
 18881 ;;
 18882                           
 18883                           	psect	text88
 18884  003A48                     __ptext88:
 18885                           	opt stack 0
 18886  003A48                     ___fttol:
 18887                           	opt stack 25
 18888                           
 18889                           ;incstack = 0
 18890  003A48  C030  F032         	movff	___fttol@f1+2,??___fttol
 18891  003A4C  6A33               	clrf	(??___fttol+1)& (0+255),c
 18892  003A4E  6A34               	clrf	(??___fttol+2)& (0+255),c
 18893  003A50  342F               	rlcf	___fttol@f1+1,w,c
 18894  003A52  3632               	rlcf	??___fttol& (0+255),f,c
 18895  003A54  E301               	bnc	u8701
 18896  003A56  8033               	bsf	(??___fttol+1)& (0+255),0,c
 18897  003A58                     u8701:
 18898  003A58  5032               	movf	??___fttol,w,c
 18899  003A5A  6E3C               	movwf	___fttol@exp1,c
 18900  003A5C  503C               	movf	___fttol@exp1,w,c
 18901  003A5E  A4D8               	btfss	status,2,c
 18902  003A60  D002               	goto	l9898
 18903  003A62  D039               	goto	l9922
 18904  003A64  D063               	goto	l2084
 18905  003A66                     l9898:
 18906  003A66  0E17               	movlw	23
 18907  003A68  6E32               	movwf	??___fttol& (0+255),c
 18908  003A6A  C02E  F033         	movff	___fttol@f1,??___fttol+1
 18909  003A6E  C02F  F034         	movff	___fttol@f1+1,??___fttol+2
 18910  003A72  C030  F035         	movff	___fttol@f1+2,??___fttol+3
 18911  003A76  2832               	incf	??___fttol,w,c
 18912  003A78  6E36               	movwf	(??___fttol+4)& (0+255),c
 18913  003A7A  D004               	goto	u8720
 18914  003A7C                     u8725:
 18915  003A7C  90D8               	bcf	status,0,c
 18916  003A7E  3235               	rrcf	??___fttol+3,f,c
 18917  003A80  3234               	rrcf	??___fttol+2,f,c
 18918  003A82  3233               	rrcf	??___fttol+1,f,c
 18919  003A84                     u8720:
 18920  003A84  2E36               	decfsz	(??___fttol+4)& (0+255),f,c
 18921  003A86  D7FA               	goto	u8725
 18922  003A88  5033               	movf	??___fttol+1,w,c
 18923  003A8A  6E37               	movwf	___fttol@sign1,c
 18924  003A8C  8E2F               	bsf	___fttol@f1+1,7,c
 18925  003A8E  0EFF               	movlw	255
 18926  003A90  162E               	andwf	___fttol@f1,f,c
 18927  003A92  0EFF               	movlw	255
 18928  003A94  162F               	andwf	___fttol@f1+1,f,c
 18929  003A96  0E00               	movlw	0
 18930  003A98  1630               	andwf	___fttol@f1+2,f,c
 18931  003A9A  502E               	movf	___fttol@f1,w,c
 18932  003A9C  6E38               	movwf	___fttol@lval,c
 18933  003A9E  502F               	movf	___fttol@f1+1,w,c
 18934  003AA0  6E39               	movwf	___fttol@lval+1,c
 18935  003AA2  5030               	movf	___fttol@f1+2,w,c
 18936  003AA4  6E3A               	movwf	___fttol@lval+2,c
 18937  003AA6  6A3B               	clrf	___fttol@lval+3,c
 18938  003AA8  0E8E               	movlw	142
 18939  003AAA  5E3C               	subwf	___fttol@exp1,f,c
 18940  003AAC  AE3C               	btfss	___fttol@exp1,7,c
 18941  003AAE  D010               	goto	l9920
 18942  003AB0  503C               	movf	___fttol@exp1,w,c
 18943  003AB2  0A80               	xorlw	128
 18944  003AB4  0F8F               	addlw	143
 18945  003AB6  B0D8               	btfsc	status,0,c
 18946  003AB8  D003               	goto	l9916
 18947  003ABA  D00D               	goto	l9922
 18948  003ABC  D037               	goto	l2084
 18949  003ABE  D000               	goto	l9916
 18950  003AC0                     l9916:
 18951  003AC0  90D8               	bcf	status,0,c
 18952  003AC2  323B               	rrcf	___fttol@lval+3,f,c
 18953  003AC4  323A               	rrcf	___fttol@lval+2,f,c
 18954  003AC6  3239               	rrcf	___fttol@lval+1,f,c
 18955  003AC8  3238               	rrcf	___fttol@lval,f,c
 18956  003ACA  3E3C               	incfsz	___fttol@exp1,f,c
 18957  003ACC  D7F9               	goto	l9916
 18958  003ACE  D019               	goto	l9930
 18959  003AD0                     l9920:
 18960  003AD0  0E17               	movlw	23
 18961  003AD2  643C               	cpfsgt	___fttol@exp1,c
 18962  003AD4  D011               	goto	l9928
 18963  003AD6                     l9922:
 18964  003AD6  0E00               	movlw	0
 18965  003AD8  6E2E               	movwf	?___fttol,c
 18966  003ADA  0E00               	movlw	0
 18967  003ADC  6E2F               	movwf	?___fttol+1,c
 18968  003ADE  0E00               	movlw	0
 18969  003AE0  6E30               	movwf	?___fttol+2,c
 18970  003AE2  0E00               	movlw	0
 18971  003AE4  6E31               	movwf	?___fttol+3,c
 18972  003AE6  D022               	goto	l2084
 18973  003AE8  D007               	goto	l9928
 18974  003AEA                     l9926:
 18975  003AEA  90D8               	bcf	status,0,c
 18976  003AEC  3638               	rlcf	___fttol@lval,f,c
 18977  003AEE  3639               	rlcf	___fttol@lval+1,f,c
 18978  003AF0  363A               	rlcf	___fttol@lval+2,f,c
 18979  003AF2  363B               	rlcf	___fttol@lval+3,f,c
 18980  003AF4  063C               	decf	___fttol@exp1,f,c
 18981  003AF6  D000               	goto	l9928
 18982  003AF8                     l9928:
 18983  003AF8  503C               	movf	___fttol@exp1,w,c
 18984  003AFA  B4D8               	btfsc	status,2,c
 18985  003AFC  D002               	goto	l9930
 18986  003AFE  D7F5               	goto	l9926
 18987  003B00  D000               	goto	l9930
 18988  003B02                     l9930:
 18989  003B02  5037               	movf	___fttol@sign1,w,c
 18990  003B04  B4D8               	btfsc	status,2,c
 18991  003B06  D009               	goto	l9934
 18992  003B08  1E3B               	comf	___fttol@lval+3,f,c
 18993  003B0A  1E3A               	comf	___fttol@lval+2,f,c
 18994  003B0C  1E39               	comf	___fttol@lval+1,f,c
 18995  003B0E  6C38               	negf	___fttol@lval,c
 18996  003B10  0E00               	movlw	0
 18997  003B12  2239               	addwfc	___fttol@lval+1,f,c
 18998  003B14  223A               	addwfc	___fttol@lval+2,f,c
 18999  003B16  223B               	addwfc	___fttol@lval+3,f,c
 19000  003B18  D000               	goto	l9934
 19001  003B1A                     l9934:
 19002  003B1A  C038  F02E         	movff	___fttol@lval,?___fttol
 19003  003B1E  C039  F02F         	movff	___fttol@lval+1,?___fttol+1
 19004  003B22  C03A  F030         	movff	___fttol@lval+2,?___fttol+2
 19005  003B26  C03B  F031         	movff	___fttol@lval+3,?___fttol+3
 19006  003B2A  D000               	goto	l2084
 19007  003B2C                     l2084:
 19008  003B2C  0012               	return		;funcret
 19009  003B2E                     __end_of___fttol:
 19010                           	opt stack 0
 19011                           tblptru	equ	0xFF8
 19012                           tblptrh	equ	0xFF7
 19013                           tblptrl	equ	0xFF6
 19014                           tablat	equ	0xFF5
 19015                           prodh	equ	0xFF4
 19016                           prodl	equ	0xFF3
 19017                           intcon	equ	0xFF2
 19018                           intcon2	equ	0xFF1
 19019                           postinc0	equ	0xFEE
 19020                           wreg	equ	0xFE8
 19021                           postdec1	equ	0xFE5
 19022                           fsr1l	equ	0xFE1
 19023                           indf2	equ	0xFDF
 19024                           postinc2	equ	0xFDE
 19025                           postdec2	equ	0xFDD
 19026                           fsr2h	equ	0xFDA
 19027                           fsr2l	equ	0xFD9
 19028                           status	equ	0xFD8
 19029                           
 19030 ;; *************** function ___ftsub *****************
 19031 ;; Defined at:
 19032 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
 19033 ;; Parameters:    Size  Location     Type
 19034 ;;  f1              3   88[COMRAM] float 
 19035 ;;  f2              3   91[COMRAM] float 
 19036 ;; Auto vars:     Size  Location     Type
 19037 ;;		None
 19038 ;; Return value:  Size  Location     Type
 19039 ;;                  3   88[COMRAM] float 
 19040 ;; Registers used:
 19041 ;;		wreg, status,2, status,0, cstack
 19042 ;; Tracked objects:
 19043 ;;		On entry : 0/0
 19044 ;;		On exit  : 0/0
 19045 ;;		Unchanged: 0/0
 19046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19047 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19050 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19051 ;;Total ram usage:        6 bytes
 19052 ;; Hardware stack levels used:    1
 19053 ;; Hardware stack levels required when called:    5
 19054 ;; This function calls:
 19055 ;;		___ftadd
 19056 ;; This function is called by:
 19057 ;;		_printf
 19058 ;; This function uses a non-reentrant model
 19059 ;;
 19060                           
 19061                           	psect	text89
 19062  004E82                     __ptext89:
 19063                           	opt stack 0
 19064  004E82                     ___ftsub:
 19065                           	opt stack 24
 19066                           
 19067                           ;incstack = 0
 19068  004E82  505C               	movf	___ftsub@f2,w,c
 19069  004E84  105D               	iorwf	___ftsub@f2+1,w,c
 19070  004E86  105E               	iorwf	___ftsub@f2+2,w,c
 19071  004E88  B4D8               	btfsc	status,2,c
 19072  004E8A  D007               	goto	l9866
 19073  004E8C  0E00               	movlw	0
 19074  004E8E  1A5C               	xorwf	___ftsub@f2,f,c
 19075  004E90  0E00               	movlw	0
 19076  004E92  1A5D               	xorwf	___ftsub@f2+1,f,c
 19077  004E94  0E80               	movlw	128
 19078  004E96  1A5E               	xorwf	___ftsub@f2+2,f,c
 19079  004E98  D000               	goto	l9866
 19080  004E9A                     l9866:
 19081  004E9A  C059  F04D         	movff	___ftsub@f1,___ftadd@f1
 19082  004E9E  C05A  F04E         	movff	___ftsub@f1+1,___ftadd@f1+1
 19083  004EA2  C05B  F04F         	movff	___ftsub@f1+2,___ftadd@f1+2
 19084  004EA6  C05C  F050         	movff	___ftsub@f2,___ftadd@f2
 19085  004EAA  C05D  F051         	movff	___ftsub@f2+1,___ftadd@f2+1
 19086  004EAE  C05E  F052         	movff	___ftsub@f2+2,___ftadd@f2+2
 19087  004EB2  ECCB  F010         	call	___ftadd	;wreg free
 19088  004EB6  C04D  F059         	movff	?___ftadd,?___ftsub
 19089  004EBA  C04E  F05A         	movff	?___ftadd+1,?___ftsub+1
 19090  004EBE  C04F  F05B         	movff	?___ftadd+2,?___ftsub+2
 19091  004EC2  D000               	goto	l2080
 19092  004EC4                     l2080:
 19093  004EC4  0012               	return		;funcret
 19094  004EC6                     __end_of___ftsub:
 19095                           	opt stack 0
 19096                           tblptru	equ	0xFF8
 19097                           tblptrh	equ	0xFF7
 19098                           tblptrl	equ	0xFF6
 19099                           tablat	equ	0xFF5
 19100                           prodh	equ	0xFF4
 19101                           prodl	equ	0xFF3
 19102                           intcon	equ	0xFF2
 19103                           intcon2	equ	0xFF1
 19104                           postinc0	equ	0xFEE
 19105                           wreg	equ	0xFE8
 19106                           postdec1	equ	0xFE5
 19107                           fsr1l	equ	0xFE1
 19108                           indf2	equ	0xFDF
 19109                           postinc2	equ	0xFDE
 19110                           postdec2	equ	0xFDD
 19111                           fsr2h	equ	0xFDA
 19112                           fsr2l	equ	0xFD9
 19113                           status	equ	0xFD8
 19114                           
 19115 ;; *************** function ___ftadd *****************
 19116 ;; Defined at:
 19117 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
 19118 ;; Parameters:    Size  Location     Type
 19119 ;;  f1              3   76[COMRAM] float 
 19120 ;;  f2              3   79[COMRAM] float 
 19121 ;; Auto vars:     Size  Location     Type
 19122 ;;  exp1            1   87[COMRAM] unsigned char 
 19123 ;;  exp2            1   86[COMRAM] unsigned char 
 19124 ;;  sign            1   85[COMRAM] unsigned char 
 19125 ;; Return value:  Size  Location     Type
 19126 ;;                  3   76[COMRAM] float 
 19127 ;; Registers used:
 19128 ;;		wreg, status,2, status,0, cstack
 19129 ;; Tracked objects:
 19130 ;;		On entry : 0/0
 19131 ;;		On exit  : 0/0
 19132 ;;		Unchanged: 0/0
 19133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19134 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19135 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19136 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19137 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19138 ;;Total ram usage:       12 bytes
 19139 ;; Hardware stack levels used:    1
 19140 ;; Hardware stack levels required when called:    4
 19141 ;; This function calls:
 19142 ;;		___ftpack
 19143 ;; This function is called by:
 19144 ;;		_get_duty_cycle
 19145 ;;		_printf
 19146 ;;		___ftsub
 19147 ;; This function uses a non-reentrant model
 19148 ;;
 19149                           
 19150                           	psect	text90
 19151  002196                     __ptext90:
 19152                           	opt stack 0
 19153  002196                     ___ftadd:
 19154                           	opt stack 24
 19155                           
 19156                           ;incstack = 0
 19157  002196  C04F  F053         	movff	___ftadd@f1+2,??___ftadd
 19158  00219A  6A54               	clrf	(??___ftadd+1)& (0+255),c
 19159  00219C  6A55               	clrf	(??___ftadd+2)& (0+255),c
 19160  00219E  344E               	rlcf	___ftadd@f1+1,w,c
 19161  0021A0  3653               	rlcf	??___ftadd& (0+255),f,c
 19162  0021A2  E301               	bnc	u7861
 19163  0021A4  8054               	bsf	(??___ftadd+1)& (0+255),0,c
 19164  0021A6                     u7861:
 19165  0021A6  5053               	movf	??___ftadd,w,c
 19166  0021A8  6E58               	movwf	___ftadd@exp1,c
 19167  0021AA  C052  F053         	movff	___ftadd@f2+2,??___ftadd
 19168  0021AE  6A54               	clrf	(??___ftadd+1)& (0+255),c
 19169  0021B0  6A55               	clrf	(??___ftadd+2)& (0+255),c
 19170  0021B2  3451               	rlcf	___ftadd@f2+1,w,c
 19171  0021B4  3653               	rlcf	??___ftadd& (0+255),f,c
 19172  0021B6  E301               	bnc	u7871
 19173  0021B8  8054               	bsf	(??___ftadd+1)& (0+255),0,c
 19174  0021BA                     u7871:
 19175  0021BA  5053               	movf	??___ftadd,w,c
 19176  0021BC  6E57               	movwf	___ftadd@exp2,c
 19177  0021BE  5058               	movf	___ftadd@exp1,w,c
 19178  0021C0  B4D8               	btfsc	status,2,c
 19179  0021C2  D00B               	goto	l1999
 19180  0021C4  5057               	movf	___ftadd@exp2,w,c
 19181  0021C6  5C58               	subwf	___ftadd@exp1,w,c
 19182  0021C8  B0D8               	btfsc	status,0,c
 19183  0021CA  D00E               	goto	l9336
 19184  0021CC  5058               	movf	___ftadd@exp1,w,c
 19185  0021CE  0800               	sublw	0
 19186  0021D0  2457               	addwf	___ftadd@exp2,w,c
 19187  0021D2  6E53               	movwf	??___ftadd& (0+255),c
 19188  0021D4  0E18               	movlw	24
 19189  0021D6  6453               	cpfsgt	??___ftadd,c
 19190  0021D8  D007               	goto	l9336
 19191  0021DA                     l1999:
 19192  0021DA  C050  F04D         	movff	___ftadd@f2,?___ftadd
 19193  0021DE  C051  F04E         	movff	___ftadd@f2+1,?___ftadd+1
 19194  0021E2  C052  F04F         	movff	___ftadd@f2+2,?___ftadd+2
 19195  0021E6  D0B8               	goto	l2000
 19196  0021E8                     l9336:
 19197  0021E8  5057               	movf	___ftadd@exp2,w,c
 19198  0021EA  B4D8               	btfsc	status,2,c
 19199  0021EC  D00B               	goto	l2003
 19200  0021EE  5058               	movf	___ftadd@exp1,w,c
 19201  0021F0  5C57               	subwf	___ftadd@exp2,w,c
 19202  0021F2  B0D8               	btfsc	status,0,c
 19203  0021F4  D00E               	goto	l9342
 19204  0021F6  5057               	movf	___ftadd@exp2,w,c
 19205  0021F8  0800               	sublw	0
 19206  0021FA  2458               	addwf	___ftadd@exp1,w,c
 19207  0021FC  6E53               	movwf	??___ftadd& (0+255),c
 19208  0021FE  0E18               	movlw	24
 19209  002200  6453               	cpfsgt	??___ftadd,c
 19210  002202  D007               	goto	l9342
 19211  002204                     l2003:
 19212  002204  C04D  F04D         	movff	___ftadd@f1,?___ftadd
 19213  002208  C04E  F04E         	movff	___ftadd@f1+1,?___ftadd+1
 19214  00220C  C04F  F04F         	movff	___ftadd@f1+2,?___ftadd+2
 19215  002210  D0A3               	goto	l2000
 19216  002212                     l9342:
 19217  002212  0E06               	movlw	6
 19218  002214  6E56               	movwf	___ftadd@sign,c
 19219  002216  AE4F               	btfss	___ftadd@f1+2,7,c
 19220  002218  D002               	goto	l9348
 19221  00221A  8E56               	bsf	___ftadd@sign,7,c
 19222  00221C  D000               	goto	l9348
 19223  00221E                     l9348:
 19224  00221E  BE52               	btfsc	___ftadd@f2+2,7,c
 19225  002220  8C56               	bsf	___ftadd@sign,6,c
 19226  002222  8E4E               	bsf	___ftadd@f1+1,7,c
 19227  002224  0EFF               	movlw	255
 19228  002226  164D               	andwf	___ftadd@f1,f,c
 19229  002228  0EFF               	movlw	255
 19230  00222A  164E               	andwf	___ftadd@f1+1,f,c
 19231  00222C  0E00               	movlw	0
 19232  00222E  164F               	andwf	___ftadd@f1+2,f,c
 19233  002230  8E51               	bsf	___ftadd@f2+1,7,c
 19234  002232  0EFF               	movlw	255
 19235  002234  1650               	andwf	___ftadd@f2,f,c
 19236  002236  0EFF               	movlw	255
 19237  002238  1651               	andwf	___ftadd@f2+1,f,c
 19238  00223A  0E00               	movlw	0
 19239  00223C  1652               	andwf	___ftadd@f2+2,f,c
 19240  00223E  5057               	movf	___ftadd@exp2,w,c
 19241  002240  5C58               	subwf	___ftadd@exp1,w,c
 19242  002242  B0D8               	btfsc	status,0,c
 19243  002244  D01E               	goto	l9368
 19244  002246                     l9358:
 19245  002246  90D8               	bcf	status,0,c
 19246  002248  3650               	rlcf	___ftadd@f2,f,c
 19247  00224A  3651               	rlcf	___ftadd@f2+1,f,c
 19248  00224C  3652               	rlcf	___ftadd@f2+2,f,c
 19249  00224E  0657               	decf	___ftadd@exp2,f,c
 19250  002250  5058               	movf	___ftadd@exp1,w,c
 19251  002252  1857               	xorwf	___ftadd@exp2,w,c
 19252  002254  B4D8               	btfsc	status,2,c
 19253  002256  D00F               	goto	l9366
 19254  002258  0656               	decf	___ftadd@sign,f,c
 19255  00225A  C056  F053         	movff	___ftadd@sign,??___ftadd
 19256  00225E  0E07               	movlw	7
 19257  002260  1653               	andwf	??___ftadd,f,c
 19258  002262  B4D8               	btfsc	status,2,c
 19259  002264  D008               	goto	l9366
 19260  002266  D7EF               	goto	l9358
 19261  002268  D006               	goto	l9366
 19262  00226A                     l9364:
 19263  00226A  90D8               	bcf	status,0,c
 19264  00226C  324F               	rrcf	___ftadd@f1+2,f,c
 19265  00226E  324E               	rrcf	___ftadd@f1+1,f,c
 19266  002270  324D               	rrcf	___ftadd@f1,f,c
 19267  002272  2A58               	incf	___ftadd@exp1,f,c
 19268  002274  D000               	goto	l9366
 19269  002276                     l9366:
 19270  002276  5057               	movf	___ftadd@exp2,w,c
 19271  002278  1858               	xorwf	___ftadd@exp1,w,c
 19272  00227A  B4D8               	btfsc	status,2,c
 19273  00227C  D024               	goto	l2014
 19274  00227E  D7F5               	goto	l9364
 19275  002280  D022               	goto	l2014
 19276  002282                     l9368:
 19277  002282  5058               	movf	___ftadd@exp1,w,c
 19278  002284  5C57               	subwf	___ftadd@exp2,w,c
 19279  002286  B0D8               	btfsc	status,0,c
 19280  002288  D01E               	goto	l2014
 19281  00228A                     l9370:
 19282  00228A  90D8               	bcf	status,0,c
 19283  00228C  364D               	rlcf	___ftadd@f1,f,c
 19284  00228E  364E               	rlcf	___ftadd@f1+1,f,c
 19285  002290  364F               	rlcf	___ftadd@f1+2,f,c
 19286  002292  0658               	decf	___ftadd@exp1,f,c
 19287  002294  5058               	movf	___ftadd@exp1,w,c
 19288  002296  1857               	xorwf	___ftadd@exp2,w,c
 19289  002298  B4D8               	btfsc	status,2,c
 19290  00229A  D00F               	goto	l9378
 19291  00229C  0656               	decf	___ftadd@sign,f,c
 19292  00229E  C056  F053         	movff	___ftadd@sign,??___ftadd
 19293  0022A2  0E07               	movlw	7
 19294  0022A4  1653               	andwf	??___ftadd,f,c
 19295  0022A6  B4D8               	btfsc	status,2,c
 19296  0022A8  D008               	goto	l9378
 19297  0022AA  D7EF               	goto	l9370
 19298  0022AC  D006               	goto	l9378
 19299  0022AE                     l9376:
 19300  0022AE  90D8               	bcf	status,0,c
 19301  0022B0  3252               	rrcf	___ftadd@f2+2,f,c
 19302  0022B2  3251               	rrcf	___ftadd@f2+1,f,c
 19303  0022B4  3250               	rrcf	___ftadd@f2,f,c
 19304  0022B6  2A57               	incf	___ftadd@exp2,f,c
 19305  0022B8  D000               	goto	l9378
 19306  0022BA                     l9378:
 19307  0022BA  5057               	movf	___ftadd@exp2,w,c
 19308  0022BC  1858               	xorwf	___ftadd@exp1,w,c
 19309  0022BE  B4D8               	btfsc	status,2,c
 19310  0022C0  D002               	goto	l2014
 19311  0022C2  D7F5               	goto	l9376
 19312  0022C4  D000               	goto	l2014
 19313  0022C6                     l2014:
 19314  0022C6  AE56               	btfss	___ftadd@sign,7,c
 19315  0022C8  D00C               	goto	l2023
 19316  0022CA  0EFF               	movlw	255
 19317  0022CC  1A4D               	xorwf	___ftadd@f1,f,c
 19318  0022CE  0EFF               	movlw	255
 19319  0022D0  1A4E               	xorwf	___ftadd@f1+1,f,c
 19320  0022D2  0EFF               	movlw	255
 19321  0022D4  1A4F               	xorwf	___ftadd@f1+2,f,c
 19322  0022D6  0E01               	movlw	1
 19323  0022D8  264D               	addwf	___ftadd@f1,f,c
 19324  0022DA  0E00               	movlw	0
 19325  0022DC  224E               	addwfc	___ftadd@f1+1,f,c
 19326  0022DE  0E00               	movlw	0
 19327  0022E0  224F               	addwfc	___ftadd@f1+2,f,c
 19328  0022E2                     l2023:
 19329  0022E2  AC56               	btfss	___ftadd@sign,6,c
 19330  0022E4  D00D               	goto	l9384
 19331  0022E6  0EFF               	movlw	255
 19332  0022E8  1A50               	xorwf	___ftadd@f2,f,c
 19333  0022EA  0EFF               	movlw	255
 19334  0022EC  1A51               	xorwf	___ftadd@f2+1,f,c
 19335  0022EE  0EFF               	movlw	255
 19336  0022F0  1A52               	xorwf	___ftadd@f2+2,f,c
 19337  0022F2  0E01               	movlw	1
 19338  0022F4  2650               	addwf	___ftadd@f2,f,c
 19339  0022F6  0E00               	movlw	0
 19340  0022F8  2251               	addwfc	___ftadd@f2+1,f,c
 19341  0022FA  0E00               	movlw	0
 19342  0022FC  2252               	addwfc	___ftadd@f2+2,f,c
 19343  0022FE  D000               	goto	l9384
 19344  002300                     l9384:
 19345  002300  0E00               	movlw	0
 19346  002302  6E56               	movwf	___ftadd@sign,c
 19347  002304  504D               	movf	___ftadd@f1,w,c
 19348  002306  2650               	addwf	___ftadd@f2,f,c
 19349  002308  504E               	movf	___ftadd@f1+1,w,c
 19350  00230A  2251               	addwfc	___ftadd@f2+1,f,c
 19351  00230C  504F               	movf	___ftadd@f1+2,w,c
 19352  00230E  2252               	addwfc	___ftadd@f2+2,f,c
 19353  002310  AE52               	btfss	___ftadd@f2+2,7,c
 19354  002312  D00F               	goto	l9394
 19355  002314  0EFF               	movlw	255
 19356  002316  1A50               	xorwf	___ftadd@f2,f,c
 19357  002318  0EFF               	movlw	255
 19358  00231A  1A51               	xorwf	___ftadd@f2+1,f,c
 19359  00231C  0EFF               	movlw	255
 19360  00231E  1A52               	xorwf	___ftadd@f2+2,f,c
 19361  002320  0E01               	movlw	1
 19362  002322  2650               	addwf	___ftadd@f2,f,c
 19363  002324  0E00               	movlw	0
 19364  002326  2251               	addwfc	___ftadd@f2+1,f,c
 19365  002328  0E00               	movlw	0
 19366  00232A  2252               	addwfc	___ftadd@f2+2,f,c
 19367  00232C  0E01               	movlw	1
 19368  00232E  6E56               	movwf	___ftadd@sign,c
 19369  002330  D000               	goto	l9394
 19370  002332                     l9394:
 19371  002332  C050  F011         	movff	___ftadd@f2,___ftpack@arg
 19372  002336  C051  F012         	movff	___ftadd@f2+1,___ftpack@arg+1
 19373  00233A  C052  F013         	movff	___ftadd@f2+2,___ftpack@arg+2
 19374  00233E  C058  F014         	movff	___ftadd@exp1,___ftpack@exp
 19375  002342  C056  F015         	movff	___ftadd@sign,___ftpack@sign
 19376  002346  EC50  F01F         	call	___ftpack	;wreg free
 19377  00234A  C011  F04D         	movff	?___ftpack,?___ftadd
 19378  00234E  C012  F04E         	movff	?___ftpack+1,?___ftadd+1
 19379  002352  C013  F04F         	movff	?___ftpack+2,?___ftadd+2
 19380  002356  D000               	goto	l2000
 19381  002358                     l2000:
 19382  002358  0012               	return		;funcret
 19383  00235A                     __end_of___ftadd:
 19384                           	opt stack 0
 19385                           tblptru	equ	0xFF8
 19386                           tblptrh	equ	0xFF7
 19387                           tblptrl	equ	0xFF6
 19388                           tablat	equ	0xFF5
 19389                           prodh	equ	0xFF4
 19390                           prodl	equ	0xFF3
 19391                           intcon	equ	0xFF2
 19392                           intcon2	equ	0xFF1
 19393                           postinc0	equ	0xFEE
 19394                           wreg	equ	0xFE8
 19395                           postdec1	equ	0xFE5
 19396                           fsr1l	equ	0xFE1
 19397                           indf2	equ	0xFDF
 19398                           postinc2	equ	0xFDE
 19399                           postdec2	equ	0xFDD
 19400                           fsr2h	equ	0xFDA
 19401                           fsr2l	equ	0xFD9
 19402                           status	equ	0xFD8
 19403                           
 19404 ;; *************** function ___ftpack *****************
 19405 ;; Defined at:
 19406 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 19407 ;; Parameters:    Size  Location     Type
 19408 ;;  arg             3   16[COMRAM] unsigned um
 19409 ;;  exp             1   19[COMRAM] unsigned char 
 19410 ;;  sign            1   20[COMRAM] unsigned char 
 19411 ;; Auto vars:     Size  Location     Type
 19412 ;;		None
 19413 ;; Return value:  Size  Location     Type
 19414 ;;                  3   16[COMRAM] float 
 19415 ;; Registers used:
 19416 ;;		wreg, status,2, status,0
 19417 ;; Tracked objects:
 19418 ;;		On entry : 0/0
 19419 ;;		On exit  : 0/0
 19420 ;;		Unchanged: 0/0
 19421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19422 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19424 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19425 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19426 ;;Total ram usage:        8 bytes
 19427 ;; Hardware stack levels used:    1
 19428 ;; Hardware stack levels required when called:    3
 19429 ;; This function calls:
 19430 ;;		Nothing
 19431 ;; This function is called by:
 19432 ;;		___awtoft
 19433 ;;		___ftadd
 19434 ;;		___ftdiv
 19435 ;;		___ftmul
 19436 ;;		___lbtoft
 19437 ;;		___lltoft
 19438 ;; This function uses a non-reentrant model
 19439 ;;
 19440                           
 19441                           	psect	text91
 19442  003EA0                     __ptext91:
 19443                           	opt stack 0
 19444  003EA0                     ___ftpack:
 19445                           	opt stack 24
 19446                           
 19447                           ;incstack = 0
 19448  003EA0  5014               	movf	___ftpack@exp,w,c
 19449  003EA2  B4D8               	btfsc	status,2,c
 19450  003EA4  D005               	goto	l9282
 19451  003EA6  5011               	movf	___ftpack@arg,w,c
 19452  003EA8  1012               	iorwf	___ftpack@arg+1,w,c
 19453  003EAA  1013               	iorwf	___ftpack@arg+2,w,c
 19454  003EAC  A4D8               	btfss	status,2,c
 19455  003EAE  D00E               	goto	l9288
 19456  003EB0                     l9282:
 19457  003EB0  0E00               	movlw	0
 19458  003EB2  6E11               	movwf	?___ftpack,c
 19459  003EB4  0E00               	movlw	0
 19460  003EB6  6E12               	movwf	?___ftpack+1,c
 19461  003EB8  0E00               	movlw	0
 19462  003EBA  6E13               	movwf	?___ftpack+2,c
 19463  003EBC  D053               	goto	l1959
 19464  003EBE  D006               	goto	l9288
 19465  003EC0                     l9286:
 19466  003EC0  2A14               	incf	___ftpack@exp,f,c
 19467  003EC2  90D8               	bcf	status,0,c
 19468  003EC4  3213               	rrcf	___ftpack@arg+2,f,c
 19469  003EC6  3212               	rrcf	___ftpack@arg+1,f,c
 19470  003EC8  3211               	rrcf	___ftpack@arg,f,c
 19471  003ECA  D000               	goto	l9288
 19472  003ECC                     l9288:
 19473  003ECC  0E00               	movlw	0
 19474  003ECE  1411               	andwf	___ftpack@arg,w,c
 19475  003ED0  6E16               	movwf	??___ftpack& (0+255),c
 19476  003ED2  0E00               	movlw	0
 19477  003ED4  1412               	andwf	___ftpack@arg+1,w,c
 19478  003ED6  6E17               	movwf	(??___ftpack+1)& (0+255),c
 19479  003ED8  0EFE               	movlw	254
 19480  003EDA  1413               	andwf	___ftpack@arg+2,w,c
 19481  003EDC  6E18               	movwf	(??___ftpack+2)& (0+255),c
 19482  003EDE  5016               	movf	??___ftpack,w,c
 19483  003EE0  1017               	iorwf	??___ftpack+1,w,c
 19484  003EE2  1018               	iorwf	??___ftpack+2,w,c
 19485  003EE4  B4D8               	btfsc	status,2,c
 19486  003EE6  D00E               	goto	l9294
 19487  003EE8  D7EB               	goto	l9286
 19488  003EEA  D00C               	goto	l9294
 19489  003EEC                     l9290:
 19490  003EEC  2A14               	incf	___ftpack@exp,f,c
 19491  003EEE  0E01               	movlw	1
 19492  003EF0  2611               	addwf	___ftpack@arg,f,c
 19493  003EF2  0E00               	movlw	0
 19494  003EF4  2212               	addwfc	___ftpack@arg+1,f,c
 19495  003EF6  0E00               	movlw	0
 19496  003EF8  2213               	addwfc	___ftpack@arg+2,f,c
 19497  003EFA  90D8               	bcf	status,0,c
 19498  003EFC  3213               	rrcf	___ftpack@arg+2,f,c
 19499  003EFE  3212               	rrcf	___ftpack@arg+1,f,c
 19500  003F00  3211               	rrcf	___ftpack@arg,f,c
 19501  003F02  D000               	goto	l9294
 19502  003F04                     l9294:
 19503  003F04  0E00               	movlw	0
 19504  003F06  1411               	andwf	___ftpack@arg,w,c
 19505  003F08  6E16               	movwf	??___ftpack& (0+255),c
 19506  003F0A  0E00               	movlw	0
 19507  003F0C  1412               	andwf	___ftpack@arg+1,w,c
 19508  003F0E  6E17               	movwf	(??___ftpack+1)& (0+255),c
 19509  003F10  0EFF               	movlw	255
 19510  003F12  1413               	andwf	___ftpack@arg+2,w,c
 19511  003F14  6E18               	movwf	(??___ftpack+2)& (0+255),c
 19512  003F16  5016               	movf	??___ftpack,w,c
 19513  003F18  1017               	iorwf	??___ftpack+1,w,c
 19514  003F1A  1018               	iorwf	??___ftpack+2,w,c
 19515  003F1C  B4D8               	btfsc	status,2,c
 19516  003F1E  D008               	goto	l9298
 19517  003F20  D7E5               	goto	l9290
 19518  003F22  D006               	goto	l9298
 19519  003F24                     l9296:
 19520  003F24  0614               	decf	___ftpack@exp,f,c
 19521  003F26  90D8               	bcf	status,0,c
 19522  003F28  3611               	rlcf	___ftpack@arg,f,c
 19523  003F2A  3612               	rlcf	___ftpack@arg+1,f,c
 19524  003F2C  3613               	rlcf	___ftpack@arg+2,f,c
 19525  003F2E  D000               	goto	l9298
 19526  003F30                     l9298:
 19527  003F30  BE12               	btfsc	___ftpack@arg+1,7,c
 19528  003F32  D004               	goto	l1970
 19529  003F34  0E02               	movlw	2
 19530  003F36  6014               	cpfslt	___ftpack@exp,c
 19531  003F38  D7F5               	goto	l9296
 19532  003F3A  D000               	goto	l1970
 19533  003F3C                     l1970:
 19534  003F3C  B014               	btfsc	___ftpack@exp,0,c
 19535  003F3E  D002               	goto	l9304
 19536  003F40  9E12               	bcf	___ftpack@arg+1,7,c
 19537  003F42  D000               	goto	l9304
 19538  003F44                     l9304:
 19539  003F44  90D8               	bcf	status,0,c
 19540  003F46  3214               	rrcf	___ftpack@exp,f,c
 19541  003F48  5014               	movf	___ftpack@exp,w,c
 19542  003F4A  1213               	iorwf	___ftpack@arg+2,f,c
 19543  003F4C  5015               	movf	___ftpack@sign,w,c
 19544  003F4E  B4D8               	btfsc	status,2,c
 19545  003F50  D002               	goto	l9310
 19546  003F52  8E13               	bsf	___ftpack@arg+2,7,c
 19547  003F54  D000               	goto	l9310
 19548  003F56                     l9310:
 19549  003F56  C011  F011         	movff	___ftpack@arg,?___ftpack
 19550  003F5A  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
 19551  003F5E  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
 19552  003F62  D000               	goto	l1959
 19553  003F64                     l1959:
 19554  003F64  0012               	return		;funcret
 19555  003F66                     __end_of___ftpack:
 19556                           	opt stack 0
 19557                           tblptru	equ	0xFF8
 19558                           tblptrh	equ	0xFF7
 19559                           tblptrl	equ	0xFF6
 19560                           tablat	equ	0xFF5
 19561                           prodh	equ	0xFF4
 19562                           prodl	equ	0xFF3
 19563                           intcon	equ	0xFF2
 19564                           intcon2	equ	0xFF1
 19565                           postinc0	equ	0xFEE
 19566                           wreg	equ	0xFE8
 19567                           postdec1	equ	0xFE5
 19568                           fsr1l	equ	0xFE1
 19569                           indf2	equ	0xFDF
 19570                           postinc2	equ	0xFDE
 19571                           postdec2	equ	0xFDD
 19572                           fsr2h	equ	0xFDA
 19573                           fsr2l	equ	0xFD9
 19574                           status	equ	0xFD8
 19575                           
 19576 ;; *************** function ___ftneg *****************
 19577 ;; Defined at:
 19578 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
 19579 ;; Parameters:    Size  Location     Type
 19580 ;;  f1              3   16[COMRAM] float 
 19581 ;; Auto vars:     Size  Location     Type
 19582 ;;		None
 19583 ;; Return value:  Size  Location     Type
 19584 ;;                  3   16[COMRAM] float 
 19585 ;; Registers used:
 19586 ;;		wreg, status,2, status,0
 19587 ;; Tracked objects:
 19588 ;;		On entry : 0/0
 19589 ;;		On exit  : 0/0
 19590 ;;		Unchanged: 0/0
 19591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19592 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19595 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19596 ;;Total ram usage:        3 bytes
 19597 ;; Hardware stack levels used:    1
 19598 ;; Hardware stack levels required when called:    3
 19599 ;; This function calls:
 19600 ;;		Nothing
 19601 ;; This function is called by:
 19602 ;;		_get_duty_cycle
 19603 ;;		_printf
 19604 ;; This function uses a non-reentrant model
 19605 ;;
 19606                           
 19607                           	psect	text92
 19608  0051B8                     __ptext92:
 19609                           	opt stack 0
 19610  0051B8                     ___ftneg:
 19611                           	opt stack 26
 19612                           
 19613                           ;incstack = 0
 19614  0051B8  5011               	movf	___ftneg@f1,w,c
 19615  0051BA  1012               	iorwf	___ftneg@f1+1,w,c
 19616  0051BC  1013               	iorwf	___ftneg@f1+2,w,c
 19617  0051BE  B4D8               	btfsc	status,2,c
 19618  0051C0  D006               	goto	l2073
 19619  0051C2  0E00               	movlw	0
 19620  0051C4  1A11               	xorwf	___ftneg@f1,f,c
 19621  0051C6  0E00               	movlw	0
 19622  0051C8  1A12               	xorwf	___ftneg@f1+1,f,c
 19623  0051CA  0E80               	movlw	128
 19624  0051CC  1A13               	xorwf	___ftneg@f1+2,f,c
 19625  0051CE                     l2073:
 19626  0051CE  C011  F011         	movff	___ftneg@f1,?___ftneg
 19627  0051D2  C012  F012         	movff	___ftneg@f1+1,?___ftneg+1
 19628  0051D6  C013  F013         	movff	___ftneg@f1+2,?___ftneg+2
 19629  0051DA  0012               	return		;funcret
 19630  0051DC                     __end_of___ftneg:
 19631                           	opt stack 0
 19632                           tblptru	equ	0xFF8
 19633                           tblptrh	equ	0xFF7
 19634                           tblptrl	equ	0xFF6
 19635                           tablat	equ	0xFF5
 19636                           prodh	equ	0xFF4
 19637                           prodl	equ	0xFF3
 19638                           intcon	equ	0xFF2
 19639                           intcon2	equ	0xFF1
 19640                           postinc0	equ	0xFEE
 19641                           wreg	equ	0xFE8
 19642                           postdec1	equ	0xFE5
 19643                           fsr1l	equ	0xFE1
 19644                           indf2	equ	0xFDF
 19645                           postinc2	equ	0xFDE
 19646                           postdec2	equ	0xFDD
 19647                           fsr2h	equ	0xFDA
 19648                           fsr2l	equ	0xFD9
 19649                           status	equ	0xFD8
 19650                           
 19651 ;; *************** function ___ftge *****************
 19652 ;; Defined at:
 19653 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
 19654 ;; Parameters:    Size  Location     Type
 19655 ;;  ff1             3   16[COMRAM] float 
 19656 ;;  ff2             3   19[COMRAM] float 
 19657 ;; Auto vars:     Size  Location     Type
 19658 ;;		None
 19659 ;; Return value:  Size  Location     Type
 19660 ;;		None               void
 19661 ;; Registers used:
 19662 ;;		wreg, status,2, status,0
 19663 ;; Tracked objects:
 19664 ;;		On entry : 0/0
 19665 ;;		On exit  : 0/0
 19666 ;;		Unchanged: 0/0
 19667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19668 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19670 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19671 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19672 ;;Total ram usage:        9 bytes
 19673 ;; Hardware stack levels used:    1
 19674 ;; Hardware stack levels required when called:    3
 19675 ;; This function calls:
 19676 ;;		Nothing
 19677 ;; This function is called by:
 19678 ;;		_test_alarm
 19679 ;;		_get_duty_cycle
 19680 ;;		_printf
 19681 ;; This function uses a non-reentrant model
 19682 ;;
 19683                           
 19684                           	psect	text93
 19685  004402                     __ptext93:
 19686                           	opt stack 0
 19687  004402                     ___ftge:
 19688                           	opt stack 26
 19689                           
 19690                           ;incstack = 0
 19691  004402  AE13               	btfss	___ftge@ff1+2,7,c
 19692  004404  D017               	goto	l9874
 19693  004406  C011  F017         	movff	___ftge@ff1,??___ftge
 19694  00440A  C012  F018         	movff	___ftge@ff1+1,??___ftge+1
 19695  00440E  C013  F019         	movff	___ftge@ff1+2,??___ftge+2
 19696  004412  1E17               	comf	??___ftge,f,c
 19697  004414  1E18               	comf	??___ftge+1,f,c
 19698  004416  1E19               	comf	??___ftge+2,f,c
 19699  004418  2A17               	incf	??___ftge,f,c
 19700  00441A  0E00               	movlw	0
 19701  00441C  2218               	addwfc	??___ftge+1,f,c
 19702  00441E  2219               	addwfc	??___ftge+2,f,c
 19703  004420  0E00               	movlw	0
 19704  004422  2417               	addwf	??___ftge,w,c
 19705  004424  6E11               	movwf	___ftge@ff1,c
 19706  004426  0E00               	movlw	0
 19707  004428  2018               	addwfc	??___ftge+1,w,c
 19708  00442A  6E12               	movwf	___ftge@ff1+1,c
 19709  00442C  0E80               	movlw	128
 19710  00442E  2019               	addwfc	??___ftge+2,w,c
 19711  004430  6E13               	movwf	___ftge@ff1+2,c
 19712  004432  D000               	goto	l9874
 19713  004434                     l9874:
 19714  004434  AE16               	btfss	___ftge@ff2+2,7,c
 19715  004436  D017               	goto	l9878
 19716  004438  C014  F017         	movff	___ftge@ff2,??___ftge
 19717  00443C  C015  F018         	movff	___ftge@ff2+1,??___ftge+1
 19718  004440  C016  F019         	movff	___ftge@ff2+2,??___ftge+2
 19719  004444  1E17               	comf	??___ftge,f,c
 19720  004446  1E18               	comf	??___ftge+1,f,c
 19721  004448  1E19               	comf	??___ftge+2,f,c
 19722  00444A  2A17               	incf	??___ftge,f,c
 19723  00444C  0E00               	movlw	0
 19724  00444E  2218               	addwfc	??___ftge+1,f,c
 19725  004450  2219               	addwfc	??___ftge+2,f,c
 19726  004452  0E00               	movlw	0
 19727  004454  2417               	addwf	??___ftge,w,c
 19728  004456  6E14               	movwf	___ftge@ff2,c
 19729  004458  0E00               	movlw	0
 19730  00445A  2018               	addwfc	??___ftge+1,w,c
 19731  00445C  6E15               	movwf	___ftge@ff2+1,c
 19732  00445E  0E80               	movlw	128
 19733  004460  2019               	addwfc	??___ftge+2,w,c
 19734  004462  6E16               	movwf	___ftge@ff2+2,c
 19735  004464  D000               	goto	l9878
 19736  004466                     l9878:
 19737  004466  0E00               	movlw	0
 19738  004468  1A11               	xorwf	___ftge@ff1,f,c
 19739  00446A  0E00               	movlw	0
 19740  00446C  1A12               	xorwf	___ftge@ff1+1,f,c
 19741  00446E  0E80               	movlw	128
 19742  004470  1A13               	xorwf	___ftge@ff1+2,f,c
 19743  004472  0E00               	movlw	0
 19744  004474  1A14               	xorwf	___ftge@ff2,f,c
 19745  004476  0E00               	movlw	0
 19746  004478  1A15               	xorwf	___ftge@ff2+1,f,c
 19747  00447A  0E80               	movlw	128
 19748  00447C  1A16               	xorwf	___ftge@ff2+2,f,c
 19749  00447E  5014               	movf	___ftge@ff2,w,c
 19750  004480  5C11               	subwf	___ftge@ff1,w,c
 19751  004482  5015               	movf	___ftge@ff2+1,w,c
 19752  004484  5812               	subwfb	___ftge@ff1+1,w,c
 19753  004486  5016               	movf	___ftge@ff2+2,w,c
 19754  004488  5813               	subwfb	___ftge@ff1+2,w,c
 19755  00448A  B0D8               	btfsc	status,0,c
 19756  00448C  D002               	goto	l9884
 19757  00448E  90D8               	bcf	status,0,c
 19758  004490  D002               	goto	l2057
 19759  004492                     l9884:
 19760  004492  80D8               	bsf	status,0,c
 19761  004494  D000               	goto	l2057
 19762  004496                     l2057:
 19763  004496  0012               	return		;funcret
 19764  004498                     __end_of___ftge:
 19765                           	opt stack 0
 19766                           tblptru	equ	0xFF8
 19767                           tblptrh	equ	0xFF7
 19768                           tblptrl	equ	0xFF6
 19769                           tablat	equ	0xFF5
 19770                           prodh	equ	0xFF4
 19771                           prodl	equ	0xFF3
 19772                           intcon	equ	0xFF2
 19773                           intcon2	equ	0xFF1
 19774                           postinc0	equ	0xFEE
 19775                           wreg	equ	0xFE8
 19776                           postdec1	equ	0xFE5
 19777                           fsr1l	equ	0xFE1
 19778                           indf2	equ	0xFDF
 19779                           postinc2	equ	0xFDE
 19780                           postdec2	equ	0xFDD
 19781                           fsr2h	equ	0xFDA
 19782                           fsr2l	equ	0xFD9
 19783                           status	equ	0xFD8
 19784                           
 19785 ;; *************** function _drawtext *****************
 19786 ;; Defined at:
 19787 ;;		line 475 in file "ST7735_TFT.c"
 19788 ;; Parameters:    Size  Location     Type
 19789 ;;  x               1    wreg     unsigned char 
 19790 ;;  y               1   56[COMRAM] unsigned char 
 19791 ;;  _text           2   57[COMRAM] PTR unsigned char 
 19792 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_fan_set_text(5), 
 19793 ;;		 -> setup_alarm_time(9), RPM_Txt(5), Volt_Txt(6), DC_Txt(4), 
 19794 ;;		 -> RTC_ALARM_Txt(2), Fan_SW_Txt(4), Fan_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 19795 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 19796 ;;		 -> tempC(4), 
 19797 ;;  color           2   59[COMRAM] unsigned int 
 19798 ;;  bg              2   61[COMRAM] unsigned int 
 19799 ;;  size            1   63[COMRAM] unsigned char 
 19800 ;; Auto vars:     Size  Location     Type
 19801 ;;  x               1   66[COMRAM] unsigned char 
 19802 ;;  i               2   69[COMRAM] unsigned int 
 19803 ;;  textsize        2   67[COMRAM] unsigned int 
 19804 ;;  cursor_x        1   72[COMRAM] unsigned char 
 19805 ;;  cursor_y        1   71[COMRAM] unsigned char 
 19806 ;; Return value:  Size  Location     Type
 19807 ;;		None               void
 19808 ;; Registers used:
 19809 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19810 ;; Tracked objects:
 19811 ;;		On entry : 0/0
 19812 ;;		On exit  : 0/0
 19813 ;;		Unchanged: 0/0
 19814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19815 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19816 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19817 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19818 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19819 ;;Total ram usage:       17 bytes
 19820 ;; Hardware stack levels used:    1
 19821 ;; Hardware stack levels required when called:    9
 19822 ;; This function calls:
 19823 ;;		_drawChar
 19824 ;;		_strlen
 19825 ;; This function is called by:
 19826 ;;		_Initialize_Screen
 19827 ;;		_Update_Screen
 19828 ;;		_Initialize_Setup_Alarm_Time_Screen
 19829 ;;		_Update_Setup_Alarm_Time_Screen
 19830 ;;		_Initialize_Setup_Fan_Screen
 19831 ;;		_Update_Setup_Fan_Screen
 19832 ;;		_Initialize_Setup_Time_Screen
 19833 ;;		_Update_Setup_Time_Screen
 19834 ;; This function uses a non-reentrant model
 19835 ;;
 19836                           
 19837                           	psect	text94
 19838  003C10                     __ptext94:
 19839                           	opt stack 0
 19840  003C10                     _drawtext:
 19841                           	opt stack 20
 19842                           
 19843                           ;incstack = 0
 19844                           ;drawtext@x stored from wreg
 19845  003C10  6E43               	movwf	drawtext@x,c
 19846                           
 19847                           ;ST7735_TFT.c: 477: unsigned char cursor_x, cursor_y;
 19848                           ;ST7735_TFT.c: 478: unsigned int textsize, i;
 19849                           ;ST7735_TFT.c: 479: cursor_x = x, cursor_y = y;
 19850  003C12  C043  F049         	movff	drawtext@x,drawtext@cursor_x
 19851  003C16  C039  F048         	movff	drawtext@y,drawtext@cursor_y
 19852                           
 19853                           ;ST7735_TFT.c: 480: textsize = strlen(_text);
 19854  003C1A  C03A  F011         	movff	drawtext@_text,strlen@s
 19855  003C1E  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
 19856  003C22  ECA1  F027         	call	_strlen	;wreg free
 19857  003C26  C011  F044         	movff	?_strlen,drawtext@textsize
 19858  003C2A  C012  F045         	movff	?_strlen+1,drawtext@textsize+1
 19859                           
 19860                           ;ST7735_TFT.c: 481: for(i = 0; i < textsize; i++){
 19861  003C2E  0E00               	movlw	0
 19862  003C30  6E47               	movwf	drawtext@i+1,c
 19863  003C32  0E00               	movlw	0
 19864  003C34  6E46               	movwf	drawtext@i,c
 19865  003C36  D056               	goto	l10338
 19866  003C38                     l10312:
 19867                           
 19868                           ;ST7735_TFT.c: 482: if(wrap && ((cursor_x + size * 5) > 128)){
 19869  003C38  0100               	movlb	0	; () banked
 19870  003C3A  51B8               	movf	_wrap& (0+255),w,b
 19871  003C3C  0100               	movlb	0	; () banked
 19872  003C3E  B4D8               	btfsc	status,2,c
 19873  003C40  D02C               	goto	l10328
 19874                           
 19875                           ; BSR set to: 0
 19876  003C42  5040               	movf	drawtext@size,w,c
 19877  003C44  0D05               	mullw	5
 19878  003C46  5049               	movf	drawtext@cursor_x,w,c
 19879  003C48  6E41               	movwf	??_drawtext& (0+255),c
 19880  003C4A  6A42               	clrf	(??_drawtext+1)& (0+255),c
 19881  003C4C  50F3               	movf	prodl,w,c
 19882  003C4E  2641               	addwf	??_drawtext,f,c
 19883  003C50  50F4               	movf	prodh,w,c
 19884  003C52  2242               	addwfc	??_drawtext+1,f,c
 19885  003C54  BE42               	btfsc	??_drawtext+1,7,c
 19886  003C56  D021               	goto	l10328
 19887  003C58  5042               	movf	??_drawtext+1,w,c
 19888  003C5A  E104               	bnz	u9380
 19889  003C5C  0E81               	movlw	129
 19890  003C5E  5C41               	subwf	??_drawtext,w,c
 19891  003C60  A0D8               	btfss	status,0,c
 19892  003C62  D01B               	goto	l10328
 19893  003C64                     u9380:
 19894                           
 19895                           ; BSR set to: 0
 19896                           ;ST7735_TFT.c: 483: cursor_x = 0;
 19897  003C64  0E00               	movlw	0
 19898  003C66  6E49               	movwf	drawtext@cursor_x,c
 19899                           
 19900                           ; BSR set to: 0
 19901                           ;ST7735_TFT.c: 484: cursor_y = cursor_y + size * 7 + 3 ;
 19902  003C68  5040               	movf	drawtext@size,w,c
 19903  003C6A  0D07               	mullw	7
 19904  003C6C  50F3               	movf	prodl,w,c
 19905  003C6E  2448               	addwf	drawtext@cursor_y,w,c
 19906  003C70  0F03               	addlw	3
 19907  003C72  6E48               	movwf	drawtext@cursor_y,c
 19908                           
 19909                           ; BSR set to: 0
 19910                           ;ST7735_TFT.c: 485: if(cursor_y > 160) cursor_y = 160;
 19911  003C74  0EA0               	movlw	160
 19912  003C76  6448               	cpfsgt	drawtext@cursor_y,c
 19913  003C78  D003               	goto	l10324
 19914                           
 19915                           ; BSR set to: 0
 19916  003C7A  0EA0               	movlw	160
 19917  003C7C  6E48               	movwf	drawtext@cursor_y,c
 19918  003C7E  D000               	goto	l10324
 19919  003C80                     l10324:
 19920                           
 19921                           ; BSR set to: 0
 19922                           ;ST7735_TFT.c: 486: if(_text[i] == 0x20) goto _skip; }
 19923  003C80  5046               	movf	drawtext@i,w,c
 19924  003C82  243A               	addwf	drawtext@_text,w,c
 19925  003C84  6ED9               	movwf	fsr2l,c
 19926  003C86  5047               	movf	drawtext@i+1,w,c
 19927  003C88  203B               	addwfc	drawtext@_text+1,w,c
 19928  003C8A  6EDA               	movwf	fsr2h,c
 19929  003C8C  0E20               	movlw	32
 19930  003C8E  18DE               	xorwf	postinc2,w,c
 19931  003C90  B4D8               	btfsc	status,2,c
 19932  003C92  D025               	goto	l10336
 19933  003C94  D002               	goto	l10328
 19934                           
 19935                           ; BSR set to: 0
 19936  003C96  D023               	goto	l10336
 19937                           
 19938                           ; BSR set to: 0
 19939  003C98  D000               	goto	l10328
 19940  003C9A                     l10328:
 19941                           
 19942                           ; BSR set to: 0
 19943                           ;ST7735_TFT.c: 487: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
 19944  003C9A  C048  F02E         	movff	drawtext@cursor_y,drawChar@y
 19945  003C9E  5046               	movf	drawtext@i,w,c
 19946  003CA0  243A               	addwf	drawtext@_text,w,c
 19947  003CA2  6ED9               	movwf	fsr2l,c
 19948  003CA4  5047               	movf	drawtext@i+1,w,c
 19949  003CA6  203B               	addwfc	drawtext@_text+1,w,c
 19950  003CA8  6EDA               	movwf	fsr2h,c
 19951  003CAA  50DF               	movf	indf2,w,c
 19952  003CAC  6E2F               	movwf	drawChar@c,c
 19953  003CAE  C03C  F030         	movff	drawtext@color,drawChar@color
 19954  003CB2  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
 19955  003CB6  C03E  F032         	movff	drawtext@bg,drawChar@bg
 19956  003CBA  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
 19957  003CBE  C040  F034         	movff	drawtext@size,drawChar@size
 19958  003CC2  5049               	movf	drawtext@cursor_x,w,c
 19959  003CC4  ECCB  F015         	call	_drawChar
 19960                           
 19961                           ;ST7735_TFT.c: 488: cursor_x = cursor_x + size * 6;
 19962  003CC8  5040               	movf	drawtext@size,w,c
 19963  003CCA  0D06               	mullw	6
 19964  003CCC  50F3               	movf	prodl,w,c
 19965  003CCE  2449               	addwf	drawtext@cursor_x,w,c
 19966  003CD0  6E49               	movwf	drawtext@cursor_x,c
 19967                           
 19968                           ;ST7735_TFT.c: 489: if(cursor_x > 128) cursor_x = 128;
 19969  003CD2  0E80               	movlw	128
 19970  003CD4  6449               	cpfsgt	drawtext@cursor_x,c
 19971  003CD6  D003               	goto	l10336
 19972  003CD8  0E80               	movlw	128
 19973  003CDA  6E49               	movwf	drawtext@cursor_x,c
 19974  003CDC  D000               	goto	l10336
 19975  003CDE                     l10336:
 19976  003CDE  4A46               	infsnz	drawtext@i,f,c
 19977  003CE0  2A47               	incf	drawtext@i+1,f,c
 19978  003CE2  D000               	goto	l10338
 19979  003CE4                     l10338:
 19980  003CE4  5044               	movf	drawtext@textsize,w,c
 19981  003CE6  5C46               	subwf	drawtext@i,w,c
 19982  003CE8  5045               	movf	drawtext@textsize+1,w,c
 19983  003CEA  5847               	subwfb	drawtext@i+1,w,c
 19984  003CEC  A0D8               	btfss	status,0,c
 19985  003CEE  D7A4               	goto	l10312
 19986  003CF0  0012               	return		;funcret
 19987  003CF2                     __end_of_drawtext:
 19988                           	opt stack 0
 19989                           tblptru	equ	0xFF8
 19990                           tblptrh	equ	0xFF7
 19991                           tblptrl	equ	0xFF6
 19992                           tablat	equ	0xFF5
 19993                           prodh	equ	0xFF4
 19994                           prodl	equ	0xFF3
 19995                           intcon	equ	0xFF2
 19996                           intcon2	equ	0xFF1
 19997                           postinc0	equ	0xFEE
 19998                           wreg	equ	0xFE8
 19999                           postdec1	equ	0xFE5
 20000                           fsr1l	equ	0xFE1
 20001                           indf2	equ	0xFDF
 20002                           postinc2	equ	0xFDE
 20003                           postdec2	equ	0xFDD
 20004                           fsr2h	equ	0xFDA
 20005                           fsr2l	equ	0xFD9
 20006                           status	equ	0xFD8
 20007                           
 20008 ;; *************** function _strlen *****************
 20009 ;; Defined at:
 20010 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
 20011 ;; Parameters:    Size  Location     Type
 20012 ;;  s               2   16[COMRAM] PTR const unsigned char 
 20013 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_fan_set_text(5), 
 20014 ;;		 -> setup_alarm_time(9), RPM_Txt(5), Volt_Txt(6), DC_Txt(4), 
 20015 ;;		 -> RTC_ALARM_Txt(2), Fan_SW_Txt(4), Fan_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 20016 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 20017 ;;		 -> tempC(4), 
 20018 ;; Auto vars:     Size  Location     Type
 20019 ;;  cp              2   20[COMRAM] PTR const unsigned char 
 20020 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_fan_set_text(5), 
 20021 ;;		 -> setup_alarm_time(9), RPM_Txt(5), Volt_Txt(6), DC_Txt(4), 
 20022 ;;		 -> RTC_ALARM_Txt(2), Fan_SW_Txt(4), Fan_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 20023 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 20024 ;;		 -> tempC(4), 
 20025 ;; Return value:  Size  Location     Type
 20026 ;;                  2   16[COMRAM] unsigned int 
 20027 ;; Registers used:
 20028 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20029 ;; Tracked objects:
 20030 ;;		On entry : 0/0
 20031 ;;		On exit  : 0/0
 20032 ;;		Unchanged: 0/0
 20033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20034 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20035 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20036 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20037 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20038 ;;Total ram usage:        6 bytes
 20039 ;; Hardware stack levels used:    1
 20040 ;; Hardware stack levels required when called:    3
 20041 ;; This function calls:
 20042 ;;		Nothing
 20043 ;; This function is called by:
 20044 ;;		_drawtext
 20045 ;; This function uses a non-reentrant model
 20046 ;;
 20047                           
 20048                           	psect	text95
 20049  004F42                     __ptext95:
 20050                           	opt stack 0
 20051  004F42                     _strlen:
 20052                           	opt stack 25
 20053                           
 20054                           ;incstack = 0
 20055  004F42  C011  F015         	movff	strlen@s,strlen@cp
 20056  004F46  C012  F016         	movff	strlen@s+1,strlen@cp+1
 20057  004F4A  D003               	goto	l6362
 20058  004F4C                     l6360:
 20059  004F4C  4A15               	infsnz	strlen@cp,f,c
 20060  004F4E  2A16               	incf	strlen@cp+1,f,c
 20061  004F50  D000               	goto	l6362
 20062  004F52                     l6362:
 20063  004F52  C015  FFD9         	movff	strlen@cp,fsr2l
 20064  004F56  C016  FFDA         	movff	strlen@cp+1,fsr2h
 20065  004F5A  50DF               	movf	indf2,w,c
 20066  004F5C  A4D8               	btfss	status,2,c
 20067  004F5E  D7F6               	goto	l6360
 20068  004F60  C011  F013         	movff	strlen@s,??_strlen
 20069  004F64  C012  F014         	movff	strlen@s+1,??_strlen+1
 20070  004F68  1E13               	comf	??_strlen,f,c
 20071  004F6A  1E14               	comf	??_strlen+1,f,c
 20072  004F6C  4A13               	infsnz	??_strlen,f,c
 20073  004F6E  2A14               	incf	??_strlen+1,f,c
 20074  004F70  5015               	movf	strlen@cp,w,c
 20075  004F72  2413               	addwf	??_strlen,w,c
 20076  004F74  6E11               	movwf	?_strlen,c
 20077  004F76  5016               	movf	strlen@cp+1,w,c
 20078  004F78  2014               	addwfc	??_strlen+1,w,c
 20079  004F7A  6E12               	movwf	?_strlen+1,c
 20080  004F7C  D000               	goto	l2234
 20081  004F7E                     l2234:
 20082  004F7E  0012               	return		;funcret
 20083  004F80                     __end_of_strlen:
 20084                           	opt stack 0
 20085                           tblptru	equ	0xFF8
 20086                           tblptrh	equ	0xFF7
 20087                           tblptrl	equ	0xFF6
 20088                           tablat	equ	0xFF5
 20089                           prodh	equ	0xFF4
 20090                           prodl	equ	0xFF3
 20091                           intcon	equ	0xFF2
 20092                           intcon2	equ	0xFF1
 20093                           postinc0	equ	0xFEE
 20094                           wreg	equ	0xFE8
 20095                           postdec1	equ	0xFE5
 20096                           fsr1l	equ	0xFE1
 20097                           indf2	equ	0xFDF
 20098                           postinc2	equ	0xFDE
 20099                           postdec2	equ	0xFDD
 20100                           fsr2h	equ	0xFDA
 20101                           fsr2l	equ	0xFD9
 20102                           status	equ	0xFD8
 20103                           
 20104 ;; *************** function _drawChar *****************
 20105 ;; Defined at:
 20106 ;;		line 448 in file "ST7735_TFT.c"
 20107 ;; Parameters:    Size  Location     Type
 20108 ;;  x               1    wreg     unsigned char 
 20109 ;;  y               1   45[COMRAM] unsigned char 
 20110 ;;  c               1   46[COMRAM] unsigned char 
 20111 ;;  color           2   47[COMRAM] unsigned int 
 20112 ;;  bg              2   49[COMRAM] unsigned int 
 20113 ;;  size            1   51[COMRAM] unsigned char 
 20114 ;; Auto vars:     Size  Location     Type
 20115 ;;  x               1   53[COMRAM] unsigned char 
 20116 ;;  line            1   52[COMRAM] unsigned char 
 20117 ;;  i               1   55[COMRAM] unsigned char 
 20118 ;;  j               1   54[COMRAM] unsigned char 
 20119 ;; Return value:  Size  Location     Type
 20120 ;;		None               void
 20121 ;; Registers used:
 20122 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20123 ;; Tracked objects:
 20124 ;;		On entry : 0/0
 20125 ;;		On exit  : 0/0
 20126 ;;		Unchanged: 0/0
 20127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20128 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20129 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20131 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20132 ;;Total ram usage:       11 bytes
 20133 ;; Hardware stack levels used:    1
 20134 ;; Hardware stack levels required when called:    8
 20135 ;; This function calls:
 20136 ;;		___wmul
 20137 ;;		_drawPixel
 20138 ;;		_fillRect
 20139 ;; This function is called by:
 20140 ;;		_drawtext
 20141 ;; This function uses a non-reentrant model
 20142 ;;
 20143                           
 20144                           	psect	text96
 20145  002B96                     __ptext96:
 20146                           	opt stack 0
 20147  002B96                     _drawChar:
 20148                           	opt stack 20
 20149                           
 20150                           ;incstack = 0
 20151                           ;drawChar@x stored from wreg
 20152  002B96  6E36               	movwf	drawChar@x,c
 20153                           
 20154                           ;ST7735_TFT.c: 450: char i, j;
 20155                           ;ST7735_TFT.c: 451: if((x >= 128) || (y >= 160))
 20156  002B98  0E80               	movlw	128
 20157  002B9A  6036               	cpfslt	drawChar@x,c
 20158  002B9C  D0A6               	goto	l1358
 20159  002B9E  0E9F               	movlw	159
 20160  002BA0  642E               	cpfsgt	drawChar@y,c
 20161  002BA2  D001               	goto	l9624
 20162                           
 20163                           ;ST7735_TFT.c: 452: return;
 20164  002BA4  D0A2               	goto	l1358
 20165  002BA6                     l9624:
 20166                           
 20167                           ;ST7735_TFT.c: 453: if(size < 1) size = 1;
 20168  002BA6  5034               	movf	drawChar@size,w,c
 20169  002BA8  A4D8               	btfss	status,2,c
 20170  002BAA  D003               	goto	l9628
 20171  002BAC  0E01               	movlw	1
 20172  002BAE  6E34               	movwf	drawChar@size,c
 20173  002BB0  D000               	goto	l9628
 20174  002BB2                     l9628:
 20175                           
 20176                           ;ST7735_TFT.c: 454: if((c < ' ') || (c > '~'))
 20177  002BB2  0E1F               	movlw	31
 20178  002BB4  642F               	cpfsgt	drawChar@c,c
 20179  002BB6  D004               	goto	l9632
 20180  002BB8  0E7E               	movlw	126
 20181  002BBA  642F               	cpfsgt	drawChar@c,c
 20182  002BBC  D003               	goto	l1360
 20183  002BBE  D000               	goto	l9632
 20184  002BC0                     l9632:
 20185                           
 20186                           ;ST7735_TFT.c: 455: c = '?';
 20187  002BC0  0E3F               	movlw	63
 20188  002BC2  6E2F               	movwf	drawChar@c,c
 20189  002BC4                     l1360:
 20190                           
 20191                           ;ST7735_TFT.c: 456: for(i=0; i<5; i++ ) {
 20192  002BC4  0E00               	movlw	0
 20193  002BC6  6E38               	movwf	drawChar@i,c
 20194  002BC8                     l9634:
 20195  002BC8  0E04               	movlw	4
 20196  002BCA  6438               	cpfsgt	drawChar@i,c
 20197  002BCC  D001               	goto	l9638
 20198  002BCE  D08D               	goto	l1358
 20199  002BD0                     l9638:
 20200                           
 20201                           ;ST7735_TFT.c: 457: unsigned char line;
 20202                           ;ST7735_TFT.c: 458: if(c < 'S')
 20203  002BD0  0E53               	movlw	83
 20204  002BD2  602F               	cpfslt	drawChar@c,c
 20205  002BD4  D015               	goto	l9642
 20206                           
 20207                           ;ST7735_TFT.c: 459: line = font[(c - 32)*5 + i];
 20208  002BD6  0EE0               	movlw	224
 20209  002BD8  242F               	addwf	drawChar@c,w,c
 20210  002BDA  6E11               	movwf	___wmul@multiplier,c
 20211  002BDC  6A12               	clrf	___wmul@multiplier+1,c
 20212  002BDE  0EFF               	movlw	255
 20213  002BE0  2212               	addwfc	___wmul@multiplier+1,f,c
 20214  002BE2  0E00               	movlw	0
 20215  002BE4  6E14               	movwf	___wmul@multiplicand+1,c
 20216  002BE6  0E05               	movlw	5
 20217  002BE8  6E13               	movwf	___wmul@multiplicand,c
 20218  002BEA  EC90  F028         	call	___wmul	;wreg free
 20219  002BEE  5038               	movf	drawChar@i,w,c
 20220  002BF0  2611               	addwf	?___wmul,f,c
 20221  002BF2  0E00               	movlw	0
 20222  002BF4  2212               	addwfc	?___wmul+1,f,c
 20223  002BF6  0E33               	movlw	low _font
 20224  002BF8  2411               	addwf	?___wmul,w,c
 20225  002BFA  6EF6               	movwf	tblptrl,c
 20226  002BFC  0EFC               	movlw	high _font
 20227  002BFE  D014               	goto	L17
 20228  002C00                     l9642:
 20229                           
 20230                           ;ST7735_TFT.c: 460: else
 20231                           ;ST7735_TFT.c: 461: line = font2[(c - 'S')*5 + i];
 20232  002C00  0EAD               	movlw	173
 20233  002C02  242F               	addwf	drawChar@c,w,c
 20234  002C04  6E11               	movwf	___wmul@multiplier,c
 20235  002C06  6A12               	clrf	___wmul@multiplier+1,c
 20236  002C08  0EFF               	movlw	255
 20237  002C0A  2212               	addwfc	___wmul@multiplier+1,f,c
 20238  002C0C  0E00               	movlw	0
 20239  002C0E  6E14               	movwf	___wmul@multiplicand+1,c
 20240  002C10  0E05               	movlw	5
 20241  002C12  6E13               	movwf	___wmul@multiplicand,c
 20242  002C14  EC90  F028         	call	___wmul	;wreg free
 20243  002C18  5038               	movf	drawChar@i,w,c
 20244  002C1A  2611               	addwf	?___wmul,f,c
 20245  002C1C  0E00               	movlw	0
 20246  002C1E  2212               	addwfc	?___wmul+1,f,c
 20247  002C20  0E32               	movlw	low _font2
 20248  002C22  2411               	addwf	?___wmul,w,c
 20249  002C24  6EF6               	movwf	tblptrl,c
 20250  002C26  0EFD               	movlw	high _font2
 20251  002C28                     L17:
 20252  002C28  2012               	addwfc	?___wmul+1,w,c
 20253  002C2A  6EF7               	movwf	tblptrh,c
 20254  002C2C                     	if	0	;There are less than 3 active tblptr bytes
 20255  002C2C                     	endif
 20256  002C2C  0008               	tblrd		*
 20257  002C2E  CFF5 F035          	movff	tablat,drawChar@line
 20258  002C32  D000               	goto	l9644
 20259  002C34                     l9644:
 20260                           
 20261                           ;ST7735_TFT.c: 462: for(j=0; j<7; j++, line >>= 1) {
 20262  002C34  0E00               	movlw	0
 20263  002C36  6E37               	movwf	drawChar@j,c
 20264  002C38                     l9646:
 20265  002C38  0E06               	movlw	6
 20266  002C3A  6437               	cpfsgt	drawChar@j,c
 20267  002C3C  D001               	goto	l1367
 20268  002C3E  D053               	goto	l9670
 20269  002C40                     l1367:
 20270                           
 20271                           ;ST7735_TFT.c: 463: if(line & 0x01) {
 20272  002C40  A035               	btfss	drawChar@line,0,c
 20273  002C42  D023               	goto	l9656
 20274                           
 20275                           ;ST7735_TFT.c: 464: if(size == 1) drawPixel(x+i, y+j, color);
 20276  002C44  0434               	decf	drawChar@size,w,c
 20277  002C46  A4D8               	btfss	status,2,c
 20278  002C48  D00C               	goto	l9654
 20279  002C4A  502E               	movf	drawChar@y,w,c
 20280  002C4C  2437               	addwf	drawChar@j,w,c
 20281  002C4E  6E18               	movwf	drawPixel@y,c
 20282  002C50  C030  F019         	movff	drawChar@color,drawPixel@color
 20283  002C54  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
 20284  002C58  5036               	movf	drawChar@x,w,c
 20285  002C5A  2438               	addwf	drawChar@i,w,c
 20286  002C5C  EC4D  F028         	call	_drawPixel
 20287  002C60  D03E               	goto	l9664
 20288  002C62                     l9654:
 20289                           
 20290                           ;ST7735_TFT.c: 465: else fillRect(x+(i*size), y+(j*size), size, size, color);
 20291  002C62  5037               	movf	drawChar@j,w,c
 20292  002C64  0234               	mulwf	drawChar@size,c
 20293  002C66  50F3               	movf	prodl,w,c
 20294  002C68  242E               	addwf	drawChar@y,w,c
 20295  002C6A  6E23               	movwf	fillRect@y,c
 20296  002C6C  C034  F024         	movff	drawChar@size,fillRect@w
 20297  002C70  C034  F025         	movff	drawChar@size,fillRect@h
 20298  002C74  C030  F026         	movff	drawChar@color,fillRect@color
 20299  002C78  C031  F027         	movff	drawChar@color+1,fillRect@color+1
 20300  002C7C  5038               	movf	drawChar@i,w,c
 20301  002C7E  0234               	mulwf	drawChar@size,c
 20302  002C80  50F3               	movf	prodl,w,c
 20303  002C82  2436               	addwf	drawChar@x,w,c
 20304  002C84  ECF8  F026         	call	_fillRect
 20305                           
 20306                           ;ST7735_TFT.c: 466: }
 20307  002C88  D02A               	goto	l9664
 20308  002C8A                     l9656:
 20309                           
 20310                           ;ST7735_TFT.c: 467: else if(bg != color) {
 20311  002C8A  5030               	movf	drawChar@color,w,c
 20312  002C8C  1832               	xorwf	drawChar@bg,w,c
 20313  002C8E  E104               	bnz	u8360
 20314  002C90  5031               	movf	drawChar@color+1,w,c
 20315  002C92  1833               	xorwf	drawChar@bg+1,w,c
 20316  002C94  B4D8               	btfsc	status,2,c
 20317  002C96  D023               	goto	l9664
 20318  002C98                     u8360:
 20319                           
 20320                           ;ST7735_TFT.c: 468: if(size == 1) drawPixel(x+i, y+j, bg);
 20321  002C98  0434               	decf	drawChar@size,w,c
 20322  002C9A  A4D8               	btfss	status,2,c
 20323  002C9C  D00C               	goto	l9662
 20324  002C9E  502E               	movf	drawChar@y,w,c
 20325  002CA0  2437               	addwf	drawChar@j,w,c
 20326  002CA2  6E18               	movwf	drawPixel@y,c
 20327  002CA4  C032  F019         	movff	drawChar@bg,drawPixel@color
 20328  002CA8  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
 20329  002CAC  5036               	movf	drawChar@x,w,c
 20330  002CAE  2438               	addwf	drawChar@i,w,c
 20331  002CB0  EC4D  F028         	call	_drawPixel
 20332  002CB4  D014               	goto	l9664
 20333  002CB6                     l9662:
 20334                           
 20335                           ;ST7735_TFT.c: 469: else fillRect(x+i*size, y+j*size, size, size, bg);
 20336  002CB6  5037               	movf	drawChar@j,w,c
 20337  002CB8  0234               	mulwf	drawChar@size,c
 20338  002CBA  50F3               	movf	prodl,w,c
 20339  002CBC  242E               	addwf	drawChar@y,w,c
 20340  002CBE  6E23               	movwf	fillRect@y,c
 20341  002CC0  C034  F024         	movff	drawChar@size,fillRect@w
 20342  002CC4  C034  F025         	movff	drawChar@size,fillRect@h
 20343  002CC8  C032  F026         	movff	drawChar@bg,fillRect@color
 20344  002CCC  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
 20345  002CD0  5038               	movf	drawChar@i,w,c
 20346  002CD2  0234               	mulwf	drawChar@size,c
 20347  002CD4  50F3               	movf	prodl,w,c
 20348  002CD6  2436               	addwf	drawChar@x,w,c
 20349  002CD8  ECF8  F026         	call	_fillRect
 20350  002CDC  D000               	goto	l9664
 20351  002CDE                     l9664:
 20352  002CDE  2A37               	incf	drawChar@j,f,c
 20353  002CE0  90D8               	bcf	status,0,c
 20354  002CE2  3235               	rrcf	drawChar@line,f,c
 20355  002CE4  D7A9               	goto	l9646
 20356  002CE6                     l9670:
 20357  002CE6  2A38               	incf	drawChar@i,f,c
 20358  002CE8  D76F               	goto	l9634
 20359  002CEA                     l1358:
 20360  002CEA  0012               	return		;funcret
 20361  002CEC                     __end_of_drawChar:
 20362                           	opt stack 0
 20363                           tblptru	equ	0xFF8
 20364                           tblptrh	equ	0xFF7
 20365                           tblptrl	equ	0xFF6
 20366                           tablat	equ	0xFF5
 20367                           prodh	equ	0xFF4
 20368                           prodl	equ	0xFF3
 20369                           intcon	equ	0xFF2
 20370                           intcon2	equ	0xFF1
 20371                           postinc0	equ	0xFEE
 20372                           wreg	equ	0xFE8
 20373                           postdec1	equ	0xFE5
 20374                           fsr1l	equ	0xFE1
 20375                           indf2	equ	0xFDF
 20376                           postinc2	equ	0xFDE
 20377                           postdec2	equ	0xFDD
 20378                           fsr2h	equ	0xFDA
 20379                           fsr2l	equ	0xFD9
 20380                           status	equ	0xFD8
 20381                           
 20382 ;; *************** function _fillRect *****************
 20383 ;; Defined at:
 20384 ;;		line 438 in file "ST7735_TFT.c"
 20385 ;; Parameters:    Size  Location     Type
 20386 ;;  x               1    wreg     unsigned char 
 20387 ;;  y               1   34[COMRAM] unsigned char 
 20388 ;;  w               1   35[COMRAM] unsigned char 
 20389 ;;  h               1   36[COMRAM] unsigned char 
 20390 ;;  color           2   37[COMRAM] unsigned int 
 20391 ;; Auto vars:     Size  Location     Type
 20392 ;;  x               1   42[COMRAM] unsigned char 
 20393 ;;  i               2   43[COMRAM] int 
 20394 ;; Return value:  Size  Location     Type
 20395 ;;		None               void
 20396 ;; Registers used:
 20397 ;;		wreg, status,2, status,0, cstack
 20398 ;; Tracked objects:
 20399 ;;		On entry : 0/0
 20400 ;;		On exit  : 0/0
 20401 ;;		Unchanged: 0/0
 20402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20403 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20404 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20405 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20406 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20407 ;;Total ram usage:       11 bytes
 20408 ;; Hardware stack levels used:    1
 20409 ;; Hardware stack levels required when called:    7
 20410 ;; This function calls:
 20411 ;;		_drawFastVLine
 20412 ;; This function is called by:
 20413 ;;		_Initialize_Setup_Alarm_Time_Screen
 20414 ;;		_Initialize_Setup_Time_Screen
 20415 ;;		_Update_Setup_Screen_Cursor_Forward
 20416 ;;		_Update_Setup_Screen_Cursor_Backward
 20417 ;;		_drawChar
 20418 ;; This function uses a non-reentrant model
 20419 ;;
 20420                           
 20421                           	psect	text97
 20422  004DF0                     __ptext97:
 20423                           	opt stack 0
 20424  004DF0                     _fillRect:
 20425                           	opt stack 20
 20426                           
 20427                           ;incstack = 0
 20428                           ;fillRect@x stored from wreg
 20429  004DF0  6E2B               	movwf	fillRect@x,c
 20430                           
 20431                           ;ST7735_TFT.c: 440: signed int i;
 20432                           ;ST7735_TFT.c: 442: for (i = x; i < x + w; i++)
 20433  004DF2  C02B  F02C         	movff	fillRect@x,fillRect@i
 20434  004DF6  6A2D               	clrf	fillRect@i+1,c
 20435  004DF8  D00E               	goto	l5892
 20436  004DFA                     l5888:
 20437                           
 20438                           ;ST7735_TFT.c: 443: {
 20439                           ;ST7735_TFT.c: 444: drawFastVLine(i, y, h, color);
 20440  004DFA  C023  F018         	movff	fillRect@y,drawFastVLine@y
 20441  004DFE  C025  F019         	movff	fillRect@h,drawFastVLine@h
 20442  004E02  C026  F01A         	movff	fillRect@color,drawFastVLine@color
 20443  004E06  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
 20444  004E0A  502C               	movf	fillRect@i,w,c
 20445  004E0C  ECDA  F022         	call	_drawFastVLine
 20446  004E10  4A2C               	infsnz	fillRect@i,f,c
 20447  004E12  2A2D               	incf	fillRect@i+1,f,c
 20448  004E14  D000               	goto	l5892
 20449  004E16                     l5892:
 20450  004E16  5024               	movf	fillRect@w,w,c
 20451  004E18  C02B  F028         	movff	fillRect@x,??_fillRect
 20452  004E1C  6A29               	clrf	(??_fillRect+1)& (0+255),c
 20453  004E1E  2628               	addwf	??_fillRect,f,c
 20454  004E20  0E00               	movlw	0
 20455  004E22  2229               	addwfc	??_fillRect+1,f,c
 20456  004E24  5028               	movf	??_fillRect,w,c
 20457  004E26  5C2C               	subwf	fillRect@i,w,c
 20458  004E28  502D               	movf	fillRect@i+1,w,c
 20459  004E2A  0A80               	xorlw	128
 20460  004E2C  6E2A               	movwf	(??_fillRect+2)& (0+255),c
 20461  004E2E  5029               	movf	??_fillRect+1,w,c
 20462  004E30  0A80               	xorlw	128
 20463  004E32  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
 20464  004E34  A0D8               	btfss	status,0,c
 20465  004E36  D7E1               	goto	l5888
 20466  004E38  0012               	return		;funcret
 20467  004E3A                     __end_of_fillRect:
 20468                           	opt stack 0
 20469                           tblptru	equ	0xFF8
 20470                           tblptrh	equ	0xFF7
 20471                           tblptrl	equ	0xFF6
 20472                           tablat	equ	0xFF5
 20473                           prodh	equ	0xFF4
 20474                           prodl	equ	0xFF3
 20475                           intcon	equ	0xFF2
 20476                           intcon2	equ	0xFF1
 20477                           postinc0	equ	0xFEE
 20478                           wreg	equ	0xFE8
 20479                           postdec1	equ	0xFE5
 20480                           fsr1l	equ	0xFE1
 20481                           indf2	equ	0xFDF
 20482                           postinc2	equ	0xFDE
 20483                           postdec2	equ	0xFDD
 20484                           fsr2h	equ	0xFDA
 20485                           fsr2l	equ	0xFD9
 20486                           status	equ	0xFD8
 20487                           
 20488 ;; *************** function _drawFastVLine *****************
 20489 ;; Defined at:
 20490 ;;		line 417 in file "ST7735_TFT.c"
 20491 ;; Parameters:    Size  Location     Type
 20492 ;;  x               1    wreg     unsigned char 
 20493 ;;  y               1   23[COMRAM] unsigned char 
 20494 ;;  h               1   24[COMRAM] unsigned char 
 20495 ;;  color           2   25[COMRAM] unsigned int 
 20496 ;; Auto vars:     Size  Location     Type
 20497 ;;  x               1   33[COMRAM] unsigned char 
 20498 ;;  lo              1   32[COMRAM] unsigned char 
 20499 ;;  hi              1   31[COMRAM] unsigned char 
 20500 ;; Return value:  Size  Location     Type
 20501 ;;		None               void
 20502 ;; Registers used:
 20503 ;;		wreg, status,2, status,0, cstack
 20504 ;; Tracked objects:
 20505 ;;		On entry : 0/0
 20506 ;;		On exit  : 0/0
 20507 ;;		Unchanged: 0/0
 20508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20509 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20510 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20511 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20512 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20513 ;;Total ram usage:       11 bytes
 20514 ;; Hardware stack levels used:    1
 20515 ;; Hardware stack levels required when called:    6
 20516 ;; This function calls:
 20517 ;;		_setAddrWindow
 20518 ;;		_spiwrite
 20519 ;; This function is called by:
 20520 ;;		_fillRect
 20521 ;;		_fillCircleHelper
 20522 ;;		_fillCircle
 20523 ;;		_drawRect
 20524 ;; This function uses a non-reentrant model
 20525 ;;
 20526                           
 20527                           	psect	text98
 20528  0045B4                     __ptext98:
 20529                           	opt stack 0
 20530  0045B4                     _drawFastVLine:
 20531                           	opt stack 20
 20532                           
 20533                           ;incstack = 0
 20534                           ;drawFastVLine@x stored from wreg
 20535  0045B4  6E22               	movwf	drawFastVLine@x,c
 20536                           
 20537                           ;ST7735_TFT.c: 419: unsigned char hi, lo;
 20538                           ;ST7735_TFT.c: 420: if((x >= 128) || (y >= 160))
 20539  0045B6  0E80               	movlw	128
 20540  0045B8  6022               	cpfslt	drawFastVLine@x,c
 20541  0045BA  D03F               	goto	l1342
 20542  0045BC  0E9F               	movlw	159
 20543  0045BE  6418               	cpfsgt	drawFastVLine@y,c
 20544  0045C0  D001               	goto	l5826
 20545                           
 20546                           ;ST7735_TFT.c: 421: return;
 20547  0045C2  D03B               	goto	l1342
 20548  0045C4                     l5826:
 20549                           
 20550                           ;ST7735_TFT.c: 422: if((y + h - 1) >= 160)
 20551  0045C4  0EFF               	movlw	255
 20552  0045C6  6E1C               	movwf	??_drawFastVLine& (0+255),c
 20553  0045C8  0EFF               	movlw	255
 20554  0045CA  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
 20555  0045CC  5019               	movf	drawFastVLine@h,w,c
 20556  0045CE  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
 20557  0045D2  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
 20558  0045D4  261E               	addwf	??_drawFastVLine+2,f,c
 20559  0045D6  0E00               	movlw	0
 20560  0045D8  221F               	addwfc	??_drawFastVLine+3,f,c
 20561  0045DA  501C               	movf	??_drawFastVLine,w,c
 20562  0045DC  261E               	addwf	??_drawFastVLine+2,f,c
 20563  0045DE  501D               	movf	??_drawFastVLine+1,w,c
 20564  0045E0  221F               	addwfc	??_drawFastVLine+3,f,c
 20565  0045E2  BE1F               	btfsc	??_drawFastVLine+3,7,c
 20566  0045E4  D00B               	goto	l5830
 20567  0045E6  501F               	movf	??_drawFastVLine+3,w,c
 20568  0045E8  E104               	bnz	u3920
 20569  0045EA  0EA0               	movlw	160
 20570  0045EC  5C1E               	subwf	??_drawFastVLine+2,w,c
 20571  0045EE  A0D8               	btfss	status,0,c
 20572  0045F0  D005               	goto	l5830
 20573  0045F2                     u3920:
 20574                           
 20575                           ;ST7735_TFT.c: 423: h = 160 - y;
 20576  0045F2  5018               	movf	drawFastVLine@y,w,c
 20577  0045F4  0800               	sublw	0
 20578  0045F6  0FA0               	addlw	160
 20579  0045F8  6E19               	movwf	drawFastVLine@h,c
 20580  0045FA  D000               	goto	l5830
 20581  0045FC                     l5830:
 20582                           
 20583                           ;ST7735_TFT.c: 424: hi = color >> 8; lo = color;
 20584  0045FC  501B               	movf	drawFastVLine@color+1,w,c
 20585  0045FE  6E20               	movwf	drawFastVLine@hi,c
 20586  004600  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
 20587                           
 20588                           ;ST7735_TFT.c: 425: setAddrWindow(x, y, x, y + h - 1);
 20589  004604  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
 20590  004608  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
 20591  00460C  5018               	movf	drawFastVLine@y,w,c
 20592  00460E  2419               	addwf	drawFastVLine@h,w,c
 20593  004610  6E1C               	movwf	??_drawFastVLine& (0+255),c
 20594  004612  041C               	decf	??_drawFastVLine,w,c
 20595  004614  6E16               	movwf	setAddrWindow@y1,c
 20596  004616  5022               	movf	drawFastVLine@x,w,c
 20597  004618  EC07  F026         	call	_setAddrWindow
 20598                           
 20599                           ;ST7735_TFT.c: 426: PORTDbits.RD4 = 1;
 20600  00461C  8883               	bsf	3971,4,c	;volatile
 20601                           
 20602                           ;ST7735_TFT.c: 427: PORTDbits.RD5 = 0;
 20603  00461E  9A83               	bcf	3971,5,c	;volatile
 20604                           
 20605                           ;ST7735_TFT.c: 429: while (h--) {
 20606  004620  D007               	goto	l5842
 20607  004622                     l5840:
 20608                           
 20609                           ;ST7735_TFT.c: 430: spiwrite(hi);
 20610  004622  5020               	movf	drawFastVLine@hi,w,c
 20611  004624  EC2A  F02A         	call	_spiwrite
 20612                           
 20613                           ;ST7735_TFT.c: 431: spiwrite(lo);
 20614  004628  5021               	movf	drawFastVLine@lo,w,c
 20615  00462A  EC2A  F02A         	call	_spiwrite
 20616  00462E  D000               	goto	l5842
 20617  004630                     l5842:
 20618  004630  0619               	decf	drawFastVLine@h,f,c
 20619  004632  2819               	incf	drawFastVLine@h,w,c
 20620  004634  A4D8               	btfss	status,2,c
 20621  004636  D7F5               	goto	l5840
 20622                           
 20623                           ;ST7735_TFT.c: 432: }
 20624                           ;ST7735_TFT.c: 433: PORTDbits.RD5 = 1;
 20625  004638  8A83               	bsf	3971,5,c	;volatile
 20626  00463A                     l1342:
 20627  00463A  0012               	return		;funcret
 20628  00463C                     __end_of_drawFastVLine:
 20629                           	opt stack 0
 20630                           tblptru	equ	0xFF8
 20631                           tblptrh	equ	0xFF7
 20632                           tblptrl	equ	0xFF6
 20633                           tablat	equ	0xFF5
 20634                           prodh	equ	0xFF4
 20635                           prodl	equ	0xFF3
 20636                           intcon	equ	0xFF2
 20637                           intcon2	equ	0xFF1
 20638                           postinc0	equ	0xFEE
 20639                           wreg	equ	0xFE8
 20640                           postdec1	equ	0xFE5
 20641                           fsr1l	equ	0xFE1
 20642                           indf2	equ	0xFDF
 20643                           postinc2	equ	0xFDE
 20644                           postdec2	equ	0xFDD
 20645                           fsr2h	equ	0xFDA
 20646                           fsr2l	equ	0xFD9
 20647                           status	equ	0xFD8
 20648                           
 20649 ;; *************** function _drawPixel *****************
 20650 ;; Defined at:
 20651 ;;		line 408 in file "ST7735_TFT.c"
 20652 ;; Parameters:    Size  Location     Type
 20653 ;;  x               1    wreg     unsigned char 
 20654 ;;  y               1   23[COMRAM] unsigned char 
 20655 ;;  color           2   24[COMRAM] unsigned int 
 20656 ;; Auto vars:     Size  Location     Type
 20657 ;;  x               1   26[COMRAM] unsigned char 
 20658 ;; Return value:  Size  Location     Type
 20659 ;;		None               void
 20660 ;; Registers used:
 20661 ;;		wreg, status,2, status,0, cstack
 20662 ;; Tracked objects:
 20663 ;;		On entry : 0/0
 20664 ;;		On exit  : 0/0
 20665 ;;		Unchanged: 0/0
 20666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20667 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20668 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20670 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20671 ;;Total ram usage:        4 bytes
 20672 ;; Hardware stack levels used:    1
 20673 ;; Hardware stack levels required when called:    6
 20674 ;; This function calls:
 20675 ;;		_setAddrWindow
 20676 ;;		_write_data
 20677 ;; This function is called by:
 20678 ;;		_drawChar
 20679 ;;		_drawCircle
 20680 ;;		_drawCircleHelper
 20681 ;; This function uses a non-reentrant model
 20682 ;;
 20683                           
 20684                           	psect	text99
 20685  00509A                     __ptext99:
 20686                           	opt stack 0
 20687  00509A                     _drawPixel:
 20688                           	opt stack 21
 20689                           
 20690                           ;incstack = 0
 20691                           ;drawPixel@x stored from wreg
 20692  00509A  6E1B               	movwf	drawPixel@x,c
 20693                           
 20694                           ;ST7735_TFT.c: 410: if((x >= 128) || (y >= 160))
 20695  00509C  0E80               	movlw	128
 20696  00509E  601B               	cpfslt	drawPixel@x,c
 20697  0050A0  D013               	goto	l1336
 20698  0050A2  0E9F               	movlw	159
 20699  0050A4  6418               	cpfsgt	drawPixel@y,c
 20700  0050A6  D001               	goto	l5924
 20701                           
 20702                           ;ST7735_TFT.c: 411: return;
 20703  0050A8  D00F               	goto	l1336
 20704  0050AA                     l5924:
 20705                           
 20706                           ;ST7735_TFT.c: 412: setAddrWindow(x,y,x+1,y+1);
 20707  0050AA  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
 20708  0050AE  281B               	incf	drawPixel@x,w,c
 20709  0050B0  6E15               	movwf	setAddrWindow@x1,c
 20710  0050B2  2818               	incf	drawPixel@y,w,c
 20711  0050B4  6E16               	movwf	setAddrWindow@y1,c
 20712  0050B6  501B               	movf	drawPixel@x,w,c
 20713  0050B8  EC07  F026         	call	_setAddrWindow
 20714                           
 20715                           ;ST7735_TFT.c: 413: write_data(color >> 8);
 20716  0050BC  501A               	movf	drawPixel@color+1,w,c
 20717  0050BE  EC95  F02A         	call	_write_data
 20718                           
 20719                           ;ST7735_TFT.c: 414: write_data(color & 0xFF);
 20720  0050C2  5019               	movf	drawPixel@color,w,c
 20721  0050C4  EC95  F02A         	call	_write_data
 20722  0050C8                     l1336:
 20723  0050C8  0012               	return		;funcret
 20724  0050CA                     __end_of_drawPixel:
 20725                           	opt stack 0
 20726                           tblptru	equ	0xFF8
 20727                           tblptrh	equ	0xFF7
 20728                           tblptrl	equ	0xFF6
 20729                           tablat	equ	0xFF5
 20730                           prodh	equ	0xFF4
 20731                           prodl	equ	0xFF3
 20732                           intcon	equ	0xFF2
 20733                           intcon2	equ	0xFF1
 20734                           postinc0	equ	0xFEE
 20735                           wreg	equ	0xFE8
 20736                           postdec1	equ	0xFE5
 20737                           fsr1l	equ	0xFE1
 20738                           indf2	equ	0xFDF
 20739                           postinc2	equ	0xFDE
 20740                           postdec2	equ	0xFDD
 20741                           fsr2h	equ	0xFDA
 20742                           fsr2l	equ	0xFD9
 20743                           status	equ	0xFD8
 20744                           
 20745 ;; *************** function _setAddrWindow *****************
 20746 ;; Defined at:
 20747 ;;		line 393 in file "ST7735_TFT.c"
 20748 ;; Parameters:    Size  Location     Type
 20749 ;;  x0              1    wreg     unsigned char 
 20750 ;;  y0              1   19[COMRAM] unsigned char 
 20751 ;;  x1              1   20[COMRAM] unsigned char 
 20752 ;;  y1              1   21[COMRAM] unsigned char 
 20753 ;; Auto vars:     Size  Location     Type
 20754 ;;  x0              1   22[COMRAM] unsigned char 
 20755 ;; Return value:  Size  Location     Type
 20756 ;;		None               void
 20757 ;; Registers used:
 20758 ;;		wreg, status,2, status,0, cstack
 20759 ;; Tracked objects:
 20760 ;;		On entry : 0/0
 20761 ;;		On exit  : 0/0
 20762 ;;		Unchanged: 0/0
 20763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20764 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20765 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20767 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20768 ;;Total ram usage:        4 bytes
 20769 ;; Hardware stack levels used:    1
 20770 ;; Hardware stack levels required when called:    5
 20771 ;; This function calls:
 20772 ;;		_write_command
 20773 ;;		_write_data
 20774 ;; This function is called by:
 20775 ;;		_drawPixel
 20776 ;;		_drawFastVLine
 20777 ;;		_fillRectangle
 20778 ;;		_drawFastHLine
 20779 ;; This function uses a non-reentrant model
 20780 ;;
 20781                           
 20782                           	psect	text100
 20783  004C0E                     __ptext100:
 20784                           	opt stack 0
 20785  004C0E                     _setAddrWindow:
 20786                           	opt stack 20
 20787                           
 20788                           ;incstack = 0
 20789                           ;setAddrWindow@x0 stored from wreg
 20790  004C0E  6E17               	movwf	setAddrWindow@x0,c
 20791                           
 20792                           ;ST7735_TFT.c: 395: write_command(0x2A);
 20793  004C10  0E2A               	movlw	42
 20794  004C12  EC9D  F02A         	call	_write_command
 20795                           
 20796                           ;ST7735_TFT.c: 396: write_data(0);
 20797  004C16  0E00               	movlw	0
 20798  004C18  EC95  F02A         	call	_write_data
 20799                           
 20800                           ;ST7735_TFT.c: 397: write_data(x0 + colstart);
 20801  004C1C  5017               	movf	setAddrWindow@x0,w,c
 20802  004C1E  0100               	movlb	0	; () banked
 20803  004C20  25A9               	addwf	_colstart& (0+255),w,b
 20804  004C22  EC95  F02A         	call	_write_data
 20805                           
 20806                           ;ST7735_TFT.c: 398: write_data(0);
 20807  004C26  0E00               	movlw	0
 20808  004C28  EC95  F02A         	call	_write_data
 20809                           
 20810                           ;ST7735_TFT.c: 399: write_data(x1 + colstart);
 20811  004C2C  5015               	movf	setAddrWindow@x1,w,c
 20812  004C2E  0100               	movlb	0	; () banked
 20813  004C30  25A9               	addwf	_colstart& (0+255),w,b
 20814  004C32  EC95  F02A         	call	_write_data
 20815                           
 20816                           ;ST7735_TFT.c: 400: write_command(0x2B);
 20817  004C36  0E2B               	movlw	43
 20818  004C38  EC9D  F02A         	call	_write_command
 20819                           
 20820                           ;ST7735_TFT.c: 401: write_data(0);
 20821  004C3C  0E00               	movlw	0
 20822  004C3E  EC95  F02A         	call	_write_data
 20823                           
 20824                           ;ST7735_TFT.c: 402: write_data(y0 + rowstart);
 20825  004C42  5014               	movf	setAddrWindow@y0,w,c
 20826  004C44  0100               	movlb	0	; () banked
 20827  004C46  25AD               	addwf	_rowstart& (0+255),w,b
 20828  004C48  EC95  F02A         	call	_write_data
 20829                           
 20830                           ;ST7735_TFT.c: 403: write_data(0);
 20831  004C4C  0E00               	movlw	0
 20832  004C4E  EC95  F02A         	call	_write_data
 20833                           
 20834                           ;ST7735_TFT.c: 404: write_data(y1 + rowstart);
 20835  004C52  5016               	movf	setAddrWindow@y1,w,c
 20836  004C54  0100               	movlb	0	; () banked
 20837  004C56  25AD               	addwf	_rowstart& (0+255),w,b
 20838  004C58  EC95  F02A         	call	_write_data
 20839                           
 20840                           ;ST7735_TFT.c: 405: write_command(0x2C);
 20841  004C5C  0E2C               	movlw	44
 20842  004C5E  EC9D  F02A         	call	_write_command
 20843  004C62  0012               	return		;funcret
 20844  004C64                     __end_of_setAddrWindow:
 20845                           	opt stack 0
 20846                           tblptru	equ	0xFF8
 20847                           tblptrh	equ	0xFF7
 20848                           tblptrl	equ	0xFF6
 20849                           tablat	equ	0xFF5
 20850                           prodh	equ	0xFF4
 20851                           prodl	equ	0xFF3
 20852                           intcon	equ	0xFF2
 20853                           intcon2	equ	0xFF1
 20854                           postinc0	equ	0xFEE
 20855                           wreg	equ	0xFE8
 20856                           postdec1	equ	0xFE5
 20857                           fsr1l	equ	0xFE1
 20858                           indf2	equ	0xFDF
 20859                           postinc2	equ	0xFDE
 20860                           postdec2	equ	0xFDD
 20861                           fsr2h	equ	0xFDA
 20862                           fsr2l	equ	0xFD9
 20863                           status	equ	0xFD8
 20864                           
 20865 ;; *************** function _write_data *****************
 20866 ;; Defined at:
 20867 ;;		line 210 in file "ST7735_TFT.c"
 20868 ;; Parameters:    Size  Location     Type
 20869 ;;  data_           1    wreg     unsigned char 
 20870 ;; Auto vars:     Size  Location     Type
 20871 ;;  data_           1   18[COMRAM] unsigned char 
 20872 ;; Return value:  Size  Location     Type
 20873 ;;		None               void
 20874 ;; Registers used:
 20875 ;;		wreg, status,2, cstack
 20876 ;; Tracked objects:
 20877 ;;		On entry : 0/0
 20878 ;;		On exit  : 0/0
 20879 ;;		Unchanged: 0/0
 20880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20882 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20884 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20885 ;;Total ram usage:        1 bytes
 20886 ;; Hardware stack levels used:    1
 20887 ;; Hardware stack levels required when called:    4
 20888 ;; This function calls:
 20889 ;;		_spiwrite
 20890 ;; This function is called by:
 20891 ;;		_Rcmd1
 20892 ;;		_Rcmd2red
 20893 ;;		_Rcmd3
 20894 ;;		_setAddrWindow
 20895 ;;		_drawPixel
 20896 ;;		_TFT_GreenTab_Initialize
 20897 ;;		_Bcmd
 20898 ;;		_setScrollDefinition
 20899 ;;		_Rcmd2green
 20900 ;;		_VerticalScroll
 20901 ;; This function uses a non-reentrant model
 20902 ;;
 20903                           
 20904                           	psect	text101
 20905  00552A                     __ptext101:
 20906                           	opt stack 0
 20907  00552A                     _write_data:
 20908                           	opt stack 20
 20909                           
 20910                           ;incstack = 0
 20911                           ;write_data@data_ stored from wreg
 20912  00552A  6E13               	movwf	write_data@data_,c
 20913                           
 20914                           ;ST7735_TFT.c: 212: PORTDbits.RD5 = 0;
 20915  00552C  9A83               	bcf	3971,5,c	;volatile
 20916                           
 20917                           ;ST7735_TFT.c: 213: PORTDbits.RD4 = 1;
 20918  00552E  8883               	bsf	3971,4,c	;volatile
 20919                           
 20920                           ;ST7735_TFT.c: 214: spiwrite(data_);
 20921  005530  5013               	movf	write_data@data_,w,c
 20922  005532  EC2A  F02A         	call	_spiwrite
 20923                           
 20924                           ;ST7735_TFT.c: 215: PORTDbits.RD5 = 1;
 20925  005536  8A83               	bsf	3971,5,c	;volatile
 20926  005538  0012               	return		;funcret
 20927  00553A                     __end_of_write_data:
 20928                           	opt stack 0
 20929                           tblptru	equ	0xFF8
 20930                           tblptrh	equ	0xFF7
 20931                           tblptrl	equ	0xFF6
 20932                           tablat	equ	0xFF5
 20933                           prodh	equ	0xFF4
 20934                           prodl	equ	0xFF3
 20935                           intcon	equ	0xFF2
 20936                           intcon2	equ	0xFF1
 20937                           postinc0	equ	0xFEE
 20938                           wreg	equ	0xFE8
 20939                           postdec1	equ	0xFE5
 20940                           fsr1l	equ	0xFE1
 20941                           indf2	equ	0xFDF
 20942                           postinc2	equ	0xFDE
 20943                           postdec2	equ	0xFDD
 20944                           fsr2h	equ	0xFDA
 20945                           fsr2l	equ	0xFD9
 20946                           status	equ	0xFD8
 20947                           
 20948 ;; *************** function _write_command *****************
 20949 ;; Defined at:
 20950 ;;		line 199 in file "ST7735_TFT.c"
 20951 ;; Parameters:    Size  Location     Type
 20952 ;;  cmd_            1    wreg     unsigned char 
 20953 ;; Auto vars:     Size  Location     Type
 20954 ;;  cmd_            1   18[COMRAM] unsigned char 
 20955 ;; Return value:  Size  Location     Type
 20956 ;;		None               void
 20957 ;; Registers used:
 20958 ;;		wreg, status,2, cstack
 20959 ;; Tracked objects:
 20960 ;;		On entry : 0/0
 20961 ;;		On exit  : 0/0
 20962 ;;		Unchanged: 0/0
 20963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20965 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20967 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20968 ;;Total ram usage:        1 bytes
 20969 ;; Hardware stack levels used:    1
 20970 ;; Hardware stack levels required when called:    4
 20971 ;; This function calls:
 20972 ;;		_spiwrite
 20973 ;; This function is called by:
 20974 ;;		_Rcmd1
 20975 ;;		_Rcmd2red
 20976 ;;		_Rcmd3
 20977 ;;		_setAddrWindow
 20978 ;;		_TFT_GreenTab_Initialize
 20979 ;;		_Bcmd
 20980 ;;		_setScrollDefinition
 20981 ;;		_Rcmd2green
 20982 ;;		_VerticalScroll
 20983 ;; This function uses a non-reentrant model
 20984 ;;
 20985                           
 20986                           	psect	text102
 20987  00553A                     __ptext102:
 20988                           	opt stack 0
 20989  00553A                     _write_command:
 20990                           	opt stack 20
 20991                           
 20992                           ;incstack = 0
 20993                           ;write_command@cmd_ stored from wreg
 20994  00553A  6E13               	movwf	write_command@cmd_,c
 20995                           
 20996                           ;ST7735_TFT.c: 201: PORTDbits.RD5 = 0;
 20997  00553C  9A83               	bcf	3971,5,c	;volatile
 20998                           
 20999                           ;ST7735_TFT.c: 203: PORTDbits.RD4 = 0;
 21000  00553E  9883               	bcf	3971,4,c	;volatile
 21001                           
 21002                           ;ST7735_TFT.c: 204: spiwrite(cmd_);
 21003  005540  5013               	movf	write_command@cmd_,w,c
 21004  005542  EC2A  F02A         	call	_spiwrite
 21005                           
 21006                           ;ST7735_TFT.c: 206: PORTDbits.RD5 = 1;
 21007  005546  8A83               	bsf	3971,5,c	;volatile
 21008  005548  0012               	return		;funcret
 21009  00554A                     __end_of_write_command:
 21010                           	opt stack 0
 21011                           tblptru	equ	0xFF8
 21012                           tblptrh	equ	0xFF7
 21013                           tblptrl	equ	0xFF6
 21014                           tablat	equ	0xFF5
 21015                           prodh	equ	0xFF4
 21016                           prodl	equ	0xFF3
 21017                           intcon	equ	0xFF2
 21018                           intcon2	equ	0xFF1
 21019                           postinc0	equ	0xFEE
 21020                           wreg	equ	0xFE8
 21021                           postdec1	equ	0xFE5
 21022                           fsr1l	equ	0xFE1
 21023                           indf2	equ	0xFDF
 21024                           postinc2	equ	0xFDE
 21025                           postdec2	equ	0xFDD
 21026                           fsr2h	equ	0xFDA
 21027                           fsr2l	equ	0xFD9
 21028                           status	equ	0xFD8
 21029                           
 21030 ;; *************** function _spiwrite *****************
 21031 ;; Defined at:
 21032 ;;		line 190 in file "ST7735_TFT.c"
 21033 ;; Parameters:    Size  Location     Type
 21034 ;;  spidata         1    wreg     unsigned char 
 21035 ;; Auto vars:     Size  Location     Type
 21036 ;;  spidata         1   17[COMRAM] unsigned char 
 21037 ;;  x               1   16[COMRAM] unsigned char 
 21038 ;; Return value:  Size  Location     Type
 21039 ;;		None               void
 21040 ;; Registers used:
 21041 ;;		wreg
 21042 ;; Tracked objects:
 21043 ;;		On entry : 0/0
 21044 ;;		On exit  : 0/0
 21045 ;;		Unchanged: 0/0
 21046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21048 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21050 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21051 ;;Total ram usage:        2 bytes
 21052 ;; Hardware stack levels used:    1
 21053 ;; Hardware stack levels required when called:    3
 21054 ;; This function calls:
 21055 ;;		Nothing
 21056 ;; This function is called by:
 21057 ;;		_write_command
 21058 ;;		_write_data
 21059 ;;		_drawFastVLine
 21060 ;;		_fillRectangle
 21061 ;;		_drawFastHLine
 21062 ;; This function uses a non-reentrant model
 21063 ;;
 21064                           
 21065                           	psect	text103
 21066  005454                     __ptext103:
 21067                           	opt stack 0
 21068  005454                     _spiwrite:
 21069                           	opt stack 22
 21070                           
 21071                           ;incstack = 0
 21072                           ;spiwrite@spidata stored from wreg
 21073  005454  6E12               	movwf	spiwrite@spidata,c
 21074                           
 21075                           ;ST7735_TFT.c: 192: char x;
 21076                           ;ST7735_TFT.c: 193: PIR1bits.SSPIF = 0;
 21077  005456  969E               	bcf	3998,3,c	;volatile
 21078                           
 21079                           ;ST7735_TFT.c: 194: x = SSPBUF;
 21080  005458  CFC9 F011          	movff	4041,spiwrite@x	;volatile
 21081                           
 21082                           ;ST7735_TFT.c: 195: SSPBUF = spidata;
 21083  00545C  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
 21084                           
 21085                           ;ST7735_TFT.c: 196: while (!SSPSTATbits.BF);
 21086  005460  D000               	goto	l1292
 21087  005462                     l1292:
 21088  005462  A0C7               	btfss	4039,0,c	;volatile
 21089  005464  D7FE               	goto	l1292
 21090  005466  0012               	return		;funcret
 21091  005468                     __end_of_spiwrite:
 21092                           	opt stack 0
 21093                           tblptru	equ	0xFF8
 21094                           tblptrh	equ	0xFF7
 21095                           tblptrl	equ	0xFF6
 21096                           tablat	equ	0xFF5
 21097                           prodh	equ	0xFF4
 21098                           prodl	equ	0xFF3
 21099                           intcon	equ	0xFF2
 21100                           intcon2	equ	0xFF1
 21101                           postinc0	equ	0xFEE
 21102                           wreg	equ	0xFE8
 21103                           postdec1	equ	0xFE5
 21104                           fsr1l	equ	0xFE1
 21105                           indf2	equ	0xFDF
 21106                           postinc2	equ	0xFDE
 21107                           postdec2	equ	0xFDD
 21108                           fsr2h	equ	0xFDA
 21109                           fsr2l	equ	0xFD9
 21110                           status	equ	0xFD8
 21111                           
 21112 ;; *************** function ___wmul *****************
 21113 ;; Defined at:
 21114 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 21115 ;; Parameters:    Size  Location     Type
 21116 ;;  multiplier      2   16[COMRAM] unsigned int 
 21117 ;;  multiplicand    2   18[COMRAM] unsigned int 
 21118 ;; Auto vars:     Size  Location     Type
 21119 ;;  product         2   20[COMRAM] unsigned int 
 21120 ;; Return value:  Size  Location     Type
 21121 ;;                  2   16[COMRAM] unsigned int 
 21122 ;; Registers used:
 21123 ;;		wreg, status,2, status,0, prodl, prodh
 21124 ;; Tracked objects:
 21125 ;;		On entry : 0/0
 21126 ;;		On exit  : 0/0
 21127 ;;		Unchanged: 0/0
 21128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21129 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21130 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21132 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21133 ;;Total ram usage:        6 bytes
 21134 ;; Hardware stack levels used:    1
 21135 ;; Hardware stack levels required when called:    3
 21136 ;; This function calls:
 21137 ;;		Nothing
 21138 ;; This function is called by:
 21139 ;;		_main
 21140 ;;		_read_volt
 21141 ;;		_get_RPM
 21142 ;;		_delay_ms
 21143 ;;		_drawChar
 21144 ;;		_fround
 21145 ;;		_scale
 21146 ;;		_printf
 21147 ;; This function uses a non-reentrant model
 21148 ;;
 21149                           
 21150                           	psect	text104
 21151  005120                     __ptext104:
 21152                           	opt stack 0
 21153  005120                     ___wmul:
 21154                           	opt stack 25
 21155                           
 21156                           ;incstack = 0
 21157  005120  5011               	movf	___wmul@multiplier,w,c
 21158  005122  0213               	mulwf	___wmul@multiplicand,c
 21159  005124  CFF3 F015          	movff	prodl,___wmul@product
 21160  005128  CFF4 F016          	movff	prodh,___wmul@product+1
 21161  00512C  5011               	movf	___wmul@multiplier,w,c
 21162  00512E  0214               	mulwf	___wmul@multiplicand+1,c
 21163  005130  50F3               	movf	prodl,w,c
 21164  005132  2616               	addwf	___wmul@product+1,f,c
 21165  005134  5012               	movf	___wmul@multiplier+1,w,c
 21166  005136  0213               	mulwf	___wmul@multiplicand,c
 21167  005138  50F3               	movf	prodl,w,c
 21168  00513A  2616               	addwf	___wmul@product+1,f,c
 21169  00513C  C015  F011         	movff	___wmul@product,?___wmul
 21170  005140  C016  F012         	movff	___wmul@product+1,?___wmul+1
 21171  005144  D000               	goto	l1634
 21172  005146                     l1634:
 21173  005146  0012               	return		;funcret
 21174  005148                     __end_of___wmul:
 21175                           	opt stack 0
 21176                           tblptru	equ	0xFF8
 21177                           tblptrh	equ	0xFF7
 21178                           tblptrl	equ	0xFF6
 21179                           tablat	equ	0xFF5
 21180                           prodh	equ	0xFF4
 21181                           prodl	equ	0xFF3
 21182                           intcon	equ	0xFF2
 21183                           intcon2	equ	0xFF1
 21184                           postinc0	equ	0xFEE
 21185                           wreg	equ	0xFE8
 21186                           postdec1	equ	0xFE5
 21187                           fsr1l	equ	0xFE1
 21188                           indf2	equ	0xFDF
 21189                           postinc2	equ	0xFDE
 21190                           postdec2	equ	0xFDD
 21191                           fsr2h	equ	0xFDA
 21192                           fsr2l	equ	0xFD9
 21193                           status	equ	0xFD8
 21194                           
 21195 ;; *************** function _Do_Init *****************
 21196 ;; Defined at:
 21197 ;;		line 99 in file "Main_S4.c"
 21198 ;; Parameters:    Size  Location     Type
 21199 ;;		None
 21200 ;; Auto vars:     Size  Location     Type
 21201 ;;		None
 21202 ;; Return value:  Size  Location     Type
 21203 ;;		None               void
 21204 ;; Registers used:
 21205 ;;		wreg, status,2, status,0, cstack
 21206 ;; Tracked objects:
 21207 ;;		On entry : 0/0
 21208 ;;		On exit  : 0/0
 21209 ;;		Unchanged: 0/0
 21210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21214 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21215 ;;Total ram usage:        0 bytes
 21216 ;; Hardware stack levels used:    1
 21217 ;; Hardware stack levels required when called:    7
 21218 ;; This function calls:
 21219 ;;		_DS1621_Init
 21220 ;;		_I2C_Init
 21221 ;;		_Init_ADC
 21222 ;;		_Turn_Off_Fan
 21223 ;;		_init_INTERRUPT
 21224 ;;		_init_UART
 21225 ;; This function is called by:
 21226 ;;		_main
 21227 ;; This function uses a non-reentrant model
 21228 ;;
 21229                           
 21230                           	psect	text105
 21231  004966                     __ptext105:
 21232                           	opt stack 0
 21233  004966                     _Do_Init:
 21234                           	opt stack 23
 21235                           
 21236                           ;Main_S4.c: 101: init_UART();
 21237                           
 21238                           ;incstack = 0
 21239  004966  EC34  F02A         	call	_init_UART	;wreg free
 21240                           
 21241                           ;Main_S4.c: 102: Init_ADC();
 21242  00496A  ECAC  F02A         	call	_Init_ADC	;wreg free
 21243                           
 21244                           ;Main_S4.c: 103: OSCCON=0x70;
 21245  00496E  0E70               	movlw	112
 21246  004970  6ED3               	movwf	4051,c	;volatile
 21247                           
 21248                           ;Main_S4.c: 105: ADCON1= 0x0D;
 21249  004972  0E0D               	movlw	13
 21250  004974  6EC1               	movwf	4033,c	;volatile
 21251                           
 21252                           ;Main_S4.c: 106: TRISA = 0x13;
 21253  004976  0E13               	movlw	19
 21254  004978  6E92               	movwf	3986,c	;volatile
 21255                           
 21256                           ;Main_S4.c: 107: TRISB = 0x07;
 21257  00497A  0E07               	movlw	7
 21258  00497C  6E93               	movwf	3987,c	;volatile
 21259                           
 21260                           ;Main_S4.c: 108: TRISC = 0x01;
 21261  00497E  0E01               	movlw	1
 21262  004980  6E94               	movwf	3988,c	;volatile
 21263                           
 21264                           ;Main_S4.c: 109: TRISD = 0x00;
 21265  004982  0E00               	movlw	0
 21266  004984  6E95               	movwf	3989,c	;volatile
 21267                           
 21268                           ;Main_S4.c: 110: TRISE = 0x00;
 21269  004986  0E00               	movlw	0
 21270  004988  6E96               	movwf	3990,c	;volatile
 21271                           
 21272                           ;Main_S4.c: 111: PORTE = 0x00;
 21273  00498A  0E00               	movlw	0
 21274  00498C  6E84               	movwf	3972,c	;volatile
 21275                           
 21276                           ;Main_S4.c: 113: FAN = 0;
 21277  00498E  0E00               	movlw	0
 21278  004990  0100               	movlb	0	; () banked
 21279  004992  6F9B               	movwf	_FAN& (0+255),b
 21280                           
 21281                           ; BSR set to: 0
 21282                           ;Main_S4.c: 114: RBPU=0;
 21283  004994  9EF1               	bcf	intcon2,7,c	;volatile
 21284                           
 21285                           ; BSR set to: 0
 21286                           ;Main_S4.c: 116: TMR3L = 0x00;
 21287  004996  0E00               	movlw	0
 21288  004998  6EB2               	movwf	4018,c	;volatile
 21289                           
 21290                           ; BSR set to: 0
 21291                           ;Main_S4.c: 117: T3CON = 0x03;
 21292  00499A  0E03               	movlw	3
 21293  00499C  6EB1               	movwf	4017,c	;volatile
 21294                           
 21295                           ; BSR set to: 0
 21296                           ;Main_S4.c: 118: I2C_Init(100000);
 21297  00499E  0EA0               	movlw	160
 21298  0049A0  6E11               	movwf	I2C_Init@c,c
 21299  0049A2  0E86               	movlw	134
 21300  0049A4  6E12               	movwf	I2C_Init@c+1,c
 21301  0049A6  0E01               	movlw	1
 21302  0049A8  6E13               	movwf	I2C_Init@c+2,c
 21303  0049AA  0E00               	movlw	0
 21304  0049AC  6E14               	movwf	I2C_Init@c+3,c
 21305  0049AE  ECD8  F02A         	call	_I2C_Init	;wreg free
 21306                           
 21307                           ;Main_S4.c: 120: DS1621_Init();
 21308  0049B2  EC93  F029         	call	_DS1621_Init	;wreg free
 21309                           
 21310                           ;Main_S4.c: 121: init_INTERRUPT();
 21311  0049B6  ECEE  F028         	call	_init_INTERRUPT	;wreg free
 21312                           
 21313                           ;Main_S4.c: 122: Turn_Off_Fan();
 21314  0049BA  ECCC  F02A         	call	_Turn_Off_Fan	;wreg free
 21315                           
 21316                           ;Main_S4.c: 123: fan_set_temp = 75;
 21317  0049BE  0E4B               	movlw	75
 21318  0049C0  0100               	movlb	0	; () banked
 21319  0049C2  6FB6               	movwf	_fan_set_temp& (0+255),b
 21320                           
 21321                           ; BSR set to: 0
 21322                           ;Main_S4.c: 125: PORTDbits.RD0 = 0;
 21323  0049C4  9083               	bcf	3971,0,c	;volatile
 21324                           
 21325                           ; BSR set to: 0
 21326                           ;Main_S4.c: 126: PORTDbits.RD1 = 0;
 21327  0049C6  9283               	bcf	3971,1,c	;volatile
 21328                           
 21329                           ; BSR set to: 0
 21330                           ;Main_S4.c: 127: PORTDbits.RD2 = 0;
 21331  0049C8  9483               	bcf	3971,2,c	;volatile
 21332                           
 21333                           ; BSR set to: 0
 21334  0049CA  0012               	return		;funcret
 21335  0049CC                     __end_of_Do_Init:
 21336                           	opt stack 0
 21337                           tblptru	equ	0xFF8
 21338                           tblptrh	equ	0xFF7
 21339                           tblptrl	equ	0xFF6
 21340                           tablat	equ	0xFF5
 21341                           prodh	equ	0xFF4
 21342                           prodl	equ	0xFF3
 21343                           intcon	equ	0xFF2
 21344                           intcon2	equ	0xFF1
 21345                           postinc0	equ	0xFEE
 21346                           wreg	equ	0xFE8
 21347                           postdec1	equ	0xFE5
 21348                           fsr1l	equ	0xFE1
 21349                           indf2	equ	0xFDF
 21350                           postinc2	equ	0xFDE
 21351                           postdec2	equ	0xFDD
 21352                           fsr2h	equ	0xFDA
 21353                           fsr2l	equ	0xFD9
 21354                           status	equ	0xFD8
 21355                           
 21356 ;; *************** function _init_UART *****************
 21357 ;; Defined at:
 21358 ;;		line 91 in file "Main_S4.c"
 21359 ;; Parameters:    Size  Location     Type
 21360 ;;		None
 21361 ;; Auto vars:     Size  Location     Type
 21362 ;;		None
 21363 ;; Return value:  Size  Location     Type
 21364 ;;		None               void
 21365 ;; Registers used:
 21366 ;;		wreg, status,2, cstack
 21367 ;; Tracked objects:
 21368 ;;		On entry : 0/0
 21369 ;;		On exit  : 0/0
 21370 ;;		Unchanged: 0/0
 21371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21376 ;;Total ram usage:        0 bytes
 21377 ;; Hardware stack levels used:    1
 21378 ;; Hardware stack levels required when called:    4
 21379 ;; This function calls:
 21380 ;;		_OpenUSART
 21381 ;; This function is called by:
 21382 ;;		_Do_Init
 21383 ;; This function uses a non-reentrant model
 21384 ;;
 21385                           
 21386                           	psect	text106
 21387  005468                     __ptext106:
 21388                           	opt stack 0
 21389  005468                     _init_UART:
 21390                           	opt stack 25
 21391                           
 21392                           ;Main_S4.c: 93: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b1111111
      +                          1 & 0b11111111, 25);
 21393                           
 21394                           ; BSR set to: 0
 21395                           ;incstack = 0
 21396  005468  0E00               	movlw	0
 21397  00546A  6E12               	movwf	OpenUSART@spbrg+1,c
 21398  00546C  0E19               	movlw	25
 21399  00546E  6E11               	movwf	OpenUSART@spbrg,c
 21400  005470  0E3C               	movlw	60
 21401  005472  EC13  F024         	call	_OpenUSART
 21402                           
 21403                           ;Main_S4.c: 94: OSCCON = 0x70;
 21404  005476  0E70               	movlw	112
 21405  005478  6ED3               	movwf	4051,c	;volatile
 21406  00547A  0012               	return		;funcret
 21407  00547C                     __end_of_init_UART:
 21408                           	opt stack 0
 21409                           tblptru	equ	0xFF8
 21410                           tblptrh	equ	0xFF7
 21411                           tblptrl	equ	0xFF6
 21412                           tablat	equ	0xFF5
 21413                           prodh	equ	0xFF4
 21414                           prodl	equ	0xFF3
 21415                           intcon	equ	0xFF2
 21416                           intcon2	equ	0xFF1
 21417                           postinc0	equ	0xFEE
 21418                           wreg	equ	0xFE8
 21419                           postdec1	equ	0xFE5
 21420                           fsr1l	equ	0xFE1
 21421                           indf2	equ	0xFDF
 21422                           postinc2	equ	0xFDE
 21423                           postdec2	equ	0xFDD
 21424                           fsr2h	equ	0xFDA
 21425                           fsr2l	equ	0xFD9
 21426                           status	equ	0xFD8
 21427                           
 21428 ;; *************** function _OpenUSART *****************
 21429 ;; Defined at:
 21430 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
 21431 ;; Parameters:    Size  Location     Type
 21432 ;;  config          1    wreg     unsigned char 
 21433 ;;  spbrg           2   16[COMRAM] unsigned int 
 21434 ;; Auto vars:     Size  Location     Type
 21435 ;;  config          1   18[COMRAM] unsigned char 
 21436 ;; Return value:  Size  Location     Type
 21437 ;;		None               void
 21438 ;; Registers used:
 21439 ;;		wreg, status,2
 21440 ;; Tracked objects:
 21441 ;;		On entry : 0/0
 21442 ;;		On exit  : 0/0
 21443 ;;		Unchanged: 0/0
 21444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21445 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21446 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21448 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21449 ;;Total ram usage:        3 bytes
 21450 ;; Hardware stack levels used:    1
 21451 ;; Hardware stack levels required when called:    3
 21452 ;; This function calls:
 21453 ;;		Nothing
 21454 ;; This function is called by:
 21455 ;;		_init_UART
 21456 ;; This function uses a non-reentrant model
 21457 ;;
 21458                           
 21459                           	psect	text107
 21460  004826                     __ptext107:
 21461                           	opt stack 0
 21462  004826                     _OpenUSART:
 21463                           	opt stack 25
 21464                           
 21465                           ;incstack = 0
 21466                           ;OpenUSART@config stored from wreg
 21467  004826  6E13               	movwf	OpenUSART@config,c
 21468  004828  0E00               	movlw	0
 21469  00482A  6EAC               	movwf	4012,c	;volatile
 21470  00482C  0E00               	movlw	0
 21471  00482E  6EAB               	movwf	4011,c	;volatile
 21472  004830  A013               	btfss	OpenUSART@config,0,c
 21473  004832  D002               	goto	l7390
 21474  004834  88AC               	bsf	4012,4,c	;volatile
 21475  004836  D000               	goto	l7390
 21476  004838                     l7390:
 21477  004838  A213               	btfss	OpenUSART@config,1,c
 21478  00483A  D003               	goto	l7394
 21479  00483C  8CAC               	bsf	4012,6,c	;volatile
 21480  00483E  8CAB               	bsf	4011,6,c	;volatile
 21481  004840  D000               	goto	l7394
 21482  004842                     l7394:
 21483  004842  A413               	btfss	OpenUSART@config,2,c
 21484  004844  D002               	goto	l7398
 21485  004846  8EAC               	bsf	4012,7,c	;volatile
 21486  004848  D000               	goto	l7398
 21487  00484A                     l7398:
 21488  00484A  A613               	btfss	OpenUSART@config,3,c
 21489  00484C  D002               	goto	l1622
 21490  00484E  88AB               	bsf	4011,4,c	;volatile
 21491  004850  D002               	goto	l7402
 21492  004852                     l1622:
 21493  004852  8AAB               	bsf	4011,5,c	;volatile
 21494  004854  D000               	goto	l7402
 21495  004856                     l7402:
 21496  004856  B813               	btfsc	OpenUSART@config,4,c
 21497  004858  84AC               	bsf	4012,2,c	;volatile
 21498  00485A  989E               	bcf	3998,4,c	;volatile
 21499  00485C  AA13               	btfss	OpenUSART@config,5,c
 21500  00485E  D002               	goto	l7410
 21501  004860  86AB               	bsf	4011,3,c	;volatile
 21502  004862  D000               	goto	l7410
 21503  004864                     l7410:
 21504  004864  AC13               	btfss	OpenUSART@config,6,c
 21505  004866  D002               	goto	l1626
 21506  004868  8A9D               	bsf	3997,5,c	;volatile
 21507  00486A  D001               	goto	l1627
 21508  00486C                     l1626:
 21509  00486C  9A9D               	bcf	3997,5,c	;volatile
 21510  00486E                     l1627:
 21511  00486E  9A9E               	bcf	3998,5,c	;volatile
 21512  004870  AE13               	btfss	OpenUSART@config,7,c
 21513  004872  D002               	goto	l1628
 21514  004874  889D               	bsf	3997,4,c	;volatile
 21515  004876  D001               	goto	l1629
 21516  004878                     l1628:
 21517  004878  989D               	bcf	3997,4,c	;volatile
 21518  00487A                     l1629:
 21519  00487A  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 21520  00487E  5012               	movf	OpenUSART@spbrg+1,w,c
 21521  004880  6EB0               	movwf	4016,c	;volatile
 21522  004882  8AAC               	bsf	4012,5,c	;volatile
 21523  004884  8EAB               	bsf	4011,7,c	;volatile
 21524  004886  9C94               	bcf	3988,6,c	;volatile
 21525  004888  8E94               	bsf	3988,7,c	;volatile
 21526  00488A  B8AC               	btfsc	4012,4,c	;volatile
 21527  00488C  BEAC               	btfsc	4012,7,c	;volatile
 21528  00488E  D002               	goto	l1631
 21529  004890  8C94               	bsf	3988,6,c	;volatile
 21530  004892  D000               	goto	l1631
 21531  004894                     l1631:
 21532  004894  0012               	return		;funcret
 21533  004896                     __end_of_OpenUSART:
 21534                           	opt stack 0
 21535                           tblptru	equ	0xFF8
 21536                           tblptrh	equ	0xFF7
 21537                           tblptrl	equ	0xFF6
 21538                           tablat	equ	0xFF5
 21539                           prodh	equ	0xFF4
 21540                           prodl	equ	0xFF3
 21541                           intcon	equ	0xFF2
 21542                           intcon2	equ	0xFF1
 21543                           postinc0	equ	0xFEE
 21544                           wreg	equ	0xFE8
 21545                           postdec1	equ	0xFE5
 21546                           fsr1l	equ	0xFE1
 21547                           indf2	equ	0xFDF
 21548                           postinc2	equ	0xFDE
 21549                           postdec2	equ	0xFDD
 21550                           fsr2h	equ	0xFDA
 21551                           fsr2l	equ	0xFD9
 21552                           status	equ	0xFD8
 21553                           
 21554 ;; *************** function _init_INTERRUPT *****************
 21555 ;; Defined at:
 21556 ;;		line 17 in file "Interrupt.c"
 21557 ;; Parameters:    Size  Location     Type
 21558 ;;		None
 21559 ;; Auto vars:     Size  Location     Type
 21560 ;;		None
 21561 ;; Return value:  Size  Location     Type
 21562 ;;		None               void
 21563 ;; Registers used:
 21564 ;;		wreg, status,2
 21565 ;; Tracked objects:
 21566 ;;		On entry : 0/0
 21567 ;;		On exit  : 0/0
 21568 ;;		Unchanged: 0/0
 21569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21573 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21574 ;;Total ram usage:        0 bytes
 21575 ;; Hardware stack levels used:    1
 21576 ;; Hardware stack levels required when called:    3
 21577 ;; This function calls:
 21578 ;;		Nothing
 21579 ;; This function is called by:
 21580 ;;		_Do_Init
 21581 ;; This function uses a non-reentrant model
 21582 ;;
 21583                           
 21584                           	psect	text108
 21585  0051DC                     __ptext108:
 21586                           	opt stack 0
 21587  0051DC                     _init_INTERRUPT:
 21588                           	opt stack 26
 21589                           
 21590                           ;Interrupt.c: 19: TMR1H = 0;
 21591                           
 21592                           ;incstack = 0
 21593  0051DC  0E00               	movlw	0
 21594  0051DE  6ECF               	movwf	4047,c	;volatile
 21595                           
 21596                           ;Interrupt.c: 20: TMR1L = 0;
 21597  0051E0  0E00               	movlw	0
 21598  0051E2  6ECE               	movwf	4046,c	;volatile
 21599                           
 21600                           ;Interrupt.c: 21: PIR1bits.TMR1IF = 0;
 21601  0051E4  909E               	bcf	3998,0,c	;volatile
 21602                           
 21603                           ;Interrupt.c: 22: PIE1bits.TMR1IE = 1;
 21604  0051E6  809D               	bsf	3997,0,c	;volatile
 21605                           
 21606                           ;Interrupt.c: 24: INTCON2bits.INTEDG0=0 ;
 21607  0051E8  9CF1               	bcf	intcon2,6,c	;volatile
 21608                           
 21609                           ;Interrupt.c: 25: INTCON2bits.INTEDG1=0;
 21610  0051EA  9AF1               	bcf	intcon2,5,c	;volatile
 21611                           
 21612                           ;Interrupt.c: 26: INTCON2bits.INTEDG2=0;
 21613  0051EC  98F1               	bcf	intcon2,4,c	;volatile
 21614                           
 21615                           ;Interrupt.c: 27: INTCONbits.INT0IF = 0 ;
 21616  0051EE  92F2               	bcf	intcon,1,c	;volatile
 21617                           
 21618                           ;Interrupt.c: 28: INTCON3bits.INT1IF = 0;
 21619  0051F0  90F0               	bcf	intcon3,0,c	;volatile
 21620                           
 21621                           ;Interrupt.c: 29: INTCON3bits.INT2IF =0;
 21622  0051F2  92F0               	bcf	intcon3,1,c	;volatile
 21623                           
 21624                           ;Interrupt.c: 32: INTCONbits.INT0IE =1;
 21625  0051F4  88F2               	bsf	intcon,4,c	;volatile
 21626                           
 21627                           ;Interrupt.c: 33: INTCON3bits.INT1IE=1;
 21628  0051F6  86F0               	bsf	intcon3,3,c	;volatile
 21629                           
 21630                           ;Interrupt.c: 34: INTCON3bits.INT2IE=1;
 21631  0051F8  88F0               	bsf	intcon3,4,c	;volatile
 21632                           
 21633                           ;Interrupt.c: 36: INTCONbits.PEIE = 1;
 21634  0051FA  8CF2               	bsf	intcon,6,c	;volatile
 21635                           
 21636                           ;Interrupt.c: 37: INTCONbits.GIE = 1;
 21637  0051FC  8EF2               	bsf	intcon,7,c	;volatile
 21638  0051FE  0012               	return		;funcret
 21639  005200                     __end_of_init_INTERRUPT:
 21640                           	opt stack 0
 21641                           tblptru	equ	0xFF8
 21642                           tblptrh	equ	0xFF7
 21643                           tblptrl	equ	0xFF6
 21644                           tablat	equ	0xFF5
 21645                           prodh	equ	0xFF4
 21646                           prodl	equ	0xFF3
 21647                           intcon	equ	0xFF2
 21648                           intcon2	equ	0xFF1
 21649                           intcon3	equ	0xFF0
 21650                           postinc0	equ	0xFEE
 21651                           wreg	equ	0xFE8
 21652                           postdec1	equ	0xFE5
 21653                           fsr1l	equ	0xFE1
 21654                           indf2	equ	0xFDF
 21655                           postinc2	equ	0xFDE
 21656                           postdec2	equ	0xFDD
 21657                           fsr2h	equ	0xFDA
 21658                           fsr2l	equ	0xFD9
 21659                           status	equ	0xFD8
 21660                           
 21661 ;; *************** function _Turn_Off_Fan *****************
 21662 ;; Defined at:
 21663 ;;		line 26 in file "Fan_Support.c"
 21664 ;; Parameters:    Size  Location     Type
 21665 ;;		None
 21666 ;; Auto vars:     Size  Location     Type
 21667 ;;		None
 21668 ;; Return value:  Size  Location     Type
 21669 ;;		None               void
 21670 ;; Registers used:
 21671 ;;		wreg, status,2
 21672 ;; Tracked objects:
 21673 ;;		On entry : 0/0
 21674 ;;		On exit  : 0/0
 21675 ;;		Unchanged: 0/0
 21676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21680 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21681 ;;Total ram usage:        0 bytes
 21682 ;; Hardware stack levels used:    1
 21683 ;; Hardware stack levels required when called:    3
 21684 ;; This function calls:
 21685 ;;		Nothing
 21686 ;; This function is called by:
 21687 ;;		_Do_Init
 21688 ;;		_Toggle_Fan
 21689 ;;		_Monitor_Fan
 21690 ;; This function uses a non-reentrant model
 21691 ;;
 21692                           
 21693                           	psect	text109
 21694  005598                     __ptext109:
 21695                           	opt stack 0
 21696  005598                     _Turn_Off_Fan:
 21697                           	opt stack 25
 21698                           
 21699                           ;Fan_Support.c: 28: FAN = 0;
 21700                           
 21701                           ;incstack = 0
 21702  005598  0E00               	movlw	0
 21703  00559A  0100               	movlb	0	; () banked
 21704  00559C  6F9B               	movwf	_FAN& (0+255),b
 21705                           
 21706                           ; BSR set to: 0
 21707                           ;Fan_Support.c: 29: PORTDbits.RD3 = 0;
 21708  00559E  9683               	bcf	3971,3,c	;volatile
 21709                           
 21710                           ; BSR set to: 0
 21711                           ;Fan_Support.c: 30: PORTDbits.RD7 = 0;
 21712  0055A0  9E83               	bcf	3971,7,c	;volatile
 21713                           
 21714                           ; BSR set to: 0
 21715  0055A2  0012               	return		;funcret
 21716  0055A4                     __end_of_Turn_Off_Fan:
 21717                           	opt stack 0
 21718                           tblptru	equ	0xFF8
 21719                           tblptrh	equ	0xFF7
 21720                           tblptrl	equ	0xFF6
 21721                           tablat	equ	0xFF5
 21722                           prodh	equ	0xFF4
 21723                           prodl	equ	0xFF3
 21724                           intcon	equ	0xFF2
 21725                           intcon2	equ	0xFF1
 21726                           intcon3	equ	0xFF0
 21727                           postinc0	equ	0xFEE
 21728                           wreg	equ	0xFE8
 21729                           postdec1	equ	0xFE5
 21730                           fsr1l	equ	0xFE1
 21731                           indf2	equ	0xFDF
 21732                           postinc2	equ	0xFDE
 21733                           postdec2	equ	0xFDD
 21734                           fsr2h	equ	0xFDA
 21735                           fsr2l	equ	0xFD9
 21736                           status	equ	0xFD8
 21737                           
 21738 ;; *************** function _Init_ADC *****************
 21739 ;; Defined at:
 21740 ;;		line 143 in file "utils.c"
 21741 ;; Parameters:    Size  Location     Type
 21742 ;;		None
 21743 ;; Auto vars:     Size  Location     Type
 21744 ;;		None
 21745 ;; Return value:  Size  Location     Type
 21746 ;;		None               void
 21747 ;; Registers used:
 21748 ;;		wreg, status,2
 21749 ;; Tracked objects:
 21750 ;;		On entry : 0/0
 21751 ;;		On exit  : 0/0
 21752 ;;		Unchanged: 0/0
 21753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21757 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21758 ;;Total ram usage:        0 bytes
 21759 ;; Hardware stack levels used:    1
 21760 ;; Hardware stack levels required when called:    3
 21761 ;; This function calls:
 21762 ;;		Nothing
 21763 ;; This function is called by:
 21764 ;;		_Do_Init
 21765 ;; This function uses a non-reentrant model
 21766 ;;
 21767                           
 21768                           	psect	text110
 21769  005558                     __ptext110:
 21770                           	opt stack 0
 21771  005558                     _Init_ADC:
 21772                           	opt stack 26
 21773                           
 21774                           ;utils.c: 146: ADCON0 = 0x00;
 21775                           
 21776                           ; BSR set to: 0
 21777                           ;incstack = 0
 21778  005558  0E00               	movlw	0
 21779  00555A  6EC2               	movwf	4034,c	;volatile
 21780                           
 21781                           ;utils.c: 147: ADCON1 = 0x0E;
 21782  00555C  0E0E               	movlw	14
 21783  00555E  6EC1               	movwf	4033,c	;volatile
 21784                           
 21785                           ;utils.c: 148: ADCON2 = 0xA9;
 21786  005560  0EA9               	movlw	169
 21787  005562  6EC0               	movwf	4032,c	;volatile
 21788  005564  0012               	return		;funcret
 21789  005566                     __end_of_Init_ADC:
 21790                           	opt stack 0
 21791                           tblptru	equ	0xFF8
 21792                           tblptrh	equ	0xFF7
 21793                           tblptrl	equ	0xFF6
 21794                           tablat	equ	0xFF5
 21795                           prodh	equ	0xFF4
 21796                           prodl	equ	0xFF3
 21797                           intcon	equ	0xFF2
 21798                           intcon2	equ	0xFF1
 21799                           intcon3	equ	0xFF0
 21800                           postinc0	equ	0xFEE
 21801                           wreg	equ	0xFE8
 21802                           postdec1	equ	0xFE5
 21803                           fsr1l	equ	0xFE1
 21804                           indf2	equ	0xFDF
 21805                           postinc2	equ	0xFDE
 21806                           postdec2	equ	0xFDD
 21807                           fsr2h	equ	0xFDA
 21808                           fsr2l	equ	0xFD9
 21809                           status	equ	0xFD8
 21810                           
 21811 ;; *************** function _I2C_Init *****************
 21812 ;; Defined at:
 21813 ;;		line 10 in file "I2C_Soft.c"
 21814 ;; Parameters:    Size  Location     Type
 21815 ;;  c               4   16[COMRAM] unsigned long 
 21816 ;; Auto vars:     Size  Location     Type
 21817 ;;		None
 21818 ;; Return value:  Size  Location     Type
 21819 ;;		None               void
 21820 ;; Registers used:
 21821 ;;		wreg, cstack
 21822 ;; Tracked objects:
 21823 ;;		On entry : 0/0
 21824 ;;		On exit  : 0/0
 21825 ;;		Unchanged: 0/0
 21826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21827 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21830 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21831 ;;Total ram usage:        4 bytes
 21832 ;; Hardware stack levels used:    1
 21833 ;; Hardware stack levels required when called:    4
 21834 ;; This function calls:
 21835 ;;		_i2cHighScl
 21836 ;;		_i2cHighSda
 21837 ;; This function is called by:
 21838 ;;		_Do_Init
 21839 ;; This function uses a non-reentrant model
 21840 ;;
 21841                           
 21842                           	psect	text111
 21843  0055B0                     __ptext111:
 21844                           	opt stack 0
 21845  0055B0                     _I2C_Init:
 21846                           	opt stack 25
 21847                           
 21848                           ;I2C_Soft.c: 12: i2cHighScl();
 21849                           
 21850                           ;incstack = 0
 21851  0055B0  ECD2  F02A         	call	_i2cHighScl	;wreg free
 21852                           
 21853                           ;I2C_Soft.c: 13: i2cHighSda();
 21854  0055B4  ECFE  F02A         	call	_i2cHighSda	;wreg free
 21855  0055B8  0012               	return		;funcret
 21856  0055BA                     __end_of_I2C_Init:
 21857                           	opt stack 0
 21858                           tblptru	equ	0xFF8
 21859                           tblptrh	equ	0xFF7
 21860                           tblptrl	equ	0xFF6
 21861                           tablat	equ	0xFF5
 21862                           prodh	equ	0xFF4
 21863                           prodl	equ	0xFF3
 21864                           intcon	equ	0xFF2
 21865                           intcon2	equ	0xFF1
 21866                           intcon3	equ	0xFF0
 21867                           postinc0	equ	0xFEE
 21868                           wreg	equ	0xFE8
 21869                           postdec1	equ	0xFE5
 21870                           fsr1l	equ	0xFE1
 21871                           indf2	equ	0xFDF
 21872                           postinc2	equ	0xFDE
 21873                           postdec2	equ	0xFDD
 21874                           fsr2h	equ	0xFDA
 21875                           fsr2l	equ	0xFD9
 21876                           status	equ	0xFD8
 21877                           
 21878 ;; *************** function _DS1621_Init *****************
 21879 ;; Defined at:
 21880 ;;		line 21 in file "I2C_Support.c"
 21881 ;; Parameters:    Size  Location     Type
 21882 ;;		None
 21883 ;; Auto vars:     Size  Location     Type
 21884 ;;  Device          1   21[COMRAM] unsigned char 
 21885 ;; Return value:  Size  Location     Type
 21886 ;;		None               void
 21887 ;; Registers used:
 21888 ;;		wreg, status,2, status,0, cstack
 21889 ;; Tracked objects:
 21890 ;;		On entry : 0/0
 21891 ;;		On exit  : 0/0
 21892 ;;		Unchanged: 0/0
 21893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21895 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21897 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21898 ;;Total ram usage:        1 bytes
 21899 ;; Hardware stack levels used:    1
 21900 ;; Hardware stack levels required when called:    6
 21901 ;; This function calls:
 21902 ;;		_I2C_Write_Cmd_Only
 21903 ;;		_I2C_Write_Cmd_Write_Data
 21904 ;; This function is called by:
 21905 ;;		_Do_Init
 21906 ;; This function uses a non-reentrant model
 21907 ;;
 21908                           
 21909                           	psect	text112
 21910  005326                     __ptext112:
 21911                           	opt stack 0
 21912  005326                     _DS1621_Init:
 21913                           	opt stack 23
 21914                           
 21915                           ;I2C_Support.c: 23: char Device = 0x48;
 21916                           
 21917                           ;incstack = 0
 21918  005326  0E48               	movlw	72
 21919  005328  6E16               	movwf	DS1621_Init@Device,c
 21920                           
 21921                           ;I2C_Support.c: 24: I2C_Write_Cmd_Write_Data (Device, 0xAC, 0x02);
 21922  00532A  0EAC               	movlw	172
 21923  00532C  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
 21924  00532E  0E02               	movlw	2
 21925  005330  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
 21926  005332  5016               	movf	DS1621_Init@Device,w,c
 21927  005334  EC83  F029         	call	_I2C_Write_Cmd_Write_Data
 21928                           
 21929                           ;I2C_Support.c: 25: I2C_Write_Cmd_Only(Device, 0xEE);
 21930  005338  0EEE               	movlw	238
 21931  00533A  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
 21932  00533C  5016               	movf	DS1621_Init@Device,w,c
 21933  00533E  ECF2  F029         	call	_I2C_Write_Cmd_Only
 21934  005342  0012               	return		;funcret
 21935  005344                     __end_of_DS1621_Init:
 21936                           	opt stack 0
 21937                           tblptru	equ	0xFF8
 21938                           tblptrh	equ	0xFF7
 21939                           tblptrl	equ	0xFF6
 21940                           tablat	equ	0xFF5
 21941                           prodh	equ	0xFF4
 21942                           prodl	equ	0xFF3
 21943                           intcon	equ	0xFF2
 21944                           intcon2	equ	0xFF1
 21945                           intcon3	equ	0xFF0
 21946                           postinc0	equ	0xFEE
 21947                           wreg	equ	0xFE8
 21948                           postdec1	equ	0xFE5
 21949                           fsr1l	equ	0xFE1
 21950                           indf2	equ	0xFDF
 21951                           postinc2	equ	0xFDE
 21952                           postdec2	equ	0xFDD
 21953                           fsr2h	equ	0xFDA
 21954                           fsr2l	equ	0xFD9
 21955                           status	equ	0xFD8
 21956                           
 21957 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
 21958 ;; Defined at:
 21959 ;;		line 148 in file "I2C_Soft.c"
 21960 ;; Parameters:    Size  Location     Type
 21961 ;;  Device          1    wreg     unsigned char 
 21962 ;;  Cmd             1   18[COMRAM] unsigned char 
 21963 ;;  Data_Out        1   19[COMRAM] unsigned char 
 21964 ;; Auto vars:     Size  Location     Type
 21965 ;;  Device          1   20[COMRAM] unsigned char 
 21966 ;; Return value:  Size  Location     Type
 21967 ;;		None               void
 21968 ;; Registers used:
 21969 ;;		wreg, status,2, status,0, cstack
 21970 ;; Tracked objects:
 21971 ;;		On entry : 0/0
 21972 ;;		On exit  : 0/0
 21973 ;;		Unchanged: 0/0
 21974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21975 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21976 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21978 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21979 ;;Total ram usage:        3 bytes
 21980 ;; Hardware stack levels used:    1
 21981 ;; Hardware stack levels required when called:    5
 21982 ;; This function calls:
 21983 ;;		_I2C_Start
 21984 ;;		_I2C_Stop
 21985 ;;		_I2C_Write
 21986 ;; This function is called by:
 21987 ;;		_DS1621_Init
 21988 ;; This function uses a non-reentrant model
 21989 ;;
 21990                           
 21991                           	psect	text113
 21992  005306                     __ptext113:
 21993                           	opt stack 0
 21994  005306                     _I2C_Write_Cmd_Write_Data:
 21995                           	opt stack 23
 21996                           
 21997                           ;incstack = 0
 21998                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
 21999  005306  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
 22000                           
 22001                           ;I2C_Soft.c: 150: I2C_Start();
 22002  005308  EC6B  F02A         	call	_I2C_Start	;wreg free
 22003                           
 22004                           ;I2C_Soft.c: 151: I2C_Write((Device << 1) | 0);
 22005  00530C  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
 22006  00530E  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
 22007  005310  ECC0  F027         	call	_I2C_Write
 22008                           
 22009                           ;I2C_Soft.c: 152: I2C_Write(Cmd);
 22010  005314  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
 22011  005316  ECC0  F027         	call	_I2C_Write
 22012                           
 22013                           ;I2C_Soft.c: 153: I2C_Write(Data_Out);
 22014  00531A  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
 22015  00531C  ECC0  F027         	call	_I2C_Write
 22016                           
 22017                           ;I2C_Soft.c: 154: I2C_Stop();
 22018  005320  EC62  F02A         	call	_I2C_Stop	;wreg free
 22019  005324  0012               	return		;funcret
 22020  005326                     __end_of_I2C_Write_Cmd_Write_Data:
 22021                           	opt stack 0
 22022                           tblptru	equ	0xFF8
 22023                           tblptrh	equ	0xFF7
 22024                           tblptrl	equ	0xFF6
 22025                           tablat	equ	0xFF5
 22026                           prodh	equ	0xFF4
 22027                           prodl	equ	0xFF3
 22028                           intcon	equ	0xFF2
 22029                           intcon2	equ	0xFF1
 22030                           intcon3	equ	0xFF0
 22031                           postinc0	equ	0xFEE
 22032                           wreg	equ	0xFE8
 22033                           postdec1	equ	0xFE5
 22034                           fsr1l	equ	0xFE1
 22035                           indf2	equ	0xFDF
 22036                           postinc2	equ	0xFDE
 22037                           postdec2	equ	0xFDD
 22038                           fsr2h	equ	0xFDA
 22039                           fsr2l	equ	0xFD9
 22040                           status	equ	0xFD8
 22041                           
 22042 ;; *************** function _I2C_Write_Cmd_Only *****************
 22043 ;; Defined at:
 22044 ;;		line 140 in file "I2C_Soft.c"
 22045 ;; Parameters:    Size  Location     Type
 22046 ;;  Device          1    wreg     unsigned char 
 22047 ;;  Cmd             1   18[COMRAM] unsigned char 
 22048 ;; Auto vars:     Size  Location     Type
 22049 ;;  Device          1   19[COMRAM] unsigned char 
 22050 ;; Return value:  Size  Location     Type
 22051 ;;		None               void
 22052 ;; Registers used:
 22053 ;;		wreg, status,2, status,0, cstack
 22054 ;; Tracked objects:
 22055 ;;		On entry : 0/0
 22056 ;;		On exit  : 0/0
 22057 ;;		Unchanged: 0/0
 22058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22059 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22060 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22062 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22063 ;;Total ram usage:        2 bytes
 22064 ;; Hardware stack levels used:    1
 22065 ;; Hardware stack levels required when called:    5
 22066 ;; This function calls:
 22067 ;;		_I2C_Start
 22068 ;;		_I2C_Stop
 22069 ;;		_I2C_Write
 22070 ;; This function is called by:
 22071 ;;		_DS1621_Init
 22072 ;; This function uses a non-reentrant model
 22073 ;;
 22074                           
 22075                           	psect	text114
 22076  0053E4                     __ptext114:
 22077                           	opt stack 0
 22078  0053E4                     _I2C_Write_Cmd_Only:
 22079                           	opt stack 23
 22080                           
 22081                           ;incstack = 0
 22082                           ;I2C_Write_Cmd_Only@Device stored from wreg
 22083  0053E4  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
 22084                           
 22085                           ;I2C_Soft.c: 142: I2C_Start();
 22086  0053E6  EC6B  F02A         	call	_I2C_Start	;wreg free
 22087                           
 22088                           ;I2C_Soft.c: 143: I2C_Write((Device << 1) | 0);
 22089  0053EA  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
 22090  0053EC  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
 22091  0053EE  ECC0  F027         	call	_I2C_Write
 22092                           
 22093                           ;I2C_Soft.c: 144: I2C_Write(Cmd);
 22094  0053F2  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
 22095  0053F4  ECC0  F027         	call	_I2C_Write
 22096                           
 22097                           ;I2C_Soft.c: 145: I2C_Stop();
 22098  0053F8  EC62  F02A         	call	_I2C_Stop	;wreg free
 22099  0053FC  0012               	return		;funcret
 22100  0053FE                     __end_of_I2C_Write_Cmd_Only:
 22101                           	opt stack 0
 22102                           tblptru	equ	0xFF8
 22103                           tblptrh	equ	0xFF7
 22104                           tblptrl	equ	0xFF6
 22105                           tablat	equ	0xFF5
 22106                           prodh	equ	0xFF4
 22107                           prodl	equ	0xFF3
 22108                           intcon	equ	0xFF2
 22109                           intcon2	equ	0xFF1
 22110                           intcon3	equ	0xFF0
 22111                           postinc0	equ	0xFEE
 22112                           wreg	equ	0xFE8
 22113                           postdec1	equ	0xFE5
 22114                           fsr1l	equ	0xFE1
 22115                           indf2	equ	0xFDF
 22116                           postinc2	equ	0xFDE
 22117                           postdec2	equ	0xFDD
 22118                           fsr2h	equ	0xFDA
 22119                           fsr2l	equ	0xFD9
 22120                           status	equ	0xFD8
 22121                           
 22122 ;; *************** function _DS3231_Setup_Time *****************
 22123 ;; Defined at:
 22124 ;;		line 65 in file "I2C_Support.c"
 22125 ;; Parameters:    Size  Location     Type
 22126 ;;		None
 22127 ;; Auto vars:     Size  Location     Type
 22128 ;;  Address         1   19[COMRAM] unsigned char 
 22129 ;;  Device          1   18[COMRAM] unsigned char 
 22130 ;; Return value:  Size  Location     Type
 22131 ;;		None               void
 22132 ;; Registers used:
 22133 ;;		wreg, status,2, status,0, cstack
 22134 ;; Tracked objects:
 22135 ;;		On entry : 0/0
 22136 ;;		On exit  : 0/0
 22137 ;;		Unchanged: 0/0
 22138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22140 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22142 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22143 ;;Total ram usage:        2 bytes
 22144 ;; Hardware stack levels used:    1
 22145 ;; Hardware stack levels required when called:    5
 22146 ;; This function calls:
 22147 ;;		_I2C_Start
 22148 ;;		_I2C_Stop
 22149 ;;		_I2C_Write
 22150 ;; This function is called by:
 22151 ;;		_main
 22152 ;; This function uses a non-reentrant model
 22153 ;;
 22154                           
 22155                           	psect	text115
 22156  004896                     __ptext115:
 22157                           	opt stack 0
 22158  004896                     _DS3231_Setup_Time:
 22159                           	opt stack 25
 22160                           
 22161                           ;I2C_Support.c: 67: char Device = 0x68;
 22162                           
 22163                           ;incstack = 0
 22164  004896  0E68               	movlw	104
 22165  004898  6E13               	movwf	DS3231_Setup_Time@Device,c
 22166                           
 22167                           ;I2C_Support.c: 68: char Address = 0x00;
 22168  00489A  0E00               	movlw	0
 22169  00489C  6E14               	movwf	DS3231_Setup_Time@Address,c
 22170                           
 22171                           ;I2C_Support.c: 69: second = 0x00;
 22172  00489E  0E00               	movlw	0
 22173  0048A0  6E6C               	movwf	_second,c
 22174                           
 22175                           ;I2C_Support.c: 70: minute = 0x01;
 22176  0048A2  0E01               	movlw	1
 22177  0048A4  6E6A               	movwf	_minute,c
 22178                           
 22179                           ;I2C_Support.c: 71: hour = 0x13;
 22180  0048A6  0E13               	movlw	19
 22181  0048A8  6E69               	movwf	_hour,c
 22182                           
 22183                           ;I2C_Support.c: 72: dow = 0x01;
 22184  0048AA  0E01               	movlw	1
 22185  0048AC  0100               	movlb	0	; () banked
 22186  0048AE  6FAA               	movwf	_dow& (0+255),b
 22187                           
 22188                           ;I2C_Support.c: 73: day = 0x30;
 22189  0048B0  0E30               	movlw	48
 22190  0048B2  6E68               	movwf	_day,c
 22191                           
 22192                           ;I2C_Support.c: 74: month = 0x11;
 22193  0048B4  0E11               	movlw	17
 22194  0048B6  6E6B               	movwf	_month,c
 22195                           
 22196                           ;I2C_Support.c: 75: year = 0x23;
 22197  0048B8  0E23               	movlw	35
 22198  0048BA  6E6F               	movwf	_year,c
 22199                           
 22200                           ; BSR set to: 0
 22201                           ;I2C_Support.c: 76: I2C_Start();
 22202  0048BC  EC6B  F02A         	call	_I2C_Start	;wreg free
 22203                           
 22204                           ;I2C_Support.c: 77: I2C_Write((Device << 1) | 0);
 22205  0048C0  5013               	movf	DS3231_Setup_Time@Device,w,c
 22206  0048C2  2413               	addwf	DS3231_Setup_Time@Device,w,c
 22207  0048C4  ECC0  F027         	call	_I2C_Write
 22208                           
 22209                           ;I2C_Support.c: 78: I2C_Write(Address);
 22210  0048C8  5014               	movf	DS3231_Setup_Time@Address,w,c
 22211  0048CA  ECC0  F027         	call	_I2C_Write
 22212                           
 22213                           ;I2C_Support.c: 79: I2C_Write(second);
 22214  0048CE  506C               	movf	_second,w,c
 22215  0048D0  ECC0  F027         	call	_I2C_Write
 22216                           
 22217                           ;I2C_Support.c: 80: I2C_Write(minute);
 22218  0048D4  506A               	movf	_minute,w,c
 22219  0048D6  ECC0  F027         	call	_I2C_Write
 22220                           
 22221                           ;I2C_Support.c: 81: I2C_Write(hour);
 22222  0048DA  5069               	movf	_hour,w,c
 22223  0048DC  ECC0  F027         	call	_I2C_Write
 22224                           
 22225                           ;I2C_Support.c: 82: I2C_Write(dow);
 22226  0048E0  0100               	movlb	0	; () banked
 22227  0048E2  51AA               	movf	_dow& (0+255),w,b
 22228  0048E4  ECC0  F027         	call	_I2C_Write
 22229                           
 22230                           ;I2C_Support.c: 83: I2C_Write(day);
 22231  0048E8  5068               	movf	_day,w,c
 22232  0048EA  ECC0  F027         	call	_I2C_Write
 22233                           
 22234                           ;I2C_Support.c: 84: I2C_Write(month);
 22235  0048EE  506B               	movf	_month,w,c
 22236  0048F0  ECC0  F027         	call	_I2C_Write
 22237                           
 22238                           ;I2C_Support.c: 85: I2C_Write(year);
 22239  0048F4  506F               	movf	_year,w,c
 22240  0048F6  ECC0  F027         	call	_I2C_Write
 22241                           
 22242                           ;I2C_Support.c: 86: I2C_Stop();
 22243  0048FA  EC62  F02A         	call	_I2C_Stop	;wreg free
 22244  0048FE  0012               	return		;funcret
 22245  004900                     __end_of_DS3231_Setup_Time:
 22246                           	opt stack 0
 22247                           tblptru	equ	0xFF8
 22248                           tblptrh	equ	0xFF7
 22249                           tblptrl	equ	0xFF6
 22250                           tablat	equ	0xFF5
 22251                           prodh	equ	0xFF4
 22252                           prodl	equ	0xFF3
 22253                           intcon	equ	0xFF2
 22254                           intcon2	equ	0xFF1
 22255                           intcon3	equ	0xFF0
 22256                           postinc0	equ	0xFEE
 22257                           wreg	equ	0xFE8
 22258                           postdec1	equ	0xFE5
 22259                           fsr1l	equ	0xFE1
 22260                           indf2	equ	0xFDF
 22261                           postinc2	equ	0xFDE
 22262                           postdec2	equ	0xFDD
 22263                           fsr2h	equ	0xFDA
 22264                           fsr2l	equ	0xFD9
 22265                           status	equ	0xFD8
 22266                           
 22267 ;; *************** function _DS1621_Read_Temp *****************
 22268 ;; Defined at:
 22269 ;;		line 28 in file "I2C_Support.c"
 22270 ;; Parameters:    Size  Location     Type
 22271 ;;		None
 22272 ;; Auto vars:     Size  Location     Type
 22273 ;;  Device          1   23[COMRAM] unsigned char 
 22274 ;;  Data_Ret        1   22[COMRAM] unsigned char 
 22275 ;;  Cmd             1   21[COMRAM] unsigned char 
 22276 ;; Return value:  Size  Location     Type
 22277 ;;                  2   19[COMRAM] int 
 22278 ;; Registers used:
 22279 ;;		wreg, status,2, status,0, cstack
 22280 ;; Tracked objects:
 22281 ;;		On entry : 0/0
 22282 ;;		On exit  : 0/0
 22283 ;;		Unchanged: 0/0
 22284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22285 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22286 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22288 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22289 ;;Total ram usage:        5 bytes
 22290 ;; Hardware stack levels used:    1
 22291 ;; Hardware stack levels required when called:    6
 22292 ;; This function calls:
 22293 ;;		_I2C_ReStart
 22294 ;;		_I2C_Read
 22295 ;;		_I2C_Start
 22296 ;;		_I2C_Stop
 22297 ;;		_I2C_Write
 22298 ;; This function is called by:
 22299 ;;		_main
 22300 ;; This function uses a non-reentrant model
 22301 ;;
 22302                           
 22303                           	psect	text116
 22304  004FFA                     __ptext116:
 22305                           	opt stack 0
 22306  004FFA                     _DS1621_Read_Temp:
 22307                           	opt stack 24
 22308                           
 22309                           ;I2C_Support.c: 31: char Device = 0x48;
 22310                           
 22311                           ;incstack = 0
 22312  004FFA  0E48               	movlw	72
 22313  004FFC  6E18               	movwf	DS1621_Read_Temp@Device,c
 22314                           
 22315                           ;I2C_Support.c: 32: char Cmd = 0xAA;
 22316  004FFE  0EAA               	movlw	170
 22317  005000  6E16               	movwf	DS1621_Read_Temp@Cmd,c
 22318                           
 22319                           ;I2C_Support.c: 33: char Data_Ret;
 22320                           ;I2C_Support.c: 34: I2C_Start();
 22321  005002  EC6B  F02A         	call	_I2C_Start	;wreg free
 22322                           
 22323                           ;I2C_Support.c: 35: I2C_Write((Device << 1) | 0);
 22324  005006  5018               	movf	DS1621_Read_Temp@Device,w,c
 22325  005008  2418               	addwf	DS1621_Read_Temp@Device,w,c
 22326  00500A  ECC0  F027         	call	_I2C_Write
 22327                           
 22328                           ;I2C_Support.c: 36: I2C_Write(Cmd);
 22329  00500E  5016               	movf	DS1621_Read_Temp@Cmd,w,c
 22330  005010  ECC0  F027         	call	_I2C_Write
 22331                           
 22332                           ;I2C_Support.c: 37: I2C_ReStart();
 22333  005014  EC0B  F02A         	call	_I2C_ReStart	;wreg free
 22334                           
 22335                           ;I2C_Support.c: 38: I2C_Write((Device << 1) | 1);
 22336  005018  80D8               	bsf	status,0,c
 22337  00501A  3418               	rlcf	DS1621_Read_Temp@Device,w,c
 22338  00501C  ECC0  F027         	call	_I2C_Write
 22339                           
 22340                           ;I2C_Support.c: 39: Data_Ret = I2C_Read(0);
 22341  005020  0E00               	movlw	0
 22342  005022  EC1D  F027         	call	_I2C_Read
 22343  005026  6E17               	movwf	DS1621_Read_Temp@Data_Ret,c
 22344                           
 22345                           ;I2C_Support.c: 40: I2C_Stop();
 22346  005028  EC62  F02A         	call	_I2C_Stop	;wreg free
 22347                           
 22348                           ;I2C_Support.c: 41: return Data_Ret;
 22349  00502C  C017  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
 22350  005030  6A15               	clrf	?_DS1621_Read_Temp+1,c
 22351  005032  D000               	goto	l66
 22352  005034                     l66:
 22353  005034  0012               	return		;funcret
 22354  005036                     __end_of_DS1621_Read_Temp:
 22355                           	opt stack 0
 22356                           tblptru	equ	0xFF8
 22357                           tblptrh	equ	0xFF7
 22358                           tblptrl	equ	0xFF6
 22359                           tablat	equ	0xFF5
 22360                           prodh	equ	0xFF4
 22361                           prodl	equ	0xFF3
 22362                           intcon	equ	0xFF2
 22363                           intcon2	equ	0xFF1
 22364                           intcon3	equ	0xFF0
 22365                           postinc0	equ	0xFEE
 22366                           wreg	equ	0xFE8
 22367                           postdec1	equ	0xFE5
 22368                           fsr1l	equ	0xFE1
 22369                           indf2	equ	0xFDF
 22370                           postinc2	equ	0xFDE
 22371                           postdec2	equ	0xFDD
 22372                           fsr2h	equ	0xFDA
 22373                           fsr2l	equ	0xFD9
 22374                           status	equ	0xFD8
 22375                           
 22376 ;; *************** function _I2C_Write *****************
 22377 ;; Defined at:
 22378 ;;		line 37 in file "I2C_Soft.c"
 22379 ;; Parameters:    Size  Location     Type
 22380 ;;  outByte         1    wreg     unsigned char 
 22381 ;; Auto vars:     Size  Location     Type
 22382 ;;  outByte         1   16[COMRAM] unsigned char 
 22383 ;;  n               1   17[COMRAM] unsigned char 
 22384 ;; Return value:  Size  Location     Type
 22385 ;;		None               void
 22386 ;; Registers used:
 22387 ;;		wreg, status,2, status,0, cstack
 22388 ;; Tracked objects:
 22389 ;;		On entry : 0/0
 22390 ;;		On exit  : 0/0
 22391 ;;		Unchanged: 0/0
 22392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22394 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22396 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22397 ;;Total ram usage:        2 bytes
 22398 ;; Hardware stack levels used:    1
 22399 ;; Hardware stack levels required when called:    4
 22400 ;; This function calls:
 22401 ;;		_i2cHighScl
 22402 ;;		_i2cHighSda
 22403 ;;		_i2cLowScl
 22404 ;;		_i2cLowSda
 22405 ;; This function is called by:
 22406 ;;		_DS1621_Read_Temp
 22407 ;;		_DS3231_Read_Time
 22408 ;;		_DS3231_Setup_Time
 22409 ;;		_DS3231_Write_Time
 22410 ;;		_DS3231_Read_Alarm_Time
 22411 ;;		_DS3231_Init
 22412 ;;		_DS3231_Write_Alarm_Time
 22413 ;;		_I2C_Write_Address_Read_One_Byte
 22414 ;;		_I2C_Write_Address_Write_One_Byte
 22415 ;;		_I2C_Write_Cmd_Only
 22416 ;;		_I2C_Write_Cmd_Write_Data
 22417 ;;		_DS3231_Write_Initial_Alarm_Time
 22418 ;;		_I2C_Write_Cmd_Read_One_Byte
 22419 ;; This function uses a non-reentrant model
 22420 ;;
 22421                           
 22422                           	psect	text117
 22423  004F80                     __ptext117:
 22424                           	opt stack 0
 22425  004F80                     _I2C_Write:
 22426                           	opt stack 23
 22427                           
 22428                           ;incstack = 0
 22429                           ;I2C_Write@outByte stored from wreg
 22430  004F80  6E11               	movwf	I2C_Write@outByte,c
 22431                           
 22432                           ;I2C_Soft.c: 39: unsigned char n;
 22433                           ;I2C_Soft.c: 40: for(n=0; n<8; n++)
 22434  004F82  0E00               	movlw	0
 22435  004F84  6E12               	movwf	I2C_Write@n,c
 22436  004F86                     l6138:
 22437  004F86  0E07               	movlw	7
 22438  004F88  6412               	cpfsgt	I2C_Write@n,c
 22439  004F8A  D001               	goto	l1201
 22440  004F8C  D011               	goto	l6156
 22441  004F8E                     l1201:
 22442                           
 22443                           ;I2C_Soft.c: 41: {
 22444                           ;I2C_Soft.c: 42: if(outByte&0x80) i2cHighSda();
 22445  004F8E  AE11               	btfss	I2C_Write@outByte,7,c
 22446  004F90  D003               	goto	l6144
 22447  004F92  ECFE  F02A         	call	_i2cHighSda	;wreg free
 22448  004F96  D003               	goto	l6146
 22449  004F98                     l6144:
 22450                           
 22451                           ;I2C_Soft.c: 43: else i2cLowSda();
 22452  004F98  ECE2  F02A         	call	_i2cLowSda	;wreg free
 22453  004F9C  D000               	goto	l6146
 22454  004F9E                     l6146:
 22455                           
 22456                           ;I2C_Soft.c: 44: i2cHighScl();
 22457  004F9E  ECD2  F02A         	call	_i2cHighScl	;wreg free
 22458                           
 22459                           ;I2C_Soft.c: 45: i2cLowScl();
 22460  004FA2  ECFA  F02A         	call	_i2cLowScl	;wreg free
 22461                           
 22462                           ;I2C_Soft.c: 46: outByte = outByte << 1;
 22463  004FA6  5011               	movf	I2C_Write@outByte,w,c
 22464  004FA8  2411               	addwf	I2C_Write@outByte,w,c
 22465  004FAA  6E11               	movwf	I2C_Write@outByte,c
 22466  004FAC  2A12               	incf	I2C_Write@n,f,c
 22467  004FAE  D7EB               	goto	l6138
 22468  004FB0                     l6156:
 22469                           
 22470                           ;I2C_Soft.c: 47: }
 22471                           ;I2C_Soft.c: 48: i2cHighSda();
 22472  004FB0  ECFE  F02A         	call	_i2cHighSda	;wreg free
 22473                           
 22474                           ;I2C_Soft.c: 49: i2cHighScl();
 22475  004FB4  ECD2  F02A         	call	_i2cHighScl	;wreg free
 22476                           
 22477                           ;I2C_Soft.c: 50: i2cLowScl();
 22478  004FB8  ECFA  F02A         	call	_i2cLowScl	;wreg free
 22479  004FBC  0012               	return		;funcret
 22480  004FBE                     __end_of_I2C_Write:
 22481                           	opt stack 0
 22482                           tblptru	equ	0xFF8
 22483                           tblptrh	equ	0xFF7
 22484                           tblptrl	equ	0xFF6
 22485                           tablat	equ	0xFF5
 22486                           prodh	equ	0xFF4
 22487                           prodl	equ	0xFF3
 22488                           intcon	equ	0xFF2
 22489                           intcon2	equ	0xFF1
 22490                           intcon3	equ	0xFF0
 22491                           postinc0	equ	0xFEE
 22492                           wreg	equ	0xFE8
 22493                           postdec1	equ	0xFE5
 22494                           fsr1l	equ	0xFE1
 22495                           indf2	equ	0xFDF
 22496                           postinc2	equ	0xFDE
 22497                           postdec2	equ	0xFDD
 22498                           fsr2h	equ	0xFDA
 22499                           fsr2l	equ	0xFD9
 22500                           status	equ	0xFD8
 22501                           
 22502 ;; *************** function _I2C_Stop *****************
 22503 ;; Defined at:
 22504 ;;		line 84 in file "I2C_Soft.c"
 22505 ;; Parameters:    Size  Location     Type
 22506 ;;		None
 22507 ;; Auto vars:     Size  Location     Type
 22508 ;;		None
 22509 ;; Return value:  Size  Location     Type
 22510 ;;		None               void
 22511 ;; Registers used:
 22512 ;;		wreg, cstack
 22513 ;; Tracked objects:
 22514 ;;		On entry : 0/0
 22515 ;;		On exit  : 0/0
 22516 ;;		Unchanged: 0/0
 22517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22522 ;;Total ram usage:        0 bytes
 22523 ;; Hardware stack levels used:    1
 22524 ;; Hardware stack levels required when called:    4
 22525 ;; This function calls:
 22526 ;;		_i2cHighScl
 22527 ;;		_i2cHighSda
 22528 ;;		_i2cLowScl
 22529 ;;		_i2cLowSda
 22530 ;; This function is called by:
 22531 ;;		_DS1621_Read_Temp
 22532 ;;		_DS3231_Read_Time
 22533 ;;		_DS3231_Setup_Time
 22534 ;;		_DS3231_Write_Time
 22535 ;;		_DS3231_Read_Alarm_Time
 22536 ;;		_DS3231_Init
 22537 ;;		_DS3231_Write_Alarm_Time
 22538 ;;		_I2C_Write_Address_Read_One_Byte
 22539 ;;		_I2C_Write_Address_Write_One_Byte
 22540 ;;		_I2C_Write_Cmd_Only
 22541 ;;		_I2C_Write_Cmd_Write_Data
 22542 ;;		_DS3231_Write_Initial_Alarm_Time
 22543 ;;		_I2C_Write_Cmd_Read_One_Byte
 22544 ;; This function uses a non-reentrant model
 22545 ;;
 22546                           
 22547                           	psect	text118
 22548  0054C4                     __ptext118:
 22549                           	opt stack 0
 22550  0054C4                     _I2C_Stop:
 22551                           	opt stack 23
 22552                           
 22553                           ;I2C_Soft.c: 86: i2cLowScl();
 22554                           
 22555                           ;incstack = 0
 22556  0054C4  ECFA  F02A         	call	_i2cLowScl	;wreg free
 22557                           
 22558                           ;I2C_Soft.c: 87: i2cLowSda();
 22559  0054C8  ECE2  F02A         	call	_i2cLowSda	;wreg free
 22560                           
 22561                           ;I2C_Soft.c: 88: i2cHighScl();
 22562  0054CC  ECD2  F02A         	call	_i2cHighScl	;wreg free
 22563                           
 22564                           ;I2C_Soft.c: 89: i2cHighSda();
 22565  0054D0  ECFE  F02A         	call	_i2cHighSda	;wreg free
 22566  0054D4  0012               	return		;funcret
 22567  0054D6                     __end_of_I2C_Stop:
 22568                           	opt stack 0
 22569                           tblptru	equ	0xFF8
 22570                           tblptrh	equ	0xFF7
 22571                           tblptrl	equ	0xFF6
 22572                           tablat	equ	0xFF5
 22573                           prodh	equ	0xFF4
 22574                           prodl	equ	0xFF3
 22575                           intcon	equ	0xFF2
 22576                           intcon2	equ	0xFF1
 22577                           intcon3	equ	0xFF0
 22578                           postinc0	equ	0xFEE
 22579                           wreg	equ	0xFE8
 22580                           postdec1	equ	0xFE5
 22581                           fsr1l	equ	0xFE1
 22582                           indf2	equ	0xFDF
 22583                           postinc2	equ	0xFDE
 22584                           postdec2	equ	0xFDD
 22585                           fsr2h	equ	0xFDA
 22586                           fsr2l	equ	0xFD9
 22587                           status	equ	0xFD8
 22588                           
 22589 ;; *************** function _I2C_Start *****************
 22590 ;; Defined at:
 22591 ;;		line 67 in file "I2C_Soft.c"
 22592 ;; Parameters:    Size  Location     Type
 22593 ;;		None
 22594 ;; Auto vars:     Size  Location     Type
 22595 ;;		None
 22596 ;; Return value:  Size  Location     Type
 22597 ;;		None               void
 22598 ;; Registers used:
 22599 ;;		wreg, cstack
 22600 ;; Tracked objects:
 22601 ;;		On entry : 0/0
 22602 ;;		On exit  : 0/0
 22603 ;;		Unchanged: 0/0
 22604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22609 ;;Total ram usage:        0 bytes
 22610 ;; Hardware stack levels used:    1
 22611 ;; Hardware stack levels required when called:    4
 22612 ;; This function calls:
 22613 ;;		_i2cHighScl
 22614 ;;		_i2cHighSda
 22615 ;;		_i2cLowScl
 22616 ;;		_i2cLowSda
 22617 ;; This function is called by:
 22618 ;;		_DS1621_Read_Temp
 22619 ;;		_DS3231_Read_Time
 22620 ;;		_DS3231_Setup_Time
 22621 ;;		_DS3231_Write_Time
 22622 ;;		_DS3231_Read_Alarm_Time
 22623 ;;		_DS3231_Init
 22624 ;;		_DS3231_Write_Alarm_Time
 22625 ;;		_I2C_Write_Address_Read_One_Byte
 22626 ;;		_I2C_Write_Address_Write_One_Byte
 22627 ;;		_I2C_Write_Cmd_Only
 22628 ;;		_I2C_Write_Cmd_Write_Data
 22629 ;;		_DS3231_Write_Initial_Alarm_Time
 22630 ;;		_I2C_Write_Cmd_Read_One_Byte
 22631 ;; This function uses a non-reentrant model
 22632 ;;
 22633                           
 22634                           	psect	text119
 22635  0054D6                     __ptext119:
 22636                           	opt stack 0
 22637  0054D6                     _I2C_Start:
 22638                           	opt stack 23
 22639                           
 22640                           ;I2C_Soft.c: 69: i2cHighSda();
 22641                           
 22642                           ;incstack = 0
 22643  0054D6  ECFE  F02A         	call	_i2cHighSda	;wreg free
 22644                           
 22645                           ;I2C_Soft.c: 70: i2cHighScl();
 22646  0054DA  ECD2  F02A         	call	_i2cHighScl	;wreg free
 22647                           
 22648                           ;I2C_Soft.c: 71: i2cLowSda();
 22649  0054DE  ECE2  F02A         	call	_i2cLowSda	;wreg free
 22650                           
 22651                           ;I2C_Soft.c: 72: i2cLowScl();
 22652  0054E2  ECFA  F02A         	call	_i2cLowScl	;wreg free
 22653  0054E6  0012               	return		;funcret
 22654  0054E8                     __end_of_I2C_Start:
 22655                           	opt stack 0
 22656                           tblptru	equ	0xFF8
 22657                           tblptrh	equ	0xFF7
 22658                           tblptrl	equ	0xFF6
 22659                           tablat	equ	0xFF5
 22660                           prodh	equ	0xFF4
 22661                           prodl	equ	0xFF3
 22662                           intcon	equ	0xFF2
 22663                           intcon2	equ	0xFF1
 22664                           intcon3	equ	0xFF0
 22665                           postinc0	equ	0xFEE
 22666                           wreg	equ	0xFE8
 22667                           postdec1	equ	0xFE5
 22668                           fsr1l	equ	0xFE1
 22669                           indf2	equ	0xFDF
 22670                           postinc2	equ	0xFDE
 22671                           postdec2	equ	0xFDD
 22672                           fsr2h	equ	0xFDA
 22673                           fsr2l	equ	0xFD9
 22674                           status	equ	0xFD8
 22675                           
 22676 ;; *************** function _I2C_Read *****************
 22677 ;; Defined at:
 22678 ;;		line 16 in file "I2C_Soft.c"
 22679 ;; Parameters:    Size  Location     Type
 22680 ;;  ack             1    wreg     unsigned char 
 22681 ;; Auto vars:     Size  Location     Type
 22682 ;;  ack             1   16[COMRAM] unsigned char 
 22683 ;;  inByte          1   18[COMRAM] unsigned char 
 22684 ;;  n               1   17[COMRAM] unsigned char 
 22685 ;; Return value:  Size  Location     Type
 22686 ;;                  1    wreg      unsigned char 
 22687 ;; Registers used:
 22688 ;;		wreg, status,2, status,0, cstack
 22689 ;; Tracked objects:
 22690 ;;		On entry : 0/0
 22691 ;;		On exit  : 0/0
 22692 ;;		Unchanged: 0/0
 22693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22695 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22697 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22698 ;;Total ram usage:        3 bytes
 22699 ;; Hardware stack levels used:    1
 22700 ;; Hardware stack levels required when called:    5
 22701 ;; This function calls:
 22702 ;;		_i2cAck
 22703 ;;		_i2cHighScl
 22704 ;;		_i2cHighSda
 22705 ;;		_i2cLowScl
 22706 ;;		_i2cNack
 22707 ;; This function is called by:
 22708 ;;		_DS1621_Read_Temp
 22709 ;;		_DS3231_Read_Time
 22710 ;;		_DS3231_Read_Alarm_Time
 22711 ;;		_DS3231_Init
 22712 ;;		_I2C_Write_Address_Read_One_Byte
 22713 ;;		_I2C_Write_Cmd_Read_One_Byte
 22714 ;; This function uses a non-reentrant model
 22715 ;;
 22716                           
 22717                           	psect	text120
 22718  004E3A                     __ptext120:
 22719                           	opt stack 0
 22720  004E3A                     _I2C_Read:
 22721                           	opt stack 22
 22722                           
 22723                           ;incstack = 0
 22724                           ;I2C_Read@ack stored from wreg
 22725  004E3A  6E11               	movwf	I2C_Read@ack,c
 22726                           
 22727                           ;I2C_Soft.c: 18: unsigned char inByte, n;
 22728                           ;I2C_Soft.c: 19: i2cHighSda();
 22729  004E3C  ECFE  F02A         	call	_i2cHighSda	;wreg free
 22730                           
 22731                           ;I2C_Soft.c: 20: for (n=0; n<8; n++)
 22732  004E40  0E00               	movlw	0
 22733  004E42  6E12               	movwf	I2C_Read@n,c
 22734  004E44                     l6174:
 22735  004E44  0E07               	movlw	7
 22736  004E46  6412               	cpfsgt	I2C_Read@n,c
 22737  004E48  D001               	goto	l6178
 22738  004E4A  D00F               	goto	l6192
 22739  004E4C                     l6178:
 22740                           
 22741                           ;I2C_Soft.c: 21: {
 22742                           ;I2C_Soft.c: 22: i2cHighScl();
 22743  004E4C  ECD2  F02A         	call	_i2cHighScl	;wreg free
 22744                           
 22745                           ;I2C_Soft.c: 24: if (PORTBbits.RB5)
 22746  004E50  AA81               	btfss	3969,5,c	;volatile
 22747  004E52  D003               	goto	l6184
 22748                           
 22749                           ;I2C_Soft.c: 25: inByte = (inByte << 1) | 0x01;
 22750  004E54  80D8               	bsf	status,0,c
 22751  004E56  3613               	rlcf	I2C_Read@inByte,f,c
 22752  004E58  D004               	goto	l6186
 22753  004E5A                     l6184:
 22754                           
 22755                           ;I2C_Soft.c: 26: else
 22756                           ;I2C_Soft.c: 27: inByte = inByte << 1;
 22757  004E5A  5013               	movf	I2C_Read@inByte,w,c
 22758  004E5C  2413               	addwf	I2C_Read@inByte,w,c
 22759  004E5E  6E13               	movwf	I2C_Read@inByte,c
 22760  004E60  D000               	goto	l6186
 22761  004E62                     l6186:
 22762                           
 22763                           ;I2C_Soft.c: 28: i2cLowScl();
 22764  004E62  ECFA  F02A         	call	_i2cLowScl	;wreg free
 22765  004E66  2A12               	incf	I2C_Read@n,f,c
 22766  004E68  D7ED               	goto	l6174
 22767  004E6A                     l6192:
 22768                           
 22769                           ;I2C_Soft.c: 29: }
 22770                           ;I2C_Soft.c: 30: if (ack) i2cAck();
 22771  004E6A  5011               	movf	I2C_Read@ack,w,c
 22772  004E6C  B4D8               	btfsc	status,2,c
 22773  004E6E  D003               	goto	l6196
 22774  004E70  EC74  F02A         	call	_i2cAck	;wreg free
 22775  004E74  D003               	goto	l6198
 22776  004E76                     l6196:
 22777                           
 22778                           ;I2C_Soft.c: 31: else i2cNack();
 22779  004E76  ECDD  F02A         	call	_i2cNack	;wreg free
 22780  004E7A  D000               	goto	l6198
 22781  004E7C                     l6198:
 22782                           
 22783                           ;I2C_Soft.c: 34: return(inByte);
 22784  004E7C  5013               	movf	I2C_Read@inByte,w,c
 22785  004E7E  D000               	goto	l1198
 22786  004E80                     l1198:
 22787  004E80  0012               	return		;funcret
 22788  004E82                     __end_of_I2C_Read:
 22789                           	opt stack 0
 22790                           tblptru	equ	0xFF8
 22791                           tblptrh	equ	0xFF7
 22792                           tblptrl	equ	0xFF6
 22793                           tablat	equ	0xFF5
 22794                           prodh	equ	0xFF4
 22795                           prodl	equ	0xFF3
 22796                           intcon	equ	0xFF2
 22797                           intcon2	equ	0xFF1
 22798                           intcon3	equ	0xFF0
 22799                           postinc0	equ	0xFEE
 22800                           wreg	equ	0xFE8
 22801                           postdec1	equ	0xFE5
 22802                           fsr1l	equ	0xFE1
 22803                           indf2	equ	0xFDF
 22804                           postinc2	equ	0xFDE
 22805                           postdec2	equ	0xFDD
 22806                           fsr2h	equ	0xFDA
 22807                           fsr2l	equ	0xFD9
 22808                           status	equ	0xFD8
 22809                           
 22810 ;; *************** function _i2cNack *****************
 22811 ;; Defined at:
 22812 ;;		line 53 in file "I2C_Soft.c"
 22813 ;; Parameters:    Size  Location     Type
 22814 ;;		None
 22815 ;; Auto vars:     Size  Location     Type
 22816 ;;		None
 22817 ;; Return value:  Size  Location     Type
 22818 ;;		None               void
 22819 ;; Registers used:
 22820 ;;		wreg, cstack
 22821 ;; Tracked objects:
 22822 ;;		On entry : 0/0
 22823 ;;		On exit  : 0/0
 22824 ;;		Unchanged: 0/0
 22825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22829 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22830 ;;Total ram usage:        0 bytes
 22831 ;; Hardware stack levels used:    1
 22832 ;; Hardware stack levels required when called:    4
 22833 ;; This function calls:
 22834 ;;		_i2cHighScl
 22835 ;;		_i2cLowScl
 22836 ;; This function is called by:
 22837 ;;		_I2C_Read
 22838 ;; This function uses a non-reentrant model
 22839 ;;
 22840                           
 22841                           	psect	text121
 22842  0055BA                     __ptext121:
 22843                           	opt stack 0
 22844  0055BA                     _i2cNack:
 22845                           	opt stack 22
 22846                           
 22847                           ;I2C_Soft.c: 55: i2cHighScl();
 22848                           
 22849                           ;incstack = 0
 22850  0055BA  ECD2  F02A         	call	_i2cHighScl	;wreg free
 22851                           
 22852                           ;I2C_Soft.c: 56: i2cLowScl();
 22853  0055BE  ECFA  F02A         	call	_i2cLowScl	;wreg free
 22854  0055C2  0012               	return		;funcret
 22855  0055C4                     __end_of_i2cNack:
 22856                           	opt stack 0
 22857                           tblptru	equ	0xFF8
 22858                           tblptrh	equ	0xFF7
 22859                           tblptrl	equ	0xFF6
 22860                           tablat	equ	0xFF5
 22861                           prodh	equ	0xFF4
 22862                           prodl	equ	0xFF3
 22863                           intcon	equ	0xFF2
 22864                           intcon2	equ	0xFF1
 22865                           intcon3	equ	0xFF0
 22866                           postinc0	equ	0xFEE
 22867                           wreg	equ	0xFE8
 22868                           postdec1	equ	0xFE5
 22869                           fsr1l	equ	0xFE1
 22870                           indf2	equ	0xFDF
 22871                           postinc2	equ	0xFDE
 22872                           postdec2	equ	0xFDD
 22873                           fsr2h	equ	0xFDA
 22874                           fsr2l	equ	0xFD9
 22875                           status	equ	0xFD8
 22876                           
 22877 ;; *************** function _i2cAck *****************
 22878 ;; Defined at:
 22879 ;;		line 59 in file "I2C_Soft.c"
 22880 ;; Parameters:    Size  Location     Type
 22881 ;;		None
 22882 ;; Auto vars:     Size  Location     Type
 22883 ;;		None
 22884 ;; Return value:  Size  Location     Type
 22885 ;;		None               void
 22886 ;; Registers used:
 22887 ;;		wreg, cstack
 22888 ;; Tracked objects:
 22889 ;;		On entry : 0/0
 22890 ;;		On exit  : 0/0
 22891 ;;		Unchanged: 0/0
 22892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22896 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22897 ;;Total ram usage:        0 bytes
 22898 ;; Hardware stack levels used:    1
 22899 ;; Hardware stack levels required when called:    4
 22900 ;; This function calls:
 22901 ;;		_i2cHighScl
 22902 ;;		_i2cHighSda
 22903 ;;		_i2cLowScl
 22904 ;;		_i2cLowSda
 22905 ;; This function is called by:
 22906 ;;		_I2C_Read
 22907 ;; This function uses a non-reentrant model
 22908 ;;
 22909                           
 22910                           	psect	text122
 22911  0054E8                     __ptext122:
 22912                           	opt stack 0
 22913  0054E8                     _i2cAck:
 22914                           	opt stack 22
 22915                           
 22916                           ;I2C_Soft.c: 61: i2cLowSda();
 22917                           
 22918                           ;incstack = 0
 22919  0054E8  ECE2  F02A         	call	_i2cLowSda	;wreg free
 22920                           
 22921                           ;I2C_Soft.c: 62: i2cHighScl();
 22922  0054EC  ECD2  F02A         	call	_i2cHighScl	;wreg free
 22923                           
 22924                           ;I2C_Soft.c: 63: i2cLowScl();
 22925  0054F0  ECFA  F02A         	call	_i2cLowScl	;wreg free
 22926                           
 22927                           ;I2C_Soft.c: 64: i2cHighSda();
 22928  0054F4  ECFE  F02A         	call	_i2cHighSda	;wreg free
 22929  0054F8  0012               	return		;funcret
 22930  0054FA                     __end_of_i2cAck:
 22931                           	opt stack 0
 22932                           tblptru	equ	0xFF8
 22933                           tblptrh	equ	0xFF7
 22934                           tblptrl	equ	0xFF6
 22935                           tablat	equ	0xFF5
 22936                           prodh	equ	0xFF4
 22937                           prodl	equ	0xFF3
 22938                           intcon	equ	0xFF2
 22939                           intcon2	equ	0xFF1
 22940                           intcon3	equ	0xFF0
 22941                           postinc0	equ	0xFEE
 22942                           wreg	equ	0xFE8
 22943                           postdec1	equ	0xFE5
 22944                           fsr1l	equ	0xFE1
 22945                           indf2	equ	0xFDF
 22946                           postinc2	equ	0xFDE
 22947                           postdec2	equ	0xFDD
 22948                           fsr2h	equ	0xFDA
 22949                           fsr2l	equ	0xFD9
 22950                           status	equ	0xFD8
 22951                           
 22952 ;; *************** function _I2C_ReStart *****************
 22953 ;; Defined at:
 22954 ;;		line 75 in file "I2C_Soft.c"
 22955 ;; Parameters:    Size  Location     Type
 22956 ;;		None
 22957 ;; Auto vars:     Size  Location     Type
 22958 ;;		None
 22959 ;; Return value:  Size  Location     Type
 22960 ;;		None               void
 22961 ;; Registers used:
 22962 ;;		wreg, cstack
 22963 ;; Tracked objects:
 22964 ;;		On entry : 0/0
 22965 ;;		On exit  : 0/0
 22966 ;;		Unchanged: 0/0
 22967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22971 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22972 ;;Total ram usage:        0 bytes
 22973 ;; Hardware stack levels used:    1
 22974 ;; Hardware stack levels required when called:    4
 22975 ;; This function calls:
 22976 ;;		_i2cHighScl
 22977 ;;		_i2cHighSda
 22978 ;;		_i2cLowScl
 22979 ;;		_i2cLowSda
 22980 ;; This function is called by:
 22981 ;;		_DS1621_Read_Temp
 22982 ;;		_DS3231_Read_Time
 22983 ;;		_DS3231_Read_Alarm_Time
 22984 ;;		_DS3231_Init
 22985 ;;		_I2C_Write_Address_Read_One_Byte
 22986 ;;		_I2C_Write_Cmd_Read_One_Byte
 22987 ;; This function uses a non-reentrant model
 22988 ;;
 22989                           
 22990                           	psect	text123
 22991  005416                     __ptext123:
 22992                           	opt stack 0
 22993  005416                     _I2C_ReStart:
 22994                           	opt stack 23
 22995                           
 22996                           ;I2C_Soft.c: 77: i2cLowScl();
 22997                           
 22998                           ;incstack = 0
 22999  005416  ECFA  F02A         	call	_i2cLowScl	;wreg free
 23000                           
 23001                           ;I2C_Soft.c: 78: i2cHighSda();
 23002  00541A  ECFE  F02A         	call	_i2cHighSda	;wreg free
 23003                           
 23004                           ;I2C_Soft.c: 79: i2cHighScl();
 23005  00541E  ECD2  F02A         	call	_i2cHighScl	;wreg free
 23006                           
 23007                           ;I2C_Soft.c: 80: i2cLowSda();
 23008  005422  ECE2  F02A         	call	_i2cLowSda	;wreg free
 23009                           
 23010                           ;I2C_Soft.c: 81: i2cLowScl();
 23011  005426  ECFA  F02A         	call	_i2cLowScl	;wreg free
 23012  00542A  0012               	return		;funcret
 23013  00542C                     __end_of_I2C_ReStart:
 23014                           	opt stack 0
 23015                           tblptru	equ	0xFF8
 23016                           tblptrh	equ	0xFF7
 23017                           tblptrl	equ	0xFF6
 23018                           tablat	equ	0xFF5
 23019                           prodh	equ	0xFF4
 23020                           prodl	equ	0xFF3
 23021                           intcon	equ	0xFF2
 23022                           intcon2	equ	0xFF1
 23023                           intcon3	equ	0xFF0
 23024                           postinc0	equ	0xFEE
 23025                           wreg	equ	0xFE8
 23026                           postdec1	equ	0xFE5
 23027                           fsr1l	equ	0xFE1
 23028                           indf2	equ	0xFDF
 23029                           postinc2	equ	0xFDE
 23030                           postdec2	equ	0xFDD
 23031                           fsr2h	equ	0xFDA
 23032                           fsr2l	equ	0xFD9
 23033                           status	equ	0xFD8
 23034                           
 23035 ;; *************** function _i2cLowSda *****************
 23036 ;; Defined at:
 23037 ;;		line 98 in file "I2C_Soft.c"
 23038 ;; Parameters:    Size  Location     Type
 23039 ;;		None
 23040 ;; Auto vars:     Size  Location     Type
 23041 ;;		None
 23042 ;; Return value:  Size  Location     Type
 23043 ;;		None               void
 23044 ;; Registers used:
 23045 ;;		None
 23046 ;; Tracked objects:
 23047 ;;		On entry : 0/0
 23048 ;;		On exit  : 0/0
 23049 ;;		Unchanged: 0/0
 23050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23054 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23055 ;;Total ram usage:        0 bytes
 23056 ;; Hardware stack levels used:    1
 23057 ;; Hardware stack levels required when called:    3
 23058 ;; This function calls:
 23059 ;;		Nothing
 23060 ;; This function is called by:
 23061 ;;		_I2C_Write
 23062 ;;		_i2cAck
 23063 ;;		_I2C_Start
 23064 ;;		_I2C_ReStart
 23065 ;;		_I2C_Stop
 23066 ;; This function uses a non-reentrant model
 23067 ;;
 23068                           
 23069                           	psect	text124
 23070  0055C4                     __ptext124:
 23071                           	opt stack 0
 23072  0055C4                     _i2cLowSda:
 23073                           	opt stack 23
 23074                           
 23075                           ;I2C_Soft.c: 100: PORTBbits.RB5 = 0;
 23076                           
 23077                           ;incstack = 0
 23078  0055C4  9A81               	bcf	3969,5,c	;volatile
 23079                           
 23080                           ;I2C_Soft.c: 101: TRISBbits.RB5 = 0;
 23081  0055C6  9A93               	bcf	3987,5,c	;volatile
 23082                           
 23083                           ;I2C_Soft.c: 102: _delay((unsigned long)((2)*(8000000/4000000.0)));
 23084  0055C8  D000               	nop2		;2 cycle nop
 23085  0055CA  D000               	nop2		;2 cycle nop
 23086  0055CC  0012               	return		;funcret
 23087  0055CE                     __end_of_i2cLowSda:
 23088                           	opt stack 0
 23089                           tblptru	equ	0xFF8
 23090                           tblptrh	equ	0xFF7
 23091                           tblptrl	equ	0xFF6
 23092                           tablat	equ	0xFF5
 23093                           prodh	equ	0xFF4
 23094                           prodl	equ	0xFF3
 23095                           intcon	equ	0xFF2
 23096                           intcon2	equ	0xFF1
 23097                           intcon3	equ	0xFF0
 23098                           postinc0	equ	0xFEE
 23099                           wreg	equ	0xFE8
 23100                           postdec1	equ	0xFE5
 23101                           fsr1l	equ	0xFE1
 23102                           indf2	equ	0xFDF
 23103                           postinc2	equ	0xFDE
 23104                           postdec2	equ	0xFDD
 23105                           fsr2h	equ	0xFDA
 23106                           fsr2l	equ	0xFD9
 23107                           status	equ	0xFD8
 23108                           
 23109 ;; *************** function _i2cLowScl *****************
 23110 ;; Defined at:
 23111 ;;		line 111 in file "I2C_Soft.c"
 23112 ;; Parameters:    Size  Location     Type
 23113 ;;		None
 23114 ;; Auto vars:     Size  Location     Type
 23115 ;;		None
 23116 ;; Return value:  Size  Location     Type
 23117 ;;		None               void
 23118 ;; Registers used:
 23119 ;;		None
 23120 ;; Tracked objects:
 23121 ;;		On entry : 0/0
 23122 ;;		On exit  : 0/0
 23123 ;;		Unchanged: 0/0
 23124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23128 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23129 ;;Total ram usage:        0 bytes
 23130 ;; Hardware stack levels used:    1
 23131 ;; Hardware stack levels required when called:    3
 23132 ;; This function calls:
 23133 ;;		Nothing
 23134 ;; This function is called by:
 23135 ;;		_I2C_Read
 23136 ;;		_I2C_Write
 23137 ;;		_i2cNack
 23138 ;;		_i2cAck
 23139 ;;		_I2C_Start
 23140 ;;		_I2C_ReStart
 23141 ;;		_I2C_Stop
 23142 ;; This function uses a non-reentrant model
 23143 ;;
 23144                           
 23145                           	psect	text125
 23146  0055F4                     __ptext125:
 23147                           	opt stack 0
 23148  0055F4                     _i2cLowScl:
 23149                           	opt stack 23
 23150                           
 23151                           ;I2C_Soft.c: 113: PORTBbits.RB4 = 0;
 23152                           
 23153                           ;incstack = 0
 23154  0055F4  9881               	bcf	3969,4,c	;volatile
 23155                           
 23156                           ;I2C_Soft.c: 114: TRISBbits.RB4 = 0;
 23157  0055F6  9893               	bcf	3987,4,c	;volatile
 23158                           
 23159                           ;I2C_Soft.c: 115: _delay((unsigned long)((1)*(8000000/4000000.0)));
 23160  0055F8  D000               	nop2		;2 cycle nop
 23161  0055FA  0012               	return		;funcret
 23162  0055FC                     __end_of_i2cLowScl:
 23163                           	opt stack 0
 23164                           tblptru	equ	0xFF8
 23165                           tblptrh	equ	0xFF7
 23166                           tblptrl	equ	0xFF6
 23167                           tablat	equ	0xFF5
 23168                           prodh	equ	0xFF4
 23169                           prodl	equ	0xFF3
 23170                           intcon	equ	0xFF2
 23171                           intcon2	equ	0xFF1
 23172                           intcon3	equ	0xFF0
 23173                           postinc0	equ	0xFEE
 23174                           wreg	equ	0xFE8
 23175                           postdec1	equ	0xFE5
 23176                           fsr1l	equ	0xFE1
 23177                           indf2	equ	0xFDF
 23178                           postinc2	equ	0xFDE
 23179                           postdec2	equ	0xFDD
 23180                           fsr2h	equ	0xFDA
 23181                           fsr2l	equ	0xFD9
 23182                           status	equ	0xFD8
 23183                           
 23184 ;; *************** function _i2cHighSda *****************
 23185 ;; Defined at:
 23186 ;;		line 92 in file "I2C_Soft.c"
 23187 ;; Parameters:    Size  Location     Type
 23188 ;;		None
 23189 ;; Auto vars:     Size  Location     Type
 23190 ;;		None
 23191 ;; Return value:  Size  Location     Type
 23192 ;;		None               void
 23193 ;; Registers used:
 23194 ;;		None
 23195 ;; Tracked objects:
 23196 ;;		On entry : 0/0
 23197 ;;		On exit  : 0/0
 23198 ;;		Unchanged: 0/0
 23199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23203 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23204 ;;Total ram usage:        0 bytes
 23205 ;; Hardware stack levels used:    1
 23206 ;; Hardware stack levels required when called:    3
 23207 ;; This function calls:
 23208 ;;		Nothing
 23209 ;; This function is called by:
 23210 ;;		_I2C_Init
 23211 ;;		_I2C_Read
 23212 ;;		_I2C_Write
 23213 ;;		_i2cAck
 23214 ;;		_I2C_Start
 23215 ;;		_I2C_ReStart
 23216 ;;		_I2C_Stop
 23217 ;; This function uses a non-reentrant model
 23218 ;;
 23219                           
 23220                           	psect	text126
 23221  0055FC                     __ptext126:
 23222                           	opt stack 0
 23223  0055FC                     _i2cHighSda:
 23224                           	opt stack 23
 23225                           
 23226                           ;I2C_Soft.c: 94: TRISBbits.RB5 = 1;
 23227                           
 23228                           ;incstack = 0
 23229  0055FC  8A93               	bsf	3987,5,c	;volatile
 23230                           
 23231                           ;I2C_Soft.c: 95: _delay((unsigned long)((2)*(8000000/4000000.0)));
 23232  0055FE  D000               	nop2		;2 cycle nop
 23233  005600  D000               	nop2		;2 cycle nop
 23234  005602  0012               	return		;funcret
 23235  005604                     __end_of_i2cHighSda:
 23236                           	opt stack 0
 23237                           tblptru	equ	0xFF8
 23238                           tblptrh	equ	0xFF7
 23239                           tblptrl	equ	0xFF6
 23240                           tablat	equ	0xFF5
 23241                           prodh	equ	0xFF4
 23242                           prodl	equ	0xFF3
 23243                           intcon	equ	0xFF2
 23244                           intcon2	equ	0xFF1
 23245                           intcon3	equ	0xFF0
 23246                           postinc0	equ	0xFEE
 23247                           wreg	equ	0xFE8
 23248                           postdec1	equ	0xFE5
 23249                           fsr1l	equ	0xFE1
 23250                           indf2	equ	0xFDF
 23251                           postinc2	equ	0xFDE
 23252                           postdec2	equ	0xFDD
 23253                           fsr2h	equ	0xFDA
 23254                           fsr2l	equ	0xFD9
 23255                           status	equ	0xFD8
 23256                           
 23257 ;; *************** function _i2cHighScl *****************
 23258 ;; Defined at:
 23259 ;;		line 105 in file "I2C_Soft.c"
 23260 ;; Parameters:    Size  Location     Type
 23261 ;;		None
 23262 ;; Auto vars:     Size  Location     Type
 23263 ;;		None
 23264 ;; Return value:  Size  Location     Type
 23265 ;;		None               void
 23266 ;; Registers used:
 23267 ;;		wreg
 23268 ;; Tracked objects:
 23269 ;;		On entry : 0/0
 23270 ;;		On exit  : 0/0
 23271 ;;		Unchanged: 0/0
 23272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23276 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23277 ;;Total ram usage:        0 bytes
 23278 ;; Hardware stack levels used:    1
 23279 ;; Hardware stack levels required when called:    3
 23280 ;; This function calls:
 23281 ;;		Nothing
 23282 ;; This function is called by:
 23283 ;;		_I2C_Init
 23284 ;;		_I2C_Read
 23285 ;;		_I2C_Write
 23286 ;;		_i2cNack
 23287 ;;		_i2cAck
 23288 ;;		_I2C_Start
 23289 ;;		_I2C_ReStart
 23290 ;;		_I2C_Stop
 23291 ;; This function uses a non-reentrant model
 23292 ;;
 23293                           
 23294                           	psect	text127
 23295  0055A4                     __ptext127:
 23296                           	opt stack 0
 23297  0055A4                     _i2cHighScl:
 23298                           	opt stack 23
 23299                           
 23300                           ;I2C_Soft.c: 107: TRISBbits.RB4 = 1;
 23301                           
 23302                           ;incstack = 0
 23303  0055A4  8893               	bsf	3987,4,c	;volatile
 23304                           
 23305                           ;I2C_Soft.c: 108: _delay((unsigned long)((10)*(8000000/4000000.0)));
 23306  0055A6  0E06               	movlw	6
 23307  0055A8                     u10867:
 23308  0055A8  2EE8               	decfsz	wreg,f,c
 23309  0055AA  D7FE               	goto	u10867
 23310  0055AC  D000               	nop2		;nop
 23311  0055AE  0012               	return		;funcret
 23312  0055B0                     __end_of_i2cHighScl:
 23313                           	opt stack 0
 23314                           tblptru	equ	0xFF8
 23315                           tblptrh	equ	0xFF7
 23316                           tblptrl	equ	0xFF6
 23317                           tablat	equ	0xFF5
 23318                           prodh	equ	0xFF4
 23319                           prodl	equ	0xFF3
 23320                           intcon	equ	0xFF2
 23321                           intcon2	equ	0xFF1
 23322                           intcon3	equ	0xFF0
 23323                           postinc0	equ	0xFEE
 23324                           wreg	equ	0xFE8
 23325                           postdec1	equ	0xFE5
 23326                           fsr1l	equ	0xFE1
 23327                           indf2	equ	0xFDF
 23328                           postinc2	equ	0xFDE
 23329                           postdec2	equ	0xFDD
 23330                           fsr2h	equ	0xFDA
 23331                           fsr2l	equ	0xFD9
 23332                           status	equ	0xFD8
 23333                           
 23334 ;; *************** function _chkisr *****************
 23335 ;; Defined at:
 23336 ;;		line 40 in file "Interrupt.c"
 23337 ;; Parameters:    Size  Location     Type
 23338 ;;		None
 23339 ;; Auto vars:     Size  Location     Type
 23340 ;;		None
 23341 ;; Return value:  Size  Location     Type
 23342 ;;		None               void
 23343 ;; Registers used:
 23344 ;;		wreg, status,2, status,0, cstack
 23345 ;; Tracked objects:
 23346 ;;		On entry : 0/0
 23347 ;;		On exit  : 0/0
 23348 ;;		Unchanged: 0/0
 23349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23352 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23353 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23354 ;;Total ram usage:       14 bytes
 23355 ;; Hardware stack levels used:    1
 23356 ;; Hardware stack levels required when called:    2
 23357 ;; This function calls:
 23358 ;;		_INT0_ISR
 23359 ;;		_INT1_ISR
 23360 ;;		_INT2_ISR
 23361 ;;		_TIMER1_ISR
 23362 ;; This function is called by:
 23363 ;;		Interrupt level 2
 23364 ;; This function uses a non-reentrant model
 23365 ;;
 23366                           
 23367                           	psect	intcode
 23368  000008                     __pintcode:
 23369                           	opt stack 0
 23370  000008                     _chkisr:
 23371                           	opt stack 18
 23372                           
 23373                           ;incstack = 0
 23374  000008  CFFA F003          	movff	pclath,??_chkisr
 23375  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
 23376  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
 23377  000014  ED4C  F022         	call	int_func,f	;refresh shadow registers
 23378                           pclatu	equ	0xFFB
 23379                           pclath	equ	0xFFA
 23380                           tblptru	equ	0xFF8
 23381                           tblptrh	equ	0xFF7
 23382                           tblptrl	equ	0xFF6
 23383                           tablat	equ	0xFF5
 23384                           prodh	equ	0xFF4
 23385                           prodl	equ	0xFF3
 23386                           intcon	equ	0xFF2
 23387                           intcon2	equ	0xFF1
 23388                           intcon3	equ	0xFF0
 23389                           postinc0	equ	0xFEE
 23390                           fsr0l	equ	0xFE9
 23391                           wreg	equ	0xFE8
 23392                           postdec1	equ	0xFE5
 23393                           fsr1l	equ	0xFE1
 23394                           indf2	equ	0xFDF
 23395                           postinc2	equ	0xFDE
 23396                           postdec2	equ	0xFDD
 23397                           fsr2h	equ	0xFDA
 23398                           fsr2l	equ	0xFD9
 23399                           status	equ	0xFD8
 23400                           
 23401                           	psect	intcode_body
 23402  004498                     __pintcode_body:
 23403                           	opt stack 18
 23404  004498                     int_func:
 23405                           	opt stack 18
 23406  004498  0006               	pop		; remove dummy address from shadow register refresh
 23407  00449A  CFEA F006          	movff	fsr0h,??_chkisr+3
 23408  00449E  CFE1 F007          	movff	fsr1l,??_chkisr+4
 23409  0044A2  CFE2 F008          	movff	fsr1h,??_chkisr+5
 23410  0044A6  CFD9 F009          	movff	fsr2l,??_chkisr+6
 23411  0044AA  CFDA F00A          	movff	fsr2h,??_chkisr+7
 23412  0044AE  CFF3 F00B          	movff	prodl,??_chkisr+8
 23413  0044B2  CFF4 F00C          	movff	prodh,??_chkisr+9
 23414  0044B6  CFF6 F00D          	movff	tblptrl,??_chkisr+10
 23415  0044BA  CFF7 F00E          	movff	tblptrh,??_chkisr+11
 23416  0044BE  CFF8 F00F          	movff	tblptru,??_chkisr+12
 23417  0044C2  CFF5 F010          	movff	tablat,??_chkisr+13
 23418                           
 23419                           ;Interrupt.c: 42: if (PIR1bits.TMR1IF == 1) TIMER1_ISR();
 23420  0044C6  A09E               	btfss	3998,0,c	;volatile
 23421  0044C8  D003               	goto	i2l9004
 23422  0044CA  ECB3  F02A         	call	_TIMER1_ISR	;wreg free
 23423  0044CE  D000               	goto	i2l9004
 23424  0044D0                     i2l9004:
 23425                           
 23426                           ;Interrupt.c: 43: if (INTCONbits.INT0IF == 1) INT0_ISR();
 23427  0044D0  A2F2               	btfss	intcon,1,c	;volatile
 23428  0044D2  D003               	goto	i2l9008
 23429  0044D4  EC3B  F014         	call	_INT0_ISR	;wreg free
 23430  0044D8  D000               	goto	i2l9008
 23431  0044DA                     i2l9008:
 23432                           
 23433                           ;Interrupt.c: 44: if (INTCON3bits.INT1IF == 1) INT1_ISR();
 23434  0044DA  A0F0               	btfss	intcon3,0,c	;volatile
 23435  0044DC  D003               	goto	i2l9012
 23436  0044DE  ECEC  F02A         	call	_INT1_ISR	;wreg free
 23437  0044E2  D000               	goto	i2l9012
 23438  0044E4                     i2l9012:
 23439                           
 23440                           ;Interrupt.c: 45: if (INTCON3bits.INT2IF == 1) INT2_ISR();
 23441  0044E4  A2F0               	btfss	intcon3,1,c	;volatile
 23442  0044E6  D003               	goto	i2l1131
 23443  0044E8  ECE7  F02A         	call	_INT2_ISR	;wreg free
 23444  0044EC  D000               	goto	i2l1131
 23445  0044EE                     i2l1131:
 23446  0044EE  C010  FFF5         	movff	??_chkisr+13,tablat
 23447  0044F2  C00F  FFF8         	movff	??_chkisr+12,tblptru
 23448  0044F6  C00E  FFF7         	movff	??_chkisr+11,tblptrh
 23449  0044FA  C00D  FFF6         	movff	??_chkisr+10,tblptrl
 23450  0044FE  C00C  FFF4         	movff	??_chkisr+9,prodh
 23451  004502  C00B  FFF3         	movff	??_chkisr+8,prodl
 23452  004506  C00A  FFDA         	movff	??_chkisr+7,fsr2h
 23453  00450A  C009  FFD9         	movff	??_chkisr+6,fsr2l
 23454  00450E  C008  FFE2         	movff	??_chkisr+5,fsr1h
 23455  004512  C007  FFE1         	movff	??_chkisr+4,fsr1l
 23456  004516  C006  FFEA         	movff	??_chkisr+3,fsr0h
 23457  00451A  C005  FFE9         	movff	??_chkisr+2,fsr0l
 23458  00451E  C004  FFFB         	movff	??_chkisr+1,pclatu
 23459  004522  C003  FFFA         	movff	??_chkisr,pclath
 23460  004526  0011               	retfie		f
 23461  004528                     __end_of_chkisr:
 23462                           	opt stack 0
 23463                           pclatu	equ	0xFFB
 23464                           pclath	equ	0xFFA
 23465                           tblptru	equ	0xFF8
 23466                           tblptrh	equ	0xFF7
 23467                           tblptrl	equ	0xFF6
 23468                           tablat	equ	0xFF5
 23469                           prodh	equ	0xFF4
 23470                           prodl	equ	0xFF3
 23471                           intcon	equ	0xFF2
 23472                           intcon2	equ	0xFF1
 23473                           intcon3	equ	0xFF0
 23474                           postinc0	equ	0xFEE
 23475                           fsr0h	equ	0xFEA
 23476                           fsr0l	equ	0xFE9
 23477                           wreg	equ	0xFE8
 23478                           postdec1	equ	0xFE5
 23479                           fsr1h	equ	0xFE2
 23480                           fsr1l	equ	0xFE1
 23481                           indf2	equ	0xFDF
 23482                           postinc2	equ	0xFDE
 23483                           postdec2	equ	0xFDD
 23484                           fsr2h	equ	0xFDA
 23485                           fsr2l	equ	0xFD9
 23486                           status	equ	0xFD8
 23487                           
 23488 ;; *************** function _TIMER1_ISR *****************
 23489 ;; Defined at:
 23490 ;;		line 68 in file "Interrupt.c"
 23491 ;; Parameters:    Size  Location     Type
 23492 ;;		None
 23493 ;; Auto vars:     Size  Location     Type
 23494 ;;		None
 23495 ;; Return value:  Size  Location     Type
 23496 ;;		None               void
 23497 ;; Registers used:
 23498 ;;		wreg, status,2
 23499 ;; Tracked objects:
 23500 ;;		On entry : 0/0
 23501 ;;		On exit  : 0/0
 23502 ;;		Unchanged: 0/0
 23503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23508 ;;Total ram usage:        0 bytes
 23509 ;; Hardware stack levels used:    1
 23510 ;; This function calls:
 23511 ;;		Nothing
 23512 ;; This function is called by:
 23513 ;;		_chkisr
 23514 ;; This function uses a non-reentrant model
 23515 ;;
 23516                           
 23517                           	psect	text129
 23518  005566                     __ptext129:
 23519                           	opt stack 0
 23520  005566                     _TIMER1_ISR:
 23521                           	opt stack 19
 23522                           
 23523                           ;Interrupt.c: 70: Nec_State = 0;
 23524                           
 23525                           ;incstack = 0
 23526  005566  0E00               	movlw	0
 23527  005568  0100               	movlb	0	; () banked
 23528  00556A  6FA2               	movwf	_Nec_State& (0+255),b
 23529                           
 23530                           ; BSR set to: 0
 23531                           ;Interrupt.c: 71: INTCON2bits.INTEDG0 = 0;
 23532  00556C  9CF1               	bcf	intcon2,6,c	;volatile
 23533                           
 23534                           ; BSR set to: 0
 23535                           ;Interrupt.c: 72: T1CONbits.TMR1ON = 0;
 23536  00556E  90CD               	bcf	4045,0,c	;volatile
 23537                           
 23538                           ; BSR set to: 0
 23539                           ;Interrupt.c: 73: PIR1bits.TMR1IF = 0;
 23540  005570  909E               	bcf	3998,0,c	;volatile
 23541                           
 23542                           ; BSR set to: 0
 23543  005572  0012               	return		;funcret
 23544  005574                     __end_of_TIMER1_ISR:
 23545                           	opt stack 0
 23546                           pclatu	equ	0xFFB
 23547                           pclath	equ	0xFFA
 23548                           tblptru	equ	0xFF8
 23549                           tblptrh	equ	0xFF7
 23550                           tblptrl	equ	0xFF6
 23551                           tablat	equ	0xFF5
 23552                           prodh	equ	0xFF4
 23553                           prodl	equ	0xFF3
 23554                           intcon	equ	0xFF2
 23555                           intcon2	equ	0xFF1
 23556                           intcon3	equ	0xFF0
 23557                           postinc0	equ	0xFEE
 23558                           fsr0h	equ	0xFEA
 23559                           fsr0l	equ	0xFE9
 23560                           wreg	equ	0xFE8
 23561                           postdec1	equ	0xFE5
 23562                           fsr1h	equ	0xFE2
 23563                           fsr1l	equ	0xFE1
 23564                           indf2	equ	0xFDF
 23565                           postinc2	equ	0xFDE
 23566                           postdec2	equ	0xFDD
 23567                           fsr2h	equ	0xFDA
 23568                           fsr2l	equ	0xFD9
 23569                           status	equ	0xFD8
 23570                           
 23571 ;; *************** function _INT2_ISR *****************
 23572 ;; Defined at:
 23573 ;;		line 55 in file "Interrupt.c"
 23574 ;; Parameters:    Size  Location     Type
 23575 ;;		None
 23576 ;; Auto vars:     Size  Location     Type
 23577 ;;		None
 23578 ;; Return value:  Size  Location     Type
 23579 ;;		None               void
 23580 ;; Registers used:
 23581 ;;		wreg, status,2
 23582 ;; Tracked objects:
 23583 ;;		On entry : 0/0
 23584 ;;		On exit  : 0/0
 23585 ;;		Unchanged: 0/0
 23586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23590 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23591 ;;Total ram usage:        0 bytes
 23592 ;; Hardware stack levels used:    1
 23593 ;; This function calls:
 23594 ;;		Nothing
 23595 ;; This function is called by:
 23596 ;;		_chkisr
 23597 ;; This function uses a non-reentrant model
 23598 ;;
 23599                           
 23600                           	psect	text130
 23601  0055CE                     __ptext130:
 23602                           	opt stack 0
 23603  0055CE                     _INT2_ISR:
 23604                           	opt stack 19
 23605                           
 23606                           ;Interrupt.c: 57: INTCON3bits.INT2IF=0;
 23607                           
 23608                           ; BSR set to: 0
 23609                           ;incstack = 0
 23610  0055CE  92F0               	bcf	intcon3,1,c	;volatile
 23611                           
 23612                           ;Interrupt.c: 58: INT2_flag = 1;
 23613  0055D0  0E01               	movlw	1
 23614  0055D2  0100               	movlb	0	; () banked
 23615  0055D4  6F9D               	movwf	_INT2_flag& (0+255),b
 23616                           
 23617                           ; BSR set to: 0
 23618  0055D6  0012               	return		;funcret
 23619  0055D8                     __end_of_INT2_ISR:
 23620                           	opt stack 0
 23621                           pclatu	equ	0xFFB
 23622                           pclath	equ	0xFFA
 23623                           tblptru	equ	0xFF8
 23624                           tblptrh	equ	0xFF7
 23625                           tblptrl	equ	0xFF6
 23626                           tablat	equ	0xFF5
 23627                           prodh	equ	0xFF4
 23628                           prodl	equ	0xFF3
 23629                           intcon	equ	0xFF2
 23630                           intcon2	equ	0xFF1
 23631                           intcon3	equ	0xFF0
 23632                           postinc0	equ	0xFEE
 23633                           fsr0h	equ	0xFEA
 23634                           fsr0l	equ	0xFE9
 23635                           wreg	equ	0xFE8
 23636                           postdec1	equ	0xFE5
 23637                           fsr1h	equ	0xFE2
 23638                           fsr1l	equ	0xFE1
 23639                           indf2	equ	0xFDF
 23640                           postinc2	equ	0xFDE
 23641                           postdec2	equ	0xFDD
 23642                           fsr2h	equ	0xFDA
 23643                           fsr2l	equ	0xFD9
 23644                           status	equ	0xFD8
 23645                           
 23646 ;; *************** function _INT1_ISR *****************
 23647 ;; Defined at:
 23648 ;;		line 49 in file "Interrupt.c"
 23649 ;; Parameters:    Size  Location     Type
 23650 ;;		None
 23651 ;; Auto vars:     Size  Location     Type
 23652 ;;		None
 23653 ;; Return value:  Size  Location     Type
 23654 ;;		None               void
 23655 ;; Registers used:
 23656 ;;		wreg, status,2
 23657 ;; Tracked objects:
 23658 ;;		On entry : 0/0
 23659 ;;		On exit  : 0/0
 23660 ;;		Unchanged: 0/0
 23661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23665 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23666 ;;Total ram usage:        0 bytes
 23667 ;; Hardware stack levels used:    1
 23668 ;; This function calls:
 23669 ;;		Nothing
 23670 ;; This function is called by:
 23671 ;;		_chkisr
 23672 ;; This function uses a non-reentrant model
 23673 ;;
 23674                           
 23675                           	psect	text131
 23676  0055D8                     __ptext131:
 23677                           	opt stack 0
 23678  0055D8                     _INT1_ISR:
 23679                           	opt stack 19
 23680                           
 23681                           ;Interrupt.c: 51: INTCON3bits.INT1IF=0;
 23682                           
 23683                           ; BSR set to: 0
 23684                           ;incstack = 0
 23685  0055D8  90F0               	bcf	intcon3,0,c	;volatile
 23686                           
 23687                           ;Interrupt.c: 52: INT1_flag = 1;
 23688  0055DA  0E01               	movlw	1
 23689  0055DC  0100               	movlb	0	; () banked
 23690  0055DE  6F9C               	movwf	_INT1_flag& (0+255),b
 23691                           
 23692                           ; BSR set to: 0
 23693  0055E0  0012               	return		;funcret
 23694  0055E2                     __end_of_INT1_ISR:
 23695                           	opt stack 0
 23696                           pclatu	equ	0xFFB
 23697                           pclath	equ	0xFFA
 23698                           tblptru	equ	0xFF8
 23699                           tblptrh	equ	0xFF7
 23700                           tblptrl	equ	0xFF6
 23701                           tablat	equ	0xFF5
 23702                           prodh	equ	0xFF4
 23703                           prodl	equ	0xFF3
 23704                           intcon	equ	0xFF2
 23705                           intcon2	equ	0xFF1
 23706                           intcon3	equ	0xFF0
 23707                           postinc0	equ	0xFEE
 23708                           fsr0h	equ	0xFEA
 23709                           fsr0l	equ	0xFE9
 23710                           wreg	equ	0xFE8
 23711                           postdec1	equ	0xFE5
 23712                           fsr1h	equ	0xFE2
 23713                           fsr1l	equ	0xFE1
 23714                           indf2	equ	0xFDF
 23715                           postinc2	equ	0xFDE
 23716                           postdec2	equ	0xFDD
 23717                           fsr2h	equ	0xFDA
 23718                           fsr2l	equ	0xFD9
 23719                           status	equ	0xFD8
 23720                           
 23721 ;; *************** function _INT0_ISR *****************
 23722 ;; Defined at:
 23723 ;;		line 82 in file "Interrupt.c"
 23724 ;; Parameters:    Size  Location     Type
 23725 ;;		None
 23726 ;; Auto vars:     Size  Location     Type
 23727 ;;		None
 23728 ;; Return value:  Size  Location     Type
 23729 ;;		None               void
 23730 ;; Registers used:
 23731 ;;		wreg, status,2, status,0, cstack
 23732 ;; Tracked objects:
 23733 ;;		On entry : 0/0
 23734 ;;		On exit  : 0/0
 23735 ;;		Unchanged: 0/0
 23736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23739 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23740 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23741 ;;Total ram usage:        2 bytes
 23742 ;; Hardware stack levels used:    1
 23743 ;; Hardware stack levels required when called:    1
 23744 ;; This function calls:
 23745 ;;		_Reset_Nec_State
 23746 ;; This function is called by:
 23747 ;;		_chkisr
 23748 ;; This function uses a non-reentrant model
 23749 ;;
 23750                           
 23751                           	psect	text132
 23752  002876                     __ptext132:
 23753                           	opt stack 0
 23754  002876                     _INT0_ISR:
 23755                           	opt stack 18
 23756                           
 23757                           ;Interrupt.c: 84: INTCONbits.INT0IF = 0;
 23758                           
 23759                           ; BSR set to: 0
 23760                           ;incstack = 0
 23761  002876  92F2               	bcf	intcon,1,c	;volatile
 23762                           
 23763                           ;Interrupt.c: 85: if (Nec_State != 0)
 23764  002878  0100               	movlb	0	; () banked
 23765  00287A  51A2               	movf	_Nec_State& (0+255),w,b
 23766  00287C  B4D8               	btfsc	status,2,c
 23767  00287E  D0B6               	goto	i2l8748
 23768                           
 23769                           ; BSR set to: 0
 23770                           ;Interrupt.c: 86: {
 23771                           ;Interrupt.c: 87: Time_Elapsed = (TMR1H << 8) | TMR1L;
 23772  002880  50CE               	movf	4046,w,c	;volatile
 23773  002882  CFCF F001          	movff	4047,??_INT0_ISR	;volatile
 23774  002886  6A02               	clrf	(??_INT0_ISR+1)& (0+255),c
 23775  002888  C001  F002         	movff	??_INT0_ISR,??_INT0_ISR+1
 23776  00288C  6A01               	clrf	??_INT0_ISR,c
 23777  00288E  1001               	iorwf	??_INT0_ISR,w,c
 23778  002890  6E60               	movwf	_Time_Elapsed,c
 23779  002892  5002               	movf	??_INT0_ISR+1,w,c
 23780  002894  6E61               	movwf	_Time_Elapsed+1,c
 23781                           
 23782                           ; BSR set to: 0
 23783                           ;Interrupt.c: 88: TMR1H = 0;
 23784  002896  0E00               	movlw	0
 23785  002898  6ECF               	movwf	4047,c	;volatile
 23786                           
 23787                           ; BSR set to: 0
 23788                           ;Interrupt.c: 89: TMR1L = 0;
 23789  00289A  0E00               	movlw	0
 23790  00289C  6ECE               	movwf	4046,c	;volatile
 23791                           
 23792                           ; BSR set to: 0
 23793                           ;Interrupt.c: 90: }
 23794                           ;Interrupt.c: 92: switch(Nec_State)
 23795  00289E  D0A6               	goto	i2l8748
 23796  0028A0                     i2l8678:
 23797                           
 23798                           ; BSR set to: 0
 23799                           ;Interrupt.c: 95: {
 23800                           ;Interrupt.c: 97: TMR1H = 0;
 23801  0028A0  0E00               	movlw	0
 23802  0028A2  6ECF               	movwf	4047,c	;volatile
 23803                           
 23804                           ;Interrupt.c: 98: TMR1L = 0;
 23805  0028A4  0E00               	movlw	0
 23806  0028A6  6ECE               	movwf	4046,c	;volatile
 23807                           
 23808                           ; BSR set to: 0
 23809                           ;Interrupt.c: 99: PIR1bits.TMR1IF = 0;
 23810  0028A8  909E               	bcf	3998,0,c	;volatile
 23811                           
 23812                           ;Interrupt.c: 100: T1CON= 0x90;
 23813  0028AA  0E90               	movlw	144
 23814  0028AC  6ECD               	movwf	4045,c	;volatile
 23815                           
 23816                           ; BSR set to: 0
 23817                           ;Interrupt.c: 101: T1CONbits.TMR1ON = 1;
 23818  0028AE  80CD               	bsf	4045,0,c	;volatile
 23819                           
 23820                           ;Interrupt.c: 102: bit_count = 0;
 23821  0028B0  0E00               	movlw	0
 23822  0028B2  0100               	movlb	0	; () banked
 23823  0028B4  6FA8               	movwf	_bit_count& (0+255),b
 23824                           
 23825                           ;Interrupt.c: 103: Nec_code = 0;
 23826  0028B6  0E00               	movlw	0
 23827  0028B8  0100               	movlb	0	; () banked
 23828  0028BA  6F80               	movwf	_Nec_code& (0+255),b
 23829  0028BC  0E00               	movlw	0
 23830  0028BE  6F81               	movwf	(_Nec_code+1)& (0+255),b
 23831  0028C0  0E00               	movlw	0
 23832  0028C2  6F82               	movwf	(_Nec_code+2)& (0+255),b
 23833  0028C4  0E00               	movlw	0
 23834  0028C6  6F83               	movwf	(_Nec_code+3)& (0+255),b
 23835                           
 23836                           ;Interrupt.c: 104: Nec_State = 1;
 23837  0028C8  0E01               	movlw	1
 23838  0028CA  0100               	movlb	0	; () banked
 23839  0028CC  6FA2               	movwf	_Nec_State& (0+255),b
 23840  0028CE  D08C               	goto	i2l8742
 23841                           
 23842                           ; BSR set to: 0
 23843                           ;Interrupt.c: 106: return;
 23844                           
 23845                           ; BSR set to: 0
 23846                           ;Interrupt.c: 105: INTCON2bits.INTEDG0 = 1;
 23847  0028D0  D09F               	goto	i2l1152
 23848  0028D2                     i2l8688:
 23849                           
 23850                           ; BSR set to: 0
 23851                           ;Interrupt.c: 110: {
 23852                           ;Interrupt.c: 112: if(Time_Elapsed > 8500 && Time_Elapsed < 9500)
 23853  0028D2  0E35               	movlw	53
 23854  0028D4  5C60               	subwf	_Time_Elapsed,w,c
 23855  0028D6  0E21               	movlw	33
 23856  0028D8  5861               	subwfb	_Time_Elapsed+1,w,c
 23857  0028DA  A0D8               	btfss	status,0,c
 23858  0028DC  D00A               	goto	i2l8694
 23859                           
 23860                           ; BSR set to: 0
 23861  0028DE  0E1C               	movlw	28
 23862  0028E0  5C60               	subwf	_Time_Elapsed,w,c
 23863  0028E2  0E25               	movlw	37
 23864  0028E4  5861               	subwfb	_Time_Elapsed+1,w,c
 23865  0028E6  B0D8               	btfsc	status,0,c
 23866  0028E8  D004               	goto	i2l8694
 23867                           
 23868                           ; BSR set to: 0
 23869                           ;Interrupt.c: 113: Nec_State = 2;
 23870  0028EA  0E02               	movlw	2
 23871  0028EC  0100               	movlb	0	; () banked
 23872  0028EE  6FA2               	movwf	_Nec_State& (0+255),b
 23873  0028F0  D029               	goto	i2l8720
 23874  0028F2                     i2l8694:
 23875                           
 23876                           ; BSR set to: 0
 23877                           ;Interrupt.c: 114: else
 23878                           ;Interrupt.c: 115: Reset_Nec_State();
 23879  0028F2  ECF1  F02A         	call	_Reset_Nec_State	;wreg free
 23880  0028F6  D026               	goto	i2l8720
 23881  0028F8  D025               	goto	i2l8720
 23882                           
 23883                           ;Interrupt.c: 117: return;
 23884                           
 23885                           ;Interrupt.c: 116: INTCON2bits.INTEDG0 = 0;
 23886  0028FA  D08A               	goto	i2l1152
 23887  0028FC                     i2l8700:
 23888                           
 23889                           ;Interrupt.c: 121: {
 23890                           ;Interrupt.c: 123: if(Time_Elapsed > 4000 && Time_Elapsed < 5000)
 23891  0028FC  0EA1               	movlw	161
 23892  0028FE  5C60               	subwf	_Time_Elapsed,w,c
 23893  002900  0E0F               	movlw	15
 23894  002902  5861               	subwfb	_Time_Elapsed+1,w,c
 23895  002904  A0D8               	btfss	status,0,c
 23896  002906  D008               	goto	i2l8706
 23897  002908  0E88               	movlw	136
 23898  00290A  5C60               	subwf	_Time_Elapsed,w,c
 23899  00290C  0E13               	movlw	19
 23900  00290E  5861               	subwfb	_Time_Elapsed+1,w,c
 23901  002910  B0D8               	btfsc	status,0,c
 23902  002912  D002               	goto	i2l8706
 23903  002914                     
 23904                           ;Interrupt.c: 124: Nec_State = 3;
 23905  002914  0E03               	movlw	3
 23906  002916  D062               	goto	L18
 23907  002918                     i2l8706:
 23908                           
 23909                           ;Interrupt.c: 125: else
 23910                           ;Interrupt.c: 126: Reset_Nec_State();
 23911  002918  ECF1  F02A         	call	_Reset_Nec_State	;wreg free
 23912  00291C  D065               	goto	i2l8742
 23913  00291E  D064               	goto	i2l8742
 23914                           
 23915                           ;Interrupt.c: 128: return;
 23916                           
 23917                           ;Interrupt.c: 127: INTCON2bits.INTEDG0 = 1;
 23918  002920  D077               	goto	i2l1152
 23919  002922                     i2l8712:
 23920                           
 23921                           ;Interrupt.c: 132: {
 23922                           ;Interrupt.c: 133: if(Time_Elapsed > 400 && Time_Elapsed < 700)
 23923  002922  0E91               	movlw	145
 23924  002924  5C60               	subwf	_Time_Elapsed,w,c
 23925  002926  0E01               	movlw	1
 23926  002928  5861               	subwfb	_Time_Elapsed+1,w,c
 23927  00292A  A0D8               	btfss	status,0,c
 23928  00292C  D008               	goto	i2l8718
 23929  00292E  0EBC               	movlw	188
 23930  002930  5C60               	subwf	_Time_Elapsed,w,c
 23931  002932  0E02               	movlw	2
 23932  002934  5861               	subwfb	_Time_Elapsed+1,w,c
 23933  002936  B0D8               	btfsc	status,0,c
 23934  002938  D002               	goto	i2l8718
 23935                           
 23936                           ;Interrupt.c: 134: Nec_State = 4;
 23937  00293A  0E04               	movlw	4
 23938  00293C  D7D7               	goto	L19
 23939  00293E                     i2l8718:
 23940                           
 23941                           ;Interrupt.c: 135: else
 23942                           ;Interrupt.c: 136: Reset_Nec_State();
 23943  00293E  ECF1  F02A         	call	_Reset_Nec_State	;wreg free
 23944  002942  D000               	goto	i2l8720
 23945  002944                     i2l8720:
 23946                           
 23947                           ;Interrupt.c: 137: INTCON2bits.INTEDG0 = 0;
 23948  002944  9CF1               	bcf	intcon2,6,c	;volatile
 23949                           
 23950                           ;Interrupt.c: 138: return;
 23951  002946  D064               	goto	i2l1152
 23952  002948                     i2l8724:
 23953                           
 23954                           ;Interrupt.c: 142: {
 23955                           ;Interrupt.c: 144: if(Time_Elapsed > 400 && Time_Elapsed < 1800)
 23956  002948  0E91               	movlw	145
 23957  00294A  5C60               	subwf	_Time_Elapsed,w,c
 23958  00294C  0E01               	movlw	1
 23959  00294E  5861               	subwfb	_Time_Elapsed+1,w,c
 23960  002950  A0D8               	btfss	status,0,c
 23961  002952  D047               	goto	i2l8740
 23962  002954  0E08               	movlw	8
 23963  002956  5C60               	subwf	_Time_Elapsed,w,c
 23964  002958  0E07               	movlw	7
 23965  00295A  5861               	subwfb	_Time_Elapsed+1,w,c
 23966  00295C  B0D8               	btfsc	status,0,c
 23967  00295E  D041               	goto	i2l8740
 23968                           
 23969                           ;Interrupt.c: 145: {
 23970                           ;Interrupt.c: 146: Nec_code = Nec_code << 1;
 23971  002960  90D8               	bcf	status,0,c
 23972  002962  0100               	movlb	0	; () banked
 23973  002964  3580               	rlcf	_Nec_code& (0+255),w,b
 23974  002966  0100               	movlb	0	; () banked
 23975  002968  6F80               	movwf	_Nec_code& (0+255),b
 23976  00296A  0100               	movlb	0	; () banked
 23977  00296C  3581               	rlcf	(_Nec_code+1)& (0+255),w,b
 23978  00296E  0100               	movlb	0	; () banked
 23979  002970  6F81               	movwf	(_Nec_code+1)& (0+255),b
 23980  002972  0100               	movlb	0	; () banked
 23981  002974  3582               	rlcf	(_Nec_code+2)& (0+255),w,b
 23982  002976  0100               	movlb	0	; () banked
 23983  002978  6F82               	movwf	(_Nec_code+2)& (0+255),b
 23984  00297A  0100               	movlb	0	; () banked
 23985  00297C  3583               	rlcf	(_Nec_code+3)& (0+255),w,b
 23986  00297E  0100               	movlb	0	; () banked
 23987  002980  6F83               	movwf	(_Nec_code+3)& (0+255),b
 23988                           
 23989                           ;Interrupt.c: 147: if(Time_Elapsed > 1000)
 23990  002982  0EE9               	movlw	233
 23991  002984  5C60               	subwf	_Time_Elapsed,w,c
 23992  002986  0E03               	movlw	3
 23993  002988  5861               	subwfb	_Time_Elapsed+1,w,c
 23994  00298A  A0D8               	btfss	status,0,c
 23995  00298C  D014               	goto	i2l1164
 23996                           
 23997                           ; BSR set to: 0
 23998                           ;Interrupt.c: 148: {
 23999                           ;Interrupt.c: 149: Nec_code = Nec_code + 1;
 24000  00298E  0E01               	movlw	1
 24001  002990  0100               	movlb	0	; () banked
 24002  002992  2580               	addwf	_Nec_code& (0+255),w,b
 24003  002994  0100               	movlb	0	; () banked
 24004  002996  6F80               	movwf	_Nec_code& (0+255),b
 24005  002998  0E00               	movlw	0
 24006  00299A  0100               	movlb	0	; () banked
 24007  00299C  2181               	addwfc	(_Nec_code+1)& (0+255),w,b
 24008  00299E  0100               	movlb	0	; () banked
 24009  0029A0  6F81               	movwf	(_Nec_code+1)& (0+255),b
 24010  0029A2  0E00               	movlw	0
 24011  0029A4  0100               	movlb	0	; () banked
 24012  0029A6  2182               	addwfc	(_Nec_code+2)& (0+255),w,b
 24013  0029A8  0100               	movlb	0	; () banked
 24014  0029AA  6F82               	movwf	(_Nec_code+2)& (0+255),b
 24015  0029AC  0E00               	movlw	0
 24016  0029AE  0100               	movlb	0	; () banked
 24017  0029B0  2183               	addwfc	(_Nec_code+3)& (0+255),w,b
 24018  0029B2  0100               	movlb	0	; () banked
 24019  0029B4  6F83               	movwf	(_Nec_code+3)& (0+255),b
 24020  0029B6                     i2l1164:
 24021                           
 24022                           ; BSR set to: 0
 24023                           ;Interrupt.c: 150: }
 24024                           ;Interrupt.c: 151: bit_count = bit_count + 1;
 24025  0029B6  0100               	movlb	0	; () banked
 24026  0029B8  29A8               	incf	_bit_count& (0+255),w,b
 24027  0029BA  0100               	movlb	0	; () banked
 24028  0029BC  6FA8               	movwf	_bit_count& (0+255),b
 24029                           
 24030                           ;Interrupt.c: 152: if(bit_count > 31)
 24031  0029BE  0E1F               	movlw	31
 24032  0029C0  0100               	movlb	0	; () banked
 24033  0029C2  65A8               	cpfsgt	_bit_count& (0+255),b
 24034  0029C4  D7A7               	goto	L20
 24035                           
 24036                           ; BSR set to: 0
 24037                           ;Interrupt.c: 153: {
 24038                           ;Interrupt.c: 154: nec_ok = 1;
 24039  0029C6  0E00               	movlw	0
 24040  0029C8  0100               	movlb	0	; () banked
 24041  0029CA  6F96               	movwf	(_nec_ok+1)& (0+255),b
 24042  0029CC  0E01               	movlw	1
 24043  0029CE  6F95               	movwf	_nec_ok& (0+255),b
 24044                           
 24045                           ; BSR set to: 0
 24046                           ;Interrupt.c: 155: INTCONbits.INT0IE = 0;
 24047  0029D0  98F2               	bcf	intcon,4,c	;volatile
 24048                           
 24049                           ; BSR set to: 0
 24050                           ;Interrupt.c: 156: Nec_Button = Nec_code >> 8;
 24051  0029D2  C081  F0A1         	movff	_Nec_code+1,_Nec_Button
 24052                           
 24053                           ;Interrupt.c: 157: Nec_State = 0;
 24054  0029D6  0E00               	movlw	0
 24055  0029D8  D001               	goto	L18
 24056                           
 24057                           ; BSR set to: 0
 24058                           
 24059                           ;Interrupt.c: 158: }
 24060  0029DA  D79C               	goto	L20
 24061  0029DC                     L18:
 24062  0029DC  0100               	movlb	0	; () banked
 24063  0029DE  6FA2               	movwf	_Nec_State& (0+255),b
 24064                           
 24065                           ; BSR set to: 0
 24066                           ;Interrupt.c: 162: }
 24067                           ;Interrupt.c: 164: }
 24068  0029E0  D003               	goto	i2l8742
 24069  0029E2                     i2l8740:
 24070                           
 24071                           ;Interrupt.c: 165: else
 24072                           ;Interrupt.c: 166: {
 24073                           ;Interrupt.c: 167: Reset_Nec_State();
 24074  0029E2  ECF1  F02A         	call	_Reset_Nec_State	;wreg free
 24075  0029E6  D000               	goto	i2l8742
 24076  0029E8                     i2l8742:
 24077                           
 24078                           ;Interrupt.c: 168: }
 24079                           ;Interrupt.c: 169: INTCON2bits.INTEDG0 = 1;
 24080  0029E8  8CF1               	bsf	intcon2,6,c	;volatile
 24081                           
 24082                           ;Interrupt.c: 171: }
 24083                           ;Interrupt.c: 172: }
 24084                           
 24085                           ;Interrupt.c: 170: return;
 24086  0029EA  D012               	goto	i2l1152
 24087  0029EC                     i2l8748:
 24088  0029EC  0100               	movlb	0	; () banked
 24089  0029EE  51A2               	movf	_Nec_State& (0+255),w,b
 24090                           
 24091                           ; Switch size 1, requested type "space"
 24092                           ; Number of cases is 5, Range of values is 0 to 4
 24093                           ; switch strategies available:
 24094                           ; Name         Instructions Cycles
 24095                           ; simple_byte           16     9 (average)
 24096                           ;	Chosen strategy is simple_byte
 24097  0029F0  0A00               	xorlw	0	; case 0
 24098  0029F2  B4D8               	btfsc	status,2,c
 24099  0029F4  D755               	goto	i2l8678
 24100  0029F6  0A01               	xorlw	1	; case 1
 24101  0029F8  B4D8               	btfsc	status,2,c
 24102  0029FA  D76B               	goto	i2l8688
 24103  0029FC  0A03               	xorlw	3	; case 2
 24104  0029FE  B4D8               	btfsc	status,2,c
 24105  002A00  D77D               	goto	i2l8700
 24106  002A02  0A01               	xorlw	1	; case 3
 24107  002A04  B4D8               	btfsc	status,2,c
 24108  002A06  D78D               	goto	i2l8712
 24109  002A08  0A07               	xorlw	7	; case 4
 24110  002A0A  B4D8               	btfsc	status,2,c
 24111  002A0C  D79D               	goto	i2l8724
 24112  002A0E  D000               	goto	i2l1152
 24113  002A10                     i2l1152:
 24114  002A10  0012               	return		;funcret
 24115  002A12                     __end_of_INT0_ISR:
 24116                           	opt stack 0
 24117                           pclatu	equ	0xFFB
 24118                           pclath	equ	0xFFA
 24119                           tblptru	equ	0xFF8
 24120                           tblptrh	equ	0xFF7
 24121                           tblptrl	equ	0xFF6
 24122                           tablat	equ	0xFF5
 24123                           prodh	equ	0xFF4
 24124                           prodl	equ	0xFF3
 24125                           intcon	equ	0xFF2
 24126                           intcon2	equ	0xFF1
 24127                           intcon3	equ	0xFF0
 24128                           postinc0	equ	0xFEE
 24129                           fsr0h	equ	0xFEA
 24130                           fsr0l	equ	0xFE9
 24131                           wreg	equ	0xFE8
 24132                           postdec1	equ	0xFE5
 24133                           fsr1h	equ	0xFE2
 24134                           fsr1l	equ	0xFE1
 24135                           indf2	equ	0xFDF
 24136                           postinc2	equ	0xFDE
 24137                           postdec2	equ	0xFDD
 24138                           fsr2h	equ	0xFDA
 24139                           fsr2l	equ	0xFD9
 24140                           status	equ	0xFD8
 24141                           
 24142 ;; *************** function _Reset_Nec_State *****************
 24143 ;; Defined at:
 24144 ;;		line 76 in file "Interrupt.c"
 24145 ;; Parameters:    Size  Location     Type
 24146 ;;		None
 24147 ;; Auto vars:     Size  Location     Type
 24148 ;;		None
 24149 ;; Return value:  Size  Location     Type
 24150 ;;		None               void
 24151 ;; Registers used:
 24152 ;;		wreg, status,2
 24153 ;; Tracked objects:
 24154 ;;		On entry : 0/0
 24155 ;;		On exit  : 0/0
 24156 ;;		Unchanged: 0/0
 24157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24161 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24162 ;;Total ram usage:        0 bytes
 24163 ;; Hardware stack levels used:    1
 24164 ;; This function calls:
 24165 ;;		Nothing
 24166 ;; This function is called by:
 24167 ;;		_INT0_ISR
 24168 ;; This function uses a non-reentrant model
 24169 ;;
 24170                           
 24171                           	psect	text133
 24172  0055E2                     __ptext133:
 24173                           	opt stack 0
 24174  0055E2                     _Reset_Nec_State:
 24175                           	opt stack 18
 24176                           
 24177                           ;Interrupt.c: 78: Nec_State=0;
 24178                           
 24179                           ;incstack = 0
 24180  0055E2  0E00               	movlw	0
 24181  0055E4  0100               	movlb	0	; () banked
 24182  0055E6  6FA2               	movwf	_Nec_State& (0+255),b
 24183                           
 24184                           ; BSR set to: 0
 24185                           ;Interrupt.c: 79: T1CONbits.TMR1ON = 0;
 24186  0055E8  90CD               	bcf	4045,0,c	;volatile
 24187                           
 24188                           ; BSR set to: 0
 24189  0055EA  0012               	return		;funcret
 24190  0055EC                     __end_of_Reset_Nec_State:
 24191                           	opt stack 0
 24192                           pclatu	equ	0xFFB
 24193                           pclath	equ	0xFFA
 24194                           tblptru	equ	0xFF8
 24195                           tblptrh	equ	0xFF7
 24196                           tblptrl	equ	0xFF6
 24197                           tablat	equ	0xFF5
 24198                           prodh	equ	0xFF4
 24199                           prodl	equ	0xFF3
 24200                           intcon	equ	0xFF2
 24201                           intcon2	equ	0xFF1
 24202                           intcon3	equ	0xFF0
 24203                           postinc0	equ	0xFEE
 24204                           fsr0h	equ	0xFEA
 24205                           fsr0l	equ	0xFE9
 24206                           wreg	equ	0xFE8
 24207                           postdec1	equ	0xFE5
 24208                           fsr1h	equ	0xFE2
 24209                           fsr1l	equ	0xFE1
 24210                           indf2	equ	0xFDF
 24211                           postinc2	equ	0xFDE
 24212                           postdec2	equ	0xFDD
 24213                           fsr2h	equ	0xFDA
 24214                           fsr2l	equ	0xFD9
 24215                           status	equ	0xFD8
 24216                           pclatu	equ	0xFFB
 24217                           pclath	equ	0xFFA
 24218                           tblptru	equ	0xFF8
 24219                           tblptrh	equ	0xFF7
 24220                           tblptrl	equ	0xFF6
 24221                           tablat	equ	0xFF5
 24222                           prodh	equ	0xFF4
 24223                           prodl	equ	0xFF3
 24224                           intcon	equ	0xFF2
 24225                           intcon2	equ	0xFF1
 24226                           intcon3	equ	0xFF0
 24227                           postinc0	equ	0xFEE
 24228                           fsr0h	equ	0xFEA
 24229                           fsr0l	equ	0xFE9
 24230                           wreg	equ	0xFE8
 24231                           postdec1	equ	0xFE5
 24232                           fsr1h	equ	0xFE2
 24233                           fsr1l	equ	0xFE1
 24234                           indf2	equ	0xFDF
 24235                           postinc2	equ	0xFDE
 24236                           postdec2	equ	0xFDD
 24237                           fsr2h	equ	0xFDA
 24238                           fsr2l	equ	0xFD9
 24239                           status	equ	0xFD8
 24240                           
 24241                           	psect	rparam
 24242  0000                     pclatu	equ	0xFFB
 24243                           pclath	equ	0xFFA
 24244                           tblptru	equ	0xFF8
 24245                           tblptrh	equ	0xFF7
 24246                           tblptrl	equ	0xFF6
 24247                           tablat	equ	0xFF5
 24248                           prodh	equ	0xFF4
 24249                           prodl	equ	0xFF3
 24250                           intcon	equ	0xFF2
 24251                           intcon2	equ	0xFF1
 24252                           intcon3	equ	0xFF0
 24253                           postinc0	equ	0xFEE
 24254                           fsr0h	equ	0xFEA
 24255                           fsr0l	equ	0xFE9
 24256                           wreg	equ	0xFE8
 24257                           postdec1	equ	0xFE5
 24258                           fsr1h	equ	0xFE2
 24259                           fsr1l	equ	0xFE1
 24260                           indf2	equ	0xFDF
 24261                           postinc2	equ	0xFDE
 24262                           postdec2	equ	0xFDD
 24263                           fsr2h	equ	0xFDA
 24264                           fsr2l	equ	0xFD9
 24265                           status	equ	0xFD8


Data Sizes:
    Strings     346
    Constant    625
    Data        159
    BSS         70
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     95     111
    BANK0           128     27     116
    BANK1           256     26     150
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), setup_date(BANK1[9]), setup_time(BANK1[9]), setup_fan_set_text(BANK1[5]), 
		 -> setup_alarm_time(BANK1[9]), RPM_Txt(BANK0[5]), Volt_Txt(BANK1[6]), DC_Txt(BANK0[4]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Fan_SW_Txt(BANK0[4]), Fan_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK1[9]), date(BANK1[9]), time(BANK1[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), setup_date(BANK1[9]), setup_time(BANK1[9]), setup_fan_set_text(BANK1[5]), 
		 -> setup_alarm_time(BANK1[9]), RPM_Txt(BANK0[5]), Volt_Txt(BANK1[6]), DC_Txt(BANK0[4]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Fan_SW_Txt(BANK0[4]), Fan_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK1[9]), date(BANK1[9]), time(BANK1[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_36(CODE[5]), STR_35(CODE[5]), STR_34(CODE[12]), STR_33(CODE[17]), 
		 -> STR_32(CODE[16]), STR_31(CODE[9]), STR_30(CODE[10]), STR_29(CODE[17]), 
		 -> STR_27(CODE[5]), STR_26(CODE[11]), STR_25(CODE[16]), STR_24(CODE[4]), 
		 -> STR_23(CODE[4]), STR_22(CODE[4]), STR_21(CODE[4]), STR_20(CODE[4]), 
		 -> STR_19(CODE[5]), STR_18(CODE[3]), STR_17(CODE[3]), STR_16(CODE[7]), 
		 -> STR_15(CODE[13]), STR_14(CODE[9]), STR_13(CODE[11]), STR_12(CODE[5]), 
		 -> STR_11(CODE[5]), STR_10(CODE[2]), STR_9(CODE[3]), STR_8(CODE[13]), 
		 -> STR_7(CODE[17]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 30
		 -> STR_38(CODE[22]), STR_37(CODE[16]), STR_28(CODE[11]), STR_6(CODE[22]), 
		 -> STR_5(CODE[13]), STR_4(CODE[19]), STR_3(CODE[22]), STR_2(CODE[21]), 
		 -> STR_1(CODE[30]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), setup_date(BANK1[9]), setup_time(BANK1[9]), setup_fan_set_text(BANK1[5]), 
		 -> setup_alarm_time(BANK1[9]), RPM_Txt(BANK0[5]), Volt_Txt(BANK1[6]), DC_Txt(BANK0[4]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Fan_SW_Txt(BANK0[4]), Fan_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK1[9]), date(BANK1[9]), time(BANK1[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), 

    txt	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _test_alarm->_do_update_pwm
    _read_volt->___ftdiv
    ___awtoft->___ftpack
    _DS3231_Turn_On_Alarm->_DS3231_Init
    _DS3231_Turn_Off_Alarm->_DS3231_Init
    _DS3231_Init->_I2C_Write_Address_Read_One_Byte
    _I2C_Write_Address_Write_One_Byte->_I2C_Write
    _I2C_Write_Address_Read_One_Byte->_I2C_Read
    _get_duty_cycle->___ftadd
    _get_RPM->___awdiv
    _Update_Screen->_drawtext
    _Setup_Temp_Fan->_check_for_button_input
    _Initialize_Setup_Fan_Screen->_drawtext
    _Increase_Fan_Temp->_Update_Setup_Fan_Screen
    _Decrease_Fan_Temp->_Update_Setup_Fan_Screen
    _Update_Setup_Fan_Screen->_drawtext
    _Set_RPM_RGB->___awdiv
    _Monitor_Fan->_do_update_pwm
    _Do_Setup_Time->_check_for_button_input
    _Initialize_Setup_Time_Screen->_drawtext
    _Go_Prev_Field->_Update_Setup_Screen_Cursor_Backward
    _Go_Next_Field->_Update_Setup_Screen_Cursor_Forward
    _Do_Save_New_Time->_DS3231_Write_Time
    _DS3231_Write_Time->_dec_2_bcd
    _Update_Setup_Time_Screen->_drawtext
    _Do_Setup_Alarm_Time->_check_for_button_input
    _Initialize_Setup_Alarm_Time_Screen->_drawtext
    _Go_Prev_Alarm_Field->_Update_Setup_Screen_Cursor_Backward
    _Update_Setup_Screen_Cursor_Backward->_fillRect
    _Go_Next_Alarm_Field->_Update_Setup_Screen_Cursor_Forward
    _Update_Setup_Screen_Cursor_Forward->_fillRect
    _Do_Save_New_Alarm_Time->_DS3231_Write_Alarm_Time
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawCircle->_drawPixel
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _DS3231_Write_Alarm_Time->_dec_2_bcd
    _dec_2_bcd->___awmod
    _DS3231_Read_Time->_I2C_Read
    _DS3231_Read_Alarm_Time->_I2C_Read
    _Do_Beep_Good->_do_update_pwm
    _Do_Beep_Bad->_do_update_pwm
    _do_update_pwm->___ftdiv
    _do_update_pwm->___fttol
    ___lbtoft->___ftpack
    ___ftdiv->___ftmul
    _printf->___ftsub
    _scale->___awmod
    _fround->___awmod
    ___ftmul->___awdiv
    ___awmod->___fttol
    ___awdiv->___wmul
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftadd->_fround
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite
    _Do_Init->_DS1621_Init
    _init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _DS3231_Setup_Time->_I2C_Write
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_ISR

Critical Paths under _main in BANK0

    _main->_Setup_Temp_Fan
    _Setup_Temp_Fan->_check_for_button_input
    _Do_Setup_Time->_check_for_button_input
    _Do_Setup_Alarm_Time->_check_for_button_input
    _check_for_button_input->_printf
    _Update_Setup_Alarm_Time_Screen->_printf

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_printf
    _check_for_button_input->_printf
    _Update_Setup_Alarm_Time_Screen->_printf

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0 1709197
                                             24 BANK0      3     3      0
                    _Activate_Buzzer
                   _DS1621_Read_Temp
             _DS3231_Read_Alarm_Time
                   _DS3231_Read_Time
                  _DS3231_Setup_Time
              _DS3231_Turn_Off_Alarm
                  _Deactivate_Buzzer
                        _Do_Beep_Bad
                       _Do_Beep_Good
                            _Do_Init
                _Do_Setup_Alarm_Time
                      _Do_Setup_Time
                  _Initialize_Screen
                        _Monitor_Fan
                         _Set_ADCON0
                        _Set_RPM_RGB
                     _Setup_Temp_Fan
                 _Toggle_Fan_Monitor
                      _Update_Screen
                       _Wait_One_Sec
                            ___awdiv
                           ___awtoft
                           ___lbtoft
                             ___wmul
                            _get_RPM
                     _get_duty_cycle
                             _printf
                          _read_volt
                         _test_alarm
 ---------------------------------------------------------------------------------
 (1) _test_alarm                                           0     0      0   29259
              _Activate_Buzzer_500Hz
              _DS3231_Turn_Off_Alarm
               _DS3231_Turn_On_Alarm
                  _Deactivate_Buzzer
                      _Set_RGB_Color
                             ___ftge
                      _do_update_pwm
                          _read_volt
 ---------------------------------------------------------------------------------
 (2) _read_volt                                            8     5      3    8722
                                             60 COMRAM     8     5      3
                           ___awtoft
                            ___ftdiv
                             ___wmul
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (3) _get_full_ADC                                         6     4      2      23
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2451
                                             24 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _Set_RGB_Color                                        1     1      0      22
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _DS3231_Turn_On_Alarm                                 5     5      0    3304
                                             26 COMRAM     5     5      0
                        _DS3231_Init
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (2) _DS3231_Turn_Off_Alarm                                5     5      0    3304
                                             26 COMRAM     5     5      0
                        _DS3231_Init
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (3) _DS3231_Init                                          4     4      0    1765
                                             22 COMRAM     4     4      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Address_Write_One_Byte                     3     1      2     687
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Address_Read_One_Byte                      3     2      1     581
                                             19 COMRAM     3     2      1
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _get_duty_cycle                                      14     8      6   13428
                                             88 COMRAM     6     0      6
                                              0 BANK0      8     8      0
                           ___awtoft (ARG)
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) _get_RPM                                              4     2      2    8511
                                             30 COMRAM     4     2      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Update_Screen                                        4     4      0   51397
                                             73 COMRAM     4     4      0
                            ___awdiv
                            ___awmod
                            ___ftmul
                            ___fttol
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _Toggle_Fan_Monitor                                   0     0      0       0
                         _Toggle_Fan
 ---------------------------------------------------------------------------------
 (2) _Toggle_Fan                                           0     0      0       0
                       _Turn_Off_Fan
                        _Turn_On_Fan
 ---------------------------------------------------------------------------------
 (1) _Setup_Temp_Fan                                       2     2      0  370339
                                             22 BANK0      2     2      0
                  _Decrease_Fan_Temp
                        _Do_Beep_Bad
                       _Do_Beep_Good
               _Do_Save_New_Fan_Temp
                _Exit_Setup_Fan_Temp
                  _Increase_Fan_Temp
        _Initialize_Setup_Fan_Screen
            _Update_Setup_Fan_Screen
             _check_for_button_input
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Fan_Screen                          0     0      0   36526
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Fan_Temp                                    0     0      0   41898
            _Update_Setup_Fan_Screen
 ---------------------------------------------------------------------------------
 (2) _Exit_Setup_Fan_Temp                                  0     0      0   55177
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Fan_Temp                                 0     0      0   55177
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Decrease_Fan_Temp                                    0     0      0   41898
            _Update_Setup_Fan_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Fan_Screen                              3     3      0   41898
                                             73 COMRAM     3     3      0
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (1) _Set_RPM_RGB                                          3     1      2    5447
                                             30 COMRAM     3     1      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _Set_ADCON0                                           1     1      0      22
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Monitor_Fan                                          0     0      0   11759
                       _Turn_Off_Fan
                        _Turn_On_Fan
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (3) _Turn_On_Fan                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Time                                        0     0      0  408514
                   _DS3231_Read_Time
                      _Decrease_Time
                        _Do_Beep_Bad
                       _Do_Beep_Good
                   _Do_Save_New_Time
                    _Exit_Time_Setup
                      _Go_Next_Field
                      _Go_Prev_Field
                      _Increase_Time
       _Initialize_Setup_Time_Screen
           _Update_Setup_Time_Screen
                          _bcd_2_dec
             _check_for_button_input
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Time_Screen                         0     0      0   45506
                           _drawtext
                           _fillRect
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Time                                        0     0      0   41796
           _Update_Setup_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Go_Prev_Field                                        0     0      0    9312
_Update_Setup_Screen_Cursor_Backward
 ---------------------------------------------------------------------------------
 (2) _Go_Next_Field                                        0     0      0    9334
 _Update_Setup_Screen_Cursor_Forward
 ---------------------------------------------------------------------------------
 (2) _Exit_Time_Setup                                      0     0      0   55177
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Time                                     0     0      0   65670
                   _DS3231_Read_Time
                  _DS3231_Write_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write_Time                                    2     2      0   10493
                                             73 COMRAM     2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                          _dec_2_bcd
 ---------------------------------------------------------------------------------
 (2) _Decrease_Time                                        0     0      0   41796
           _Update_Setup_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Time_Screen                             0     0      0   41796
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Alarm_Time                                  0     0      0  630834
             _DS3231_Read_Alarm_Time
                _Decrease_Alarm_Time
                        _Do_Beep_Bad
                       _Do_Beep_Good
             _Do_Save_New_Alarm_Time
              _Exit_Setup_Alarm_Time
                _Go_Next_Alarm_Field
                _Go_Prev_Alarm_Field
                _Increase_Alarm_Time
 _Initialize_Setup_Alarm_Time_Screen
     _Update_Setup_Alarm_Time_Screen
                          _bcd_2_dec
             _check_for_button_input
 ---------------------------------------------------------------------------------
 (2) _check_for_button_input                               3     3      0   74111
                                             94 COMRAM     1     1      0
                                             20 BANK0      2     2      0
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                       _Wait_One_Sec
                             _printf
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _bcd_2_dec                                            5     5      0      67
                                             16 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Alarm_Time_Screen                   0     0      0   45506
                           _drawtext
                           _fillRect
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Alarm_Time                                  0     0      0  115706
     _Update_Setup_Alarm_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Go_Prev_Alarm_Field                                  0     0      0    9312
_Update_Setup_Screen_Cursor_Backward
 ---------------------------------------------------------------------------------
 (3) _Update_Setup_Screen_Cursor_Backward                  3     3      0    9312
                                             45 COMRAM     3     3      0
                           _fillRect
 ---------------------------------------------------------------------------------
 (2) _Go_Next_Alarm_Field                                  0     0      0    9334
 _Update_Setup_Screen_Cursor_Forward
 ---------------------------------------------------------------------------------
 (3) _Update_Setup_Screen_Cursor_Forward                   3     3      0    9334
                                             45 COMRAM     3     3      0
                           _fillRect
 ---------------------------------------------------------------------------------
 (2) _Exit_Setup_Alarm_Time                                0     0      0   55177
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Alarm_Time                               0     0      0   66260
             _DS3231_Read_Alarm_Time
                   _DS3231_Read_Time
            _DS3231_Write_Alarm_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (3) _Initialize_Screen                                    0     0      0   54882
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    3149
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _fillScreen                                           2     0      2    1819
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (4) _fillRectangle                                       12     7      5    1585
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _drawCircle                                          20    12      8    5210
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (4) _TFT_GreenTab_Initialize                              0     0      0    8884
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _Rcmd3                                                0     0      0    4352
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _Rcmd2red                                             0     0      0      90
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _Rcmd1                                                0     0      0    4352
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _LCD_Reset                                            0     0      0    4262
                           _delay_ms
 ---------------------------------------------------------------------------------
 (6) _delay_ms                                             6     4      2    4262
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write_Alarm_Time                              2     2      0   10788
                                             73 COMRAM     2     2      0
                   _DS3231_Read_Time
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                          _dec_2_bcd
 ---------------------------------------------------------------------------------
 (4) _dec_2_bcd                                            7     5      2   10334
                                             66 COMRAM     7     5      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _DS3231_Read_Time                                     2     2      0     295
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _DS3231_Read_Alarm_Time                               2     2      0     295
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _Do_Beep_Good                                         0     0      0   11827
               _Activate_Buzzer_2KHz
                  _Deactivate_Buzzer
                       _Wait_One_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer_2KHz                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Do_Beep_Bad                                          0     0      0   11827
              _Activate_Buzzer_500Hz
                  _Deactivate_Buzzer
                       _Wait_One_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (2) _do_update_pwm                                        9     9      0   11759
                                             60 COMRAM     9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             4     1      3    2219
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    2958
                                             45 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Wait_One_Sec                                         2     2      0      68
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Activate_Buzzer_500Hz                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Decrease_Alarm_Time                                  0     0      0  115706
     _Update_Setup_Alarm_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Alarm_Time_Screen                       0     0      0  115706
                            ___awdiv
                            ___awmod
                           _drawtext
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              52    38     14   73910
                                              0 BANK0     20     6     14
                                              0 BANK1     26    26      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   19653
                                             66 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                            ___fttol (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   19374
                                             66 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5496
                                             30 COMRAM    15     9      6
                            ___awdiv (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    4983
                                             60 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    5255
                                             22 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     584
                                             16 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     803
                                             16 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2355
                                             24 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     752
                                             29 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     761
                                             16 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     891
                                             45 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4209
                                             88 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3893
                                             76 COMRAM    12     6      6
                            ___ftneg (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2188
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     195
                                             16 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    2148
                                             16 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) _drawtext                                            17     9      8   31558
                                             56 COMRAM    17     9      8
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     143
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _drawChar                                            11     4      7   17378
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _fillRect                                            11     6      5    8980
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (5) _drawFastVLine                                       11     7      4    2442
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _drawPixel                                            4     1      3    3367
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _setAddrWindow                                        4     1      3     814
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (7) _write_data                                           1     1      0      45
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (7) _write_command                                        1     1      0      45
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _spiwrite                                             2     2      0      23
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3222
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0     822
                        _DS1621_Init
                           _I2C_Init
                           _Init_ADC
                       _Turn_Off_Fan
                     _init_INTERRUPT
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     273
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _init_INTERRUPT                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Turn_Off_Fan                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      53
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     496
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     263
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     188
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Setup_Time                                    2     2      0     137
                                             18 COMRAM     2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     318
                                             19 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0      91
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Read                                             3     3      0     136
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (5) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (5) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _chkisr                                             14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_ISR
                           _INT1_ISR
                           _INT2_ISR
                         _TIMER1_ISR
 ---------------------------------------------------------------------------------
 (12) _TIMER1_ISR                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT2_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT1_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT0_ISR                                            2     2      0       0
                                              0 COMRAM     2     2      0
                    _Reset_Nec_State
 ---------------------------------------------------------------------------------
 (13) _Reset_Nec_State                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Activate_Buzzer
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Alarm_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Setup_Time
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Turn_Off_Alarm
     _DS3231_Init
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write_Address_Read_One_Byte
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Address_Write_One_Byte
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Write_Address_Read_One_Byte
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _I2C_Write_Address_Write_One_Byte
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
   _Deactivate_Buzzer
   _Do_Beep_Bad
     _Activate_Buzzer_500Hz
     _Deactivate_Buzzer
     _Wait_One_Sec
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lbtoft
         ___ftpack
   _Do_Beep_Good
     _Activate_Buzzer_2KHz
     _Deactivate_Buzzer
     _Wait_One_Sec
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lbtoft
         ___ftpack
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _Init_ADC
     _Turn_Off_Fan
     _init_INTERRUPT
     _init_UART
       _OpenUSART
   _Do_Setup_Alarm_Time
     _DS3231_Read_Alarm_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _Decrease_Alarm_Time
       _Update_Setup_Alarm_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _printf
           ___awdiv
             ___wmul (ARG)
           ___ftadd
             ___ftneg (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftneg (ARG)
               ___ftpack (ARG)
               _fround (ARG)
                 ___awdiv
                   ___wmul (ARG)
                 ___awmod
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                   ___fttol (ARG)
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___wmul (ARG)
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                   ___wmul (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___wmul
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
           _isdigit
           _putch
           _scale
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Save_New_Alarm_Time
       _DS3231_Read_Alarm_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Write_Alarm_Time
         _DS3231_Read_Time
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _dec_2_bcd
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Setup_Alarm_Time
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Go_Next_Alarm_Field
       _Update_Setup_Screen_Cursor_Forward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Go_Prev_Alarm_Field
       _Update_Setup_Screen_Cursor_Backward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Increase_Alarm_Time
       _Update_Setup_Alarm_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _printf
           ___awdiv
             ___wmul (ARG)
           ___ftadd
             ___ftneg (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftneg (ARG)
               ___ftpack (ARG)
               _fround (ARG)
                 ___awdiv
                   ___wmul (ARG)
                 ___awmod
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                   ___fttol (ARG)
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___wmul (ARG)
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                   ___wmul (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___wmul
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
           _isdigit
           _putch
           _scale
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
     _Initialize_Setup_Alarm_Time_Screen
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Alarm_Time_Screen
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftneg (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
     _bcd_2_dec
     _check_for_button_input
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_One_Sec
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftneg (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
   _Do_Setup_Time
     _DS3231_Read_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _Decrease_Time
       _Update_Setup_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Save_New_Time
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Write_Time
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _dec_2_bcd
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Time_Setup
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Go_Next_Field
       _Update_Setup_Screen_Cursor_Forward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Go_Prev_Field
       _Update_Setup_Screen_Cursor_Backward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Increase_Time
       _Update_Setup_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Initialize_Setup_Time_Screen
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Time_Screen
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
     _bcd_2_dec
     _check_for_button_input
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_One_Sec
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftneg (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Monitor_Fan
     _Turn_Off_Fan
     _Turn_On_Fan
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lbtoft
         ___ftpack
   _Set_ADCON0
   _Set_RPM_RGB
     ___awdiv
       ___wmul (ARG)
   _Setup_Temp_Fan
     _Decrease_Fan_Temp
       _Update_Setup_Fan_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Save_New_Fan_Temp
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Setup_Fan_Temp
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Increase_Fan_Temp
       _Update_Setup_Fan_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Initialize_Setup_Fan_Screen
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Fan_Screen
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
     _check_for_button_input
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_One_Sec
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftneg (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
   _Toggle_Fan_Monitor
     _Toggle_Fan
       _Turn_Off_Fan
       _Turn_On_Fan
   _Update_Screen
     ___awdiv
       ___wmul (ARG)
     ___awmod
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___wmul (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _strcpy
   _Wait_One_Sec
   ___awdiv
     ___wmul (ARG)
   ___awtoft
     ___ftpack
     ___wmul (ARG)
   ___lbtoft
     ___ftpack
   ___wmul
   _get_RPM
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _get_duty_cycle
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
     ___ftadd (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___wmul
     ___ftge (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
     ___ftneg (ARG)
     ___fttol (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
     ___lbtoft (ARG)
       ___ftpack
   _printf
     ___awdiv
       ___wmul (ARG)
     ___ftadd
       ___ftneg (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___wmul
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___wmul
     _isdigit
     _putch
     _scale
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___wmul (ARG)
   _read_volt
     ___awtoft
       ___ftpack
       ___wmul (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
     ___wmul
     _get_full_ADC
   _test_alarm
     _Activate_Buzzer_500Hz
     _DS3231_Turn_Off_Alarm
       _DS3231_Init
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write_Address_Read_One_Byte
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Write_Address_Write_One_Byte
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
       _I2C_Write_Address_Read_One_Byte
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Address_Write_One_Byte
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _DS3231_Turn_On_Alarm
       _DS3231_Init
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write_Address_Read_One_Byte
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Write_Address_Write_One_Byte
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
       _I2C_Write_Address_Read_One_Byte
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Address_Write_One_Byte
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _Deactivate_Buzzer
     _Set_RGB_Color
     ___ftge
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lbtoft
         ___ftpack
     _read_volt
       ___awtoft
         ___ftpack
         ___wmul (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___wmul
       _get_full_ADC

 _chkisr (ROOT)
   _INT0_ISR
     _Reset_Nec_State
   _INT1_ISR
   _INT2_ISR
   _TIMER1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     1A      96       7       58.6%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     1B      74       5       90.6%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     5F      6F       1       87.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     179      34        0.0%
DATA                 0      0     179       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Nov 30 19:58:21 2023

                                 drawCircle@f 002A                                   drawCircle@r 0020  
                                 drawCircle@x 002C                                   drawCircle@y 002E  
                          __size_of_I2C_Start 0012                                   _SSPSTATbits 000FC7  
                          __size_of_I2C_Write 003E                                  drawCircle@x0 001C  
                                drawCircle@y0 001E                                            l66 5034  
                __size_of_Do_Setup_Alarm_Time 00FA                                  ___awdiv@sign 001C  
                        __size_of_Turn_On_Fan 000C                                 read_volt@volt 0040  
                         ___wmul@multiplicand 0013                               ??_Update_Screen 004A  
                                ___ftadd@exp1 0058                                  ___ftadd@exp2 0057  
                                ___ftadd@sign 0056                                           l322 554E  
                                         l340 1C24                                           l365 2F2A  
                                         l681 1F2E                                           l683 1DF4  
                                         l684 1E5C                                           l685 1EC4  
                                         l687 1F50                                           _FAN 009B  
                                         l881 2512                                           l953 511E  
                                         l970 5304                                           l779 335C  
                                         l956 4C0C                                           l892 26C6  
                                         l995 4A2E                                           l998 514C  
                                         _PR2 000FCB                                read_volt@nStep 0043  
                        DS3231_Init@Address_7 0017                          DS3231_Init@Address_E 0018  
                                         _day 0068                             _Deactivate_Buzzer 55EC  
                        __size_of_I2C_ReStart 0016                     __size_of_Do_Save_New_Time 0014  
                                         _dow 00AA                                           _nbr 0093  
                                         _rpm 0097                         __size_of_Turn_Off_Fan 000C  
                                         _rps 0099                                           _txt 0062  
                                ___awmod@sign 0042                                           wreg 000FE8  
                               _Increase_Time 2F2C                  __size_of_Go_Next_Alarm_Field 0020  
                          ?_Deactivate_Buzzer 0001               Update_Setup_Fan_Screen@dc_char1 004A  
             Update_Setup_Fan_Screen@dc_char2 004B               Update_Setup_Fan_Screen@dc_char3 004C  
                                  _Fan_SW_Txt 00CB                   __end_of_Decrease_Alarm_Time 4B56  
      Update_Setup_Screen_Cursor_Forward@xinc 0030        Update_Setup_Screen_Cursor_Forward@yinc 002F  
                             ??_fillRectangle 001D                                  __CFG_LVP$OFF 000000  
                     _TFT_GreenTab_Initialize 50CA                                  ___ftdiv@cntr 0037  
                                ___ftdiv@sign 003C                                  __CFG_WDT$OFF 000000  
                                        l1001 516C                                          l1011 4010  
                                        l1012 4024                                          l2000 2358  
                                        l1201 4F8E                                          l2003 2204  
                                        l1044 535E                                drawFastVLine@h 0019  
                                        l2014 22C6                                          l2023 22E2  
                                        l2031 3C0E                                          l1071 4DEE  
                                        l1039 4F02                                          l2041 31CA  
                                        l2042 31F2                                          l2034 3BDA  
                                        l1235 5066                                          l2125 5192  
                                        l1342 463A                                          l1406 278A  
                                        l2039 3262                                          l2063 3778  
                                        l1336 50C8                                          l1360 2BC4  
                                        l2080 4EC4                                          l2128 45A2  
                                        l2048 3252                                          l2057 4496  
                                        l2073 51CE                                          l2234 4F7E  
                                        l2138 4814                                          l1282 4D52  
                                        l1292 5462                                          l2084 3B2C  
                                        l1516 08A4                                drawFastVLine@x 0022  
                              drawFastVLine@y 0018                                          l1198 4E80  
                                        l1622 4852                                          l1358 2CEA  
                                        l2158 4BB4                                          l1631 4894  
                                        l1367 2C40                                          l1480 2194  
                                        l1626 486C                                          l1634 5146  
                                        l1627 486E                                          l2099 5244  
                                        l1555 071A                                          l1395 3DCC  
                                        l1628 4878                                          l1396 3D38  
                                        l1629 487A                                          l1398 3DA8  
                                        l1487 1662                                          l1399 3DCA  
                                        l1840 46BC                                          l1827 4400  
                                        l1852 4FF8                                          l1918 3586  
                                        l1598 0C5E                                          l1927 3576  
                                        l1970 3F3C                                          l1959 3F64  
                                        l6144 4F98                                          l6146 4F9E  
                                        l6138 4F86                                          l6156 4FB0  
                                        l6404 3DC6                                          l6174 4E44  
              I2C_Write_Cmd_Write_Data@Device 0015                                          l1999 21DA  
                                        l6184 4E5A                                          l6192 4E6A  
                                        l6360 4F4C                                          l7152 2770  
                                        l6186 4E62                                          l6178 4E4C  
                                        l7410 4864                                          l7402 4856  
                                        l6362 4F52                                          l6196 4E76  
                                        l7180 2860                                          l6372 3D02  
                                        l6198 4E7C                                          l5830 45FC  
                                        l6390 3D9E                                          l7094 5072  
                                        l5840 4622                                          l7096 507C  
                                        l5842 4630                                          l5826 45C4  
                                        l6394 3DAC                                          l6378 3D70  
                                        l8138 5358                                          l5924 50AA  
                                        l7540 23C2                                          l7390 4838  
                                        l9310 3F56                                          l6398 3DB6  
                                        l7550 2470                                          l7542 23F8  
                                        l9304 3F44                                          l7552 24AA  
                                        l7536 2366                                          l7394 4842  
                                        l9410 36C8                                          l7546 2434  
                                        l7562 2520                                          l5892 4E16  
                                        l9404 36A0                                          l7572 25E8  
                                        l7564 2556                                          l7804 52B6  
                                        l7398 484A                                          l9342 2212  
                                        l9510 4680                                          l9502 4660  
                                        l9406 36BA                                          l7558 24EA  
                                        l7814 52DC                                          l7574 2622  
                                        l7806 52BC                                          l5888 4DFA  
                                        l9336 21E8                                          l9432 3724  
                                        l9424 36FC                                          l7568 2592  
                                        l7584 269E                                          l9290 3EEC  
                                        l9282 3EB0                                          l9370 228A  
                                        l9522 46B2                                          l9514 4696  
                                        l9506 466E                                          l9442 3752  
                                        l9434 372A                                          l7578 2662  
                                        l9364 226A                                          l9348 221E  
                                        l9460 4394                                          l9508 4678  
                                        l9428 370E                                          l9294 3F04  
                                        l9286 3EC0                                          l9366 2276  
                                        l9358 2246                                          l9470 43BC  
                                        l9454 4382                                          l9518 46A2  
                                        l9438 373C                                          l7950 5276  
                                        l9632 2BC0                                          l9624 2BA6  
                                        l9296 3F24                                          l9288 3ECC  
                                        l9384 2300                                          l9376 22AE  
                                        l9368 2282                                          l9800 324C  
                                        l9712 1458                                          l7960 529C  
                                        l7952 527C                                          l9642 2C00  
                                        l9634 2BC8                                          l9298 3F30  
                                        l9394 2332                                          l9378 22BA  
                                        l9466 43AA                                          l9482 43E6  
                                        l9730 163E                                          l9706 13B0  
                                        l9644 2C34                                          l9628 2BB2  
                                        l9468 43B4                                          l9724 158C  
                                        l9716 1468                                          l9662 2CB6  
                                        l9654 2C62                                          l9670 2CE6  
                                        l9646 2C38                                          l9638 2BD0  
                                        l9814 349E                                          l9486 43F6  
                                        l9478 43DA                                          l9742 523C  
                                        l9664 2CDE                                          l9656 2C8A  
                                        l9920 3AD0                                          l9840 3524  
                                        l9808 348E                                          l9752 3172  
                                        l9922 3AD6                                          l9930 3B02  
                                        l9498 4652                                          l9916 3AC0  
                                        l9860 3570                                          l9852 3548  
                                        l9836 3514                                          l9828 34E2  
                                        l9780 3200                                          l9692 2154  
                                        l9684 2090                                          l9934 3B1A  
                                        l9926 3AEA                                          l9854 354E  
                                        l9758 3190                                          STR_1 FEA4  
                                        l9928 3AF8                                          l9944 454A  
                                        l9848 3538                                          l9792 3224  
                                        STR_2 FEEE                                          STR_3 FED8  
                                        l9874 4434                                          l9866 4E9A  
                                        l9946 4558                                          l9858 3562  
                                        l9794 322A                                          STR_4 FF03  
                                        STR_5 FF82                                          l9884 4492  
                                        l9956 4592                                          l9948 4560  
                                        l9972 4804                                          l9964 47C8  
                                        l9980 4B6A                                          l9788 3214  
                                        STR_6 FEC2                                          STR_7 FF27  
                                        l9878 4466                                          l9966 47D6  
                                        l9798 323E                                          STR_8 FF68  
                                        STR_9 FFF5                                          l9968 47DE  
                                        l9898 3A66                                          l9978 4B5C  
                                        l9994 002C                                          l9998 0042  
                                printf@tmpval 0184                                          u4700 3D30  
                                        u4710 3D66                                          u3920 45F2  
                                        u8071 3692                  __end_of_Activate_Buzzer_2KHz 54B2  
                                        u9130 0712                                          u8091 36B0  
                                        u8511 3182                                          u8360 2C98  
                                        u8701 3A58                                          _RBPU 007F8F  
                                        u9431 3B3E                                          u8720 3A84  
                                        u8491 3164                                          u9451 3B5C  
                                        u9380 3C64                                          u7861 21A6  
                                        u8725 3A7C                                          u8910 0208  
                                        u7871 21BA                                          u8915 01FC  
                                        _TRMT 007D61                      ??_Do_Save_New_Alarm_Time 004C  
                                _DS1621_tempC 0089                                  _DS1621_tempF 008B  
                         ??_Deactivate_Buzzer 0011                                          _date 0144  
                                        _main 19E4                                          _font FC33  
     Update_Setup_Screen_Cursor_Backward@xinc 0030                                  ___ftpack@arg 0011  
     Update_Setup_Screen_Cursor_Backward@yinc 002F                                          _hour 0069  
                                ___ftpack@exp 0014                              __end_of_I2C_Init 55BA  
                            __end_of_I2C_Read 4E82                                          _time 0168  
                                        _year 006F                                          fsr0h 000FEA  
                                        fsr1h 000FE2                                ??_get_full_ADC 0013  
                                        fsr0l 000FE9                                          fsr2h 000FDA  
                                        fsr1l 000FE1                                          indf2 000FDF  
                                        fsr2l 000FD9                                          _wrap 00B8  
                                        _volt 0084                              __end_of_I2C_Stop 54D6  
                      ?_DS3231_Turn_Off_Alarm 0001                                          pclat 000FFA  
                          __size_of_LCD_Reset 0012                                          prodh 000FF4  
                                        prodl 000FF3                                          start 0018  
                 __size_of_I2C_Write_Cmd_Only 001A                               __end_of_Do_Init 49CC  
                                 _Do_Beep_Bad 53CA                               ??_drawFastVLine 001C  
                                ___ftmul@cntr 002C                               __end_of_i2cNack 55C4  
                                ___param_bank 000010                                  ___ftmul@sign 002D  
                             _Reset_Nec_State 55E2       Update_Setup_Screen_Cursor_Forward@field 002E  
                                ___fttol@exp1 003C                     ??_DS3231_Write_Alarm_Time 004A  
                       __size_of_Do_Beep_Good 001A                                   ?_TIMER1_ISR 0001  
                                _Turn_Off_Fan 5598                                  ___fttol@lval 0038  
                            __end_of_INT0_ISR 2A12                              __end_of_INT1_ISR 55E2  
                            __end_of_INT2_ISR 55D8                                         l10000 0058  
                                       l10010 009C                                         l10100 04CC  
                                       l10020 011E                                         l10004 0066  
                                       l10006 007C                                         l10200 0920  
                                       l10120 0596                                         l10112 051A  
                                       l10104 04DA                                         l10040 01C2  
                                       l10024 012A                                         l10130 05D4  
                                       l10026 0166                                         l10018 0118  
                                       l10212 0970                                         l10204 092E  
                                       l10132 05EE                                         l10116 056C  
                                       l10108 0514                                         l11020 51AE  
                                       l11004 4DB4                                         l10222 09BE  
                                       l10214 0976                                         l10230 09DA  
                                       l10150 06D8                                         l10142 063A  
                                       l10126 05C4                                         l10070 0318  
                                       l11006 4DC4                                         l11102 0D78  
                                       l11030 2E38                                         l10312 3C38  
                                       l10240 0A48                                         l10208 0968  
                                       l10160 0720                                         l10136 05FE  
                                       l10080 03A6                                         l10072 034A  
                                       l10064 02DA                                         l10056 0272  
                                       l11008 4DCC                                         l11040 2E6A  
                                       l10250 0A8E                                         l10242 0A54  
                                       l10218 0984                                         l10170 0798  
                                       l10154 06E8                                         l10138 0612  
                                       l10090 041C                                         l10074 0360  
                                       l11018 51A8                                         l11050 2E96  
                                       l10324 3C80                                         l10260 0AD6  
                                       l10236 0A10                                         l10228 09C6  
                                       l10156 06FC                                         l10148 06C8  
                                       l10092 044A                                         l10084 03CC  
                                       l10068 0302                                         l11060 2ED2  
                                       l10254 0AAC                                         l10182 0894  
                                       l10166 0746                                         l10086 03D8  
                                       l10094 045E                                         l11142 0E4E  
                                       l10336 3CDE                                         l10328 3C9A  
                                       l10256 0AB8                                         l10264 0AFE  
                                       l10248 0A82                                         l10176 0874  
                                       l10280 0C3C                                         l10504 52EE  
                                       l10352 3B74                                         l11320 363C  
                                       l11312 361E                                         l11160 0F02  
                                       l11144 0E64                                         l11080 0CA2  
                                       l10338 3CE4                                         l10266 0B10  
                                       l10274 0C04                                         l10194 08F0  
                                       l10178 0884                                         l10098 04C6  
                                       l10346 3B4C                                         l11306 360A  
                                       l11242 32FA                                         l11162 0F0A  
                                       l11154 0EE4                                         l10268 0B90  
                                       l10276 0C18                                         l10508 52FC  
                                       l10372 3BB4                                         l10348 3B66  
                                       l11332 366C                                         l11324 364C  
                                       l11316 362E                                         l11260 333C  
                                       l11252 331E                                         l11228 32B6  
                                       l11156 0EFA                                         l10278 0C22  
                                       l10198 091A                                         l10382 3BE8  
                                       l10526 416A                                         l10710 4AC0  
                                       l10622 3FA6                                         l11334 3672  
                                       l11270 3368                                         l11086 0CE2  
                                       l11510 1C54                                         l11502 1C40  
                                       l11430 19FE                                         l10704 4AAA  
                                       l10720 4AEE                                         l10632 3FEA  
                                       l11328 365C                                         l11336 3678  
                                       l11264 334C                                         l11256 332E  
                                       l11248 330E                                         l11096 0D38  
                                       l11512 1C5E                                         l10626 3FC0  
                                       l10802 2CEE                                         l11370 421A  
                                       l11362 41FA                                         l11346 41A8  
                                       l11506 1C4A                                         l10636 3FF4  
                                       l11292 35C6                                         l10820 2D30  
                                       l10812 2D14                                         l10900 2F70  
                                       l11268 3362                                         l11356 41E8  
                                       l11532 1CBC                                         l11524 1C98  
                                       l11516 1C64                                         l10718 4AD6  
                                       l10814 2D1A                                         l10806 2CFE  
                                       l11374 422A                                         l11366 420A  
                                       l11518 1C84                                         l11462 1B94  
                                       l10672 4AF6                                         l10840 2D6E  
                                       l10824 2D3C                                         l10808 2D04  
                                       l10920 2FB0                                         l10760 53AA  
                                       l11376 4230                                         l10568 4FD4  
                                       l11472 1BBC                                         l10682 4B1C  
                                       l10834 2D60                                         l10826 2D40  
                                       l10818 2D2A                                         l10914 2FA0  
                                       l10906 2F80                                         l11378 4236  
                                       l11482 1C00                                         l10684 4B22  
                                       l10676 4B06                                         l10692 4B38  
                                       l10860 2DB2                                         l10940 2FEE  
                                       l11476 1BD6                                         l10678 4B0C  
                                       l10694 4B50                                         l10854 2DA4  
                                       l10934 2FE6                                         l11486 1C0A  
                                       l10688 4B32                __size_of_Activate_Buzzer_500Hz 0012  
                                       l10872 2DDA                                         l10768 5390  
                                       l10698 4A94                                         l10866 2DC6  
                                       l10882 2F2E                                         l11498 1C36  
                                       l10868 2DCA                                         l10876 2DE0  
                                       l10948 2FFE                                         l10956 3014  
                                       l10972 1D38                     __end_of_Deactivate_Buzzer 55F4  
                                       l10878 2E0A                                         l10894 2F5A  
                                       l10958 303E                                         l10888 2F44  
                                       l10978 1D8C                               ??_do_update_pwm 003D  
                             drawFastVLine@hi 0020                               drawFastVLine@lo 0021  
               __end_of_Activate_Buzzer_500Hz 54C4                                         ?_main 0001  
                             __end_of___awdiv 4402                               __end_of___ftadd 235A  
                             drawCircle@ddF_x 0026                                         STR_10 FFEF  
                             drawCircle@ddF_y 0028                                         STR_11 FFB7  
                                       STR_20 FFF1                                         STR_12 FFDF  
                                       STR_21 FFE9                                         STR_13 FFB1  
                                       STR_22 FFED                                         STR_14 FFCF  
                                       STR_30 FFBC                                         STR_23 FFE9  
                                       STR_31 FFC6                                         STR_15 FF75  
                                       STR_24 FFED                                         STR_16 FFD8  
                                       STR_32 FF48                                         STR_33 FF27  
                                       STR_17 FFF8                                         STR_25 FF58  
                                       STR_18 FFFB                                         STR_26 FFA6  
                                       STR_34 FF8F                                         STR_35 FFB7  
                                       STR_27 FFB7                                         STR_19 FFE4  
                                       STR_36 FFDF                                         STR_28 FF9B  
                             __end_of___awmod 46BE                                         STR_29 FF27  
                                       STR_37 FF38                                         STR_38 FEC2  
                                       STR_39 FF16                               __end_of___ftdiv 3C10  
                             __end_of___ftneg 51DC                               __end_of___lldiv 45B4  
                             __end_of___ftmul 377A                                         u10270 2EC6  
                                       _T0CON 000FD5                               ___awdiv@divisor 0019  
                                       _T1CON 000FCD                               __end_of___llmod 4826  
                                       u10730 1B24                               __end_of___ftsub 4EC6  
                             __end_of___fttol 3B2E                                         _T2CON 000FCA  
                                       u10738 1B28                                         _T3CON 000FB1  
                                       u10867 55A8                               ___awdiv@counter 001B  
                             drawCircle@color 0022                                         _RCSTA 000FAB  
                                       _TMR0H 000FD7                                         _TMR1H 000FCF  
                                       _TMR0L 000FD6                                         _TMR1L 000FCE  
                                       _TMR3L 000FB2                                         _SPBRG 000FAF  
                                       _PORTD 000F83                                         _PORTE 000F84  
                              ?_Increase_Time 0001                                         _TRISA 000F92  
                                       _TRISB 000F93                                         _TRISC 000F94  
                                       _TRISD 000F95                                         _TRISE 000F96  
                                       _TXREG 000FAD                                         _TXSTA 000FAC  
                             __end_of_get_RPM 4F04                                         _Rcmd1 3044  
                                       _Rcmd3 386C                                  ___lltoft@exp 0021  
    Update_Setup_Screen_Cursor_Backward@field 002E                                    _Nec_Button 00A1  
               __size_of_Do_Save_New_Fan_Temp 0014                                    _i2cHighSda 55FC  
                                  _i2cHighScl 55A4                                  bcd_2_dec@bcd 0015  
                                bcd_2_dec@dec 0013                                 ___awtoft@sign 001C  
                             __end_of_dpowers FE36                                         _color 0091  
                                       _font2 FD32              __size_of_Update_Setup_Fan_Screen 0096  
                                       _found 00AC                                         _scale 1284  
                             __end_of_isdigit 5246                                         _tempC 00CF  
                                       _tempF 00D3                                         _month 006B  
                               ___ftpack@sign 0015                                         _putch 554A  
                                       main@j 00F2                             __end_of_I2C_Start 54E8  
                           __end_of_I2C_Write 4FBE                                __CFG_BOREN$OFF 000000  
                                       tablat 000FF5                                         status 000FD8  
                           ?_DS1621_Read_Temp 0014                                  _Do_Beep_Good 53B0  
             __size_of_check_for_button_input 00C0                         __end_of_Go_Next_Field 52A6  
                             write_data@data_ 0013                            ??_DS1621_Read_Temp 0016  
                          Set_RGB_Color@color 0011                         _Select_Fan_Temp_Field 00A5  
                             __initialization 4A30                                 ??_Set_RPM_RGB 0021  
                                __end_of_main 1CCC                                  __end_of_font FD32  
                            __end_of_Init_ADC 5566                              get_duty_cycle@dc 00D9  
                            __end_of_Rcmd2red 4F42                            _Select_Alarm_Field 00A4  
                                      ??_main 00F1                                 ___fttol@sign1 0037  
                __size_of_Exit_Setup_Fan_Temp 0010                             _Decrease_Fan_Temp 5396  
                                  _Set_ADCON0 5580                                 __activetblptr 000002  
                           ?_DS3231_Read_Time 0001                             __end_of_LCD_Reset 54A0  
                        __size_of__tdiv_to_l_ 0110       I2C_Write_Address_Write_One_Byte@Address 0013  
                       __end_of_Go_Prev_Field 5286                     ??_TFT_GreenTab_Initialize 001D  
                          ?_Decrease_Fan_Temp 0001                    ??_Update_Setup_Time_Screen 004A  
                          ??_DS3231_Read_Time 0014                                        ?_Rcmd1 0001  
                                      ?_Rcmd3 0001                       __size_of_init_INTERRUPT 0024  
                                   I2C_Init@c 0011                           _In_Alarm_Time_Setup 009E  
                                   I2C_Read@n 0012                   DS3231_Turn_Off_Alarm@Device 001F  
                                      _ADCON0 000FC2                                        _ADCON1 000FC1  
                                      _ADCON2 000FC0                           DS1621_Read_Temp@Cmd 0016  
                            ___llmod@dividend 001E                                        ?_scale 0043  
                                      _ADRESH 000FC4                                        _ADRESL 000FC3  
                                      _CCPR1L 000FBE                                        _CCPR2L 000FBB  
                            ___awdiv@dividend 0017                            __size_of_i2cLowSda 000A  
                          __size_of_i2cLowScl 0008                              __end_of___awtoft 4FFA  
                                      ?_putch 0001                              __end_of___ftpack 3F66  
                            __end_of___lbtoft 5194                            _Toggle_Fan_Monitor 5604  
                         ??_Decrease_Fan_Temp 004D                              __end_of___lltoft 4BB6  
                               ??_Monitor_Fan 0046                                        _DC_Txt 00C7  
                                      i2l1131 44EE                                        i2l1152 2A10  
                                      i2l1164 29B6                                     ??_Do_Init 0017  
                                      i2l9012 44E4                                        i2l9004 44D0  
                                      i2l9008 44DA                           __size_of_TIMER1_ISR 000E  
                                      i2l8700 28FC                                        i2l8720 2944  
                                      i2l8712 2922                                        i2l8706 2918  
                                      i2l8740 29E2                                        i2l8724 2948  
                                      i2l8742 29E8                                        i2l8718 293E  
                                      i2l8748 29EC                                        i2l8694 28F2  
                                      i2l8678 28A0                                        i2l8688 28D2  
                                      _OSCCON 000FD3               __size_of_Do_Save_New_Alarm_Time 0018  
                                      _SPBRGH 000FB0                        get_duty_cycle@dc_float 00DB  
                     __end_of_Reset_Nec_State 55EC                                        _SSPBUF 000FC9  
                                   ??_i2cNack 0011                                  _Alarm_SW_Txt 00C3  
                            __end_of_delay_ms 4D5A                                        _i2cAck 54E8  
                         ?_Toggle_Fan_Monitor 0001                  __size_of_Go_Prev_Alarm_Field 0020  
                            __end_of_fillRect 4E3A                              __end_of_drawChar 2CEC  
                            __end_of__powers_ FE84                            __size_of_OpenUSART 0070  
                                      ___ftge 4402           __end_of_Initialize_Setup_Fan_Screen 386C  
                 _Initialize_Setup_Fan_Screen 377A                   __end_of_Increase_Alarm_Time 4AF4  
                        DS3231_Init@control_E 0019                      __size_of_Activate_Buzzer 0012  
                                      ___wmul 5120                                     ??___awdiv 001B  
                            __end_of_drawtext 3CF2                                     ??___ftadd 0053  
                                   ??___awmod 0041                                     ??___ftdiv 0034  
                           _In_Fan_Temp_Setup 009F                                     ??___ftneg 0014  
                                   ??___lldiv 0019                                     ??___ftmul 0025  
                                   ??___llmod 0026                                     ??___ftsub 005F  
                                   ??___fttol 0032                                        _chkisr 0008  
                                      _array1 0126                                        _buffer 0100  
              __size_of_Exit_Setup_Alarm_Time 0010                                        _nec_ok 0095  
               __end_of_Exit_Setup_Alarm_Time 552A                     __end_of_Decrease_Fan_Temp 53B0  
                                      _fround 1F52                                        clear_0 4A36  
                                      clear_1 4A42                              ___awdiv@quotient 001D  
                                      _minute 006A                                        _second 006C  
                     DS3231_Setup_Time@Device 0013                               ___awmod@divisor 003F  
                        _Activate_Buzzer_2KHz 54A0                                     ??_get_RPM 0021  
                  __size_of_Deactivate_Buzzer 0008                               ___awmod@counter 0041  
                                      _printf 001C                                  drawtext@size 0040  
                             ??_Increase_Time 004A                                        _strcpy 5068  
                                      _strlen 4F42                         ___ftmul@f3_as_product 0029  
                         __end_of_Set_RPM_RGB 4DF0                                    _Toggle_Fan 5344  
                        __end_of_get_full_ADC 516E                        _check_for_button_input 3F66  
                            _Do_Save_New_Time 5440                          ??_Toggle_Fan_Monitor 0011  
                                   ??_isdigit 0011                                     ?_I2C_Init 0011  
                                   ?_I2C_Read 0001                        get_duty_cycle@set_temp 005C  
                                   ?_I2C_Stop 0001                                  __mediumconst FC32  
                                      tblptrh 000FF7                                        tblptrl 000FF6  
                                      tblptru 000FF8              __end_of_I2C_Write_Cmd_Write_Data 5326  
                                 ?_i2cHighSda 0001                                   ?_i2cHighScl 0001  
                                      putch@c 0011                        __size_of_Set_RGB_Color 000C  
                            __end_of_spiwrite 5468                      __size_of_Exit_Time_Setup 0010  
                          __size_of_bcd_2_dec 002A                           _Do_Setup_Alarm_Time 3588  
                                  __accesstop 0080                       __end_of__initialization 4A88  
                            ??_get_duty_cycle 005F                                     ?_INT0_ISR 0001  
                                   ?_INT1_ISR 0001                                     ?_INT2_ISR 0001  
       I2C_Write_Address_Read_One_Byte@Device 0016                            __size_of_dec_2_bcd 0058  
                                  ___ftadd@f1 004D                                    ___ftadd@f2 0050  
                                  ___ftge@ff1 0011                                    ___ftge@ff2 0014  
                          _setup_alarm_minute 00AF                            _setup_alarm_second 00B0  
                               ___rparam_used 000001                                    ___ftdiv@f1 002E  
                                  ___ftdiv@f2 0031                                    ___ftdiv@f3 0038  
                                  ___ftneg@f1 0011                                    ___awtoft@c 0019  
                                  ___lbtoft@c 001C                           __end_of_Monitor_Fan 51B8  
                     __size_of_Setup_Temp_Fan 00AC                           _Go_Next_Alarm_Field 52C6  
                                  ___ftmul@f1 001F                                    ___ftmul@f2 0022  
                                  ___ftsub@f1 0059                                    ___ftsub@f2 005C  
                                  ___fttol@f1 002E                                 __end_of_Rcmd1 3154  
                               __end_of_Rcmd3 395E                                __pcstackCOMRAM 0001  
               DS3231_Turn_On_Alarm@Address_E 001B                 DS3231_Turn_On_Alarm@Address_F 001C  
                                __pidataBANK0 5200                                  __pidataBANK1 46BE  
                                  ___lltoft@c 0019                                 __end_of_font2 FE0E  
                           __end_of_i2cLowSda 55CE                             __end_of_i2cLowScl 55FC  
                               __end_of_scale 1664                          ?_Do_Setup_Alarm_Time 0001  
                               __end_of_putch 5558                         ?_Activate_Buzzer_2KHz 0001  
                      _Do_Save_New_Alarm_Time 53FE                                drawPixel@color 0019  
                                dec_2_bcd@bcd 0047                                  dec_2_bcd@dec 0049  
                                 ?_Set_ADCON0 0001                        __size_of_Decrease_Time 0124  
                          _setup_fan_set_temp 00B1                            _setup_fan_set_text 0177  
                      __size_of_write_command 0010                                    __div_to_l_ 347E  
                                  ??_I2C_Init 0015                                    ??_I2C_Read 0011  
                                _alarm_minute 0066                                  _alarm_second 0067  
            ??_Update_Setup_Alarm_Time_Screen 005F               ?_Update_Setup_Alarm_Time_Screen 0001  
                __end_of_DS3231_Turn_On_Alarm 4CB6                                    ??_I2C_Stop 0011  
                        ?_Go_Next_Alarm_Field 0001                                       ??_Rcmd1 001D  
                                     ??_Rcmd3 001D                       _Update_Setup_Fan_Screen 4240  
                          __size_of_drawPixel 0030                             __end_of_OpenUSART 4896  
                             __div_to_l_@exp1 001C                               __div_to_l_@cntr 001B  
                                     ??_scale 0046                               __div_to_l_@quot 0017  
                                     ??_putch 0011                       ??_DS3231_Turn_Off_Alarm 001B  
                                  __pbssBANK0 0080                              _setup_alarm_hour 00AE  
                                   ?_Init_ADC 0001                              _setup_alarm_time 014D  
        __end_of_Initialize_Setup_Time_Screen 347E         __size_of_Initialize_Setup_Time_Screen 010C  
                _Initialize_Setup_Time_Screen 3372                                 ??_DS1621_Init 0016  
                               ??_DS3231_Init 0017                                     ?_Rcmd2red 0001  
                          __size_of_init_UART 0014                                    ??_INT0_ISR 0001  
                                  ??_INT1_ISR 0001                                    ??_INT2_ISR 0001  
                             spiwrite@spidata 0012                                    _alarm_date 0064  
                            ?_Reset_Nec_State 0001                                    _alarm_mode 008F  
                                  _alarm_hour 0065                                    _alarm_time 013B  
                               ?_Wait_One_Sec 0001      I2C_Write_Address_Write_One_Byte@Data_Out 0014  
                               __div_to_l_@f1 0011                                 __div_to_l_@f2 0014  
                                _fan_set_temp 00B6                                       ?_i2cAck 0001  
                                ?_Do_Beep_Bad 0001                            __size_of_read_volt 0064  
                               _Set_RGB_Color 5574                                 ??_Turn_On_Fan 0011  
                              I2C_Read@inByte 0013                                       ?___ftge 0011  
                  DS3231_Turn_On_Alarm@Device 001F                                       ?___wmul 0011  
                         __size_of_i2cHighSda 0008                           __size_of_i2cHighScl 000C  
                                 _Set_RPM_RGB 4DA6                         ??_Do_Setup_Alarm_Time 0060  
                                ??_TIMER1_ISR 0001                                       ?_chkisr 0001  
                      __size_of_setAddrWindow 0056                             __end_of_bcd_2_dec 5120  
                                     _CCP1CON 000FBD              I2C_Write_Cmd_Write_Data@Data_Out 0014  
                                     _CCP2CON 000FBA                        __size_of_Do_Setup_Time 010E  
                  __size_of_Decrease_Fan_Temp 001A                                       ?_fround 0043  
                               ??_I2C_ReStart 0011                                       _ALARMEN 0087  
                                   ?___awtoft 0019                                     ?___ftpack 0011  
                                   ?___lbtoft 0019                                    I2C_Write@n 0012  
                                     ?_printf 00D9                                     ?___lltoft 0019  
                                     ?_strcpy 0011                                       ?_strlen 0011  
                           __end_of_dec_2_bcd 4C0E                                   ?_Toggle_Fan 0001  
                           ??_Activate_Buzzer 0011                                    _fillScreen 5360  
                                     _MATCHED 008D                         __end_of_Update_Screen 1284  
                    ??_DS3231_Read_Alarm_Time 0014                                    _drawCircle 26C8  
                       ??_Go_Next_Alarm_Field 0031                                _init_INTERRUPT 51DC  
                                   ?_delay_ms 0017                                     ?_fillRect 0023  
                                   ?_drawChar 002E                                       _SSPCON1 000FC6  
                                     _SSPSTAT 000FC7                                       _RPM_Txt 00BE  
                                Set_ADCON0@ch 0011                         __end_of_fillRectangle 3DCE  
                                   ?_drawtext 0039                             _DS3231_Setup_Time 4896  
                                  ??_Init_ADC 0011                                       _Do_Init 4966  
                                 _Monitor_Fan 5194                      _I2C_Write_Cmd_Write_Data 5306  
                  __end_of_I2C_Write_Cmd_Only 53FE                            __end_of_TIMER1_ISR 5574  
                                  ??_Rcmd2red 0014                        DS1621_Read_Temp@Device 0018  
                               _Decrease_Time 2CEC                           _Exit_Setup_Fan_Temp 54FA  
                     get_duty_cycle@diff_temp 00DE                                ??_Wait_One_Sec 0011  
                                     _i2cNack 55BA                            ?_DS3231_Setup_Time 0001  
               ?_Initialize_Setup_Time_Screen 0001                  __size_of_Decrease_Alarm_Time 0062  
                               _write_command 553A                                     _I2C_Start 54D6  
                                   _I2C_Write 4F80                             ??_Exit_Time_Setup 004A  
                         __size_of_Set_ADCON0 000C                               __size_of_i2cAck 0012  
                           __end_of__npowers_ FE5D                                       __Hparam 0000  
                                  _scale$3327 0046                  __end_of_Do_Save_New_Fan_Temp 5440  
                                     __Lparam 0000                                ?_Set_RGB_Color 0001  
                         __end_of_DS1621_Init 5344                           __end_of_DS3231_Init 40DE  
                           __end_of_drawPixel 50CA                           ??_DS3231_Setup_Time 0013  
                       __end_of_drawFastVLine 463C                               __size_of___ftge 0096  
                                     ___awdiv 436C                                       ___ftadd 2196  
                                     ___awmod 463C                                       ___ftdiv 3B2E  
                                     ___ftneg 51B8                                       ___lldiv 4528  
                             __size_of___wmul 0028                        ??_Activate_Buzzer_2KHz 0011  
                                     ___ftmul 3682                                       ___llmod 47B6  
                                     ___ftsub 4E82                                       ___fttol 3A48  
                       __size_of_get_full_ADC 0026                               __size_of_chkisr 4520  
                                   ?_spiwrite 0001                                       __pcinit 4A30  
                                  ??___awtoft 001C                                    ??___ftpack 0016  
                                  ??___lbtoft 001C                               __size_of_fround 0244  
                                     __ramtop 1000                                       _get_RPM 4EC6  
                                  ??___lltoft 001D                                       __ptext0 19E4  
                                     __ptext1 2E10                                       __ptext2 49CC  
                                     __ptext3 5148                                       __ptext4 4FBE  
                                     __ptext5 5574                     __size_of_DS1621_Read_Temp 003C  
                                     __ptext6 4C64                                       __ptext7 4CB6  
                                     __ptext8 4026                                       __ptext9 5246  
                        ?_Exit_Setup_Fan_Temp 0001                               __size_of_printf 0C44  
                           __end_of_init_UART 547C                           __end_of_Turn_On_Fan 5598  
                      __end_of_init_INTERRUPT 5200                                     _T0CONbits 000FD5  
                             __size_of_strcpy 0032                               __size_of_strlen 003E  
                           __end_of_hexpowers FEA4                                     _T1CONbits 000FCD  
                                 ?__div_to_l_ 0011                     ??_Update_Setup_Fan_Screen 004A  
                    DS3231_Setup_Time@Address 0014                                       _dpowers FE0E  
                       __end_of_do_update_pwm 4194                                       _isdigit 5224  
                       _Activate_Buzzer_500Hz 54B2                              ___awmod@dividend 003D  
                                  _duty_cycle 00AB                           _Go_Prev_Alarm_Field 52A6  
                           __end_of_read_volt 4A30                                    ??_delay_ms 0019  
                         __end_of_I2C_ReStart 542C                                 drawtext@_text 003A  
                               drawtext@color 003C                                    ??_fillRect 0028  
                   __end_of_DS3231_Setup_Time 4900                                    ??_drawChar 0035  
                                   _LCD_Reset 548E                             _DS3231_Write_Time 42D6  
                               _setAddrWindow 4C0E                                __pintcode_body 4498  
                               Wait_One_Sec@k 0011                                    delay_ms@ms 0017  
                        end_of_initialization 4A88                                 _Do_Setup_Time 3264  
                                   _INT1_flag 009C                                     _INT2_flag 009D  
                                  ??_drawtext 0041                             _Increase_Fan_Temp 537C  
                          ?_DS3231_Write_Time 0001                                ?_Decrease_Time 0001  
               DS3231_Turn_On_Alarm@control_E 001D                 DS3231_Turn_On_Alarm@control_F 001E  
                              ?_write_command 0001                                 __Lmediumconst FC32  
                   __size_of_DS3231_Read_Time 0066                                       int_func 4498  
                          ?_Increase_Fan_Temp 0001                       DS3231_Read_Time@Address 0014  
                    DS3231_Write_Time@Address 004B                                    ?_I2C_Start 0001  
                                  ?_I2C_Write 0001                                    get_RPM@RPS 0021  
                    __end_of_Do_Save_New_Time 5454                                  _get_full_ADC 5148  
                         __size_of_Toggle_Fan 001C                               ___lldiv@divisor 0015  
                              _Setup_Temp_Fan 4194                           ??_DS3231_Write_Time 004A  
                        ?_Go_Prev_Alarm_Field 0001                               ___lldiv@counter 001D  
                     check_for_button_input@j 00ED                      ?_DS3231_Write_Alarm_Time 0001  
                                  _tempSecond 00B7                          _DS3231_Turn_On_Alarm 4C64  
                                   _RCSTAbits 000FAB                                       printf@c 0195  
                                     printf@f 00D9                           ??_Increase_Fan_Temp 004D  
                                     postdec1 000FE5                                       postdec2 000FDD  
                                     postinc0 000FEE                                       postinc2 000FDE  
                              __tdiv_to_l_@f1 0011                                __tdiv_to_l_@f2 0014  
                                  ??_spiwrite 0011                       ?_check_for_button_input 0001  
                                     strlen@s 0011                                 ??__tdiv_to_l_ 0017  
                 I2C_Write_Cmd_Write_Data@Cmd 0013                         ??_Exit_Setup_Fan_Temp 004A  
                                   _PORTAbits 000F80                              drawtext@cursor_x 0049  
                            drawtext@cursor_y 0048                                     _PORTBbits 000F81  
                                   _PORTCbits 000F82                                     _PORTDbits 000F83  
                                  _test_alarm 2E10                              I2C_Write@outByte 0011  
                             ?_init_INTERRUPT 0001                                    _setup_date 0156  
                                 ?_fillScreen 0024                                    _setup_hour 00B2  
                                  _setup_time 015F                                    _setup_year 00B5  
                                 ?_drawCircle 001C               __size_of_DS3231_Read_Alarm_Time 004C  
                                  drawChar@bg 0032                     __end_of_DS3231_Write_Time 436C  
              DS3231_Turn_Off_Alarm@Address_E 001B                DS3231_Turn_Off_Alarm@Address_F 001C  
                                   _TRISBbits 000F93                                     _TRISCbits 000F94  
        __size_of_Initialize_Setup_Fan_Screen 00F2                        __size_of_Go_Next_Field 0020  
      I2C_Write_Address_Read_One_Byte@Address 0014                                  ??_i2cHighSda 0011  
                                ??_i2cHighScl 0011                             __size_of_I2C_Init 000A  
                           __size_of_I2C_Read 0048                     __end_of_Increase_Fan_Temp 5396  
                           __size_of_I2C_Stop 0012                                ?_setAddrWindow 0014  
                                  ?_LCD_Reset 0001                                ?_Do_Setup_Time 0001  
                            drawtext@textsize 0044                                    drawPixel@x 001B  
                                  drawPixel@y 0018                                   _DS1621_Init 5326  
                                 _DS3231_Init 4026                        __end_of_Setup_Temp_Fan 4240  
                                 ___ftdiv@exp 003B                                   printf@width 0188  
                                   _TXSTAbits 000FAC                               ??_Set_RGB_Color 0011  
                       ??_Go_Prev_Alarm_Field 0031             __size_of_Update_Setup_Time_Screen 0184  
                          get_full_ADC@result 0015                             __size_of_INT0_ISR 019C  
                         __size_of__div_to_l_ 010A                             __size_of_INT1_ISR 000A  
                   ?_Update_Setup_Time_Screen 0001                             __size_of_INT2_ISR 000A  
                       ?_DS3231_Turn_On_Alarm 0001                                __end_of_i2cAck 54FA  
                                 ___ftmul@exp 0028                        __size_of_Go_Prev_Field 0020  
              ??_Initialize_Setup_Time_Screen 004A                       ?_Do_Save_New_Alarm_Time 0001  
                        __size_of_Do_Beep_Bad 001A                      DS1621_Read_Temp@Data_Ret 0017  
                                 _Turn_On_Fan 558C                __end_of_check_for_button_input 4026  
                          __end_of_i2cHighSda 5604                                __end_of___ftge 4498  
                          __end_of_i2cHighScl 55B0                                __end_of___wmul 5148  
                               delay_ms@count 001B                                    _write_data 552A  
                              __end_of_chkisr 4528                      ?_TFT_GreenTab_Initialize 0001  
                                 _I2C_ReStart 5416                                     _Nec_State 00A2  
                                  drawtext@bg 003E                                __end_of_fround 2196  
                                ??_Set_ADCON0 0011                         _Exit_Setup_Alarm_Time 551A  
                      ?_Activate_Buzzer_500Hz 0001                                     _i2cLowSda 55C4  
                                   _i2cLowScl 55F4                  __size_of_Increase_Alarm_Time 0062  
                        __end_of_Wait_One_Sec 5306                                __end_of_printf 0C60  
                       __end_of_Increase_Time 3044                                __end_of_strcpy 509A  
                              __end_of_strlen 4F80                   __size_of_Toggle_Fan_Monitor 0006  
                                   _Nec_state 00A3                           start_initialization 4A30  
                         __end_of__tdiv_to_l_ 3264                          _Do_Save_New_Fan_Temp 542C  
                      Update_Screen@neg_tempF 004C                    __size_of_DS3231_Setup_Time 006A  
                             ??_Decrease_Time 004A                            get_duty_cycle@temp 0059  
                             ??_write_command 0013               __end_of_DS3231_Write_Alarm_Time 47B6  
                                   _OpenUSART 4826                __size_of_DS3231_Turn_Off_Alarm 0052  
                DS3231_Read_Alarm_Time@Device 0015                 __end_of_DS3231_Turn_Off_Alarm 4D08  
                             ?_Setup_Temp_Fan 0001                               ___llmod@divisor 0022  
                            __CFG_OSC$INTIO67 000000                                   ??_I2C_Start 0011  
                           __size_of_Init_ADC 000E                               ___llmod@counter 0026  
                                 ??_I2C_Write 0011                        _DS3231_Read_Alarm_Time 4D5A  
                                    ??_i2cAck 0011                             __size_of_Rcmd2red 003E  
                         __size_of_fillScreen 001C       I2C_Write_Address_Read_One_Byte@Data_Ret 0015  
                          __end_of_Set_ADCON0 558C                __end_of_Do_Save_New_Alarm_Time 5416  
                         __size_of_drawCircle 01AE                                 _Go_Next_Field 5286  
                             _Activate_Buzzer 547C                                      ??___ftge 0017  
                                    ??___wmul 0015                                  ?_Set_RPM_RGB 001F  
                               ?_Turn_Off_Fan 0001                                      ??_chkisr 0003  
                                 __pdataBANK0 00B6                                   __pdataBANK1 0100  
                                    ??_fround 0046                               setAddrWindow@x0 0017  
                             setAddrWindow@x1 0015                               setAddrWindow@y0 0014  
                             setAddrWindow@y1 0016                                      ??_printf 00E7  
                            _DS1621_Read_Temp 4FFA                                   ?_test_alarm 0001  
                                    ??_strcpy 0015                                      ??_strlen 0013  
                                ??_Toggle_Fan 0011                                    ?_i2cLowSda 0001  
                                  ?_i2cLowScl 0001                           _Decrease_Alarm_Time 4AF4  
                                   _bcd_2_dec 50F6                                    fround@prec 004C  
                           __size_of___awtoft 003C                             __size_of___ftpack 00C6  
                           __size_of___lbtoft 0026                             __size_of___lltoft 0060  
                                 __pbssCOMRAM 0060                    ??_I2C_Write_Cmd_Write_Data 0015  
                  __size_of_DS3231_Write_Time 0096                               ??_setAddrWindow 0017  
                               __pcstackBANK0 00D9                                 __pcstackBANK1 017C  
                               _Go_Prev_Field 5266                               ??_Do_Setup_Time 0060  
                       ?_Do_Save_New_Fan_Temp 0001                                     _dec_2_bcd 4BB6  
                             _Exit_Time_Setup 550A                    __size_of_Increase_Fan_Temp 001A  
                                 ??_LCD_Reset 001D                                  _isdigit$2983 0012  
                           __size_of_delay_ms 0052                                      ?_Do_Init 0001  
                                ?_Monitor_Fan 0001                             __size_of_fillRect 004A  
                           __size_of_drawChar 0156                                    ?_OpenUSART 0011  
                            _DS3231_Read_Time 4900                                      ?_i2cNack 0001  
                        ?_Decrease_Alarm_Time 0001                             __size_of_drawtext 00E2  
                               ?_Do_Beep_Good 0001                        ??_DS3231_Turn_On_Alarm 001B  
 __end_of_Update_Setup_Screen_Cursor_Backward 26C8  __size_of_Update_Setup_Screen_Cursor_Backward 01B4  
       ??_Update_Setup_Screen_Cursor_Backward 002E          ?_Update_Setup_Screen_Cursor_Backward 0001  
         _Update_Setup_Screen_Cursor_Backward 2514                   __end_of_Do_Setup_Alarm_Time 3682  
                              ?_Go_Next_Field 0001                            __end_of_Toggle_Fan 5360  
                                 I2C_Read@ack 0011                                     _bit_count 00A8  
                                   __pintcode 0008               __end_of_TFT_GreenTab_Initialize 50F6  
                              ??_Turn_Off_Fan 0011                                 __pmediumconst FC32  
                                    ?___awdiv 0017                                     __ptext100 4C0E  
                                   __ptext101 552A                                     __ptext110 5558  
                                   __ptext102 553A                                     __ptext111 55B0  
                                   __ptext103 5454                                     __ptext120 4E3A  
                                   __ptext112 5326                                     __ptext104 5120  
                                   __ptext121 55BA                                     __ptext113 5306  
                                   __ptext105 4966                                     __ptext130 55CE  
                                   __ptext122 54E8                                     __ptext114 53E4  
                                   __ptext106 5468                                     __ptext131 55D8  
                                   __ptext123 5416                                     __ptext115 4896  
                                   __ptext107 4826                                     __ptext132 2876  
                                   __ptext124 55C4                                     __ptext116 4FFA  
                                   __ptext108 51DC                                     __ptext133 55E2  
                                   __ptext125 55F4                                     __ptext117 4F80  
                                   __ptext109 5598                                      ?___ftadd 004D  
                                   __ptext126 55FC                                     __ptext118 54C4  
                                   __ptext127 55A4                                     __ptext119 54D6  
                                   __ptext129 5566                                      ?___awmod 003D  
                                    ?___ftdiv 002E                                      ?___ftneg 0011  
                    __size_of_Reset_Nec_State 000A                                      ?___lldiv 0011  
                                    ?___ftmul 001F                                      ?___llmod 001E  
                                    ?___ftsub 0059                                     __npowers_ FE36  
                                    ?___fttol 002E                       __size_of_get_duty_cycle 0286  
                                   __tft_type 00A7                            _I2C_Write_Cmd_Only 53E4  
                 __end_of_Go_Next_Alarm_Field 52E6                DS3231_Turn_Off_Alarm@control_E 001D  
              DS3231_Turn_Off_Alarm@control_F 001E                            drawFastVLine@color 001A  
                                 ?_write_data 0001                        ?_Exit_Setup_Alarm_Time 0001  
                                   _drawPixel 509A                                      ?_get_RPM 001F  
                                 __tdiv_to_l_ 3154                             __size_of_spiwrite 0014  
                                ??__div_to_l_ 0017                                    ?_bcd_2_dec 0001  
                         ?_I2C_Write_Cmd_Only 0013                                      ?_isdigit 0001  
                                    _I2C_Init 55B0                                      _I2C_Read 4E3A  
                              ?_Go_Prev_Field 0001                                      _I2C_Stop 54C4  
                           _Initialize_Screen 1664                                __size_of_Rcmd1 0110  
                              __size_of_Rcmd3 00F2                                     _init_UART 5468  
                                  ?_dec_2_bcd 0043                      I2C_Write_Cmd_Only@Device 0014  
                                   _hexpowers FE84                            ?_Initialize_Screen 0001  
                              __size_of_scale 03E0                                __size_of_putch 000E  
                                   _read_volt 49CC      __end_of_I2C_Write_Address_Write_One_Byte 5266  
   __size_of_I2C_Write_Address_Write_One_Byte 0020            ??_I2C_Write_Address_Write_One_Byte 0015  
           ?_I2C_Write_Address_Write_One_Byte 0013              _I2C_Write_Address_Write_One_Byte 5246  
                     __end_of_Activate_Buzzer 548E                         ??_Decrease_Alarm_Time 005F  
                                    _INT0_ISR 2876                                      _INT1_ISR 55D8  
                                    _INT2_ISR 55CE                                ___wmul@product 0015  
                              ??_Do_Beep_Good 0046                           ??_Initialize_Screen 004A  
                                _Select_Field 00A6                          ??_I2C_Write_Cmd_Only 0014  
                         __size_of_test_alarm 011C                                      _PIE1bits 000F9D  
                           ?_Do_Save_New_Time 0001                        __size_of_Update_Screen 0624  
                      DS3231_Read_Time@Device 0015                       DS3231_Write_Time@Device 004A  
                                    _PIR1bits 000F9E                            __end_of__div_to_l_ 3588  
                               _In_Time_Setup 00A0                            ??_Do_Save_New_Time 004C  
                            _Fan_Set_Temp_Txt 00B9                              ??_init_INTERRUPT 0011  
                ?_Initialize_Setup_Fan_Screen 0001                         __size_of_Wait_One_Sec 0020  
                                   _setup_day 006D                             DS1621_Init@Device 0016  
                                   fillRect@h 0025                                     fillRect@i 002C  
                                   fillRect@w 0024                                     fillRect@x 002B  
                                   fillRect@y 0023                                     drawChar@c 002F  
                                   drawChar@i 0038                                     drawChar@j 0037  
                                   drawChar@x 0036                                     drawChar@y 002E  
               __size_of_Activate_Buzzer_2KHz 0012                                    ?_drawPixel 0018  
                      __size_of_fillRectangle 00DC                                    _ADCON0bits 000FC2  
                     __end_of_Exit_Time_Setup 551A                             ___wmul@multiplier 0011  
                   __end_of_Initialize_Screen 19E4                                   ??_i2cLowSda 0011  
                                 ??_i2cLowScl 0011                 DS3231_Read_Alarm_Time@Address 0014  
                                ??_fillScreen 0026              __size_of_DS3231_Write_Alarm_Time 007C  
                                ??_drawCircle 0024                                    printf@flag 0190  
                                  printf@fval 0192                                    printf@prec 0182  
                      ??_Do_Save_New_Fan_Temp 004A                                    ?_init_UART 0001  
            __end_of_Update_Setup_Time_Screen 2B96                                   _INTCON2bits 000FF1  
     __end_of_I2C_Write_Address_Read_One_Byte 5068      __size_of_I2C_Write_Address_Read_One_Byte 0032  
           ??_I2C_Write_Address_Read_One_Byte 0015              ?_I2C_Write_Address_Read_One_Byte 0014  
             _I2C_Write_Address_Read_One_Byte 5036                                   _INTCON3bits 000FF0  
                                   copy_data0 4A5C                                     copy_data1 4A7C  
                                   drawtext@i 0046                        __size_of_drawFastVLine 0088  
                                   drawtext@x 0043                                     drawtext@y 0039  
                                  ?_read_volt 003D                                      _Nec_code 0080  
                                    _Init_ADC 5558                             write_command@cmd_ 0013  
  __end_of_Initialize_Setup_Alarm_Time_Screen 3EA0   __size_of_Initialize_Setup_Alarm_Time_Screen 00D2  
        ??_Initialize_Setup_Alarm_Time_Screen 004A           ?_Initialize_Setup_Alarm_Time_Screen 0001  
          _Initialize_Setup_Alarm_Time_Screen 3DCE                                   ??_OpenUSART 0013  
                                ?_DS1621_Init 0001                                      _Rcmd2red 4F04  
                            __size_of_Do_Init 0066                           __size_of_write_data 0010  
                                ?_DS3231_Init 0001                               ??_Go_Next_Field 0031  
                             OpenUSART@config 0013        I2C_Write_Address_Write_One_Byte@Device 0015  
                                _Time_Elapsed 0060                           _Increase_Alarm_Time 4A92  
                            __size_of_i2cNack 000A                                 _RTC_ALARM_Txt 00D7  
                                _Wait_One_Sec 52E6                                      __Hrparam 0000  
                      __size_of_do_update_pwm 00B6                            __end_of_fillScreen 537C  
                                    __Lrparam 0000                            __end_of_drawCircle 2876  
                 __end_of_Exit_Setup_Fan_Temp 550A                                  ?_Turn_On_Fan 0001  
                     ??_Activate_Buzzer_500Hz 0011                              __size_of___awdiv 0096  
                            __size_of___ftadd 01C4                      ?_Update_Setup_Fan_Screen 0001  
                            __size_of___awmod 0082                              __size_of___ftdiv 00E2  
                            __size_of___ftneg 0024                              __size_of___lldiv 008C  
                            __size_of___ftmul 00F8                              __size_of___llmod 0070  
                            __size_of___ftsub 0044                              __size_of___fttol 00E6  
                                    _Volt_Txt 0171                 ??_Initialize_Setup_Fan_Screen 004A  
                        __size_of_Set_RPM_RGB 004A                                      ___awtoft 4FBE  
                                    ___ftpack 3EA0                                      ___lbtoft 516E  
                                ?_I2C_ReStart 0001                                   _fround$3325 0049  
                                 _fround$3326 0046                                      ___lltoft 4B56  
                             ??_Go_Prev_Field 0031                              __size_of_get_RPM 003E  
                                 ??_bcd_2_dec 0011                          ?_Increase_Alarm_Time 0001  
                           ??_Reset_Nec_State 0001                                 _Update_Screen 0C60  
                            __size_of_isdigit 0022                                      _delay_ms 4D08  
                                 ??_dec_2_bcd 0045                                      __ptext10 5036  
                                    __ptext11 1CCC                                      __ptext20 542C  
                                    __ptext12 4EC6                                      __ptext21 5396  
                                    __ptext13 0C60                                      __ptext30 5266  
                                    __ptext22 4240                                      __ptext14 5604  
                                    __ptext31 5286                                      __ptext23 4DA6  
                                    __ptext15 5344                                      __ptext40 50F6  
                                    __ptext32 550A                                      __ptext24 5580  
                                    __ptext16 4194                                      __ptext41 3DCE  
                                    __ptext33 5440                                      __ptext25 5194  
                                    __ptext17 377A                                      __ptext50 5068  
                                    __ptext42 4A92                                      __ptext34 42D6  
                                    __ptext26 558C                                      __ptext18 537C  
                                    __ptext51 5360                                      __ptext43 52A6  
                                    __ptext35 2CEC                                      __ptext27 3264  
                                    __ptext19 54FA                                      __ptext60 473A  
                                    __ptext52 3CF2                                      __ptext44 2514  
                                    __ptext36 2A12                                      __ptext28 3372  
                                    __ptext61 4BB6                                      __ptext53 26C8  
                                    __ptext45 52C6                                      __ptext37 3588  
                                    __ptext29 2F2C                                      __ptext70 52E6  
                                    __ptext62 4900                                      __ptext54 50CA  
                                    __ptext46 235A                                      __ptext38 3F66  
                                    __ptext71 55EC                                      __ptext63 4D5A  
                                    __ptext55 386C                                      __ptext47 551A  
                                    __ptext39 547C                                      __ptext80 3682  
                                    __ptext72 54B2                                      __ptext64 53B0  
                                    __ptext56 4F04                                      __ptext48 53FE  
                                    __ptext81 463C                                      __ptext73 4AF4  
                                    __ptext65 54A0                                      __ptext57 3044  
                                    __ptext49 1664                                      __ptext90 2196  
                                    __ptext82 436C                                      __ptext74 395E  
                                    __ptext66 53CA                                      __ptext58 548E  
                                    __ptext91 3EA0                                      __ptext83 3154  
                                    __ptext75 001C                                      __ptext67 40DE  
                                    __ptext59 4D08                                      __ptext92 51B8  
                                    __ptext84 347E                                      __ptext76 1284  
                                    __ptext68 516E                                      __ptext93 4402  
                                    __ptext85 4B56                                      __ptext77 554A  
                                    __ptext69 3B2E                                      __ptext94 3C10  
                                    __ptext86 47B6                                      __ptext78 5224  
                                    __ptext95 4F42                                      __ptext87 4528  
                                    __ptext79 1F52                                      __ptext96 2B96  
                                    __ptext88 3A48                                      __ptext97 4DF0  
                                    __ptext89 4E82                                      __ptext98 45B4  
                                    __ptext99 509A                                      _fillRect 4DF0  
                                    _drawChar 2B96                                      __powers_ FE5D  
                            ??_Setup_Temp_Fan 00EF                          __end_of_Turn_Off_Fan 55A4  
            __size_of_TFT_GreenTab_Initialize 002C    __end_of_Update_Setup_Screen_Cursor_Forward 2514  
 __size_of_Update_Setup_Screen_Cursor_Forward 01BA          ??_Update_Setup_Screen_Cursor_Forward 002E  
         ?_Update_Setup_Screen_Cursor_Forward 0001            _Update_Setup_Screen_Cursor_Forward 235A  
                                    _colstart 00A9                   __end_of_Go_Prev_Alarm_Field 52C6  
                                    _drawtext 3C10                                    strcpy@from 0013  
                     ?_DS3231_Read_Alarm_Time 0001                                 _fillRectangle 3CF2  
              DS3231_Write_Alarm_Time@Address 004B                      __end_of_DS1621_Read_Temp 5036  
                            ?_Activate_Buzzer 0001                                 __size_of_main 02E8  
                        __size_of_Monitor_Fan 0024                                 ??_Do_Beep_Bad 0046  
                       __end_of_Set_RGB_Color 5580                               fillRectangle@hi 0021  
                             fillRectangle@lo 0022                                _get_duty_cycle 1CCC  
                               _drawFastVLine 45B4                                     printf@idx 017F  
                                   printf@exp 018A                                      _spiwrite 5454  
                                   printf@val 018C                             DS3231_Init@Device 001A  
                                 ??_drawPixel 001B                                      _rowstart 00AD  
                  __end_of_Toggle_Fan_Monitor 560A                                  ??_test_alarm 0046  
                    __end_of_DS3231_Read_Time 4966                         ??_Increase_Alarm_Time 005F  
                  __size_of_Initialize_Screen 0380                              ?_Exit_Time_Setup 0001  
                        __end_of_Do_Beep_Good 53CA                                ?_Update_Screen 0001  
                                  _INTCONbits 000FF2                                 _do_update_pwm 40DE  
                              OpenUSART@spbrg 0011                                   ??_init_UART 0014  
                                    isdigit@c 0013                                      scale@scl 0049  
              __end_of_DS3231_Read_Alarm_Time 4DA6                                   ??_read_volt 0040  
                                   spiwrite@x 0011                                      intlevel2 0000  
                              ?_fillRectangle 0018                              __tdiv_to_l_@exp1 001F  
                            __tdiv_to_l_@cntr 001E                              __tdiv_to_l_@quot 001A  
                       __end_of_Decrease_Time 2E10                      _Update_Setup_Time_Screen 2A12  
                       __end_of_write_command 554A                              ___lldiv@dividend 0011  
                             fillScreen@color 0024                            __end_of_test_alarm 2F2C  
                       _DS3231_Turn_Off_Alarm 4CB6                 DS3231_Write_Alarm_Time@Device 004A  
                     do_update_pwm@duty_cycle 0043                        __end_of_get_duty_cycle 1F52  
                      __size_of_Increase_Time 0118               __end_of_Update_Setup_Fan_Screen 42D6  
                              fillRectangle@h 001A                              Set_RPM_RGB@color 0021  
                              fillRectangle@w 0019                                fillRectangle@x 0023  
                              fillRectangle@y 0018                       ??_Exit_Setup_Alarm_Time 004A  
                              ?_drawFastVLine 0018                                      printf@ap 0180  
                                  _TIMER1_ISR 5566                           __end_of_Do_Beep_Bad 53E4  
                                ??_write_data 0013                                 fillRect@color 0026  
                                ?__tdiv_to_l_ 0011                       _DS3231_Write_Alarm_Time 473A  
                                 _printf$3328 017C                                ?_do_update_pwm 0001  
                            ___lldiv@quotient 0019                                      strcpy@cp 0015  
                                    strlen@cp 0015                                      strcpy@to 0011  
                       I2C_Write_Cmd_Only@Cmd 0013                                  _setup_minute 00B3  
                                _setup_second 00B4                         __end_of_setAddrWindow 4C64  
                       __end_of_Do_Setup_Time 3372                            fillRectangle@color 001B  
                           do_update_pwm@dc_I 0044                             do_update_pwm@dc_f 0040  
                               drawChar@color 0030                                   _setup_month 006E  
                              Set_RPM_RGB@rpm 001F                            __end_of_write_data 553A  
                                drawChar@line 0035                                 ?_get_full_ADC 0011  
                    ??_check_for_button_input 005F                                  drawChar@size 0034  
           __size_of_I2C_Write_Cmd_Write_Data 0020                          __size_of_DS1621_Init 001E  
                   ?_I2C_Write_Cmd_Write_Data 0013                          __size_of_DS3231_Init 00B8  
                             ?_get_duty_cycle 0059                 __size_of_DS3231_Turn_On_Alarm 0052  
      __end_of_Update_Setup_Alarm_Time_Screen 3A48       __size_of_Update_Setup_Alarm_Time_Screen 00EA  
              _Update_Setup_Alarm_Time_Screen 395E  
